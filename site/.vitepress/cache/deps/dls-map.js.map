{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsButton/dlsButton.vue2.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsButton/types.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/_virtual/_plugin-vue_export-helper.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsButton/dlsButton.vue.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/utils/Shader/Shaders.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/utils/withinstall/index.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsButton/index.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsMap/dlsMap.vue.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsMap/types.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsMap/LoadingSpinner.vue.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/components/src/dlsMap/index.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-layer/useSwitchMap.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-tools/useCesiumCoord.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-tools/useCesiumUtils.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-tools/useRemoveCesium.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-tools/useSwitchViewPoint.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-layer/useLoadTerrain.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/useDrawGraph.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-entity/useCesiumAddEntity.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-coverage/CesiumSetDiv.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/events.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/base.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/utils.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/fine-arrow.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/attack-arrow.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/swallowtail-attack-arrow.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/squad-combat.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/swallowtail-squad-combat.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/straight-arrow.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/curved-arrow.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/assault-direction.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/arrow/double-arrow.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/line/freehand-line.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/freehand-polygon.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/line/curve.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/ellipse.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/lune.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/rectangle.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/triangle.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/polygon.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/circle.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/sector.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/gathering-place.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/line/arc.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/line/polyline.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/polygon/closed-curve.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/point/point.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/plot/index.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-environment/useEnvironment.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-coverage/CesiumUseEcharts.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-coverage/CesiumHeatmap.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-analysis/CesiumBufferAnalyze.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/utils/util.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/composables/use-entity/CesiumTrack.mjs", "../../../../node_modules/.pnpm/dls-map@1.0.9/node_modules/dls-map/es/utils/helper/index.mjs"],
  "sourcesContent": ["import \"./style/index.css\";\nimport { defineComponent, computed } from \"vue\";\nimport { buttonProps, buttonEmits } from \"./types.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"dls-button\",\n  props: buttonProps,\n  emits: buttonEmits,\n  setup(props, ctx) {\n    const { emit } = ctx;\n    const handleButtonClick = (evt) => {\n      emit(\"click\", evt);\n    };\n    const styleClass = computed(() => {\n      return {\n        [`k-button--${props.type}`]: props.type,\n        \"is-plain\": props.plain,\n        \"is-round\": props.round,\n        \"is-disabled\": props.disabled,\n        [`k-button--${props.size}`]: props.size\n      };\n    });\n    return {\n      styleClass,\n      handleButtonClick\n    };\n  }\n});\nexport {\n  _sfc_main as default\n};\n", "const ButtonType = [\n  \"primary\",\n  \"success\",\n  \"info\",\n  \"warning\",\n  \"danger\",\n  \"text\"\n];\nconst ButtonSize = [\"midium\", \"small\", \"mini\"];\nconst buttonProps = {\n  type: {\n    type: String,\n    validator(value) {\n      return ButtonType.includes(value);\n    }\n  },\n  size: {\n    type: String,\n    validator(value) {\n      return ButtonSize.includes(value);\n    }\n  },\n  plain: Boolean,\n  round: Boolean,\n  disabled: Boolean\n};\nconst buttonEmits = {\n  click: (evt) => evt instanceof MouseEvent\n};\nexport {\n  ButtonSize,\n  ButtonType,\n  buttonEmits,\n  buttonProps\n};\n", "const _export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};\nexport {\n  _export_sfc as default\n};\n", "import _sfc_main from \"./dlsButton.vue2.mjs\";\nimport { openBlock, createElementBlock, normalizeClass, renderSlot } from \"vue\";\nimport _export_sfc from \"../../../_virtual/_plugin-vue_export-helper.mjs\";\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleButtonClick && _ctx.handleButtonClick(...args)),\n    class: normalizeClass([\"k-button\", _ctx.styleClass])\n  }, [\n    renderSlot(_ctx.$slots, \"default\")\n  ], 2);\n}\nconst _Button = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport {\n  _Button as default\n};\n", "function Shaders() {\n}\nShaders.prototype = {\n  // 流动线\n  _getFlowLineShader: function() {\n    return \"uniform vec4 color;\\n              uniform float duration;\\n              \\n              czm_material czm_getMaterial(czm_materialInput materialInput){\\n                  czm_material material = czm_getDefaultMaterial(materialInput);\\n                  vec2 st = materialInput.st;\\n                  float t =fract(czm_frameNumber / duration);\\n                  t *= 1.03;\\n                  float alpha = smoothstep(t- 0.03, t, st.s) * step(-t, -st.s);\\n                  alpha += 0.1;\\n                  vec4 fragColor;\\n                  fragColor.rgb = (color.rgb) / 0.5;\\n                  fragColor = czm_gammaCorrect(fragColor);\\n                  material.diffuse = fragColor.rgb;\\n                  material.alpha = alpha;\\n                  material.emission = fragColor.rgb;\\n                  return material;\\n              }\\n              \";\n  },\n  // 动态线\n  _getDynamicLineShader: function(options) {\n    if (options && options.get) {\n      return \"czm_material czm_getMaterial(czm_materialInput materialInput)\\n              {\\n                  czm_material material = czm_getDefaultMaterial(materialInput);\\n                  vec2 st = materialInput.st;\\n                  \\n                  if(texture(image, vec2(0.0, 0.0)).a == 1.0){\\n                      discard;\\n                  }else{\\n                      material.alpha = texture(image, vec2(1.0 - fract(time - st.s), st.t)).a * color.a;\\n                  }\\n                  \\n                  material.diffuse = max(color.rgb * material.alpha * 3.0, color.rgb);\\n                  \\n                  return material;\\n              }\\n              \";\n    }\n  },\n  // 动态泛光线\n  _getDynamicLightLineShader: function(options) {\n    if (options && options.get) {\n      return \"czm_material czm_getMaterial(czm_materialInput materialInput)\\n              {\\n                  czm_material material = czm_getDefaultMaterial(materialInput);\\n                  vec2 st = materialInput.st;\\n                  \\n                  vec4 colorImage = texture(image, vec2(fract(1.0 *st.s - time), fract(st.t)));\\n                  \\n                  vec4 fragColor;\\n                  fragColor.rgb = (colorImage.rgb+color.rgb) / 1.0;\\n                  fragColor = czm_gammaCorrect(fragColor);\\n                  material.diffuse = colorImage.rgb;\\n                  material.alpha = colorImage.a;\\n                  material.emission = fragColor.rgb;\\n                  \\n                  return material;\\n              }\\n              \";\n    }\n  },\n  //带方向的墙体\n  _getDirectionWallShader: function(options) {\n    if (options && options.get) {\n      var materail = \"czm_material czm_getMaterial(czm_materialInput materialInput)\\n                  {\\n                  czm_material material = czm_getDefaultMaterial(materialInput);\\n                  vec2 st = materialInput.st;\\n                  \\n \";\n      if (options.freely == \"vertical\") {\n        materail += \"vec4 colorImage = texture(image, vec2(fract(float(\" + options.count + \")*st.t \" + options.direction + \" time), fract(st.s)));\\n \";\n      } else {\n        materail += \"vec4 colorImage = texture(image, vec2(fract(float(\" + options.count + \")*st.s \" + options.direction + \" time), fract(st.t)));\\n \";\n      }\n      materail += \"vec4 fragColor;\\n                  fragColor.rgb = (colorImage.rgb+color.rgb) / 1.0;\\n                  fragColor = czm_gammaCorrect(fragColor);\\n \";\n      materail += \" material.diffuse = colorImage.rgb;\\n                  material.alpha = colorImage.a;\\n                  material.emission = fragColor.rgb;\\n                  \\n                  return material;\\n                  }\\n                  \";\n      return materail;\n    }\n  },\n  _getCircleFadeShader: function(options) {\n    if (options && options.get) {\n      return `czm_material czm_getMaterial(czm_materialInput materialInput)\n                \n                  {\n                    \n                      czm_material material = czm_getDefaultMaterial(materialInput);\n                    \n                      material.diffuse = 1.5 * color.rgb;\n                    \n                      vec2 st = materialInput.st;\n                    \n                      float dis = distance(st, vec2(0.5, 0.5));\n                    \n                      float per = fract(time);\n                    \n                      if(dis > per * 0.5){\n                        \n                          //material.alpha = 0.0;\n                        \n                          discard;\n                    \n                      }else {\n                            \n                          material.alpha = color.a  * dis / per / 2.0;\n                    \n                      }\n                    \n                      return material;\n                \n                  }`;\n    }\n  },\n  // 波动圆\n  _getDynamicCircleShader: function(options) {\n    if (options && options.get) {\n      return \"uniform vec4 color;\\n              uniform float duration;\\n              uniform float count;\\n              uniform float gradient;\\n              \\n              czm_material czm_getMaterial(czm_materialInput materialInput)\\n              {\\n                  czm_material material = czm_getDefaultMaterial(materialInput);\\n                  material.diffuse = 1.5 * color.rgb;\\n                  vec2 st = materialInput.st;\\n                  vec3 str = materialInput.str;\\n                  float dis = distance(st, vec2(0.5, 0.5));\\n                  float per = fract(czm_frameNumber / duration);\\n                  if(abs(str.z) > 0.001){\\n                      discard;\\n                  }\\n                  if(dis > 0.5){\\n                      discard;\\n                  } else {\\n                      float perDis = 0.5 / count;\\n                      float disNum;\\n                      float bl = .0;\\n                      for (int i = 0; i <= 10; i++) {\\n                          if (float(i) <= count) {\\n                              disNum = perDis * float(i) - dis + per / count;\\n                              if (disNum > 0.0) {\\n                                  if (disNum < perDis) {\\n                                      bl = 1.0 - disNum / perDis;\\n                                  } else if (disNum - perDis < perDis) {\\n                                      bl = 1.0 - abs(1.0 - disNum / perDis);\\n                                  }\\n                                  material.alpha = pow(bl, gradient);\\n                              }\\n                          }\\n                      }\\n                  }\\n                  return material;\\n              }\\n              \";\n    }\n  },\n  // 雷达扫描\n  _getRadarScanShader: function(options) {\n    if (options && options.get) {\n      return \"uniform sampler2D colorTexture;\\n              uniform sampler2D depthTexture;\\n              in vec2 v_textureCoordinates;\\n              uniform vec4 u_scanCenterEC;\\n              uniform vec3 u_scanPlaneNormalEC;\\n              uniform vec3 u_scanLineNormalEC;\\n              out vec4 myOutputColor;\\n              uniform float u_radius;\\n              uniform vec4 u_scanColor;\\n              \\n              vec4 toEye(in vec2 uv, in float depth){\\n              vec2 xy = vec2((uv.x * 2.0 - 1.0),(uv.y * 2.0 - 1.0));\\n              vec4 posInCamera =czm_inverseProjection * vec4(xy, depth, 1.0);\\n              posInCamera =posInCamera / posInCamera.w;\\n              return posInCamera;\\n              }\\n              \\n              bool isPointOnLineRight(in vec3 ptOnLine, in vec3 lineNormal, in vec3 testPt){\\n              vec3 v01 = testPt - ptOnLine;\\n              normalize(v01);\\n              vec3 temp = cross(v01, lineNormal);\\n              float d = dot(temp, u_scanPlaneNormalEC);\\n              return d > 0.5;\\n              }\\n              \\n              vec3 pointProjectOnPlane(in vec3 planeNormal, in vec3 planeOrigin, in vec3 point){\\n              vec3 v01 = point -planeOrigin;\\n              float d = dot(planeNormal, v01) ;\\n              return (point - planeNormal * d);\\n              }\\n              \\n              float distancePointToLine(in vec3 ptOnLine, in vec3 lineNormal, in vec3 testPt){\\n              vec3 tempPt = pointProjectOnPlane(lineNormal, ptOnLine, testPt);\\n              return length(tempPt - ptOnLine);\\n              }\\n              \\n              float getDepth(in vec4 depth){\\n              float z_window = czm_unpackDepth(depth);\\n              z_window = czm_reverseLogDepth(z_window);\\n              float n_range = czm_depthRange.near;\\n              float f_range = czm_depthRange.far;\\n              return (2.0 * z_window - n_range - f_range) / (f_range - n_range);\\n              }\\n              \\n              void main(){\\n              myOutputColor = texture(colorTexture, v_textureCoordinates);\\n              float depth = getDepth( texture(depthTexture, v_textureCoordinates));\\n              vec4 viewPos = toEye(v_textureCoordinates, depth);\\n              vec3 prjOnPlane = pointProjectOnPlane(u_scanPlaneNormalEC.xyz, u_scanCenterEC.xyz, viewPos.xyz);\\n              float dis = length(prjOnPlane.xyz - u_scanCenterEC.xyz);\\n              float twou_radius = u_radius * 2.0;\\n              if(dis < u_radius){\\n                  float f0 = 1.0 -abs(u_radius - dis) / u_radius;\\n                  f0 = pow(f0, 64.0);\\n                  vec3 lineEndPt = vec3(u_scanCenterEC.xyz) + u_scanLineNormalEC * u_radius;\\n                  float f = 0.0;\\n                  if(isPointOnLineRight(u_scanCenterEC.xyz, u_scanLineNormalEC.xyz, prjOnPlane.xyz)){\\n                      float dis1= length(prjOnPlane.xyz - lineEndPt);\\n                      f = abs(twou_radius -dis1) / twou_radius;\\n                      f = pow(f, float(\" + options.width + \"));\\n                  }\\n                  if(float(\" + options.border + \") > 0.0){\\n                    myOutputColor = mix(myOutputColor, u_scanColor, f + f0);\\n                  } else {\\n                    myOutputColor = mix(myOutputColor, u_scanColor, f);\\n                  }\\n                  }\\n              }\\n              \";\n    }\n  },\n  // 圆形扫描\n  _getCircleScanShader: function(options) {\n    if (options && options.get) {\n      return \"uniform sampler2D colorTexture;\\n              uniform sampler2D depthTexture;\\n              in vec2 v_textureCoordinates;\\n              uniform vec4 u_scanCenterEC;\\n              uniform vec3 u_scanPlaneNormalEC;\\n              uniform float u_radius;\\n              out vec4 myOutputColor;\\n              uniform vec4 u_scanColor;\\n              \\n              vec4 toEye(in vec2 uv, in float depth){\\n                vec2 xy = vec2((uv.x * 2.0 - 1.0),(uv.y * 2.0 - 1.0));\\n                vec4 posInCamera = czm_inverseProjection * vec4(xy, depth, 1.0);\\n                posInCamera =posInCamera / posInCamera.w;\\n                return posInCamera;\\n              }\\n              \\n              vec3 pointProjectOnPlane(in vec3 planeNormal, in vec3 planeOrigin, in vec3 point){\\n                  vec3 v01 = point - planeOrigin;\\n                  float d = dot(planeNormal, v01) ;\\n                  return (point - planeNormal * d);\\n              }\\n              \\n              float getDepth(in vec4 depth){\\n                  float z_window = czm_unpackDepth(depth);\\n                  z_window = czm_reverseLogDepth(z_window);\\n                  float n_range = czm_depthRange.near;\\n                  float f_range = czm_depthRange.far;\\n                  return (2.0 * z_window - n_range - f_range) / (f_range - n_range);\\n              }\\n              \\n              void main(){\\n                myOutputColor = texture(colorTexture, v_textureCoordinates);\\n                  float depth = getDepth(texture(depthTexture, v_textureCoordinates));\\n                  vec4 viewPos = toEye(v_textureCoordinates, depth);\\n                  vec3 prjOnPlane = pointProjectOnPlane(u_scanPlaneNormalEC.xyz, u_scanCenterEC.xyz, viewPos.xyz);\\n                  float dis = length(prjOnPlane.xyz - u_scanCenterEC.xyz);\\n                  if(dis < u_radius){\\n                    float f = 1.0 - abs(u_radius - dis) / u_radius;\\n                    f = pow(f, float(\" + options.border + \"));\\n                    myOutputColor = mix(myOutputColor, u_scanColor, f);\\n                  }\\n                }\\n                \";\n    }\n  }\n};\nexport {\n  Shaders\n};\n", "const withInstall = (comp) => {\n  comp.install = (app) => {\n    app.component(comp.name, comp);\n  };\n  return comp;\n};\nconst withInstallFunction = (fn, name) => {\n  fn.install = (app) => {\n    fn._context = app._context;\n    app.config.globalProperties[name] = fn;\n  };\n  return fn;\n};\nexport {\n  withInstall,\n  withInstallFunction\n};\n", "import _Button from \"./dlsButton.vue.mjs\";\nimport \"../../../utils/Shader/Shaders.mjs\";\nimport { withInstall } from \"../../../utils/withinstall/index.mjs\";\nconst DlsButton = withInstall(_Button);\nexport {\n  DlsButton,\n  DlsButton as default\n};\n", "import { defineComponent, ref, reactive, computed, onMounted, openBlock, createElementBlock, createBlock, createCommentVNode, nextTick } from \"vue\";\nimport \"./style/index.css\";\nimport { mapProps, mapEmits } from \"./types.mjs\";\nimport LoadingSpinner from \"./LoadingSpinner.vue.mjs\";\nconst _hoisted_1 = { key: 0 };\nconst _hoisted_2 = [\"id\"];\nconst __default__ = defineComponent({ name: \"dls-map\" });\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: mapProps,\n  emits: mapEmits,\n  setup(__props, { expose: __expose, emit: __emit }) {\n    const props = __props;\n    const emits = __emit;\n    const mapConfig = props.mapConfig;\n    const viewer = ref(null);\n    const dataM = reactive({\n      isCesiumLoaded: false,\n      isClient: false\n    });\n    const containerId = computed(() => {\n      return (mapConfig == null ? void 0 : mapConfig.id) || \"cesiumContainer\";\n    });\n    const checkCesium = () => {\n      const checkInterval = setInterval(() => {\n        try {\n          if (Cesium) {\n            dataM.isCesiumLoaded = true;\n            nextTick(() => {\n              clearInterval(checkInterval);\n              initializeCesium();\n            });\n          }\n        } catch (error) {\n        }\n      }, 100);\n    };\n    const initializeCesium = () => {\n      if (mapConfig == null ? void 0 : mapConfig.defaultAccessToken) {\n        Cesium.Ion.defaultAccessToken = mapConfig.defaultAccessToken;\n      }\n      let viewerMap = new Cesium.Viewer(containerId.value, {\n        // 不显示基础图层选择器\n        baseLayerPicker: false,\n        // 不显示地址搜索栏\n        geocoder: false,\n        // 不显示动画控件（如播放、暂停按钮）\n        animation: false,\n        // 启用或禁用场景动画\n        shouldAnimate: true,\n        // 不显示返回主页按钮\n        homeButton: false,\n        // 场景模式设置为2D或3D，根据 `mapConfig.sceneMode` 来决定\n        sceneMode: (mapConfig == null ? void 0 : mapConfig.sceneModeNum) === 2 ? Cesium.SceneMode.SCENE2D : Cesium.SceneMode.SCENE3D,\n        // 不显示时间轴\n        timeline: false,\n        // 不显示全屏按钮\n        fullscreenButton: false,\n        // 允许切换2D/3D模式\n        scene3DOnly: false,\n        // 不显示2D/3D视图模式切换按钮\n        sceneModePicker: false,\n        // 不显示导航帮助信息\n        navigationInstructionsInitiallyVisible: false,\n        // 不显示导航帮助按钮\n        navigationHelpButton: false,\n        // 不显示选择指示器\n        selectionIndicator: false,\n        // 不显示信息窗口\n        infoBox: false,\n        // 不使用默认影像提供者\n        imageryProvider: false,\n        ...props.viewerConfig\n      });\n      var canvas = viewerMap.scene.canvas;\n      canvas.style.width = props.viewerWidth || \"100%\";\n      canvas.style.height = props.viewerHeight || \"100%\";\n      if ((mapConfig == null ? void 0 : mapConfig.defaultAccessToken) || (mapConfig == null ? void 0 : mapConfig.imageryProvider)) {\n        viewerMap.imageryLayers.addImageryProvider(\n          new Cesium.UrlTemplateImageryProvider(mapConfig == null ? void 0 : mapConfig.imageryProvider)\n        );\n      }\n      viewerMap.cesiumWidget.screenSpaceEventHandler.removeInputAction(\n        Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\n      );\n      viewer.value = viewerMap;\n      emits(\"cesiumReady\", viewer.value);\n    };\n    onMounted(() => {\n      dataM.isClient = true;\n      checkCesium();\n    });\n    __expose({\n      dataM,\n      viewer\n    });\n    return (_ctx, _cache) => {\n      return dataM.isClient ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [\n        dataM.isCesiumLoaded ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          id: containerId.value,\n          style: { \"position\": \"absolute\", \"width\": \"100%\", \"height\": \"100%\" },\n          class: \"dlsMapContainer\"\n        }, null, 8, _hoisted_2)) : (openBlock(), createBlock(LoadingSpinner, { key: 1 }))\n      ])) : createCommentVNode(\"\", true);\n    };\n  }\n});\nexport {\n  _sfc_main as default\n};\n", "const mapProps = {\n  mapConfig: {\n    type: Object\n    // required: true,\n  },\n  viewerConfig: {\n    type: Object\n    // required: false,\n  },\n  viewerWidth: {\n    type: String,\n    require: false\n  },\n  viewerHeight: {\n    type: String,\n    require: false\n  }\n};\nconst mapEmits = {\n  cesiumReady: (payload) => true\n};\nexport {\n  mapEmits,\n  mapProps\n};\n", "import { openBlock, createElementBlock } from \"vue\";\nimport \"./LoadingSpinner.vue2.mjs\";\nimport _export_sfc from \"../../../_virtual/_plugin-vue_export-helper.mjs\";\nconst _sfc_main = {\n  name: \"LoadingSpinner\"\n};\nconst _hoisted_1 = { class: \"loading-spinner\" };\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, \"Loading...\");\n}\nconst LoadingSpinner = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__scopeId\", \"data-v-1b657085\"]]);\nexport {\n  LoadingSpinner as default\n};\n", "import _sfc_main from \"./dlsMap.vue.mjs\";\nimport \"../../../utils/Shader/Shaders.mjs\";\nimport { withInstall } from \"../../../utils/withinstall/index.mjs\";\nconst DlsMap = withInstall(_sfc_main);\nexport {\n  DlsMap,\n  DlsMap as default\n};\n", "function useSwitchMap(data, viewer) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  let imageryLayer = viewer.scene.imageryLayers;\n  try {\n    if (imageryLayer._layers && imageryLayer._layers.length) {\n      imageryLayer._layers.forEach((itemImgery) => {\n        if (itemImgery._imageryProvider && itemImgery._imageryProvider.url) {\n          imageryLayer.remove(itemImgery);\n        }\n      });\n    }\n  } catch (error) {\n    console.error(error);\n  }\n  if (data) {\n    viewer.imageryLayers.addImageryProvider(data);\n  }\n}\nexport {\n  useSwitchMap\n};\n", "import { reactive } from \"vue\";\nfunction useCesiumCoord() {\n  const coords = reactive({\n    longitude: \"0\",\n    //经度\n    latitude: \"0\",\n    //纬度\n    height: \"0\",\n    //视高\n    altitude: \"0\",\n    //海拔\n    cameraHeading: \"0\",\n    //方向\n    pitchDegrees: \"0\",\n    //俯仰角\n    zoomLevel: 0\n    //级别\n  });\n  function listenToMouseMovement(viewer = null) {\n    if (!viewer) {\n      console.error(\"viewer is undefined\");\n      return false;\n    }\n    if (viewer) {\n      let debounceTimeout = null;\n      const camera = viewer.camera;\n      const hander = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n      hander.setInputAction(function(movement) {\n        const cartesian = viewer.camera.pickEllipsoid(\n          movement.endPosition,\n          viewer.scene.globe.ellipsoid\n        );\n        if (cartesian) {\n          if (debounceTimeout) {\n            clearTimeout(debounceTimeout);\n          }\n          debounceTimeout = setTimeout(() => {\n            const cartographic = Cesium.Cartographic.fromCartesian(cartesian);\n            coords.longitude = Cesium.Math.toDegrees(\n              cartographic.longitude\n            ).toFixed(6);\n            coords.latitude = Cesium.Math.toDegrees(\n              cartographic.latitude\n            ).toFixed(6);\n          }, 300);\n        }\n      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n      hander.setInputAction(function(movement) {\n        let pick = movement.position;\n        if (pick) {\n          let sceneMode = viewer.scene.mode;\n          if (sceneMode === Cesium.SceneMode.SCENE3D) {\n            let cartesianNew = viewer.scene.globe.pick(\n              viewer.camera.getPickRay(pick),\n              viewer.scene\n            );\n            if (cartesianNew) {\n              let cartographicPosition = Cesium.Cartographic.fromCartesian(cartesianNew);\n              coords.longitude = Cesium.Math.toDegrees(\n                cartographicPosition.longitude\n              ).toFixed(6);\n              coords.latitude = Cesium.Math.toDegrees(\n                cartographicPosition.latitude\n              ).toFixed(6);\n              let cartographic = viewer.scene.globe.ellipsoid.cartesianToCartographic(\n                cartesianNew\n              );\n              if (cartographic) {\n                coords.altitude = viewer.scene.globe.getHeight(cartographic).toFixed(2);\n              }\n            }\n          } else {\n            let cartesian = viewer.camera.pickEllipsoid(\n              pick,\n              viewer.scene.globe.ellipsoid\n            );\n            if (cartesian !== void 0) {\n              let cartographic = Cesium.Cartographic.fromCartesian(cartesian);\n              let longitude_num = Cesium.Math.toDegrees(cartographic.longitude);\n              let latitude_num = Cesium.Math.toDegrees(cartographic.latitude);\n              coords.longitude = longitude_num.toFixed(6);\n              coords.latitude = latitude_num.toFixed(6);\n            }\n          }\n        }\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n      hander.setInputAction(function(wheelment) {\n        coords.height = viewer.camera.positionCartographic.height.toFixed(1);\n        let zoom = heightToZoom(\n          Math.ceil(viewer.camera.positionCartographic.height)\n        );\n        coords.zoomLevel = zoom;\n      }, Cesium.ScreenSpaceEventType.WHEEL);\n      viewer.scene.camera.moveEnd.addEventListener(function() {\n        let cameraDirection = camera.direction;\n        let cameraHeadingData = Cesium.Math.toDegrees(\n          Math.atan2(cameraDirection.y, cameraDirection.x)\n        );\n        coords.cameraHeading = ((cameraHeadingData + 360) % 360).toFixed(0);\n        let pitch = camera.pitch;\n        coords.pitchDegrees = Cesium.Math.toDegrees(pitch).toFixed(0);\n      });\n    }\n  }\n  function heightToZoom(height) {\n    let A = 40487.57;\n    let B = 7096758e-11;\n    let C = 91610.74;\n    let D = -40467.74;\n    return Math.round(D + (A - D) / (1 + Math.pow(height / C, B)));\n  }\n  return {\n    listenToMouseMovement,\n    coords\n  };\n}\nexport {\n  useCesiumCoord\n};\n", "function useCesiumFlyTo(viewer, target) {\n  if (!target[2]) target[2] = 1e6;\n  if (viewer) {\n    viewer.camera.flyTo({\n      destination: Cesium.Cartesian3.fromDegrees(\n        target[0],\n        target[1],\n        target[2]\n      )\n    });\n  }\n}\nfunction handlePitchDegrees(viewer, value) {\n  if (viewer) {\n    if (viewer.scene.mode === Cesium.SceneMode.SCENE3D) {\n      let scene = viewer.scene;\n      let camera = viewer.camera;\n      let position = camera.position.clone();\n      let heading = camera.heading;\n      let roll = camera.roll;\n      scene.camera.setView({\n        destination: position,\n        orientation: {\n          heading,\n          roll,\n          pitch: Cesium.Math.toRadians(value)\n        }\n      });\n    } else {\n      console.error(\"请先切换到三维地球模式！\");\n      return 1;\n    }\n  } else {\n    console.error(\"获取地图失败，请刷新重试！\");\n    return 2;\n  }\n}\nexport {\n  handlePitchDegrees,\n  useCesiumFlyTo\n};\n", "function isDOMElement(obj) {\n  return typeof obj === \"object\" && obj !== null && obj.nodeType && obj.nodeType === 1;\n}\nfunction useRemoveCesium(type = [\"all\"], viewer) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  if (!type) type = [\"all\"];\n  if (viewer) {\n    type.forEach((item) => {\n      if (item === \"all\" || item === \"entities\") {\n        viewer.entities.removeAll();\n      }\n      if (item === \"all\" || item === \"echarts\") {\n        const children = viewer.container.childNodes;\n        const keyword = \"echarts\";\n        children.forEach((item2) => {\n          if (isDOMElement(item2)) {\n            if (item2.id.includes(keyword)) {\n              viewer.container.removeChild(item2);\n            }\n          }\n        });\n      }\n      if (item === \"all\" || item === \"divLabel\") {\n        const domDiv = document.querySelectorAll(\".cesium-divLabel\");\n        if (domDiv && domDiv.length) {\n          document.querySelectorAll(\".cesium-divLabel\").forEach((A) => A.remove());\n        }\n      }\n      if (item === \"all\" || item === \"dataSources\") {\n        viewer.dataSources.removeAll();\n      }\n      if (item === \"all\" || item === \"imageryLayers\") {\n        const imageryLayers = viewer.imageryLayers;\n        let obj = imageryLayers._layers;\n        for (let i = obj.length - 1; i > 0; i--) {\n          if (imageryLayers.indexOf(obj[i]) > 0) {\n            imageryLayers.remove(obj[i], false);\n          }\n        }\n      }\n      if (item === \"all\" || item === \"primitives\") {\n        const primitives = viewer.scene.primitives._primitives;\n        if (primitives && primitives.length) {\n          primitives.forEach((item2) => {\n            if (!item2.destroyPrimitives) {\n              viewer.scene.primitives.remove(item2);\n            }\n          });\n        }\n      }\n      if (item === \"all\" || item === \"PostProcessStage\") {\n        viewer.scene.postProcessStages.removeAll(true);\n      }\n    });\n  }\n}\nfunction clearEntityByname(name, viewer) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  let entityArr = viewer.entities.values;\n  let CentityArr = entityArr.filter((v) => {\n    if (v.name === name) {\n      return v;\n    }\n  });\n  let len = CentityArr.length;\n  while (len--) {\n    viewer.entities.remove(CentityArr[len]);\n  }\n}\nexport {\n  clearEntityByname,\n  useRemoveCesium\n};\n", "function useSwitchViewPoint(viewType, viewer) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  var scene = viewer.scene;\n  switch (viewType) {\n    case \"3d\":\n      scene.morphTo3D(0);\n      break;\n    case \"2d\":\n      scene.morphTo2D(0);\n      break;\n    case \"2.5d\":\n      scene.morphToColumbusView(0);\n      break;\n  }\n}\nexport {\n  useSwitchViewPoint\n};\n", "function isInRange(lon, lat, range) {\n  const [minLon, maxLon, minLat, maxLat] = range;\n  return lon >= minLon && lon <= maxLon && lat >= minLat && lat <= maxLat;\n}\nfunction findRange(lon, lat, ranges) {\n  for (const rangeObj of ranges) {\n    if (isInRange(lon, lat, rangeObj.range)) {\n      return rangeObj;\n    }\n  }\n  return null;\n}\nfunction useLoadTerrain(terrainAry, height = 1e6, viewer) {\n  if (!terrainAry.length) return false;\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  if (viewer.scene.mode === Cesium.SceneMode.SCENE3D) {\n    let globalTerrain = terrainAry.filter((item) => item.type === \"global\");\n    if (globalTerrain && globalTerrain.length) {\n      const terrainProvider = new Cesium.CesiumTerrainProvider({\n        url: globalTerrain[0].url\n      });\n      viewer.terrainProvider = terrainProvider;\n    }\n    let hasReturneRange = false;\n    let hasExecutedOtherMethod = false;\n    let regionTerrain = terrainAry.filter((item) => item.type === \"region\");\n    if (regionTerrain && regionTerrain.length) {\n      viewer.camera.changed.addEventListener(function() {\n        let cameraPosition = viewer.camera.positionCartographic;\n        let latitude = Cesium.Math.toDegrees(cameraPosition.latitude);\n        let longitude = Cesium.Math.toDegrees(cameraPosition.longitude);\n        let heightCam = cameraPosition.height;\n        if (!hasReturneRange) {\n          let matcheRange = findRange(longitude, latitude, regionTerrain);\n          if (matcheRange && heightCam < height) {\n            hasReturneRange = true;\n            hasExecutedOtherMethod = false;\n            const terrainProvider = new Cesium.CesiumTerrainProvider({\n              url: matcheRange.url\n            });\n            viewer.terrainProvider = terrainProvider;\n          }\n        } else if (!hasExecutedOtherMethod && heightCam > height) {\n          if (globalTerrain && globalTerrain.length) {\n            const terrainProvider = new Cesium.CesiumTerrainProvider({\n              url: globalTerrain[0].url\n            });\n            viewer.terrainProvider = terrainProvider;\n          }\n          hasExecutedOtherMethod = true;\n          hasReturneRange = false;\n        }\n      });\n    }\n  }\n}\nexport {\n  useLoadTerrain\n};\n", "function DrawSoildLine(viewer, names, color, width) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  let distance = 0;\n  var layerLine = void 0;\n  let lineEntityCollection = new Cesium.CustomDataSource(\"measureLine\");\n  viewer.dataSources.add(lineEntityCollection);\n  document.body.style.cursor = \"crosshair\";\n  var handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n  let option = {\n    name: names,\n    color: color ? Cesium.Color.fromBytes(...color) : Cesium.Color.RED,\n    width\n  };\n  var layer = new Cesium.CustomDataSource(\"MyLines\");\n  viewer.dataSources.add(layer);\n  var activeShapePoints = [], activeShape = void 0;\n  handler.setInputAction((click) => {\n    const earthPosition = getPosition(viewer, click.position);\n    if (Cesium.defined(earthPosition)) {\n      if (activeShapePoints.length === 0) {\n        activeShapePoints.push(earthPosition);\n        const dynamicPositions = new Cesium.CallbackProperty(() => {\n          return activeShapePoints;\n        }, false);\n        activeShape = drawLine(layer, dynamicPositions, option);\n      }\n      activeShapePoints.push(earthPosition);\n      try {\n        if (lineEntityCollection) {\n          let textDisance = distance + \"米\";\n          lineEntityCollection.entities.add({\n            name: \"空间直线距离\",\n            position: activeShapePoints[activeShapePoints.length - 1],\n            point: {\n              pixelSize: 5,\n              color: Cesium.Color.RED,\n              outlineColor: Cesium.Color.WHITE,\n              outlineWidth: 2\n            },\n            label: {\n              text: textDisance,\n              font: \"18px sans-serif\",\n              fillColor: Cesium.Color.GOLD,\n              style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n              outlineWidth: 2,\n              verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n              pixelOffset: new Cesium.Cartesian2(20, -20)\n            }\n          });\n        }\n      } catch (error) {\n        console.log(`errorerror`, error);\n      }\n    }\n  }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n  handler.setInputAction((move) => {\n    if (activeShapePoints.length >= 2) {\n      const earthPosition = getPosition(viewer, move.endPosition);\n      if (Cesium.defined(earthPosition)) {\n        activeShapePoints.pop();\n        activeShapePoints.push(earthPosition);\n      }\n      distance = getSpaceDistance(activeShapePoints);\n    }\n  }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n  handler.setInputAction((click) => {\n    handler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n    activeShapePoints.pop();\n    layer.entities.remove(activeShape);\n    layerLine = drawLine(layer, activeShapePoints, option);\n    document.body.style.cursor = \"default\";\n    setTimeout(() => {\n      activeShapePoints = [];\n      handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n      handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\n      handler = handler && handler.destroy();\n    }, 500);\n  }, Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\n  return layerLine;\n}\nfunction getPosition(viewer, position) {\n  let earthPosition = void 0;\n  if (viewer.terrainProvider instanceof Cesium.EllipsoidTerrainProvider) {\n    earthPosition = viewer.scene.camera.pickEllipsoid(position);\n  } else {\n    const ray = viewer.camera.getPickRay(position);\n    earthPosition = viewer.scene.globe.pick(ray, viewer.scene);\n  }\n  return earthPosition;\n}\nfunction drawLine(layer, positionData, option) {\n  return layer.entities.add({\n    name: option.name,\n    polyline: {\n      positions: positionData,\n      clampToGround: true,\n      width: option.width,\n      material: option.color\n    }\n  });\n}\nfunction removeDrawLine(viewer) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  viewer.dataSources.removeAll();\n}\nfunction getSpaceDistance(positions) {\n  let distance = 0;\n  for (let i = 0; i < positions.length - 1; i++) {\n    let point1cartographic = Cesium.Cartographic.fromCartesian(positions[i]);\n    let point2cartographic = Cesium.Cartographic.fromCartesian(\n      positions[i + 1]\n    );\n    let geodesic = new Cesium.EllipsoidGeodesic();\n    geodesic.setEndPoints(point1cartographic, point2cartographic);\n    let s = geodesic.surfaceDistance;\n    s = Math.sqrt(\n      Math.pow(s, 2) + Math.pow(point2cartographic.height - point1cartographic.height, 2)\n    );\n    distance = distance + s;\n  }\n  return distance.toFixed(2);\n}\nexport {\n  DrawSoildLine,\n  removeDrawLine\n};\n", "function addBillboard(lon, lat, imgUrl, {\n  name = \"Point\",\n  width,\n  height,\n  scale,\n  click = true,\n  shengClick = false,\n  doubleClickHeight = 5e3,\n  attribute = {},\n  popContent,\n  pointHeight,\n  doubleClickPitch = -90\n}, viewer) {\n  let h = pointHeight ? pointHeight : 0;\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  let entity = viewer.entities.add({\n    name,\n    position: Cesium.Cartesian3.fromDegrees(lon, lat, h),\n    billboard: {\n      image: imgUrl,\n      width,\n      height,\n      scale,\n      verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n      HorizontalOrigin: Cesium.HorizontalOrigin.CENTER\n    },\n    attribute,\n    click,\n    shengClick,\n    doubleClickHeight,\n    lon,\n    lat,\n    popContent,\n    doubleClickPitch\n  });\n  return entity;\n}\nfunction addLine(positions, material, viewer, { name = \"Line\", width = 3 }) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  let entity = viewer.entities.add({\n    name,\n    polyline: {\n      positions: Cesium.Cartesian3.fromDegreesArray(positions),\n      width,\n      material\n    }\n  });\n  return entity;\n}\nfunction addCircle(longitude, latitude, radius, color, viewer, name = \"Circle\") {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  let entity = viewer.entities.add({\n    position: Cesium.Cartesian3.fromDegrees(longitude, latitude),\n    ellipse: {\n      semiMinorAxis: radius,\n      semiMajorAxis: radius,\n      material: new Cesium.ColorMaterialProperty(\n        Cesium.Color.fromCssColorString(color)\n      )\n    }\n  });\n  return entity;\n}\nfunction addWall(viewer, positions, hexColor, alpha, MaterialIndex, maximumHeights = [], minimumHeights = []) {\n  if (!viewer) {\n    console.error(\"viewer is undefined\");\n    return false;\n  }\n  let wallGeometry = null;\n  if (maximumHeights.length && minimumHeights.length) {\n    wallGeometry = new Cesium.WallGeometry({\n      positions: Cesium.Cartesian3.fromDegreesArrayHeights(positions),\n      maximumHeights,\n      minimumHeights\n    });\n  } else {\n    wallGeometry = new Cesium.WallGeometry({\n      positions: Cesium.Cartesian3.fromDegreesArrayHeights(positions)\n    });\n  }\n  const wallGeometryInstance = new Cesium.GeometryInstance({\n    geometry: wallGeometry,\n    attributes: {\n      color: Cesium.ColorGeometryInstanceAttribute.fromColor(\n        Cesium.Color.WHITE\n      )\n    }\n  });\n  let areaFabric = null;\n  if (MaterialIndex === 1) {\n    areaFabric = {\n      type: \"Wave\",\n      uniforms: {\n        color: Cesium.Color.fromCssColorString(hexColor).withAlpha(alpha),\n        // 波动颜色\n        time: 0\n        // 初始时间\n      },\n      source: `\n        czm_material czm_getMaterial(czm_materialInput materialInput) {\n            czm_material material = czm_getDefaultMaterial(materialInput);\n            vec2 st = materialInput.st;\n            float time = czm_frameNumber / 60.0; // 动态时间\n            float wave = sin((st.s + st.t) * 10.0 + time * 4.0); // 波动公式\n            material.diffuse = color.rgb;\n            material.alpha = color.a * abs(wave);\n            return material;\n        }`\n    };\n  } else if (MaterialIndex === 2) {\n    areaFabric = {\n      type: \"Blinking\",\n      uniforms: {\n        color: Cesium.Color.fromCssColorString(hexColor).withAlpha(alpha),\n        // 基础颜色\n        time: 0\n        // 动态时间\n      },\n      source: `\n        czm_material czm_getMaterial(czm_materialInput materialInput) {\n            czm_material material = czm_getDefaultMaterial(materialInput);\n            float alpha = abs(sin(czm_frameNumber / 60.0)); // 闪烁效果\n            material.diffuse = color.rgb;\n            material.alpha = color.a * alpha;\n            return material;\n        }`\n    };\n  } else if (MaterialIndex === 3) {\n    areaFabric = {\n      type: \"Gradient\",\n      uniforms: {\n        color: Cesium.Color.fromCssColorString(hexColor).withAlpha(alpha)\n        // 渐变颜色\n      },\n      source: `\n        czm_material czm_getMaterial(czm_materialInput materialInput) {\n            czm_material material = czm_getDefaultMaterial(materialInput);\n            vec2 st = materialInput.st;\n            material.diffuse = color.rgb * st.t; // 渐变效果\n            material.alpha = color.a;\n            return material;\n        }`\n    };\n  } else if (MaterialIndex === 4) {\n    areaFabric = {\n      type: \"MovingStripe\",\n      uniforms: {\n        color: Cesium.Color.fromCssColorString(hexColor).withAlpha(alpha),\n        repeat: 10,\n        // 条纹重复次数\n        speed: 2,\n        // 条纹移动速度\n        time: 0\n        // 动态时间\n      },\n      source: `\n        czm_material czm_getMaterial(czm_materialInput materialInput) {\n            czm_material material = czm_getDefaultMaterial(materialInput);\n            vec2 st = materialInput.st;\n            float time = czm_frameNumber / 60.0 * speed;\n            float stripe = abs(sin(st.s * repeat + time));\n            material.diffuse = color.rgb * stripe;\n            material.alpha = color.a * stripe;\n            return material;\n        }`\n    };\n  }\n  const wallPrimitive = new Cesium.Primitive({\n    geometryInstances: wallGeometryInstance,\n    appearance: new Cesium.MaterialAppearance({\n      material: new Cesium.Material({\n        fabric: areaFabric\n      }),\n      translucent: true\n    }),\n    asynchronous: false\n  });\n  viewer.scene.primitives.add(wallPrimitive);\n  viewer.camera.setView({\n    destination: Cesium.Cartesian3.fromDegrees(-115, 37, 2e6)\n  });\n}\nexport {\n  addBillboard,\n  addCircle,\n  addLine,\n  addWall\n};\n", "class DlsDivLabel {\n  constructor(val) {\n    if (val) {\n      this.viewer = val.viewer;\n      this.height = val.height;\n      this.position = Cesium.Cartesian3.fromDegrees(\n        val.position[0],\n        val.position[1],\n        val.height\n      );\n      this.layerData = val;\n      this.vmInstance = typeof val.dom === \"string\" ? this.createDom(val.dom) : val.dom;\n      this.dId = val.id ? val.id : void 0;\n      this.className = val.className ? val.className : void 0;\n      this.offset = val.offset;\n      this.type = val.type;\n      if (!this.vmInstance || !this.vmInstance.style) {\n        throw new Error(\"Not passing available Dom\");\n      }\n      this.initDom();\n      this.show = true;\n      val.viewer.cesiumWidget.container.appendChild(this.vmInstance);\n      this.addPostRender();\n    }\n  }\n  createDom(html) {\n    const el = document.createElement(\"div\");\n    el.innerHTML = html;\n    return el;\n  }\n  initDom() {\n    if (this.className) {\n      this.vmInstance.classList.add(this.className);\n    }\n    if (this.dId) this.vmInstance.id = \"divLabel\" + this.dId;\n    this.vmInstance.style.position = \"absolute\";\n    this.vmInstance.style.zIndex = \"5\";\n    this.vmInstance.addEventListener(\"click\", () => {\n    });\n    if (!this.vmInstance.classList.contains(\"cesium-divLabel\")) {\n      this.vmInstance.classList.add(\"cesium-divLabel\");\n    }\n  }\n  setDom(dom) {\n    if (dom instanceof HTMLElement) {\n      this.vmInstance.remove();\n      this.vmInstance = dom;\n      this.initDom();\n    } else {\n      this.vmInstance.innerHTML = dom;\n    }\n  }\n  addPostRender() {\n    this.viewer.scene.postRender.addEventListener(this.postRender.bind(this));\n    this._render = this.postRender.bind(this);\n  }\n  postRender() {\n    if (!this.vmInstance || !this.vmInstance.style) return;\n    if (this.vmInstance.style.zIndex === \"-1\") return;\n    const is3D = this.viewer.scene.mode === Cesium.SceneMode.SCENE3D;\n    const is2D = this.viewer.scene.mode === Cesium.SceneMode.SCENE2D;\n    let p_2d;\n    if (is3D) {\n      p_2d = this.viewer.scene.cartesianToCanvasCoordinates(this.position);\n    } else if (is2D) {\n      p_2d = Cesium.SceneTransforms.wgs84ToWindowCoordinates(\n        this.viewer.scene,\n        this.position\n      );\n    }\n    if (p_2d) {\n      if (this.offset) {\n        if (this.type && this.type === \"LayerPointTime\") {\n          this.vmInstance.style.top = p_2d.y + \"px\";\n          this.vmInstance.style.left = p_2d.x + this.offset[0] + \"px\";\n        } else {\n          this.vmInstance.style.top = p_2d.y + this.offset[1] + \"px\";\n          const elWidth = this.vmInstance.offsetWidth;\n          this.vmInstance.style.left = p_2d.x - elWidth / 2 + this.offset[0] + \"px\";\n        }\n      } else {\n        this.vmInstance.style.top = p_2d.y + \"px\";\n        const elWidth = this.vmInstance.offsetWidth;\n        this.vmInstance.style.left = p_2d.x - elWidth / 2 + \"px\";\n      }\n      const camerPosition = this.viewer.camera.position;\n      let height = this.viewer.scene.globe.ellipsoid.cartesianToCartographic(\n        camerPosition\n      ).height;\n      height += this.viewer.scene.globe.ellipsoid.maximumRadius;\n      if (!(Cesium.Cartesian3.distance(camerPosition, this.position) > height) && this.viewer.camera.positionCartographic.height < 5e7) {\n        this.vmInstance.style.display = \"block\";\n      } else {\n        this.vmInstance.style.display = \"none\";\n      }\n    }\n  }\n  changePosition(position) {\n    if (position.length === 2) {\n      this.position = Cesium.Cartesian3.fromDegrees(\n        position[0],\n        position[1],\n        this.height\n      );\n    }\n    return this;\n  }\n  removeAllDiv(id) {\n    document.querySelectorAll(id).forEach((A) => A.remove());\n  }\n}\nexport {\n  DlsDivLabel as default\n};\n", "class EventDispatcher {\n  constructor() {\n    this.listeners = /* @__PURE__ */ new Map([\n      [\"drawStart\", /* @__PURE__ */ new Set()],\n      [\"drawUpdate\", /* @__PURE__ */ new Set()],\n      [\"drawEnd\", /* @__PURE__ */ new Set()],\n      [\"editStart\", /* @__PURE__ */ new Set()],\n      [\"editEnd\", /* @__PURE__ */ new Set()]\n    ]);\n  }\n  on(event, listener) {\n    if (!this.listeners.has(event)) {\n      console.warn(\"Event binding must be one of 'drawStart', 'drawUpdate', or 'drawEnd'.\");\n      return;\n    }\n    this.listeners.get(event).add(listener);\n  }\n  off(event, listener) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(listener);\n    }\n  }\n  dispatchEvent(event, eventData) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach((listener) => {\n        listener(eventData);\n      });\n    }\n  }\n}\nexport {\n  EventDispatcher as default\n};\n", "import EventDispatcher from \"./events.mjs\";\nimport cloneDeep from \"/Users/kangshuolei/Desktop/code/dls-map/node_modules/.pnpm/lodash.clonedeep@4.5.0/node_modules/lodash.clonedeep/index.js\";\nimport { getCurvePoints } from \"./utils.mjs\";\nclass Base {\n  constructor(cesium, viewer, style) {\n    this.geometryPoints = [];\n    this.state = \"drawing\";\n    this.controlPoints = [];\n    this.entityId = \"\";\n    this.points = [];\n    this.minPointsForShape = 0;\n    this.cesium = cesium;\n    this.viewer = viewer;\n    this.type = this.getType();\n    this.mergeStyle(style);\n    this.cartesianToLnglat = this.cartesianToLnglat.bind(this);\n    this.pixelToCartesian = this.pixelToCartesian.bind(this);\n    this.eventDispatcher = new EventDispatcher();\n    viewer.trackedEntity = void 0;\n    viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(\n      this.cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\n    );\n    this.onClick();\n  }\n  mergeStyle(style) {\n    if (this.type === \"polygon\") {\n      this.style = Object.assign(\n        {\n          material: new this.cesium.Color(),\n          outlineMaterial: new this.cesium.Color(),\n          outlineWidth: 2\n        },\n        style\n      );\n    } else if (this.type === \"line\") {\n      this.style = Object.assign(\n        {\n          material: new this.cesium.Color(),\n          lineWidth: 2\n        },\n        style\n      );\n    } else if (this.type === \"point\") {\n      this.style = Object.assign(\n        {\n          pixelSize: 10,\n          heightReference: this.cesium.HeightReference.CLAMP_TO_GROUND,\n          color: this.cesium.Color.RED\n        },\n        style\n      );\n    }\n    this.styleCache = cloneDeep(this.style);\n  }\n  /**\n   * Base Class提供了更改状态的方法，并根据状态实现不同的逻辑。\n   * 状态由各个子组件根据实际情况进行控制。\n   * @param State\n   */\n  setState(state) {\n    this.state = state;\n  }\n  getState() {\n    return this.state;\n  }\n  /**\n   * 绑定根据状态而做出不同响应的全局单击事件。当处于绘图状态时，\n   * 单击即可为几何形状添加点。在编辑过程中，选择绘制的形状将其置于\n   * 可编辑状态。单击空白将其设置为静态状态。\n   */\n  onClick() {\n    this.eventHandler = new this.cesium.ScreenSpaceEventHandler(\n      this.viewer.canvas\n    );\n    this.eventHandler.setInputAction((evt) => {\n      const pickedObject = this.viewer.scene.pick(evt.position);\n      const hitEntities = this.cesium.defined(pickedObject) && pickedObject.id instanceof this.cesium.Entity;\n      let activeEntity = this.polygonEntity;\n      if (this.type === \"line\") {\n        activeEntity = this.lineEntity;\n      }\n      if (this.type === \"point\") {\n        activeEntity = this.pointEntity;\n      }\n      if (this.state === \"drawing\") {\n        const cartesian = this.pixelToCartesian(evt.position);\n        const points = this.getPoints();\n        if (!cartesian) {\n          return;\n        }\n        if (!this.freehand && points.length > 0 && !this.checkDistance(cartesian, points[points.length - 1])) {\n          return;\n        }\n        this.addPoint(cartesian);\n        if (this.getPoints().length === 1) {\n          this.eventDispatcher.dispatchEvent(\"drawStart\");\n        }\n        this.eventDispatcher.dispatchEvent(\"drawUpdate\", cartesian);\n      } else if (this.state === \"edit\") {\n        if (!hitEntities || activeEntity.id !== pickedObject.id.id) {\n          this.setState(\"static\");\n          this.type !== \"point\" ? this.removeControlPoints() : null;\n          this.disableDrag();\n          this.eventDispatcher.dispatchEvent(\"editEnd\", this.getPoints());\n        }\n      } else if (this.state === \"static\") {\n        try {\n          if (hitEntities && activeEntity.id === pickedObject.id.id) {\n            const pickedGraphics = this.type === \"line\" ? pickedObject.id.polyline : this.type === \"polygon\" ? pickedObject.id.polygon : pickedObject.id.point;\n            if (this.cesium.defined(pickedGraphics)) {\n              this.setState(\"edit\");\n              this.type !== \"point\" ? this.addControlPoints() : null;\n              this.draggable();\n              this.eventDispatcher.dispatchEvent(\"editStart\");\n            }\n          }\n        } catch (e) {\n          console.log(\"eeee\", e);\n        }\n      }\n    }, this.cesium.ScreenSpaceEventType.LEFT_CLICK);\n  }\n  onMouseMove() {\n    this.eventHandler.setInputAction((evt) => {\n      const points = this.getPoints();\n      const cartesian = this.pixelToCartesian(evt.endPosition);\n      if (!cartesian) {\n        return;\n      }\n      if (this.checkDistance(cartesian, points[points.length - 1])) {\n        this.updateMovingPoint(cartesian, points.length);\n      }\n    }, this.cesium.ScreenSpaceEventType.MOUSE_MOVE);\n  }\n  onDoubleClick() {\n    this.eventHandler.setInputAction((evt) => {\n      if (this.state === \"drawing\") {\n        this.finishDrawing();\n      }\n    }, this.cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\n  }\n  /**\n   * 检查两点之间的距离是否大于10米。\n   */\n  checkDistance(cartesian1, cartesian2) {\n    const distance = this.cesium.Cartesian3.distance(cartesian1, cartesian2);\n    return distance > 10;\n  }\n  finishDrawing() {\n    this.type === \"polygon\" && this.lineEntity && this.viewer.entities.remove(this.lineEntity);\n    this.removeMoveListener();\n    this.setState(\"edit\");\n    this.type !== \"point\" ? this.addControlPoints() : null;\n    this.draggable();\n    const entity = this.polygonEntity || this.lineEntity || this.pointEntity;\n    this.entityId = entity.id;\n    this.eventDispatcher.dispatchEvent(\"drawEnd\", this.getPoints());\n  }\n  removeClickListener() {\n    this.eventHandler.removeInputAction(\n      this.cesium.ScreenSpaceEventType.LEFT_CLICK\n    );\n  }\n  removeMoveListener() {\n    this.eventHandler.removeInputAction(\n      this.cesium.ScreenSpaceEventType.MOUSE_MOVE\n    );\n  }\n  removeDoubleClickListener() {\n    this.eventHandler.removeInputAction(\n      this.cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\n    );\n  }\n  setGeometryPoints(geometryPoints) {\n    this.geometryPoints = geometryPoints;\n  }\n  getGeometryPoints() {\n    return this.geometryPoints;\n  }\n  drawPolygon() {\n    const callback = () => {\n      return new this.cesium.PolygonHierarchy(this.geometryPoints);\n    };\n    if (!this.polygonEntity) {\n      const style = this.style;\n      this.polygonEntity = this.viewer.entities.add({\n        polygon: new this.cesium.PolygonGraphics({\n          hierarchy: new this.cesium.CallbackProperty(callback, false),\n          show: true,\n          material: style.material\n        })\n      });\n      this.outlineEntity = this.viewer.entities.add({\n        polyline: {\n          positions: new this.cesium.CallbackProperty(() => {\n            return [...this.geometryPoints, this.geometryPoints[0]];\n          }, false),\n          width: style.outlineWidth,\n          material: style.outlineMaterial,\n          clampToGround: true\n        }\n      });\n    }\n  }\n  drawLine() {\n    if (!this.lineEntity) {\n      const style = this.style;\n      this.lineEntity = this.addLineEntity(style);\n    }\n  }\n  drawPoint() {\n    if (!this.pointEntity) {\n      const points = this.getPoints();\n      const style = this.style;\n      this.pointEntity = this.viewer.entities.add({\n        position: points[0],\n        point: {\n          pixelSize: style.pixelSize,\n          heightReference: style.heightReference,\n          color: style.color\n        }\n      });\n    }\n  }\n  addTempLine() {\n    if (!this.tempLineEntity) {\n      const style = this.style;\n      const lineStyle = {\n        material: style.outlineMaterial,\n        lineWidth: style.outlineWidth\n      };\n      this.tempLineEntity = this.addLineEntity(lineStyle);\n    }\n  }\n  removeTempLine() {\n    if (this.tempLineEntity) {\n      this.viewer.entities.remove(this.tempLineEntity);\n    }\n  }\n  addLineEntity(style) {\n    const entity = this.viewer.entities.add({\n      polyline: {\n        positions: new this.cesium.CallbackProperty(\n          () => this.geometryPoints,\n          false\n        ),\n        width: style.lineWidth,\n        material: style.material,\n        clampToGround: true\n      }\n    });\n    return entity;\n  }\n  cartesianToLnglat(cartesian) {\n    const lnglat = this.viewer.scene.globe.ellipsoid.cartesianToCartographic(cartesian);\n    const lat = this.cesium.Math.toDegrees(lnglat.latitude);\n    const lng = this.cesium.Math.toDegrees(lnglat.longitude);\n    return [lng, lat];\n  }\n  pixelToCartesian(position) {\n    const ray = this.viewer.camera.getPickRay(position);\n    const cartesian = this.viewer.scene.globe.pick(ray, this.viewer.scene);\n    return cartesian;\n  }\n  /**\n   *  创建形状时显示关键点，允许拖动这些点来编辑和生成新形状。\n   */\n  addControlPoints() {\n    const points = this.getPoints();\n    this.controlPoints = points.map((position) => {\n      return this.viewer.entities.add({\n        position,\n        point: {\n          pixelSize: 10,\n          heightReference: this.cesium.HeightReference.CLAMP_TO_GROUND,\n          color: this.cesium.Color.RED\n        }\n      });\n    });\n    let isDragging = false;\n    let draggedIcon = null;\n    let dragStartPosition;\n    this.controlPointsEventHandler = new this.cesium.ScreenSpaceEventHandler(\n      this.viewer.canvas\n    );\n    this.controlPointsEventHandler.setInputAction((clickEvent) => {\n      const pickedObject = this.viewer.scene.pick(clickEvent.position);\n      if (this.cesium.defined(pickedObject)) {\n        for (let i = 0; i < this.controlPoints.length; i++) {\n          if (pickedObject.id._id === this.controlPoints[i]._id) {\n            isDragging = true;\n            draggedIcon = this.controlPoints[i];\n            dragStartPosition = draggedIcon.position._value;\n            draggedIcon.index = i;\n            break;\n          }\n        }\n        this.viewer.scene.screenSpaceCameraController.enableRotate = false;\n      }\n    }, this.cesium.ScreenSpaceEventType.LEFT_DOWN);\n    this.controlPointsEventHandler.setInputAction((moveEvent) => {\n      if (isDragging && draggedIcon) {\n        const cartesian = this.viewer.camera.pickEllipsoid(\n          moveEvent.endPosition,\n          this.viewer.scene.globe.ellipsoid\n        );\n        if (cartesian) {\n          draggedIcon.position.setValue(cartesian);\n          this.updateDraggingPoint(cartesian, draggedIcon.index);\n        }\n      }\n    }, this.cesium.ScreenSpaceEventType.MOUSE_MOVE);\n    this.controlPointsEventHandler.setInputAction(() => {\n      if (draggedIcon && !this.cesium.Cartesian3.equals(\n        dragStartPosition,\n        draggedIcon.position._value\n      )) {\n        this.eventDispatcher.dispatchEvent(\n          \"drawUpdate\",\n          draggedIcon.position._value\n        );\n      }\n      isDragging = false;\n      draggedIcon = null;\n      this.viewer.scene.screenSpaceCameraController.enableRotate = true;\n    }, this.cesium.ScreenSpaceEventType.LEFT_UP);\n  }\n  removeControlPoints() {\n    if (this.controlPoints.length > 0) {\n      this.controlPoints.forEach((entity) => {\n        this.viewer.entities.remove(entity);\n      });\n      this.controlPointsEventHandler.removeInputAction(\n        this.cesium.ScreenSpaceEventType.LEFT_DOWN\n      );\n      this.controlPointsEventHandler.removeInputAction(\n        this.cesium.ScreenSpaceEventType.MOUSE_MOVE\n      );\n      this.controlPointsEventHandler.removeInputAction(\n        this.cesium.ScreenSpaceEventType.LEFT_UP\n      );\n    }\n  }\n  /**\n   *  在编辑模式下允许拖动整个形状。\n   */\n  draggable() {\n    let dragging = false;\n    let startPosition;\n    this.dragEventHandler = new this.cesium.ScreenSpaceEventHandler(\n      this.viewer.canvas\n    );\n    this.dragEventHandler.setInputAction((event) => {\n      const pickRay = this.viewer.scene.camera.getPickRay(event.position);\n      if (pickRay) {\n        const cartesian = this.viewer.scene.globe.pick(\n          pickRay,\n          this.viewer.scene\n        );\n        const pickedObject = this.viewer.scene.pick(event.position);\n        if (this.cesium.defined(pickedObject) && pickedObject.id instanceof this.cesium.Entity) {\n          const clickedEntity = pickedObject.id;\n          if (this.isCurrentEntity(clickedEntity.id)) {\n            dragging = true;\n            startPosition = cartesian;\n            this.viewer.scene.screenSpaceCameraController.enableRotate = false;\n          }\n        }\n      }\n    }, this.cesium.ScreenSpaceEventType.LEFT_DOWN);\n    this.dragEventHandler.setInputAction((event) => {\n      var _a, _b;\n      if (dragging && startPosition) {\n        const newPosition = this.pixelToCartesian(event.endPosition);\n        if (newPosition) {\n          const translation = this.cesium.Cartesian3.subtract(\n            newPosition,\n            startPosition,\n            new this.cesium.Cartesian3()\n          );\n          if (this.type === \"point\") {\n            const position = (_a = this.pointEntity.position) == null ? void 0 : _a.getValue(\n              this.cesium.JulianDate.now()\n            );\n            const newPosition2 = this.cesium.Cartesian3.add(\n              position,\n              translation,\n              new this.cesium.Cartesian3()\n            );\n            (_b = this.pointEntity.position) == null ? void 0 : _b.setValue(newPosition2);\n          }\n          const newPoints = this.geometryPoints.map((p) => {\n            return this.cesium.Cartesian3.add(\n              p,\n              translation,\n              new this.cesium.Cartesian3()\n            );\n          });\n          this.points = this.points.map((p) => {\n            return this.cesium.Cartesian3.add(\n              p,\n              translation,\n              new this.cesium.Cartesian3()\n            );\n          });\n          this.controlPoints.map((p) => {\n            var _a2, _b2;\n            const position = (_a2 = p.position) == null ? void 0 : _a2.getValue(this.cesium.JulianDate.now());\n            const newPosition2 = this.cesium.Cartesian3.add(\n              position,\n              translation,\n              new this.cesium.Cartesian3()\n            );\n            (_b2 = p.position) == null ? void 0 : _b2.setValue(newPosition2);\n          });\n          this.setGeometryPoints(newPoints);\n          if (this.minPointsForShape === 4) {\n            this.curveControlPointLeft = this.cesium.Cartesian3.add(\n              this.curveControlPointLeft,\n              translation,\n              new this.cesium.Cartesian3()\n            );\n            this.curveControlPointRight = this.cesium.Cartesian3.add(\n              this.curveControlPointRight,\n              translation,\n              new this.cesium.Cartesian3()\n            );\n          }\n          startPosition = newPosition;\n        }\n      } else {\n        const pickRay = this.viewer.scene.camera.getPickRay(event.endPosition);\n        if (pickRay) {\n          const pickedObject = this.viewer.scene.pick(event.endPosition);\n          if (this.cesium.defined(pickedObject) && pickedObject.id instanceof this.cesium.Entity) {\n            const clickedEntity = pickedObject.id;\n            if (this.isCurrentEntity(clickedEntity.id)) {\n              this.viewer.scene.canvas.style.cursor = \"move\";\n            } else {\n              this.viewer.scene.canvas.style.cursor = \"default\";\n            }\n          } else {\n            this.viewer.scene.canvas.style.cursor = \"default\";\n          }\n        }\n      }\n    }, this.cesium.ScreenSpaceEventType.MOUSE_MOVE);\n    this.dragEventHandler.setInputAction(() => {\n      dragging = false;\n      startPosition = void 0;\n      this.viewer.scene.screenSpaceCameraController.enableRotate = true;\n    }, this.cesium.ScreenSpaceEventType.LEFT_UP);\n  }\n  // 完成编辑，禁用拖动。\n  disableDrag() {\n    this.dragEventHandler.removeInputAction(\n      this.cesium.ScreenSpaceEventType.LEFT_DOWN\n    );\n    this.dragEventHandler.removeInputAction(\n      this.cesium.ScreenSpaceEventType.MOUSE_MOVE\n    );\n    this.dragEventHandler.removeInputAction(\n      this.cesium.ScreenSpaceEventType.LEFT_UP\n    );\n  }\n  show(opts) {\n    if (opts) {\n      const { duration, delay, callback } = opts;\n      this.showWithAnimation(duration, delay, callback);\n      return;\n    } else {\n      this.showWithAnimation(0, 0);\n    }\n  }\n  hide(opts) {\n    if (opts) {\n      const { duration, delay, callback } = opts;\n      this.hideWithAnimation(duration, delay, callback);\n      return;\n    } else {\n      this.hideWithAnimation(0, 0);\n    }\n  }\n  showWithAnimation(duration = 2e3, delay = 0, callback) {\n    var _a, _b, _c, _d;\n    if (this.state !== \"hidden\") {\n      return;\n    }\n    this.setState(\"static\");\n    if (this.type === \"polygon\") {\n      let alpha = 0.3;\n      const material = this.styleCache.material;\n      if (material.image) {\n        alpha = material.color.getValue().alpha;\n      } else {\n        alpha = material.alpha;\n      }\n      this.animateOpacity(\n        this.polygonEntity,\n        alpha,\n        duration,\n        delay,\n        callback,\n        this.state\n      );\n      const outlineAlpha = (_b = (_a = this.styleCache) == null ? void 0 : _a.outlineMaterial) == null ? void 0 : _b.alpha;\n      this.animateOpacity(\n        this.outlineEntity,\n        outlineAlpha || 1,\n        duration,\n        delay,\n        void 0,\n        this.state\n      );\n    } else if (this.type === \"line\") {\n      const material = this.styleCache.material;\n      let alpha = 1;\n      if (material.image) {\n        alpha = material.color.alpha;\n      } else if (material.dashLength) {\n        const color = material.color.getValue();\n        alpha = color.alpha;\n      } else {\n        alpha = (_d = (_c = this.styleCache) == null ? void 0 : _c.material) == null ? void 0 : _d.alpha;\n      }\n      this.animateOpacity(\n        this.lineEntity,\n        alpha,\n        duration,\n        delay,\n        callback,\n        this.state\n      );\n    }\n    if (duration != 0) {\n      this.setState(\"animating\");\n    }\n  }\n  hideWithAnimation(duration = 2e3, delay = 0, callback) {\n    if (this.state === \"hidden\" || this.state != \"static\") {\n      return;\n    }\n    this.setState(\"hidden\");\n    if (this.type === \"polygon\") {\n      this.animateOpacity(\n        this.polygonEntity,\n        0,\n        duration,\n        delay,\n        callback,\n        this.state\n      );\n      this.animateOpacity(\n        this.outlineEntity,\n        0,\n        duration,\n        delay,\n        void 0,\n        this.state\n      );\n    } else if (this.type === \"line\") {\n      this.animateOpacity(\n        this.lineEntity,\n        0,\n        duration,\n        delay,\n        callback,\n        this.state\n      );\n    }\n    if (duration != 0) {\n      this.setState(\"animating\");\n    }\n  }\n  animateOpacity(entity, targetAlpha, duration, delay, callback, state) {\n    setTimeout(() => {\n      const graphics = entity.polygon || entity.polyline || entity.billboard;\n      let startAlpha;\n      let material = graphics.material;\n      if (material) {\n        if (material.image && material.color.alpha !== void 0) {\n          startAlpha = material.color.alpha;\n        } else {\n          startAlpha = material.color.getValue().alpha;\n        }\n      } else {\n        const color = graphics.color.getValue();\n        startAlpha = color.alpha;\n      }\n      let startTime = 0;\n      const animate = (currentTime) => {\n        if (!startTime) {\n          startTime = currentTime;\n        }\n        const elapsedTime = currentTime - startTime;\n        if (elapsedTime < duration) {\n          const deltalpha = elapsedTime / duration * (targetAlpha - startAlpha);\n          const newAlpha = startAlpha + deltalpha;\n          if (material) {\n            if (material.image && material.color.alpha !== void 0) {\n              material.color.alpha = newAlpha;\n            } else {\n              const newColor = material.color.getValue().withAlpha(newAlpha);\n              material.color.setValue(newColor);\n            }\n          } else {\n            const color = graphics.color.getValue();\n            const newColor = color.withAlpha(newAlpha);\n            graphics.color.setValue(newColor);\n          }\n          requestAnimationFrame(animate);\n        } else {\n          callback && callback();\n          const restoredState = state ? state : \"static\";\n          if (material) {\n            if (material.image && material.color.alpha !== void 0) {\n              material.color.alpha = targetAlpha;\n            } else {\n              const newColor = material.color.getValue().withAlpha(targetAlpha);\n              material.color.setValue(newColor);\n            }\n          } else {\n            const color = graphics.color.getValue();\n            const newColor = color.withAlpha(targetAlpha);\n            graphics.color.setValue(newColor);\n          }\n          requestAnimationFrame(() => {\n            this.setState(restoredState);\n          });\n        }\n      };\n      requestAnimationFrame(animate);\n    }, delay);\n  }\n  startGrowthAnimation(opts) {\n    const { duration = 2e3, delay = 0, callback } = opts || {};\n    if (this.state === \"hidden\" || this.state != \"static\") {\n      return;\n    }\n    if (!this.minPointsForShape) {\n      console.warn(\"Growth animation is not supported for this type of shape\");\n      return;\n    }\n    this.setState(\"animating\");\n    if (this.minPointsForShape === 4) {\n      this.doubleArrowGrowthAnimation(duration, delay, callback);\n      return;\n    }\n    setTimeout(() => {\n      this.hideWithAnimation(0, 0, void 0);\n      const points = this.getPoints();\n      let segmentDuration = 0;\n      if (this.minPointsForShape === 2) {\n        segmentDuration = duration / (points.length - 1);\n      } else {\n        segmentDuration = duration / (points.length - 2);\n      }\n      let startTime = Date.now();\n      let movingPointIndex = 0;\n      this.viewer.clock.shouldAnimate = true;\n      const frameListener = (clock) => {\n        const currentTime = Date.now();\n        const elapsedTime = currentTime - startTime;\n        if (elapsedTime >= duration) {\n          callback && callback();\n          startTime = 0;\n          this.viewer.clock.shouldAnimate = false;\n          this.viewer.clock.onTick.removeEventListener(frameListener);\n          this.setState(\"static\");\n          return;\n        }\n        const currentSegment = Math.floor(elapsedTime / segmentDuration);\n        let startPoint;\n        if (this.minPointsForShape === 2) {\n          movingPointIndex = currentSegment + 1;\n        } else {\n          movingPointIndex = currentSegment + 2;\n        }\n        startPoint = points[movingPointIndex - 1];\n        if (currentSegment == 0 && this.minPointsForShape === 3) {\n          startPoint = this.cesium.Cartesian3.midpoint(\n            points[0],\n            points[1],\n            new this.cesium.Cartesian3()\n          );\n        }\n        let endPoint = points[movingPointIndex];\n        const t = (elapsedTime - currentSegment * segmentDuration) / segmentDuration;\n        const newPosition = this.cesium.Cartesian3.lerp(\n          startPoint,\n          endPoint,\n          t,\n          new this.cesium.Cartesian3()\n        );\n        const tempPoints = points.slice(0, movingPointIndex + 1);\n        tempPoints[tempPoints.length - 1] = newPosition;\n        const geometryPoints = this.createGraphic(tempPoints);\n        this.setGeometryPoints(geometryPoints);\n        this.showWithAnimation(0, 0, void 0);\n      };\n      this.viewer.clock.onTick.addEventListener(frameListener);\n    }, delay);\n  }\n  doubleArrowGrowthAnimation(duration = 2e3, delay = 0, callback) {\n    setTimeout(() => {\n      this.hideWithAnimation(0, 0, void 0);\n      const points = this.getPoints();\n      let startTime = Date.now();\n      this.viewer.clock.shouldAnimate = true;\n      const frameListener = (clock) => {\n        const currentTime = Date.now();\n        const elapsedTime = currentTime - startTime;\n        if (elapsedTime >= duration) {\n          callback && callback();\n          startTime = 0;\n          this.viewer.clock.shouldAnimate = false;\n          this.viewer.clock.onTick.removeEventListener(frameListener);\n          this.setState(\"static\");\n          return;\n        }\n        const midPoint = this.cesium.Cartesian3.midpoint(\n          points[0],\n          points[1],\n          new this.cesium.Cartesian3()\n        );\n        const startPointLeft = this.cesium.Cartesian3.midpoint(\n          points[0],\n          midPoint,\n          new this.cesium.Cartesian3()\n        );\n        const startPointRight = this.cesium.Cartesian3.midpoint(\n          midPoint,\n          points[1],\n          new this.cesium.Cartesian3()\n        );\n        let endPointLeft = points[3];\n        let endPointRight = points[2];\n        const t = elapsedTime / duration;\n        const controlPoint = this.getBezierControlPointforGrowthAnimation();\n        let curveControlPointsLeft = [\n          startPointLeft,\n          controlPoint.left,\n          endPointLeft\n        ];\n        let curveControlPointsRight = [\n          startPointRight,\n          controlPoint.right,\n          endPointRight\n        ];\n        const newPositionLeft = this.getNewPosition(curveControlPointsLeft, t);\n        const newPositionRight = this.getNewPosition(\n          curveControlPointsRight,\n          t\n        );\n        const tempPoints = [...points];\n        tempPoints[2] = newPositionRight;\n        tempPoints[3] = newPositionLeft;\n        const geometryPoints = this.createGraphic(tempPoints);\n        this.setGeometryPoints(geometryPoints);\n        this.showWithAnimation(0, 0, void 0);\n      };\n      this.viewer.clock.onTick.addEventListener(frameListener);\n    }, delay);\n  }\n  getNewPosition(curveControlPoints, t) {\n    curveControlPoints = curveControlPoints.map((item) => {\n      return this.cartesianToLnglat(item);\n    });\n    let curvePoints = getCurvePoints(0.3, curveControlPoints);\n    curvePoints = curvePoints.map((p) => {\n      return this.cesium.Cartesian3.fromDegrees(p[0], p[1]);\n    });\n    let newPosition = this.interpolateAlongCurve(curvePoints, t);\n    return newPosition;\n  }\n  interpolateAlongCurve(curvePoints, t) {\n    const numPoints = curvePoints.length - 1;\n    const index = Math.floor(t * numPoints);\n    const tSegment = t * numPoints - index;\n    const startPoint = curvePoints[index];\n    const endPoint = curvePoints[index + 1];\n    const x = startPoint.x + (endPoint.x - startPoint.x) * tSegment;\n    const y = startPoint.y + (endPoint.y - startPoint.y) * tSegment;\n    const z = startPoint.z + (endPoint.z - startPoint.z) * tSegment;\n    return new this.cesium.Cartesian3(x, y, z);\n  }\n  remove() {\n    if (this.type === \"polygon\") {\n      this.viewer.entities.remove(this.polygonEntity);\n      this.viewer.entities.remove(this.outlineEntity);\n      this.polygonEntity = null;\n      this.outlineEntity = null;\n      this.lineEntity = null;\n    } else if (this.type === \"line\") {\n      this.viewer.entities.remove(this.lineEntity);\n    } else if (this.type === \"point\") {\n      this.viewer.entities.remove(this.pointEntity);\n    }\n    this.removeClickListener();\n    this.removeMoveListener();\n    this.removeDoubleClickListener();\n    this.removeControlPoints();\n  }\n  on(eventType, listener) {\n    this.eventDispatcher.on(eventType, listener);\n  }\n  off(eventType, listener) {\n    this.eventDispatcher.off(eventType, listener);\n  }\n  isCurrentEntity(id) {\n    return this.entityId === id;\n  }\n  addPoint(cartesian) {\n  }\n  getPoints() {\n    return [new this.cesium.Cartesian3()];\n  }\n  updateMovingPoint(cartesian, index) {\n  }\n  updateDraggingPoint(cartesian, index) {\n  }\n  getType() {\n    return \"polygon\";\n  }\n  createGraphic(points) {\n    return points;\n  }\n}\nexport {\n  Base as default\n};\n", "const FITTING_COUNT = 100;\nconst ZERO_TOLERANCE = 1e-4;\nconst MathDistance = (pnt1, pnt2) => Math.sqrt((pnt1[0] - pnt2[0]) ** 2 + (pnt1[1] - pnt2[1]) ** 2);\nconst wholeDistance = (points) => {\n  let distance = 0;\n  if (points && Array.isArray(points) && points.length > 0) {\n    points.forEach((item, index) => {\n      if (index < points.length - 1) {\n        distance += MathDistance(item, points[index + 1]);\n      }\n    });\n  }\n  return distance;\n};\nconst getBaseLength = (points) => wholeDistance(points) ** 0.99;\nconst Mid = (point1, point2) => [(point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2];\nconst getCircleCenterOfThreePoints = (point1, point2, point3) => {\n  const pntA = [(point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2];\n  const pntB = [pntA[0] - point1[1] + point2[1], pntA[1] + point1[0] - point2[0]];\n  const pntC = [(point1[0] + point3[0]) / 2, (point1[1] + point3[1]) / 2];\n  const pntD = [pntC[0] - point1[1] + point3[1], pntC[1] + point1[0] - point3[0]];\n  return getIntersectPoint(pntA, pntB, pntC, pntD);\n};\nconst getIntersectPoint = (pntA, pntB, pntC, pntD) => {\n  if (pntA[1] === pntB[1]) {\n    const f2 = (pntD[0] - pntC[0]) / (pntD[1] - pntC[1]);\n    const x2 = f2 * (pntA[1] - pntC[1]) + pntC[0];\n    const y2 = pntA[1];\n    return [x2, y2];\n  }\n  if (pntC[1] === pntD[1]) {\n    const e2 = (pntB[0] - pntA[0]) / (pntB[1] - pntA[1]);\n    const x2 = e2 * (pntC[1] - pntA[1]) + pntA[0];\n    const y2 = pntC[1];\n    return [x2, y2];\n  }\n  const e = (pntB[0] - pntA[0]) / (pntB[1] - pntA[1]);\n  const f = (pntD[0] - pntC[0]) / (pntD[1] - pntC[1]);\n  const y = (e * pntA[1] - pntA[0] - f * pntC[1] + pntC[0]) / (e - f);\n  const x = e * y - e * pntA[1] + pntA[0];\n  return [x, y];\n};\nconst getAzimuth = (startPoint, endPoint) => {\n  let azimuth;\n  const angle = Math.asin(Math.abs(endPoint[1] - startPoint[1]) / MathDistance(startPoint, endPoint));\n  if (endPoint[1] >= startPoint[1] && endPoint[0] >= startPoint[0]) {\n    azimuth = angle + Math.PI;\n  } else if (endPoint[1] >= startPoint[1] && endPoint[0] < startPoint[0]) {\n    azimuth = Math.PI * 2 - angle;\n  } else if (endPoint[1] < startPoint[1] && endPoint[0] < startPoint[0]) {\n    azimuth = angle;\n  } else if (endPoint[1] < startPoint[1] && endPoint[0] >= startPoint[0]) {\n    azimuth = Math.PI - angle;\n  }\n  return azimuth;\n};\nconst getAngleOfThreePoints = (pntA, pntB, pntC) => {\n  const angle = getAzimuth(pntB, pntA) - getAzimuth(pntB, pntC);\n  return angle < 0 ? angle + Math.PI * 2 : angle;\n};\nconst isClockWise = (pnt1, pnt2, pnt3) => (pnt3[1] - pnt1[1]) * (pnt2[0] - pnt1[0]) > (pnt2[1] - pnt1[1]) * (pnt3[0] - pnt1[0]);\nconst getCubicValue = (t, startPnt, cPnt1, cPnt2, endPnt) => {\n  t = Math.max(Math.min(t, 1), 0);\n  const [tp, t2] = [1 - t, t * t];\n  const t3 = t2 * t;\n  const tp2 = tp * tp;\n  const tp3 = tp2 * tp;\n  const x = tp3 * startPnt[0] + 3 * tp2 * t * cPnt1[0] + 3 * tp * t2 * cPnt2[0] + t3 * endPnt[0];\n  const y = tp3 * startPnt[1] + 3 * tp2 * t * cPnt1[1] + 3 * tp * t2 * cPnt2[1] + t3 * endPnt[1];\n  return [x, y];\n};\nconst getThirdPoint = (startPnt, endPnt, angle, distance, clockWise) => {\n  const azimuth = getAzimuth(startPnt, endPnt);\n  const alpha = clockWise ? azimuth + angle : azimuth - angle;\n  const dx = distance * Math.cos(alpha);\n  const dy = distance * Math.sin(alpha);\n  return [endPnt[0] + dx, endPnt[1] + dy];\n};\nconst getArcPoints = (center, radius, startAngle, endAngle) => {\n  let [x, y, pnts, angleDiff] = [null, null, [], endAngle - startAngle];\n  angleDiff = angleDiff < 0 ? angleDiff + Math.PI * 2 : angleDiff;\n  for (let i = 0; i <= 100; i++) {\n    const angle = startAngle + angleDiff * i / 100;\n    x = center[0] + radius * Math.cos(angle);\n    y = center[1] + radius * Math.sin(angle);\n    pnts.push([x, y]);\n  }\n  return pnts;\n};\nconst getBisectorNormals = (t, pnt1, pnt2, pnt3) => {\n  const normal = getNormal(pnt1, pnt2, pnt3);\n  let [bisectorNormalRight, bisectorNormalLeft, dt, x, y] = [null, null, null, null, null];\n  const dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1]);\n  const uX = normal[0] / dist;\n  const uY = normal[1] / dist;\n  const d1 = MathDistance(pnt1, pnt2);\n  const d2 = MathDistance(pnt2, pnt3);\n  if (dist > ZERO_TOLERANCE) {\n    if (isClockWise(pnt1, pnt2, pnt3)) {\n      dt = t * d1;\n      x = pnt2[0] - dt * uY;\n      y = pnt2[1] + dt * uX;\n      bisectorNormalRight = [x, y];\n      dt = t * d2;\n      x = pnt2[0] + dt * uY;\n      y = pnt2[1] - dt * uX;\n      bisectorNormalLeft = [x, y];\n    } else {\n      dt = t * d1;\n      x = pnt2[0] + dt * uY;\n      y = pnt2[1] - dt * uX;\n      bisectorNormalRight = [x, y];\n      dt = t * d2;\n      x = pnt2[0] - dt * uY;\n      y = pnt2[1] + dt * uX;\n      bisectorNormalLeft = [x, y];\n    }\n  } else {\n    x = pnt2[0] + t * (pnt1[0] - pnt2[0]);\n    y = pnt2[1] + t * (pnt1[1] - pnt2[1]);\n    bisectorNormalRight = [x, y];\n    x = pnt2[0] + t * (pnt3[0] - pnt2[0]);\n    y = pnt2[1] + t * (pnt3[1] - pnt2[1]);\n    bisectorNormalLeft = [x, y];\n  }\n  return [bisectorNormalRight, bisectorNormalLeft];\n};\nconst getNormal = (pnt1, pnt2, pnt3) => {\n  let dX1 = pnt1[0] - pnt2[0];\n  let dY1 = pnt1[1] - pnt2[1];\n  const d1 = Math.sqrt(dX1 * dX1 + dY1 * dY1);\n  dX1 /= d1;\n  dY1 /= d1;\n  let dX2 = pnt3[0] - pnt2[0];\n  let dY2 = pnt3[1] - pnt2[1];\n  const d2 = Math.sqrt(dX2 * dX2 + dY2 * dY2);\n  dX2 /= d2;\n  dY2 /= d2;\n  const uX = dX1 + dX2;\n  const uY = dY1 + dY2;\n  return [uX, uY];\n};\nconst getLeftMostControlPoint = (controlPoints, t) => {\n  let [pnt1, pnt2, pnt3, controlX, controlY] = [controlPoints[0], controlPoints[1], controlPoints[2], null, null];\n  const pnts = getBisectorNormals(0, pnt1, pnt2, pnt3);\n  const normalRight = pnts[0];\n  const normal = getNormal(pnt1, pnt2, pnt3);\n  const dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1]);\n  if (dist > ZERO_TOLERANCE) {\n    const mid = Mid(pnt1, pnt2);\n    const pX = pnt1[0] - mid[0];\n    const pY = pnt1[1] - mid[1];\n    const d1 = MathDistance(pnt1, pnt2);\n    const n = 2 / d1;\n    const nX = -n * pY;\n    const nY = n * pX;\n    const a11 = nX * nX - nY * nY;\n    const a12 = 2 * nX * nY;\n    const a22 = nY * nY - nX * nX;\n    const dX = normalRight[0] - mid[0];\n    const dY = normalRight[1] - mid[1];\n    controlX = mid[0] + a11 * dX + a12 * dY;\n    controlY = mid[1] + a12 * dX + a22 * dY;\n  } else {\n    controlX = pnt1[0] + t * (pnt2[0] - pnt1[0]);\n    controlY = pnt1[1] + t * (pnt2[1] - pnt1[1]);\n  }\n  return [controlX, controlY];\n};\nconst getRightMostControlPoint = (controlPoints, t) => {\n  const count = controlPoints.length;\n  const pnt1 = controlPoints[count - 3];\n  const pnt2 = controlPoints[count - 2];\n  const pnt3 = controlPoints[count - 1];\n  const pnts = getBisectorNormals(0, pnt1, pnt2, pnt3);\n  const normalLeft = pnts[1];\n  const normal = getNormal(pnt1, pnt2, pnt3);\n  const dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1]);\n  let [controlX, controlY] = [null, null];\n  if (dist > ZERO_TOLERANCE) {\n    const mid = Mid(pnt2, pnt3);\n    const pX = pnt3[0] - mid[0];\n    const pY = pnt3[1] - mid[1];\n    const d1 = MathDistance(pnt2, pnt3);\n    const n = 2 / d1;\n    const nX = -n * pY;\n    const nY = n * pX;\n    const a11 = nX * nX - nY * nY;\n    const a12 = 2 * nX * nY;\n    const a22 = nY * nY - nX * nX;\n    const dX = normalLeft[0] - mid[0];\n    const dY = normalLeft[1] - mid[1];\n    controlX = mid[0] + a11 * dX + a12 * dY;\n    controlY = mid[1] + a12 * dX + a22 * dY;\n  } else {\n    controlX = pnt3[0] + t * (pnt2[0] - pnt3[0]);\n    controlY = pnt3[1] + t * (pnt2[1] - pnt3[1]);\n  }\n  return [controlX, controlY];\n};\nconst getCurvePoints = (t, controlPoints) => {\n  const leftControl = getLeftMostControlPoint(controlPoints, t);\n  let [pnt1, pnt2, pnt3, normals, points] = [null, null, null, [leftControl], []];\n  for (let i = 0; i < controlPoints.length - 2; i++) {\n    [pnt1, pnt2, pnt3] = [controlPoints[i], controlPoints[i + 1], controlPoints[i + 2]];\n    const normalPoints = getBisectorNormals(t, pnt1, pnt2, pnt3);\n    normals = normals.concat(normalPoints);\n  }\n  const rightControl = getRightMostControlPoint(controlPoints, t);\n  if (rightControl) {\n    normals.push(rightControl);\n  }\n  for (let i = 0; i < controlPoints.length - 1; i++) {\n    pnt1 = controlPoints[i];\n    pnt2 = controlPoints[i + 1];\n    points.push(pnt1);\n    for (let j = 0; j < FITTING_COUNT; j++) {\n      const pnt = getCubicValue(j / FITTING_COUNT, pnt1, normals[i * 2], normals[i * 2 + 1], pnt2);\n      points.push(pnt);\n    }\n    points.push(pnt2);\n  }\n  return points;\n};\nconst getBezierPoints = function(points) {\n  if (points.length <= 2) {\n    return points;\n  }\n  const bezierPoints = [];\n  const n = points.length - 1;\n  for (let t = 0; t <= 1; t += 0.01) {\n    let [x, y] = [0, 0];\n    for (let index = 0; index <= n; index++) {\n      const factor = getBinomialFactor(n, index);\n      const a = t ** index;\n      const b = (1 - t) ** (n - index);\n      x += factor * a * b * points[index][0];\n      y += factor * a * b * points[index][1];\n    }\n    bezierPoints.push([x, y]);\n  }\n  bezierPoints.push(points[n]);\n  return bezierPoints;\n};\nconst getFactorial = (n) => {\n  let result = 1;\n  switch (n) {\n    case n <= 1:\n      result = 1;\n      break;\n    case n === 2:\n      result = 2;\n      break;\n    case n === 3:\n      result = 6;\n      break;\n    case n === 24:\n      result = 24;\n      break;\n    case n === 5:\n      result = 120;\n      break;\n    default:\n      for (let i = 1; i <= n; i++) {\n        result *= i;\n      }\n      break;\n  }\n  return result;\n};\nconst getBinomialFactor = (n, index) => getFactorial(n) / (getFactorial(index) * getFactorial(n - index));\nconst getQBSplinePoints = (points) => {\n  if (points.length <= 2) {\n    return points;\n  }\n  const [n, bSplinePoints] = [2, []];\n  const m = points.length - n - 1;\n  bSplinePoints.push(points[0]);\n  for (let i = 0; i <= m; i++) {\n    for (let t = 0; t <= 1; t += 0.05) {\n      let [x, y] = [0, 0];\n      for (let k = 0; k <= n; k++) {\n        const factor = getQuadricBSplineFactor(k, t);\n        x += factor * points[i + k][0];\n        y += factor * points[i + k][1];\n      }\n      bSplinePoints.push([x, y]);\n    }\n  }\n  bSplinePoints.push(points[points.length - 1]);\n  return bSplinePoints;\n};\nconst getQuadricBSplineFactor = (k, t) => {\n  let res = 0;\n  if (k === 0) {\n    res = (t - 1) ** 2 / 2;\n  } else if (k === 1) {\n    res = (-2 * t ** 2 + 2 * t + 1) / 2;\n  } else if (k === 2) {\n    res = t ** 2 / 2;\n  }\n  return res;\n};\nexport {\n  MathDistance,\n  Mid,\n  getAngleOfThreePoints,\n  getArcPoints,\n  getAzimuth,\n  getBaseLength,\n  getBezierPoints,\n  getBinomialFactor,\n  getBisectorNormals,\n  getCircleCenterOfThreePoints,\n  getCubicValue,\n  getCurvePoints,\n  getFactorial,\n  getIntersectPoint,\n  getLeftMostControlPoint,\n  getNormal,\n  getQBSplinePoints,\n  getQuadricBSplineFactor,\n  getRightMostControlPoint,\n  getThirdPoint,\n  isClockWise,\n  wholeDistance\n};\n", "import Base from \"../base.mjs\";\nimport { getBaseLength, getThirdPoint } from \"../utils.mjs\";\nclass FineArrow extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 2;\n    this.cesium = cesium;\n    this.tailWidthFactor = 0.1;\n    this.neckWidthFactor = 0.2;\n    this.headWidthFactor = 0.25;\n    this.headAngle = Math.PI / 8.5;\n    this.neckAngle = Math.PI / 13;\n    this.minPointsForShape = 2;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    if (this.points.length < 2) {\n      this.points.push(cartesian);\n      this.onMouseMove();\n    }\n    if (this.points.length === 2) {\n      const geometryPoints = this.createGraphic(this.points);\n      this.setGeometryPoints(geometryPoints);\n      this.drawPolygon();\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const [p1, p2] = positions.map(this.cartesianToLnglat);\n    const len = getBaseLength([p1, p2]);\n    const tailWidth = len * this.tailWidthFactor;\n    const neckWidth = len * this.neckWidthFactor;\n    const headWidth = len * this.headWidthFactor;\n    const tailLeft = getThirdPoint(p2, p1, Math.PI / 2, tailWidth, true);\n    const tailRight = getThirdPoint(\n      p2,\n      p1,\n      Math.PI / 2,\n      tailWidth,\n      false\n    );\n    const headLeft = getThirdPoint(\n      p1,\n      p2,\n      this.headAngle,\n      headWidth,\n      false\n    );\n    const headRight = getThirdPoint(\n      p1,\n      p2,\n      this.headAngle,\n      headWidth,\n      true\n    );\n    const neckLeft = getThirdPoint(\n      p1,\n      p2,\n      this.neckAngle,\n      neckWidth,\n      false\n    );\n    const neckRight = getThirdPoint(\n      p1,\n      p2,\n      this.neckAngle,\n      neckWidth,\n      true\n    );\n    const points = [\n      ...tailLeft,\n      ...neckLeft,\n      ...headLeft,\n      ...p2,\n      ...headRight,\n      ...neckRight,\n      ...tailRight,\n      ...p1\n    ];\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(points);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  FineArrow as default\n};\n", "import Base from \"../base.mjs\";\nimport { isClockWise, Mid, MathDistance, getBaseLength, getQBSplinePoints, getThirdPoint, wholeDistance, getAngleOfThreePoints } from \"../utils.mjs\";\nclass AttackArrow extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.headHeightFactor = 0.18;\n    this.headWidthFactor = 0.3;\n    this.neckHeightFactor = 0.85;\n    this.neckWidthFactor = 0.15;\n    this.headTailFactor = 0.8;\n    this.minPointsForShape = 3;\n    this.setState(\"drawing\");\n    this.onDoubleClick();\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    } else if (this.points.length === 2) {\n      this.setGeometryPoints(this.points);\n      this.drawPolygon();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    this.setGeometryPoints(tempPoints);\n    if (tempPoints.length === 2) {\n      this.addTempLine();\n    } else {\n      this.removeTempLine();\n      const geometryPoints = this.createGraphic(tempPoints);\n      this.setGeometryPoints(geometryPoints);\n      this.drawPolygon();\n    }\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    let [tailLeft, tailRight] = [lnglatPoints[0], lnglatPoints[1]];\n    if (isClockWise(lnglatPoints[0], lnglatPoints[1], lnglatPoints[2])) {\n      tailLeft = lnglatPoints[1];\n      tailRight = lnglatPoints[0];\n    }\n    const midTail = Mid(tailLeft, tailRight);\n    const bonePnts = [midTail].concat(lnglatPoints.slice(2));\n    const headPnts = this.getArrowHeadPoints(bonePnts, tailLeft, tailRight);\n    const [neckLeft, neckRight] = [headPnts[0], headPnts[4]];\n    const tailWidthFactor = MathDistance(tailLeft, tailRight) / getBaseLength(bonePnts);\n    const bodyPnts = this.getArrowBodyPoints(\n      bonePnts,\n      neckLeft,\n      neckRight,\n      tailWidthFactor\n    );\n    const count = bodyPnts.length;\n    let leftPnts = [tailLeft].concat(bodyPnts.slice(0, count / 2));\n    leftPnts.push(neckLeft);\n    let rightPnts = [tailRight].concat(bodyPnts.slice(count / 2, count));\n    rightPnts.push(neckRight);\n    leftPnts = getQBSplinePoints(leftPnts);\n    rightPnts = getQBSplinePoints(rightPnts);\n    const points = leftPnts.concat(headPnts, rightPnts.reverse());\n    const temp = [].concat(...points);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n  getArrowHeadPoints(points, tailLeft, tailRight) {\n    try {\n      let len = getBaseLength(points);\n      let headHeight = len * this.headHeightFactor;\n      const headPnt = points[points.length - 1];\n      len = MathDistance(headPnt, points[points.length - 2]);\n      const tailWidth = MathDistance(tailLeft, tailRight);\n      if (headHeight > tailWidth * this.headTailFactor) {\n        headHeight = tailWidth * this.headTailFactor;\n      }\n      const headWidth = headHeight * this.headWidthFactor;\n      const neckWidth = headHeight * this.neckWidthFactor;\n      headHeight = headHeight > len ? len : headHeight;\n      const neckHeight = headHeight * this.neckHeightFactor;\n      const headEndPnt = getThirdPoint(\n        points[points.length - 2],\n        headPnt,\n        0,\n        headHeight,\n        true\n      );\n      const neckEndPnt = getThirdPoint(\n        points[points.length - 2],\n        headPnt,\n        0,\n        neckHeight,\n        true\n      );\n      const headLeft = getThirdPoint(\n        headPnt,\n        headEndPnt,\n        Math.PI / 2,\n        headWidth,\n        false\n      );\n      const headRight = getThirdPoint(\n        headPnt,\n        headEndPnt,\n        Math.PI / 2,\n        headWidth,\n        true\n      );\n      const neckLeft = getThirdPoint(\n        headPnt,\n        neckEndPnt,\n        Math.PI / 2,\n        neckWidth,\n        false\n      );\n      const neckRight = getThirdPoint(\n        headPnt,\n        neckEndPnt,\n        Math.PI / 2,\n        neckWidth,\n        true\n      );\n      return [neckLeft, headLeft, headPnt, headRight, neckRight];\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  getArrowBodyPoints(points, neckLeft, neckRight, tailWidthFactor) {\n    const allLen = wholeDistance(points);\n    const len = getBaseLength(points);\n    const tailWidth = len * tailWidthFactor;\n    const neckWidth = MathDistance(neckLeft, neckRight);\n    const widthDif = (tailWidth - neckWidth) / 2;\n    let [tempLen, leftBodyPnts, rightBodyPnts] = [0, [], []];\n    for (let i = 1; i < points.length - 1; i++) {\n      const angle = getAngleOfThreePoints(points[i - 1], points[i], points[i + 1]) / 2;\n      tempLen += MathDistance(points[i - 1], points[i]);\n      const w = (tailWidth / 2 - tempLen / allLen * widthDif) / Math.sin(angle);\n      const left = getThirdPoint(\n        points[i - 1],\n        points[i],\n        Math.PI - angle,\n        w,\n        true\n      );\n      const right = getThirdPoint(\n        points[i - 1],\n        points[i],\n        angle,\n        w,\n        false\n      );\n      leftBodyPnts.push(left);\n      rightBodyPnts.push(right);\n    }\n    return leftBodyPnts.concat(rightBodyPnts);\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n}\nexport {\n  AttackArrow as default\n};\n", "import { isClockWise, Mid, MathDistance, getBaseLength, getThirdPoint, getQBSplinePoints } from \"../utils.mjs\";\nimport AttackArrow from \"./attack-arrow.mjs\";\nclass SwallowtailAttackArrow extends AttackArrow {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.headHeightFactor = 0.18;\n    this.headWidthFactor = 0.3;\n    this.neckHeightFactor = 0.85;\n    this.neckWidthFactor = 0.15;\n    this.tailWidthFactor = 0.1;\n    this.headTailFactor = 0.8;\n    this.swallowTailFactor = 1;\n    this.swallowTailPnt = [0, 0];\n    this.minPointsForShape = 3;\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    let [tailLeft, tailRight] = [lnglatPoints[0], lnglatPoints[1]];\n    if (isClockWise(lnglatPoints[0], lnglatPoints[1], lnglatPoints[2])) {\n      tailLeft = lnglatPoints[1];\n      tailRight = lnglatPoints[0];\n    }\n    const midTail = Mid(tailLeft, tailRight);\n    const bonePnts = [midTail].concat(lnglatPoints.slice(2));\n    const headPnts = this.getArrowHeadPoints(bonePnts, tailLeft, tailRight);\n    const [neckLeft, neckRight] = [headPnts[0], headPnts[4]];\n    const tailWidth = MathDistance(tailLeft, tailRight);\n    const allLen = getBaseLength(bonePnts);\n    const len = allLen * this.tailWidthFactor * this.swallowTailFactor;\n    this.swallowTailPnt = getThirdPoint(\n      bonePnts[1],\n      bonePnts[0],\n      0,\n      len,\n      true\n    );\n    const factor = tailWidth / allLen;\n    const bodyPnts = this.getArrowBodyPoints(\n      bonePnts,\n      neckLeft,\n      neckRight,\n      factor\n    );\n    const count = bodyPnts.length;\n    let leftPnts = [tailLeft].concat(bodyPnts.slice(0, count / 2));\n    leftPnts.push(neckLeft);\n    let rightPnts = [tailRight].concat(bodyPnts.slice(count / 2, count));\n    rightPnts.push(neckRight);\n    leftPnts = getQBSplinePoints(leftPnts);\n    rightPnts = getQBSplinePoints(rightPnts);\n    const points = leftPnts.concat(headPnts, rightPnts.reverse(), [\n      this.swallowTailPnt,\n      leftPnts[0]\n    ]);\n    const temp = [].concat(...points);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n}\nexport {\n  SwallowtailAttackArrow as default\n};\n", "import { getQBSplinePoints, getBaseLength, getThirdPoint } from \"../utils.mjs\";\nimport AttackArrow from \"./attack-arrow.mjs\";\nclass SquadCombat extends AttackArrow {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.headHeightFactor = 0.18;\n    this.headWidthFactor = 0.3;\n    this.neckHeightFactor = 0.85;\n    this.neckWidthFactor = 0.15;\n    this.tailWidthFactor = 0.1;\n    this.minPointsForShape = 2;\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    } else if (this.points.length > 2) {\n      this.lineEntity && this.viewer.entities.remove(this.lineEntity);\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    this.setGeometryPoints(tempPoints);\n    if (tempPoints.length < 2) {\n      return;\n    } else {\n      const geometryPoints = this.createGraphic(tempPoints);\n      this.setGeometryPoints(geometryPoints);\n      this.drawPolygon();\n    }\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    const tailPnts = this.getTailPoints(lnglatPoints);\n    const headPnts = this.getArrowHeadPoints(\n      lnglatPoints,\n      tailPnts[0],\n      tailPnts[1]\n    );\n    const neckLeft = headPnts[0];\n    const neckRight = headPnts[4];\n    const bodyPnts = this.getArrowBodyPoints(\n      lnglatPoints,\n      neckLeft,\n      neckRight,\n      this.tailWidthFactor\n    );\n    const count = bodyPnts.length;\n    let leftPnts = [tailPnts[0]].concat(bodyPnts.slice(0, count / 2));\n    leftPnts.push(neckLeft);\n    let rightPnts = [tailPnts[1]].concat(bodyPnts.slice(count / 2, count));\n    rightPnts.push(neckRight);\n    leftPnts = getQBSplinePoints(leftPnts);\n    rightPnts = getQBSplinePoints(rightPnts);\n    const points = leftPnts.concat(headPnts, rightPnts.reverse());\n    const temp = [].concat(...points);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  getTailPoints(points) {\n    const allLen = getBaseLength(points);\n    const tailWidth = allLen * this.tailWidthFactor;\n    const tailLeft = getThirdPoint(\n      points[1],\n      points[0],\n      Math.PI / 2,\n      tailWidth,\n      false\n    );\n    const tailRight = getThirdPoint(\n      points[1],\n      points[0],\n      Math.PI / 2,\n      tailWidth,\n      true\n    );\n    return [tailLeft, tailRight];\n  }\n}\nexport {\n  SquadCombat as default\n};\n", "import { getQBSplinePoints, getBaseLength, getThirdPoint } from \"../utils.mjs\";\nimport SquadCombat from \"./squad-combat.mjs\";\nclass SwallowtailSquadCombat extends SquadCombat {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.headHeightFactor = 0.18;\n    this.headWidthFactor = 0.3;\n    this.neckHeightFactor = 0.85;\n    this.neckWidthFactor = 0.15;\n    this.tailWidthFactor = 0.1;\n    this.swallowTailFactor = 1;\n    this.minPointsForShape = 2;\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    const tailPnts = this.getTailPoints(lnglatPoints);\n    const headPnts = this.getArrowHeadPoints(\n      lnglatPoints,\n      tailPnts[0],\n      tailPnts[2]\n    );\n    const neckLeft = headPnts[0];\n    const neckRight = headPnts[4];\n    const bodyPnts = this.getArrowBodyPoints(\n      lnglatPoints,\n      neckLeft,\n      neckRight,\n      this.tailWidthFactor\n    );\n    const count = bodyPnts.length;\n    let leftPnts = [tailPnts[0]].concat(bodyPnts.slice(0, count / 2));\n    leftPnts.push(neckLeft);\n    let rightPnts = [tailPnts[2]].concat(bodyPnts.slice(count / 2, count));\n    rightPnts.push(neckRight);\n    leftPnts = getQBSplinePoints(leftPnts);\n    rightPnts = getQBSplinePoints(rightPnts);\n    const points = leftPnts.concat(headPnts, rightPnts.reverse(), [\n      tailPnts[1],\n      leftPnts[0]\n    ]);\n    const temp = [].concat(...points);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  getTailPoints(points) {\n    const allLen = getBaseLength(points);\n    const tailWidth = allLen * this.tailWidthFactor;\n    const tailLeft = getThirdPoint(\n      points[1],\n      points[0],\n      Math.PI / 2,\n      tailWidth,\n      false\n    );\n    const tailRight = getThirdPoint(\n      points[1],\n      points[0],\n      Math.PI / 2,\n      tailWidth,\n      true\n    );\n    const len = tailWidth * this.swallowTailFactor;\n    const swallowTailPnt = getThirdPoint(\n      points[1],\n      points[0],\n      0,\n      len,\n      true\n    );\n    return [tailLeft, swallowTailPnt, tailRight];\n  }\n}\nexport {\n  SwallowtailSquadCombat as default\n};\n", "import { MathDistance, getThirdPoint } from \"../utils.mjs\";\nimport Base from \"../base.mjs\";\nclass StraightArrow extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 3e6;\n    this.cesium = cesium;\n    this.minPointsForShape = 2;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"line\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    if (this.points.length < 2) {\n      this.points.push(cartesian);\n      this.onMouseMove();\n    }\n    if (this.points.length === 2) {\n      const geometryPoints = this.createGraphic(this.points);\n      this.setGeometryPoints(geometryPoints);\n      this.drawLine();\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawLine();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawLine();\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const [pnt1, pnt2] = positions.map(this.cartesianToLnglat);\n    const distance = MathDistance(pnt1, pnt2);\n    let len = distance / this.arrowLengthScale;\n    len = len > this.maxArrowLength ? this.maxArrowLength : len;\n    const leftPnt = getThirdPoint(\n      pnt1,\n      pnt2,\n      Math.PI / 6,\n      len / 2,\n      false\n    );\n    const rightPnt = getThirdPoint(\n      pnt1,\n      pnt2,\n      Math.PI / 6,\n      len / 2,\n      true\n    );\n    const points = [...pnt1, ...pnt2, ...leftPnt, ...pnt2, ...rightPnt];\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(points);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  StraightArrow as default\n};\n", "import { MathDistance, getThirdPoint, getCurvePoints, wholeDistance } from \"../utils.mjs\";\nimport Base from \"../base.mjs\";\nclass CurvedArrow extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 3e6;\n    this.cesium = cesium;\n    this.t = 0.3;\n    this.minPointsForShape = 2;\n    this.setState(\"drawing\");\n    this.onDoubleClick();\n  }\n  getType() {\n    return \"line\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    let geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawLine();\n  }\n  createStraightArrow(positions) {\n    const [pnt1, pnt2] = positions.map(this.cartesianToLnglat);\n    const distance = MathDistance(pnt1, pnt2);\n    let len = distance / this.arrowLengthScale;\n    len = len > this.maxArrowLength ? this.maxArrowLength : len;\n    const leftPnt = getThirdPoint(\n      pnt1,\n      pnt2,\n      Math.PI / 6,\n      len / 2,\n      false\n    );\n    const rightPnt = getThirdPoint(\n      pnt1,\n      pnt2,\n      Math.PI / 6,\n      len / 2,\n      true\n    );\n    const points = [...pnt1, ...pnt2, ...leftPnt, ...pnt2, ...rightPnt];\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(points);\n    return cartesianPoints;\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawLine();\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    if (positions.length === 2) {\n      return this.createStraightArrow(positions);\n    }\n    const curvePoints = getCurvePoints(this.t, lnglatPoints);\n    lnglatPoints[lnglatPoints.length - 2];\n    const pnt2 = lnglatPoints[lnglatPoints.length - 1];\n    const distance = wholeDistance(lnglatPoints);\n    let len = distance / this.arrowLengthScale;\n    len = len > this.maxArrowLength ? this.maxArrowLength : len;\n    const leftPnt = getThirdPoint(\n      curvePoints[curvePoints.length - 2],\n      curvePoints[curvePoints.length - 1],\n      Math.PI / 6,\n      len / 2,\n      false\n    );\n    const rightPnt = getThirdPoint(\n      curvePoints[curvePoints.length - 2],\n      curvePoints[curvePoints.length - 1],\n      Math.PI / 6,\n      len / 2,\n      true\n    );\n    const temp = [].concat(...curvePoints);\n    const points = [...temp, ...leftPnt, ...pnt2, ...rightPnt];\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(points);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  CurvedArrow as default\n};\n", "import FineArrow from \"./fine-arrow.mjs\";\nimport { getBaseLength, getThirdPoint } from \"../utils.mjs\";\nclass AssaultDirection extends FineArrow {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 2;\n    this.cesium = cesium;\n    this.tailWidthFactor = 0.08;\n    this.neckWidthFactor = 0.1;\n    this.headWidthFactor = 0.13;\n    this.headAngle = Math.PI / 4;\n    this.neckAngle = Math.PI * 0.17741;\n    this.minPointsForShape = 2;\n    this.setState(\"drawing\");\n  }\n  createGraphic(positions) {\n    const [p1, p2] = positions.map(this.cartesianToLnglat);\n    const len = getBaseLength([p1, p2]) * 1.5;\n    const tailWidth = len * this.tailWidthFactor;\n    const neckWidth = len * this.neckWidthFactor;\n    const headWidth = len * this.headWidthFactor;\n    const tailLeft = getThirdPoint(p2, p1, Math.PI / 2, tailWidth, true);\n    const tailRight = getThirdPoint(\n      p2,\n      p1,\n      Math.PI / 2,\n      tailWidth,\n      false\n    );\n    const headLeft = getThirdPoint(\n      p1,\n      p2,\n      this.headAngle,\n      headWidth,\n      false\n    );\n    const headRight = getThirdPoint(\n      p1,\n      p2,\n      this.headAngle,\n      headWidth,\n      true\n    );\n    const neckLeft = getThirdPoint(\n      p1,\n      p2,\n      this.neckAngle,\n      neckWidth,\n      false\n    );\n    const neckRight = getThirdPoint(\n      p1,\n      p2,\n      this.neckAngle,\n      neckWidth,\n      true\n    );\n    const points = [\n      ...tailLeft,\n      ...neckLeft,\n      ...headLeft,\n      ...p2,\n      ...headRight,\n      ...neckRight,\n      ...tailRight,\n      ...p1\n    ];\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(points);\n    return cartesianPoints;\n  }\n}\nexport {\n  AssaultDirection as default\n};\n", "import Base from \"../base.mjs\";\nimport { Mid, isClockWise, getBezierPoints, MathDistance, getAngleOfThreePoints, getThirdPoint, getBaseLength, wholeDistance } from \"../utils.mjs\";\nclass DoubleArrow extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 2;\n    this.llBodyPnts = [];\n    this.rrBodyPnts = [];\n    this.cesium = cesium;\n    this.headHeightFactor = 0.25;\n    this.headWidthFactor = 0.3;\n    this.neckHeightFactor = 0.85;\n    this.neckWidthFactor = 0.15;\n    this.connPoint = [0, 0];\n    this.tempPoint4 = [0, 0];\n    this.minPointsForShape = 4;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    } else if (this.points.length === 2) {\n      this.setGeometryPoints(this.points);\n      this.drawPolygon();\n    } else if (this.points.length === 3) {\n      this.lineEntity && this.viewer.entities.remove(this.lineEntity);\n    } else {\n      this.finishDrawing();\n    }\n  }\n  finishDrawing() {\n    this.curveControlPointLeft = this.cesium.Cartesian3.fromDegrees(\n      this.llBodyPnts[2][0],\n      this.llBodyPnts[2][1]\n    );\n    this.curveControlPointRight = this.cesium.Cartesian3.fromDegrees(\n      this.rrBodyPnts[1][0],\n      this.rrBodyPnts[1][1]\n    );\n    super.finishDrawing();\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    this.setGeometryPoints(tempPoints);\n    if (tempPoints.length === 2) {\n      this.addTempLine();\n    } else if (tempPoints.length > 2) {\n      this.removeTempLine();\n      const geometryPoints = this.createGraphic(tempPoints);\n      this.setGeometryPoints(geometryPoints);\n      this.drawPolygon();\n    }\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * Generate geometric shapes based on key points.\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    const [pnt1, pnt2, pnt3] = [\n      lnglatPoints[0],\n      lnglatPoints[1],\n      lnglatPoints[2]\n    ];\n    const count = lnglatPoints.length;\n    if (count === 3) {\n      this.tempPoint4 = this.getTempPoint4(pnt1, pnt2, pnt3);\n      this.connPoint = Mid(pnt1, pnt2);\n    } else if (count === 4) {\n      this.tempPoint4 = lnglatPoints[3];\n      this.connPoint = Mid(pnt1, pnt2);\n    } else {\n      this.tempPoint4 = lnglatPoints[3];\n      this.connPoint = lnglatPoints[4];\n    }\n    let leftArrowPnts;\n    let rightArrowPnts;\n    this.isClockWise = isClockWise(pnt1, pnt2, pnt3);\n    if (this.isClockWise) {\n      leftArrowPnts = this.getArrowPoints(\n        pnt1,\n        this.connPoint,\n        this.tempPoint4,\n        false\n      );\n      rightArrowPnts = this.getArrowPoints(this.connPoint, pnt2, pnt3, true);\n    } else {\n      leftArrowPnts = this.getArrowPoints(pnt2, this.connPoint, pnt3, false);\n      rightArrowPnts = this.getArrowPoints(\n        this.connPoint,\n        pnt1,\n        this.tempPoint4,\n        true\n      );\n    }\n    const m = leftArrowPnts.length;\n    const t = (m - 5) / 2;\n    const llBodyPnts = leftArrowPnts.slice(0, t);\n    const lArrowPnts = leftArrowPnts.slice(t, t + 5);\n    let lrBodyPnts = leftArrowPnts.slice(t + 5, m);\n    this.llBodyPnts = llBodyPnts;\n    let rlBodyPnts = rightArrowPnts.slice(0, t);\n    const rArrowPnts = rightArrowPnts.slice(t, t + 5);\n    const rrBodyPnts = rightArrowPnts.slice(t + 5, m);\n    this.rrBodyPnts = rrBodyPnts;\n    rlBodyPnts = getBezierPoints(rlBodyPnts);\n    const bodyPnts = getBezierPoints(\n      rrBodyPnts.concat(llBodyPnts.slice(1))\n    );\n    lrBodyPnts = getBezierPoints(lrBodyPnts);\n    const pnts = rlBodyPnts.concat(\n      rArrowPnts,\n      bodyPnts,\n      lArrowPnts,\n      lrBodyPnts\n    );\n    const temp = [].concat(...pnts);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  getTempPoint4(linePnt1, linePnt2, point) {\n    const midPnt = Mid(linePnt1, linePnt2);\n    const len = MathDistance(midPnt, point);\n    const angle = getAngleOfThreePoints(linePnt1, midPnt, point);\n    let symPnt = [0, 0];\n    let distance1;\n    let distance2;\n    let mid;\n    if (angle < Math.PI / 2) {\n      distance1 = len * Math.sin(angle);\n      distance2 = len * Math.cos(angle);\n      mid = getThirdPoint(\n        linePnt1,\n        midPnt,\n        Math.PI / 2,\n        distance1,\n        false\n      );\n      symPnt = getThirdPoint(midPnt, mid, Math.PI / 2, distance2, true);\n    } else if (angle >= Math.PI / 2 && angle < Math.PI) {\n      distance1 = len * Math.sin(Math.PI - angle);\n      distance2 = len * Math.cos(Math.PI - angle);\n      mid = getThirdPoint(\n        linePnt1,\n        midPnt,\n        Math.PI / 2,\n        distance1,\n        false\n      );\n      symPnt = getThirdPoint(midPnt, mid, Math.PI / 2, distance2, false);\n    } else if (angle >= Math.PI && angle < Math.PI * 1.5) {\n      distance1 = len * Math.sin(angle - Math.PI);\n      distance2 = len * Math.cos(angle - Math.PI);\n      mid = getThirdPoint(linePnt1, midPnt, Math.PI / 2, distance1, true);\n      symPnt = getThirdPoint(midPnt, mid, Math.PI / 2, distance2, true);\n    } else {\n      distance1 = len * Math.sin(Math.PI * 2 - angle);\n      distance2 = len * Math.cos(Math.PI * 2 - angle);\n      mid = getThirdPoint(linePnt1, midPnt, Math.PI / 2, distance1, true);\n      symPnt = getThirdPoint(midPnt, mid, Math.PI / 2, distance2, false);\n    }\n    return symPnt;\n  }\n  getArrowPoints(pnt1, pnt2, pnt3, clockWise) {\n    const midPnt = Mid(pnt1, pnt2);\n    const len = MathDistance(midPnt, pnt3);\n    let midPnt1 = getThirdPoint(pnt3, midPnt, 0, len * 0.3, true);\n    let midPnt2 = getThirdPoint(pnt3, midPnt, 0, len * 0.5, true);\n    midPnt1 = getThirdPoint(\n      midPnt,\n      midPnt1,\n      Math.PI / 2,\n      len / 5,\n      clockWise\n    );\n    midPnt2 = getThirdPoint(\n      midPnt,\n      midPnt2,\n      Math.PI / 2,\n      len / 4,\n      clockWise\n    );\n    const points = [midPnt, midPnt1, midPnt2, pnt3];\n    const arrowPnts = this.getArrowHeadPoints(points);\n    if (arrowPnts && Array.isArray(arrowPnts) && arrowPnts.length > 0) {\n      const neckLeftPoint = arrowPnts[0];\n      const neckRightPoint = arrowPnts[4];\n      const tailWidthFactor = MathDistance(pnt1, pnt2) / getBaseLength(points) / 2;\n      const bodyPnts = this.getArrowBodyPoints(\n        points,\n        neckLeftPoint,\n        neckRightPoint,\n        tailWidthFactor\n      );\n      if (bodyPnts) {\n        const n = bodyPnts.length;\n        let lPoints = bodyPnts.slice(0, n / 2);\n        let rPoints = bodyPnts.slice(n / 2, n);\n        lPoints.push(neckLeftPoint);\n        rPoints.push(neckRightPoint);\n        lPoints = lPoints.reverse();\n        lPoints.push(pnt2);\n        rPoints = rPoints.reverse();\n        rPoints.push(pnt1);\n        return lPoints.reverse().concat(arrowPnts, rPoints);\n      }\n    } else {\n      throw new Error(\"Interpolation Error\");\n    }\n  }\n  getArrowBodyPoints(points, neckLeft, neckRight, tailWidthFactor) {\n    const allLen = wholeDistance(points);\n    const len = getBaseLength(points);\n    const tailWidth = len * tailWidthFactor;\n    const neckWidth = MathDistance(neckLeft, neckRight);\n    const widthDif = (tailWidth - neckWidth) / 2;\n    let tempLen = 0;\n    let leftBodyPnts = [];\n    let rightBodyPnts = [];\n    for (let i = 1; i < points.length - 1; i++) {\n      const angle = getAngleOfThreePoints(points[i - 1], points[i], points[i + 1]) / 2;\n      tempLen += MathDistance(points[i - 1], points[i]);\n      const w = (tailWidth / 2 - tempLen / allLen * widthDif) / Math.sin(angle);\n      const left = getThirdPoint(\n        points[i - 1],\n        points[i],\n        Math.PI - angle,\n        w,\n        true\n      );\n      const right = getThirdPoint(\n        points[i - 1],\n        points[i],\n        angle,\n        w,\n        false\n      );\n      leftBodyPnts.push(left);\n      rightBodyPnts.push(right);\n    }\n    return leftBodyPnts.concat(rightBodyPnts);\n  }\n  getArrowHeadPoints(points) {\n    const len = getBaseLength(points);\n    const headHeight = len * this.headHeightFactor;\n    const headPnt = points[points.length - 1];\n    const headWidth = headHeight * this.headWidthFactor;\n    const neckWidth = headHeight * this.neckWidthFactor;\n    const neckHeight = headHeight * this.neckHeightFactor;\n    const headEndPnt = getThirdPoint(\n      points[points.length - 2],\n      headPnt,\n      0,\n      headHeight,\n      true\n    );\n    const neckEndPnt = getThirdPoint(\n      points[points.length - 2],\n      headPnt,\n      0,\n      neckHeight,\n      true\n    );\n    const headLeft = getThirdPoint(\n      headPnt,\n      headEndPnt,\n      Math.PI / 2,\n      headWidth,\n      false\n    );\n    const headRight = getThirdPoint(\n      headPnt,\n      headEndPnt,\n      Math.PI / 2,\n      headWidth,\n      true\n    );\n    const neckLeft = getThirdPoint(\n      headPnt,\n      neckEndPnt,\n      Math.PI / 2,\n      neckWidth,\n      false\n    );\n    const neckRight = getThirdPoint(\n      headPnt,\n      neckEndPnt,\n      Math.PI / 2,\n      neckWidth,\n      true\n    );\n    return [neckLeft, headLeft, headPnt, headRight, neckRight];\n  }\n  getPoints() {\n    return this.points;\n  }\n  getBezierControlPointforGrowthAnimation() {\n    return this.isClockWise ? {\n      left: this.curveControlPointLeft,\n      right: this.curveControlPointRight\n    } : {\n      right: this.curveControlPointLeft,\n      left: this.curveControlPointRight\n    };\n  }\n}\nexport {\n  DoubleArrow as default\n};\n", "import Base from \"../base.mjs\";\nclass FreehandLine extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.freehand = true;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"line\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    } else {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    this.points.push(cartesian);\n    this.setGeometryPoints(this.points);\n    this.drawLine();\n    this.eventDispatcher.dispatchEvent(\"drawUpdate\", cartesian);\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    this.setGeometryPoints(this.points);\n    this.drawLine();\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  FreehandLine as default\n};\n", "import Base from \"../base.mjs\";\nclass FreehandPolygon extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.freehand = true;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length > 2) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length > 2) {\n      this.setGeometryPoints(this.points);\n      this.drawPolygon();\n      this.eventDispatcher.dispatchEvent(\"drawUpdate\", cartesian);\n    }\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    this.setGeometryPoints(this.points);\n    this.drawPolygon();\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  FreehandPolygon as default\n};\n", "import { getCurvePoints } from \"../utils.mjs\";\nimport Base from \"../base.mjs\";\nclass Curve extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 3e6;\n    this.cesium = cesium;\n    this.t = 0.3;\n    this.setState(\"drawing\");\n    this.onDoubleClick();\n  }\n  getType() {\n    return \"line\";\n  }\n  /**\n   * Points are only added upon click events.\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    } else if (this.points.length === 2) {\n      this.setGeometryPoints(this.points);\n      this.drawLine();\n    }\n  }\n  /**\n   * Draw the shape based on the mouse movement position during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    let geometryPoints = [];\n    if (tempPoints.length === 2) {\n      this.setGeometryPoints(tempPoints);\n      this.drawLine();\n    } else {\n      geometryPoints = this.createGraphic(tempPoints);\n      this.setGeometryPoints(geometryPoints);\n    }\n  }\n  /**\n   * During editing mode, drag key points to update the corresponding data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawLine();\n  }\n  /**\n   * Generate geometric shape points based on key points..\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    const curvePoints = getCurvePoints(this.t, lnglatPoints);\n    const temp = [].concat(...curvePoints);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Curve as default\n};\n", "import Base from \"../base.mjs\";\nimport { Mid } from \"../utils.mjs\";\nclass Ellipse extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.freehand = true;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length > 1) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    const pnt1 = lnglatPoints[0];\n    const pnt2 = lnglatPoints[1];\n    const center = Mid(pnt1, pnt2);\n    const majorRadius = Math.abs((pnt1[0] - pnt2[0]) / 2);\n    const minorRadius = Math.abs((pnt1[1] - pnt2[1]) / 2);\n    const res = this.generatePoints(center, majorRadius, minorRadius);\n    const temp = [].concat(...res);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  generatePoints(center, majorRadius, minorRadius) {\n    let [x, y, angle, points] = [null, null, 0, []];\n    for (let i = 0; i <= 100; i++) {\n      angle = Math.PI * 2 * i / 100;\n      x = center[0] + majorRadius * Math.cos(angle);\n      y = center[1] + minorRadius * Math.sin(angle);\n      points.push([x, y]);\n    }\n    return points;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Ellipse as default\n};\n", "import Base from \"../base.mjs\";\nimport { Mid, MathDistance, getThirdPoint, getCircleCenterOfThreePoints, getAzimuth, isClockWise, getArcPoints } from \"../utils.mjs\";\nclass Lune extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.freehand = true;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length === 2) ;\n    else if (this.points.length > 2) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    if (lnglatPoints.length === 2) {\n      const mid = Mid(lnglatPoints[0], lnglatPoints[1]);\n      const d = MathDistance(lnglatPoints[0], mid);\n      const pnt = getThirdPoint(\n        lnglatPoints[0],\n        mid,\n        Math.PI / 2,\n        d,\n        false\n      );\n      lnglatPoints.push(pnt);\n    }\n    let [pnt1, pnt2, pnt3, startAngle, endAngle] = [\n      lnglatPoints[0],\n      lnglatPoints[1],\n      lnglatPoints[2],\n      void 0,\n      void 0\n    ];\n    const center = getCircleCenterOfThreePoints(pnt1, pnt2, pnt3);\n    const radius = MathDistance(pnt1, center);\n    const angle1 = getAzimuth(pnt1, center);\n    const angle2 = getAzimuth(pnt2, center);\n    if (isClockWise(pnt1, pnt2, pnt3)) {\n      startAngle = angle2;\n      endAngle = angle1;\n    } else {\n      startAngle = angle1;\n      endAngle = angle2;\n    }\n    let points = getArcPoints(center, radius, startAngle, endAngle);\n    const temp = [].concat(...points);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Lune as default\n};\n", "import Base from \"../base.mjs\";\nclass Rectangle extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length > 1) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  createGraphic(positions) {\n    const [p1, p2] = positions.map(this.cartesianToLnglat);\n    const coords = [...p1, p1[0], p2[1], ...p2, p2[0], p1[1], ...p1];\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(coords);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Rectangle as default\n};\n", "import Base from \"../base.mjs\";\nclass Triangle extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length === 3) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    this.setGeometryPoints(tempPoints);\n    if (tempPoints.length === 2) {\n      this.addTempLine();\n    } else {\n      this.removeTempLine();\n      this.drawPolygon();\n    }\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    this.setGeometryPoints(this.points);\n    this.drawPolygon();\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Triangle as default\n};\n", "import Base from \"../base.mjs\";\nclass Polygon extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.setState(\"drawing\");\n    this.onDoubleClick();\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    this.setGeometryPoints(tempPoints);\n    if (tempPoints.length === 2) {\n      this.addTempLine();\n    } else {\n      this.removeTempLine();\n      this.drawPolygon();\n    }\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    this.setGeometryPoints(this.points);\n    this.drawPolygon();\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Polygon as default\n};\n", "import Base from \"../base.mjs\";\nimport { MathDistance } from \"../utils.mjs\";\nclass Circle extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.freehand = true;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length > 1) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    const center = lnglatPoints[0];\n    const pnt2 = lnglatPoints[1];\n    const radius = MathDistance(center, pnt2);\n    const res = this.generatePoints(center, radius);\n    const temp = [].concat(...res);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  generatePoints(center, radius) {\n    let x, y, angle;\n    const points = [];\n    for (let i = 0; i <= 100; i++) {\n      angle = Math.PI * 2 * i / 100;\n      x = center[0] + radius * Math.cos(angle);\n      y = center[1] + radius * Math.sin(angle);\n      points.push([x, y]);\n    }\n    return points;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Circle as default\n};\n", "import Base from \"../base.mjs\";\nimport { MathDistance, getAzimuth, getArcPoints } from \"../utils.mjs\";\nclass Sector extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length === 3) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    this.setGeometryPoints(tempPoints);\n    if (tempPoints.length === 2) {\n      this.addTempLine();\n    } else {\n      this.removeTempLine();\n      const geometryPoints = this.createGraphic(tempPoints);\n      this.setGeometryPoints(geometryPoints);\n      this.drawPolygon();\n    }\n  }\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    const [center, pnt2, pnt3] = [\n      lnglatPoints[0],\n      lnglatPoints[1],\n      lnglatPoints[2]\n    ];\n    const radius = MathDistance(pnt2, center);\n    const startAngle = getAzimuth(pnt2, center);\n    const endAngle = getAzimuth(pnt3, center);\n    const res = getArcPoints(center, radius, startAngle, endAngle);\n    res.push(center, res[0]);\n    const temp = [].concat(...res);\n    const cartesianPoints = this.cesium.Cartesian3.fromDegreesArray(temp);\n    return cartesianPoints;\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Sector as default\n};\n", "import Base from \"../base.mjs\";\nimport { Mid, MathDistance, getThirdPoint, getBisectorNormals, getCubicValue } from \"../utils.mjs\";\nclass GatheringPlace extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.freehand = true;\n    this.t = 0.4;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    } else if (this.points.length === 2) ;\n    else if (this.points.length > 2) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  createGraphic(positions) {\n    let arr = [];\n    let lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    }).slice(0);\n    if (lnglatPoints.length === 2) {\n      const mid2 = Mid(lnglatPoints[0], lnglatPoints[1]);\n      const d = MathDistance(lnglatPoints[0], mid2);\n      const pnt = getThirdPoint(\n        lnglatPoints[0],\n        mid2,\n        Math.PI / 2,\n        d,\n        true\n      );\n      lnglatPoints = [lnglatPoints[0], pnt, lnglatPoints[1]];\n    }\n    let mid = Mid(lnglatPoints[0], lnglatPoints[2]);\n    lnglatPoints.push(mid, lnglatPoints[0], lnglatPoints[1]);\n    let [normals, pnt1, pnt2, pnt3, pList] = [\n      [],\n      void 0,\n      void 0,\n      void 0,\n      []\n    ];\n    for (let i = 0; i < lnglatPoints.length - 2; i++) {\n      pnt1 = lnglatPoints[i];\n      pnt2 = lnglatPoints[i + 1];\n      pnt3 = lnglatPoints[i + 2];\n      let normalPoints = getBisectorNormals(\n        this.t,\n        pnt1,\n        pnt2,\n        pnt3\n      );\n      normals = normals.concat(normalPoints);\n    }\n    let count = normals.length;\n    normals = [normals[count - 1]].concat(normals.slice(0, count - 1));\n    for (let i = 0; i < lnglatPoints.length - 2; i++) {\n      pnt1 = lnglatPoints[i];\n      pnt2 = lnglatPoints[i + 1];\n      pList.push(pnt1);\n      for (let t = 0; t <= 40; t++) {\n        let pnt = getCubicValue(\n          t / 40,\n          pnt1,\n          normals[i * 2],\n          normals[i * 2 + 1],\n          pnt2\n        );\n        pList.push(pnt);\n      }\n      pList.push(pnt2);\n    }\n    let points = pList;\n    for (let i = 0; i < points.length; i++) {\n      arr = arr.concat(points[i]);\n    }\n    const cartesianPoints = Cesium.Cartesian3.fromDegreesArray(arr);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  GatheringPlace as default\n};\n", "import { getCircleCenterOfThreePoints, MathDistance, getAzimuth, isClockWise, getArcPoints } from \"../utils.mjs\";\nimport Base from \"../base.mjs\";\nclass Arc extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 3e6;\n    this.cesium = cesium;\n    this.t = 0.3;\n    this.setState(\"drawing\");\n    this.onDoubleClick();\n  }\n  getType() {\n    return \"line\";\n  }\n  /**\n   * Points are only added upon click events.\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    } else if (this.points.length === 2) {\n      this.setGeometryPoints(this.points);\n      this.drawLine();\n    } else if (this.points.length > 2) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw the shape based on the mouse movement position during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    let geometryPoints = [];\n    if (tempPoints.length === 2) {\n      this.setGeometryPoints(tempPoints);\n      this.drawLine();\n    } else {\n      geometryPoints = this.createGraphic(tempPoints);\n      this.setGeometryPoints(geometryPoints);\n    }\n  }\n  /**\n   * During editing mode, drag key points to update the corresponding data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawLine();\n  }\n  /**\n   * Generate geometric shape points based on key points..\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    let count = lnglatPoints.length;\n    let arr = [];\n    if (count < 2) return;\n    if (count === 2) {\n      for (let i = 0; i < lnglatPoints.length; i++) {\n        arr = arr.concat(lnglatPoints[i]);\n      }\n      const cartesianPoints = Cesium.Cartesian3.fromDegreesArray(arr);\n      return cartesianPoints;\n    } else {\n      let [pnt1, pnt2, pnt3, startAngle, endAngle] = [\n        lnglatPoints[0],\n        lnglatPoints[1],\n        lnglatPoints[2],\n        null,\n        null\n      ];\n      let center = getCircleCenterOfThreePoints(pnt1, pnt2, pnt3);\n      let radius = MathDistance(pnt1, center);\n      let angle1 = getAzimuth(pnt1, center);\n      let angle2 = getAzimuth(pnt2, center);\n      if (isClockWise(pnt1, pnt2, pnt3)) {\n        startAngle = angle2;\n        endAngle = angle1;\n      } else {\n        startAngle = angle1;\n        endAngle = angle2;\n      }\n      let points = getArcPoints(center, radius, startAngle, endAngle);\n      for (let i = 0; i < points.length; i++) {\n        arr = arr.concat(points[i]);\n      }\n      const cartesianPoints = Cesium.Cartesian3.fromDegreesArray(arr);\n      return cartesianPoints;\n    }\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Arc as default\n};\n", "import Base from \"../base.mjs\";\nclass Polyline extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.arrowLengthScale = 5;\n    this.maxArrowLength = 3e6;\n    this.cesium = cesium;\n    this.t = 0.3;\n    this.setState(\"drawing\");\n    this.onDoubleClick();\n  }\n  getType() {\n    return \"line\";\n  }\n  /**\n   * Points are only added upon click events.\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length < 2) {\n      this.onMouseMove();\n    } else if (this.points.length === 2) {\n      this.setGeometryPoints(this.points);\n      this.drawLine();\n    }\n  }\n  /**\n   * Draw the shape based on the mouse movement position during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    let geometryPoints = [];\n    if (tempPoints.length === 2) {\n      this.setGeometryPoints(tempPoints);\n      this.drawLine();\n    } else {\n      geometryPoints = this.createGraphic(tempPoints);\n      this.setGeometryPoints(geometryPoints);\n    }\n  }\n  /**\n   * During editing mode, drag key points to update the corresponding data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawLine();\n  }\n  /**\n   * Generate geometric shape points based on key points..\n   */\n  createGraphic(positions) {\n    const lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    let arr = [];\n    for (let i = 0; i < lnglatPoints.length; i++) {\n      arr = arr.concat(lnglatPoints[i]);\n    }\n    const cartesianPoints = Cesium.Cartesian3.fromDegreesArray(arr);\n    return cartesianPoints;\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Polyline as default\n};\n", "import Base from \"../base.mjs\";\nimport { getBisectorNormals, getCubicValue } from \"../utils.mjs\";\nclass ClosedCurve extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.freehand = true;\n    this.t = 0.4;\n    this.setState(\"drawing\");\n    this.onDoubleClick();\n  }\n  getType() {\n    return \"polygon\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.onMouseMove();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    const geometryPoints = this.createGraphic(tempPoints);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    const geometryPoints = this.createGraphic(this.points);\n    this.setGeometryPoints(geometryPoints);\n    this.drawPolygon();\n  }\n  createGraphic(positions) {\n    let arr = [];\n    let lnglatPoints = positions.map((pnt) => {\n      return this.cartesianToLnglat(pnt);\n    });\n    if (lnglatPoints.length === 2) {\n      for (let i = 0; i < lnglatPoints.length; i++) {\n        arr = arr.concat(lnglatPoints[i]);\n      }\n      const cartesianPoints = Cesium.Cartesian3.fromDegreesArray(arr);\n      return cartesianPoints;\n    } else {\n      let pnts = lnglatPoints.slice(0);\n      pnts.push(pnts[0], pnts[1]);\n      let [normals, pList] = [[], []];\n      for (let i = 0; i < pnts.length - 2; i++) {\n        let normalPoints = getBisectorNormals(\n          this.t,\n          pnts[i],\n          pnts[i + 1],\n          pnts[i + 2]\n        );\n        normals = normals.concat(normalPoints);\n      }\n      let count = normals.length;\n      normals = [normals[count - 1]].concat(normals.slice(0, count - 1));\n      for (let i = 0; i < pnts.length - 2; i++) {\n        let pnt1 = pnts[i];\n        let pnt2 = pnts[i + 1];\n        pList.push(pnt1);\n        for (let t = 0; t <= 40; t++) {\n          let pnt = getCubicValue(\n            t / 40,\n            pnt1,\n            normals[i * 2],\n            normals[i * 2 + 1],\n            pnt2\n          );\n          pList.push(pnt);\n        }\n        pList.push(pnt2);\n      }\n      let points = pList;\n      for (let i = 0; i < points.length; i++) {\n        arr = arr.concat(points[i]);\n      }\n      const cartesianPoints = Cesium.Cartesian3.fromDegreesArray(arr);\n      return cartesianPoints;\n    }\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  ClosedCurve as default\n};\n", "import Base from \"../base.mjs\";\nclass Point extends Base {\n  constructor(cesium, viewer, style) {\n    super(cesium, viewer, style);\n    this.points = [];\n    this.cesium = cesium;\n    this.setState(\"drawing\");\n  }\n  getType() {\n    return \"point\";\n  }\n  /**\n   * Add points only on click events\n   */\n  addPoint(cartesian) {\n    this.points.push(cartesian);\n    if (this.points.length === 1) {\n      this.drawPoint();\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Draw a shape based on mouse movement points during the initial drawing.\n   */\n  updateMovingPoint(cartesian) {\n    const tempPoints = [...this.points, cartesian];\n    this.setGeometryPoints(tempPoints);\n  }\n  /**\n   * In edit mode, drag key points to update corresponding key point data.\n   */\n  updateDraggingPoint(cartesian, index) {\n    this.points[index] = cartesian;\n    this.setGeometryPoints(this.points);\n  }\n  getPoints() {\n    return this.points;\n  }\n}\nexport {\n  Point as default\n};\n", "import FineArrow from \"./arrow/fine-arrow.mjs\";\nimport AttackArrow from \"./arrow/attack-arrow.mjs\";\nimport SwallowtailAttackArrow from \"./arrow/swallowtail-attack-arrow.mjs\";\nimport SquadCombat from \"./arrow/squad-combat.mjs\";\nimport SwallowtailSquadCombat from \"./arrow/swallowtail-squad-combat.mjs\";\nimport StraightArrow from \"./arrow/straight-arrow.mjs\";\nimport CurvedArrow from \"./arrow/curved-arrow.mjs\";\nimport AssaultDirection from \"./arrow/assault-direction.mjs\";\nimport DoubleArrow from \"./arrow/double-arrow.mjs\";\nimport FreehandLine from \"./line/freehand-line.mjs\";\nimport FreehandPolygon from \"./polygon/freehand-polygon.mjs\";\nimport Curve from \"./line/curve.mjs\";\nimport Ellipse from \"./polygon/ellipse.mjs\";\nimport Lune from \"./polygon/lune.mjs\";\nimport Rectangle from \"./polygon/rectangle.mjs\";\nimport Triangle from \"./polygon/triangle.mjs\";\nimport Polygon from \"./polygon/polygon.mjs\";\nimport Circle from \"./polygon/circle.mjs\";\nimport Sector from \"./polygon/sector.mjs\";\nimport GatheringPlace from \"./polygon/gathering-place.mjs\";\nimport Arc from \"./line/arc.mjs\";\nimport Polyline from \"./line/polyline.mjs\";\nimport ClosedCurve from \"./polygon/closed-curve.mjs\";\nimport Point from \"./point/point.mjs\";\nconst CesiumPlot = {\n  FineArrow,\n  AttackArrow,\n  SwallowtailAttackArrow,\n  SquadCombat,\n  SwallowtailSquadCombat,\n  StraightArrow,\n  CurvedArrow,\n  AssaultDirection,\n  DoubleArrow,\n  FreehandLine,\n  FreehandPolygon,\n  Curve,\n  Ellipse,\n  Lune,\n  Reactangle: Rectangle,\n  Triangle,\n  Polygon,\n  Circle,\n  Sector,\n  GatheringPlace,\n  Arc,\n  Polyline,\n  ClosedCurve,\n  Point\n};\nCesiumPlot.createGeometryFromData = (cesium, viewer, opts) => {\n  console.log(\"执行了\");\n  const { type, style, cartesianPoints } = opts;\n  const geometry = new CesiumPlot[type](cesium, viewer, style);\n  geometry.points = cartesianPoints;\n  const geometryPoints = geometry.createGraphic(cartesianPoints);\n  geometry.setGeometryPoints(geometryPoints);\n  if (geometry.type == \"polygon\") {\n    geometry.drawPolygon();\n  } else {\n    geometry.drawLine();\n  }\n  geometry.finishDrawing();\n  geometry.onClick();\n  return geometry;\n};\nexport {\n  CesiumPlot as default\n};\n", "function FS_Snow() {\n  return \"#version 300 es\\n    precision highp float;\\n    uniform sampler2D colorTexture;\\n    in vec2 v_textureCoordinates;\\n    out vec4 fragColor;\\n\\n    float snow(vec2 uv, float scale) {\\n        float time = czm_frameNumber / 60.0;\\n        float w = smoothstep(1.0, 0.0, -uv.y * (scale / 10.0));\\n        if (w < 0.1) return 0.0;\\n        uv += time / scale;\\n        uv.y += time * 2.0 / scale;\\n        uv.x += sin(uv.y + time * 0.5) / scale;\\n        uv *= scale;\\n        vec2 s = floor(uv), f = fract(uv), p;\\n        float k = 3.0, d;\\n        p = 0.5 + 0.35 * sin(11.0 * fract(sin((s + p + scale) * mat2(7, 3, 6, 5)) * 5.0)) - f;\\n        d = length(p);\\n        k = min(d, k);\\n        k = smoothstep(0.0, k, sin(f.x + f.y) * 0.01);\\n        return k * w;\\n    }\\n\\n    void main(void) {\\n        vec2 resolution = czm_viewport.zw;\\n        vec2 uv = (gl_FragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\\n        vec3 finalColor = vec3(0.0);\\n        float c = 0.0;\\n        c += snow(uv, 30.0) * 0.0;\\n        c += snow(uv, 20.0) * 0.0;\\n        c += snow(uv, 15.0) * 0.0;\\n        c += snow(uv, 10.0);\\n        c += snow(uv, 8.0);\\n        c += snow(uv, 6.0);\\n        c += snow(uv, 5.0);\\n        finalColor = vec3(c);\\n        fragColor = mix(texture(colorTexture, v_textureCoordinates), vec4(finalColor, 1.0), 0.3);\\n    }\\n\";\n}\nfunction FS_Rain() {\n  return `#version 300 es\n    precision highp float;\n    uniform sampler2D colorTexture;\n    in vec2 v_textureCoordinates;\n    out vec4 fragColor;\n\n    float hash(float x) {\n      return fract(sin(x * 23.3) * 13.13);\n    }\n\n    void main(void) {\n      float time = czm_frameNumber / 60.0;\n      vec2 resolution = czm_viewport.zw;\n\n      vec2 uv = (gl_FragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n      vec3 c = vec3(0.6, 0.7, 0.8);\n\n      float a = -0.4;\n      float si = sin(a), co = cos(a);\n      uv *= mat2(co, -si, si, co);\n      uv *= length(uv + vec2(0, 4.9)) * 0.3 + 1.0;\n\n      float v = 1.0 - sin(hash(floor(uv.x * 100.0)) * 2.0);\n      float b = clamp(abs(sin(20.0 * time * v + uv.y * (5.0 / (2.0 + v)))) - 0.95, 0.0, 1.0) * 20.0;\n      c *= v * b;\n\n      fragColor = mix(texture(colorTexture, v_textureCoordinates), vec4(c, 1.0), 0.5);\n    }\n  `;\n}\nfunction addSnowScene(viewer) {\n  let collection = viewer.scene.postProcessStages;\n  let fs_snow = FS_Snow();\n  let snow = new Cesium.PostProcessStage({\n    name: \"czm_snow\",\n    fragmentShader: fs_snow\n  });\n  collection.add(snow);\n}\nfunction addRainScene(viewer) {\n  let collection = viewer.scene.postProcessStages;\n  let fs_rain = FS_Rain();\n  let rain = new Cesium.PostProcessStage({\n    name: \"czm_rain\",\n    fragmentShader: fs_rain\n  });\n  collection.add(rain);\n}\nexport {\n  addRainScene,\n  addSnowScene\n};\n", "async function CesiumUseEcharts(Cesium, viewer, option, canvasConfig) {\n  (function(e) {\n    const t = {};\n    function n(r) {\n      if (t[r]) return t[r].exports;\n      const i = t[r] = {\n        i: r,\n        l: false,\n        exports: {}\n      };\n      return e[r].call(i.exports, i, i.exports, n), i.l = true, i.exports;\n    }\n    n.m = e, n.c = t, n.d = function(e2, t2, r) {\n      n.o(e2, t2) || Object.defineProperty(e2, t2, {\n        enumerable: true,\n        get: r\n      });\n    }, n.r = function(e2) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e2, \"__esModule\", {\n        value: true\n      });\n    }, n.t = function(e2, t2) {\n      if (1 & t2 && (e2 = n(e2)), 8 & t2) return e2;\n      if (4 & t2 && \"object\" == typeof e2 && e2 && e2.__esModule) return e2;\n      const r = /* @__PURE__ */ Object.create(null);\n      if (n.r(r), Object.defineProperty(r, \"default\", {\n        enumerable: true,\n        value: e2\n      }), 2 & t2 && \"string\" != typeof e2)\n        for (let i in e2)\n          n.d(\n            r,\n            i,\n            (function(t3) {\n              return e2[t3];\n            }).bind(null, i)\n          );\n      return r;\n    }, n.n = function(e2) {\n      let t2 = e2 && e2.__esModule ? function() {\n        return e2.default;\n      } : function() {\n        return e2;\n      };\n      return n.d(t2, \"a\", t2), t2;\n    }, n.o = function(e2, t2) {\n      return Object.prototype.hasOwnProperty.call(e2, t2);\n    }, n.p = \"\", n(n.s = 0);\n  })([\n    function(e, t, n) {\n      e.exports = n(1);\n    },\n    function(e, t, n) {\n      echarts ? n(2).load() : console.error(\"missing echarts lib\");\n    },\n    function(e, t, n) {\n      function r(e2, t2) {\n        for (let n2 = 0; n2 < t2.length; n2++) {\n          let r2 = t2[n2];\n          r2.enumerable = r2.enumerable || false, r2.configurable = true, \"value\" in r2 && (r2.writable = true), Object.defineProperty(e2, r2.key, r2);\n        }\n      }\n      n.r(t);\n      let i = function() {\n        function e2(t3, n3) {\n          !function(e3, t4) {\n            if (!(e3 instanceof t4))\n              throw new TypeError(\"Cannot call a class as a function\");\n          }(this, e2), this._viewer = t3, this.dimensions = [\"lng\", \"lat\"], this._mapOffset = [0, 0], this._api = n3;\n        }\n        let t2, n2, i2;\n        return t2 = e2, i2 = [\n          {\n            key: \"create\",\n            value: function(t3, n3) {\n              let r2;\n              t3.eachComponent(\"GLMap\", function(t4) {\n                (r2 = new e2(echartsWrapper.cesiumViewer, n3)).setMapOffset(\n                  t4.__mapOffset || [0, 0]\n                ), t4.coordinateSystem = r2;\n              }), t3.eachSeries(function(e3) {\n                \"GLMap\" === e3.get(\"coordinateSystem\") && (e3.coordinateSystem = r2);\n              });\n            }\n          },\n          {\n            key: \"dimensions\",\n            get: function() {\n              return [\"lng\", \"lat\"];\n            }\n          }\n        ], (n2 = [\n          {\n            key: \"setMapOffset\",\n            value: function(e3) {\n              return this._mapOffset = e3, this;\n            }\n          },\n          {\n            key: \"getViewer\",\n            value: function() {\n              return this._viewer;\n            }\n          },\n          {\n            key: \"dataToPoint\",\n            value: function(e3) {\n              let t3 = this._viewer.scene, n3 = [0, 0], r2 = Cesium.Cartesian3.fromDegrees(e3[0], e3[1]);\n              if (!r2) return n3;\n              if (t3.mode === Cesium.SceneMode.SCENE3D && Cesium.Cartesian3.angleBetween(t3.camera.position, r2) > Cesium.Math.toRadians(80))\n                return false;\n              let i3 = t3.cartesianToCanvasCoordinates(r2);\n              return i3 ? [i3.x - this._mapOffset[0], i3.y - this._mapOffset[1]] : n3;\n            }\n          },\n          {\n            key: \"pointToData\",\n            value: function(e3) {\n              let t3 = this._mapOffset, n3 = viewer.scene.globe.ellipsoid, r2 = new Cesium.cartesian3(e3[1] + t3, e3[2] + t3[2], 0), i3 = n3.cartesianToCartographic(r2);\n              return [i3.lng, i3.lat];\n            }\n          },\n          {\n            key: \"getViewRect\",\n            value: function() {\n              let e3 = this._api;\n              return new echarts.graphic.BoundingRect(\n                0,\n                0,\n                e3.getWidth(),\n                e3.getHeight()\n              );\n            }\n          },\n          {\n            key: \"getRoamTransform\",\n            value: function() {\n              return echarts.matrix.create();\n            }\n          }\n        ]) && r(t2.prototype, n2), i2 && r(t2, i2), e2;\n      }();\n      echarts.extendComponentModel({\n        type: \"GLMap\",\n        getViewer: function() {\n          return echartsWrapper.cesiumViewer;\n        },\n        defaultOption: {\n          roam: false\n        }\n      }), echarts.extendComponentView({\n        type: \"GLMap\",\n        init: function(e2, t2) {\n          this.api = t2, echartsWrapper.cesiumViewer.scene.postRender.addEventListener(\n            this.moveHandler,\n            this\n          );\n        },\n        moveHandler: function(e2, t2) {\n          this.api.dispatchAction({\n            type: \"GLMapRoam\"\n          });\n        },\n        render: function(e2, t2, n2) {\n        },\n        dispose: function(e2) {\n          echartsWrapper.cesiumViewer.scene.postRender.removeEventListener(\n            this.moveHandler,\n            this\n          );\n        }\n      });\n      function a() {\n        echarts.registerCoordinateSystem(\"GLMap\", i), echarts.registerAction(\n          {\n            type: \"GLMapRoam\",\n            event: \"GLMapRoam\",\n            update: \"updateLayout\"\n          },\n          function(e2, t2) {\n          }\n        );\n      }\n      n.d(t, \"load\", function() {\n        return a;\n      });\n    }\n  ]);\n  console.log(\"echarts\", echarts);\n  const echartsWrapper = { ...echarts, cesiumViewer: viewer };\n  function hrcEcharts(t, e, canvasConfig2) {\n    this._canvasConfig = canvasConfig2;\n    this._mapContainer = t;\n    this.viewer = viewer;\n    this._overlay = this._createChartOverlay();\n    this._overlay.setOption(e);\n  }\n  hrcEcharts.prototype._createChartOverlay = function() {\n    console.log(this);\n    const t = this._mapContainer.scene;\n    t.canvas.setAttribute(\"tabIndex\", 0);\n    const e = document.createElement(\"div\");\n    e.style.position = \"absolute\";\n    if (this._canvasConfig) {\n      e.style.top = \"0px\";\n      e.style.left = \"0px\";\n      e.style.width = this._canvasConfig.width + \"rem\";\n      e.style.height = this._canvasConfig.height + \"rem\";\n      e.style.pointerEvents = \"none\";\n    } else {\n      e.style.top = \"0px\";\n      e.style.left = \"0px\";\n      e.style.width = \"120rem\";\n      e.style.height = \"55rem\";\n      e.style.pointerEvents = \"none\";\n    }\n    const l = document.getElementsByClassName(\"echartMap\").length;\n    e.setAttribute(\n      \"id\",\n      \"ysCesium-echarts-\" + parseInt(Math.random() * 99999) + \"-\" + l\n    );\n    e.setAttribute(\"class\", \"echartMap\");\n    this._mapContainer.container.appendChild(e);\n    this._echartsContainer = e;\n    return echarts.init(e);\n  };\n  hrcEcharts.prototype.dispose = function() {\n    this._echartsContainer && (this._mapContainer.container.removeChild(this._echartsContainer), this._echartsContainer = null), this._overlay && (this._overlay.dispose(), this._overlay = null);\n  };\n  hrcEcharts.prototype.updateOverlay = function(t) {\n    this._overlay && this._overlay.setOption(t);\n  };\n  hrcEcharts.prototype.getMap = function() {\n    return this._mapContainer;\n  };\n  hrcEcharts.prototype.getOverlay = function() {\n    return this._overlay;\n  };\n  hrcEcharts.prototype.show = function() {\n    document.getElementById(this._id).style.visibility = \"visible\";\n  };\n  hrcEcharts.prototype.hide = function() {\n    document.getElementById(this._id).style.visibility = \"hidden\";\n  };\n  let data = new hrcEcharts(viewer, option, canvasConfig);\n  return data;\n}\nexport {\n  CesiumUseEcharts as default\n};\n", "let base = {\n  config: {\n    // radius: 10,\n    // maxOpacity: .5,\n    // minOpacity: 0,\n    // blur: .75\n  },\n  canvas: {\n    width: 1e3,\n    delta: 50\n  },\n  _bounds: {\n    min: { lat: Number.MAX_VALUE, lng: Number.MAX_VALUE },\n    max: { lat: Number.MIN_VALUE, lng: Number.MIN_VALUE }\n  }\n};\nvar CesiumData;\nfunction CesiumHeatMap(Cesium, viewer, data, config) {\n  this.viewer = viewer;\n  CesiumData = Cesium;\n  base.config = Object.assign({}, base.config, config);\n  base.config.container = document.createElement(\"canvas\");\n  this.setData(data);\n}\nCesiumHeatMap.prototype._parseData = function(data) {\n  let parseData = {\n    max: Number.MIN_VALUE,\n    data: []\n  };\n  base.bounds = JSON.parse(JSON.stringify(base._bounds));\n  data.map((v) => {\n    base.bounds.min.lat = Math.min(base.bounds.min.lat, v.lat);\n    base.bounds.min.lng = Math.min(base.bounds.min.lng, v.lng);\n    base.bounds.max.lat = Math.max(base.bounds.max.lat, v.lat);\n    base.bounds.max.lng = Math.max(base.bounds.max.lng, v.lng);\n  });\n  base.canvas.height = Math.floor(\n    base.canvas.width * (base.bounds.max.lat - base.bounds.min.lat) / (base.bounds.max.lng - base.bounds.min.lng)\n  );\n  parseData.delta = {\n    x: base.canvas.width / (base.bounds.max.lng - base.bounds.min.lng),\n    y: base.canvas.height / (base.bounds.max.lat - base.bounds.min.lat)\n  };\n  data.map((v) => {\n    let value = !isNaN(parseInt(v.value)) ? parseInt(v.value) : 1;\n    parseData.max = Math.max(parseData.max, value);\n    parseData.data.push({\n      x: base.canvas.delta + Math.floor(parseData.delta.x * (v.lng - base.bounds.min.lng)),\n      y: Math.floor(\n        base.canvas.height + base.canvas.delta - parseData.delta.y * (v.lat - base.bounds.min.lat)\n      ),\n      value\n    });\n  });\n  base.config.container.width = base.canvas.width + base.canvas.delta * 2;\n  base.config.container.height = base.canvas.height + base.canvas.delta * 2;\n  document.body.appendChild(base.config.container);\n  this.heatmapInstance = h337.create(base.config);\n  return parseData;\n};\nCesiumHeatMap.prototype.remove = function() {\n  this.viewer.entities.removeById(base.config.id);\n};\nCesiumHeatMap.prototype.show = function() {\n  this.entity && (this.entity.rectangle.show = true);\n};\nCesiumHeatMap.prototype.hide = function() {\n  this.entity && (this.entity.rectangle.show = false);\n};\nCesiumHeatMap.prototype.fromLatLngToPoint = function(latLng) {\n  let y = (1 - Math.log(\n    Math.tan(latLng.lat * Math.PI / 180) + 1 / Math.cos(latLng.lat * Math.PI / 180)\n  ) / Math.PI) / 2 * 256;\n  return { x: 256 * (0.5 + latLng.lng / 360), y };\n};\nCesiumHeatMap.prototype.setData = function(data) {\n  base.config.container.style.display = \"block\";\n  data = this._parseData(data);\n  this.viewer.entities.removeById(base.config.id);\n  this.heatmapInstance.setData(data);\n  base.config.id = (/* @__PURE__ */ new Date()).getTime();\n  this.entity = this.viewer.entities.add({\n    id: base.config.id,\n    zIndex: -100,\n    rectangle: {\n      heightReference: CesiumData.HeightReference.CLAMP_TO_GROUND,\n      coordinates: CesiumData.Rectangle.fromDegrees(\n        Math.max(\n          base.bounds.min.lng - (base.bounds.max.lng - base.bounds.min.lng) * base.canvas.delta / base.canvas.width,\n          -180\n        ),\n        Math.max(\n          base.bounds.min.lat - (base.bounds.max.lat - base.bounds.min.lat) * base.canvas.delta / base.canvas.height,\n          -90\n        ),\n        Math.min(\n          base.bounds.max.lng + (base.bounds.max.lng - base.bounds.min.lng) * base.canvas.delta / base.canvas.width,\n          180\n        ),\n        Math.min(\n          base.bounds.max.lat + (base.bounds.max.lat - base.bounds.min.lat) * base.canvas.delta / base.canvas.height,\n          90\n        )\n      ),\n      outline: true,\n      outlineWidth: 10,\n      outlineColor: CesiumData.Color.YELLOW,\n      materials: CesiumData.Color.RED,\n      material: new CesiumData.ImageMaterialProperty({\n        image: this.heatmapInstance.getDataURL(),\n        repeat: new CesiumData.Cartesian2(1, 1),\n        transparent: true\n      })\n    }\n  });\n  base.config.container.style.display = \"none\";\n};\nexport {\n  CesiumHeatMap as default\n};\n", "import { polygon, buffer } from \"/Users/kangshuolei/Desktop/code/dls-map/node_modules/.pnpm/@turf+turf@7.1.0/node_modules/@turf/turf/dist/esm/index.js\";\nclass Buffer {\n  constructor(viewer, radius, options = { basePath: \"\" }) {\n    this.radius = 5e5;\n    this.transformWGS84ToCartesian = (position, alt = 0) => position ? Cesium.Cartesian3.fromDegrees(\n      position.lon,\n      position.lat,\n      alt || position.alt,\n      Cesium.Ellipsoid.WGS84\n    ) : Cesium.Cartesian3.ZERO;\n    this.transformCartesianToWGS84 = (cartesian) => {\n      const ellipsoid = Cesium.Ellipsoid.WGS84;\n      const cartographic = ellipsoid.cartesianToCartographic(cartesian);\n      return {\n        lon: Cesium.Math.toDegrees(cartographic.longitude),\n        lat: Cesium.Math.toDegrees(cartographic.latitude),\n        alt: cartographic.height\n      };\n    };\n    this.transformWGS84ToCartographic = (position) => position ? Cesium.Cartographic.fromDegrees(\n      position.lon || position.lon,\n      position.lat,\n      position.alt\n    ) : Cesium.Cartographic.ZERO;\n    this.clear = () => {\n      this.drawLayer.entities.removeAll();\n      return this.handler && this.handler.destroy();\n    };\n    this.viewer = viewer;\n    this.radius = radius;\n    this.drawLayer = new Cesium.CustomDataSource(\"measureLayer\");\n    this.viewer.dataSources.add(this.drawLayer);\n  }\n  /**\n   * 坐标数组转换 笛卡尔转84\n   * @param {Array} WSG84Arr {lon,lat,alt} 地理坐标数组\n   * @param {Number} alt 拔高\n   * @return {Array} Cartesian3 三维位置坐标数组\n   */\n  transformWGS84ArrayToCartesianArray(WSG84Arr, alt) {\n    return WSG84Arr ? WSG84Arr.map((item) => this.transformWGS84ToCartesian(item, alt)) : [];\n  }\n  /**\n   * 坐标数组转换 笛卡尔转86\n   * @param {Array} cartesianArr 三维位置坐标数组\n   * @return {Array} {lon,lat,alt} 地理坐标数组\n   */\n  transformCartesianArrayToWGS84Array(cartesianArr) {\n    if (this.viewer) {\n      return cartesianArr ? cartesianArr.map((item) => this.transformCartesianToWGS84(item)) : [];\n    }\n  }\n  /**\n   * 拾取位置点\n   * @param {Object} px 屏幕坐标\n   * @return {Object} Cartesian3 三维坐标\n   */\n  getCatesian3FromPX(px) {\n    if (this.viewer && px) {\n      const picks = this.viewer.scene.drillPick(px);\n      let cartesian = null;\n      let isOn3dtiles = false;\n      let isOnTerrain = false;\n      Object.keys(picks).forEach((i) => {\n        const pick = picks[i];\n        if (pick && pick.primitive instanceof (Cesium.Cesium3DTileFeature || Cesium.Cesium3DTileset || Cesium.Model)) {\n          isOn3dtiles = true;\n        }\n        if (isOn3dtiles) {\n          this.viewer.scene.pick(px);\n          cartesian = this.viewer.scene.pickPosition(px);\n          if (cartesian) {\n            const cartographic = Cesium.Cartographic.fromCartesian(cartesian);\n            if (cartographic.height < 0) cartographic.height = 0;\n            const lon = Cesium.Math.toDegrees(cartographic.longitude);\n            const lat = Cesium.Math.toDegrees(cartographic.latitude);\n            const { height } = cartographic;\n            cartesian = this.transformWGS84ToCartesian({\n              lon,\n              lat,\n              alt: height\n            });\n          }\n        }\n      });\n      const boolTerrain = this.viewer.terrainProvider instanceof Cesium.EllipsoidTerrainProvider;\n      if (!isOn3dtiles && !boolTerrain) {\n        const ray = this.viewer.scene.camera.getPickRay(px);\n        if (!ray) return null;\n        cartesian = this.viewer.scene.globe.pick(ray, this.viewer.scene);\n        isOnTerrain = true;\n      }\n      if (!isOn3dtiles && !isOnTerrain && boolTerrain) {\n        cartesian = this.viewer.scene.camera.pickEllipsoid(\n          px,\n          this.viewer.scene.globe.ellipsoid\n        );\n      }\n      if (cartesian) {\n        const position = this.transformCartesianToWGS84(cartesian);\n        if (position.alt < 0) {\n          cartesian = this.transformWGS84ToCartesian(position, 0.1);\n        }\n        return cartesian;\n      }\n      return false;\n    }\n  }\n  /**\n   * 绘制面\n   */\n  polyBuffer() {\n    return new Promise((resolve, reject) => {\n      if (this.viewer) {\n        this.viewer.scene.globe.depthTestAgainstTerrain = true;\n        let positions = [];\n        let polyPoint = [];\n        const polygonHie = new Cesium.PolygonHierarchy();\n        const polygonEntity = new Cesium.Entity();\n        if (this.handler) {\n          this.handler.destroy();\n        }\n        this.handler = new Cesium.ScreenSpaceEventHandler(\n          this.viewer.scene.canvas\n        );\n        this.handler.setInputAction((movement) => {\n          const cartesian = this.getCatesian3FromPX(movement.position);\n          const cartographic = Cesium.Cartographic.fromCartesian(cartesian);\n          if (cartesian) {\n            const lon = Cesium.Math.toDegrees(cartographic.longitude);\n            const lat = Cesium.Math.toDegrees(cartographic.latitude);\n            const { height } = cartographic;\n            if (positions.length === 0) {\n              polygonHie.positions.push(cartesian.clone());\n              positions.push(cartesian.clone());\n              polyPoint.push([lon, lat, height]);\n            }\n            positions.push(cartesian.clone());\n            polygonHie.positions.push(cartesian.clone());\n            polyPoint.push([lon, lat, height]);\n          }\n        }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        this.handler.setInputAction((movement) => {\n          const cartesian = this.getCatesian3FromPX(movement.endPosition);\n          const cartographic = Cesium.Cartographic.fromCartesian(cartesian);\n          const lon = Cesium.Math.toDegrees(cartographic.longitude);\n          const lat = Cesium.Math.toDegrees(cartographic.latitude);\n          const { height } = cartographic;\n          if (positions.length >= 2) {\n            if (cartesian) {\n              positions.pop();\n              positions.push(cartesian);\n              polygonHie.positions.pop();\n              polygonHie.positions.push(cartesian);\n              polyPoint.pop();\n              polyPoint.push([lon, lat, height]);\n            }\n          }\n        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n        this.handler.setInputAction((movement) => {\n          if (positions.length > 2) {\n            positions.push(positions[0]);\n            polyPoint.push(polyPoint[0]);\n            const arrData = [...polyPoint];\n            this.addPolygon(positions);\n            this.initPolygonBuffer(polyPoint, this.radius);\n            positions = [];\n            polyPoint = [];\n            polygonHie.positions = [];\n            resolve(arrData);\n          }\n        }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n        this.handler.setInputAction((e) => {\n          this.clear();\n        }, Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\n        polygonEntity.polyline = {\n          width: 3,\n          material: Cesium.Color.YELLOW.withAlpha(0.8),\n          clampToGround: true\n        };\n        polygonEntity.polyline.positions = new Cesium.CallbackProperty(\n          () => positions,\n          false\n        );\n        polygonEntity.polygon = {\n          hierarchy: new Cesium.CallbackProperty(() => polygonHie, false),\n          material: Cesium.Color.WHITE.withAlpha(0.1),\n          clampToGround: true\n        };\n        this.drawLayer.entities.add(polygonEntity);\n      }\n    });\n  }\n  // 初始化面缓冲\n  initPolygonBuffer(bufferPolyogn, distance) {\n    return new Promise((resolve, reject) => {\n      let degreesArray = this.pointsToDegreesArray(bufferPolyogn);\n      const polygonF = polygon([bufferPolyogn]);\n      const buffered = buffer(polygonF, distance, { units: \"meters\" });\n      const { coordinates } = buffered.geometry;\n      const points = coordinates[0];\n      degreesArray = this.pointsToDegreesArray(points);\n      this.addBufferPolyogn(Cesium.Cartesian3.fromDegreesArray(degreesArray));\n      resolve(bufferPolyogn);\n    });\n  }\n  // 添加缓冲面\n  addBufferPolyogn(positions) {\n    this.drawLayer.entities.add({\n      id: \"polyognBuffer\",\n      polygon: {\n        hierarchy: new Cesium.PolygonHierarchy(positions),\n        material: Cesium.Color.RED.withAlpha(0.3),\n        classificationType: Cesium.ClassificationType.BOTH,\n        clampToGround: true\n      }\n    });\n  }\n  // 添加面\n  addPolygon(positions) {\n    this.drawLayer.entities.add({\n      polygon: {\n        hierarchy: new Cesium.PolygonHierarchy(positions),\n        material: Cesium.Color.WHITE.withAlpha(0.1),\n        classificationType: Cesium.ClassificationType.BOTH,\n        clampToGround: true\n      },\n      polyline: {\n        positions,\n        width: 2,\n        material: Cesium.Color.YELLOW.withAlpha(0.4),\n        clampToGround: true\n      }\n    });\n  }\n  // 坐标点格式转换\n  pointsToDegreesArray(points) {\n    const degreesArray = [];\n    points.map((item) => {\n      degreesArray.push(item[0]);\n      degreesArray.push(item[1]);\n    });\n    return degreesArray;\n  }\n  changeRadius(changeDis) {\n    this.radius = changeDis;\n  }\n}\nexport {\n  Buffer as default\n};\n", "const loadScript = (src) => {\n  const $script = document.createElement(\"script\");\n  $script.async = false;\n  $script.src = src;\n  document.body.appendChild($script);\n  return new Promise((resolve, reject) => {\n    $script.onload = () => {\n      resolve(true);\n    };\n  });\n};\nfunction groupPoints(pointsArray) {\n  const groupedPoints = [];\n  for (let i = 0; i < pointsArray.length; i++) {\n    const group = [pointsArray[i], pointsArray[i + 1]];\n    groupedPoints.push(group);\n  }\n  groupedPoints.pop();\n  return groupedPoints;\n}\nfunction twoToCenter(point1, point2) {\n  const pointNew1 = Cesium.Cartesian3.fromDegrees(point1[0], point1[1]);\n  const pointNew2 = Cesium.Cartesian3.fromDegrees(point2[0], point2[1]);\n  const centerPoint = Cesium.Cartesian3.lerp(\n    pointNew1,\n    pointNew2,\n    0.5,\n    new Cesium.Cartesian3()\n  );\n  return centerPoint;\n}\nexport {\n  groupPoints,\n  loadScript,\n  twoToCenter\n};\n", "import \"../../utils/Shader/Shaders.mjs\";\nimport { groupPoints, twoToCenter } from \"../../utils/util.mjs\";\nimport { rhumbBearing } from \"/Users/kangshuolei/Desktop/code/dls-map/node_modules/.pnpm/@turf+turf@7.1.0/node_modules/@turf/turf/dist/esm/index.js\";\nlet groupArrPoint = [];\nfunction CesiumTrack(data, viewer, img) {\n  return new Promise((resolve, reject) => {\n    groupArrPoint = [];\n    let lineDataArr = [];\n    if (!data.length) return false;\n    console.log(\"dataaaaa\", data);\n    data.forEach((item, index) => {\n      if (item.color) {\n        const line = viewer.entities.add({\n          name: \"Purple\",\n          polyline: {\n            positions: Cesium.Cartesian3.fromDegreesArray(\n              item.positions.flat()\n            ),\n            width: 3,\n            followSurface: false,\n            material: new Cesium.PolylineArrowMaterialProperty(\n              Cesium.Color.fromCssColorString(item.color)\n            )\n          }\n        });\n        handleGeneratePosition(item.positions, item.color, viewer);\n        groupArrPoint.push({\n          color: item.color,\n          data: groupPoints(item.positions)\n        });\n        lineDataArr.push(line);\n      }\n    });\n    handleGroupArrPoint(viewer, img);\n    resolve(null);\n    return lineDataArr;\n  });\n}\nconst handleGeneratePosition = (data, color, viewer) => {\n  if (data && data.length) {\n    let startPoint = {\n      point: [data[0].lon, data[0].lat],\n      track_time: \"2020-09-03\"\n    };\n    let endPoint = {\n      point: [data[data.length - 1].lon, data[data.length - 1].lat],\n      track_time: \"2020-09-07\"\n    };\n    let dataArr = [startPoint, endPoint];\n    dataArr.forEach((item, index) => {\n      let tooltip = `\n          <div>\n            <div class=\"line\"></div>\n            <div class=\"panel\">\n              <span class=\"content\">${item.track_time}</span>\n            </div>\n          </div>\n        `;\n      let className = \"LayerPointTime\";\n      ({\n        viewer,\n        position: [parseFloat(item.point[0]), parseFloat(item.point[1])],\n        height: 0,\n        offset: [0, -60],\n        dom: tooltip,\n        className,\n        type: \"LayerPointTime\"\n      });\n    });\n    data.forEach((t) => {\n      viewer.entities.add({\n        position: Cesium.Cartesian3.fromDegrees(t[0], t[1], 1e3),\n        attribute: {\n          data: []\n        },\n        point: {\n          zIndex: 99999999,\n          pixelSize: 6,\n          pickable: true,\n          color: Cesium.Color.fromCssColorString(color),\n          heightReference: Cesium.HeightReference.RELATIVE_TO_GROUND\n        }\n      });\n    });\n  }\n};\nconst handleGroupArrPoint = (viewer, img) => {\n  groupArrPoint.forEach((item) => {\n    item.data.forEach((coordItem) => {\n      let centerPoint = twoToCenter(coordItem[0], coordItem[1]);\n      let angle = rhumbBearing(coordItem[0], coordItem[1]);\n      const angleInRadians = Cesium.Math.toRadians(-angle + 90);\n      const hexColor = item.color;\n      const alpha = 1;\n      Cesium.Color.fromCssColorString(hexColor).withAlpha(alpha);\n      viewer.entities.add({\n        position: centerPoint,\n        billboard: {\n          rotation: angleInRadians,\n          image: img,\n          scale: 0.1,\n          alignedAxis: Cesium.Cartesian3.ZERO,\n          heightReference: Cesium.HeightReference.CLAMP_TO_GROUND\n        }\n      });\n      viewer.scene.requestRender();\n    });\n  });\n};\nexport {\n  CesiumTrack as default\n};\n", "const importHack = (module, moduleName) => {\n  if (typeof module === \"function\") {\n    return module;\n  }\n  if (module.default) {\n    return module.default;\n  }\n  const wModule = window[moduleName];\n  if (wModule) {\n    return wModule.default ? wModule.default : wModule;\n  }\n  if (module) {\n    return module;\n  }\n  throw new Error(`无法处理模块 : ${moduleName}`);\n};\nexport {\n  importHack\n};\n"],
  "mappings": "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",
  "names": ["_sfc_main", "_sfc_render", "_hoisted_1", "_sfc_main", "_sfc_main", "cloneDeep", "Cesium", "Cesium"]
}
