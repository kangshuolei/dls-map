{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/index.js", "../../../../node_modules/.pnpm/@turf+jsts@2.7.1/node_modules/@turf/jsts/dist/jsts.min.js", "../../../../node_modules/.pnpm/rbush@3.0.1/node_modules/rbush/rbush.min.js", "../../../../node_modules/.pnpm/tinyqueue@2.0.3/node_modules/tinyqueue/index.js", "../../../../node_modules/.pnpm/point-in-polygon@1.1.0/node_modules/point-in-polygon/flat.js", "../../../../node_modules/.pnpm/point-in-polygon@1.1.0/node_modules/point-in-polygon/nested.js", "../../../../node_modules/.pnpm/point-in-polygon@1.1.0/node_modules/point-in-polygon/index.js", "../../../../node_modules/.pnpm/robust-predicates@2.0.4/node_modules/robust-predicates/umd/orient2d.min.js", "../../../../node_modules/.pnpm/concaveman@1.2.1/node_modules/concaveman/index.js", "../../../../node_modules/.pnpm/skmeans@0.9.7/node_modules/skmeans/distance.js", "../../../../node_modules/.pnpm/skmeans@0.9.7/node_modules/skmeans/kinit.js", "../../../../node_modules/.pnpm/skmeans@0.9.7/node_modules/skmeans/main.js", "../../../../node_modules/.pnpm/earcut@2.2.4/node_modules/earcut/src/earcut.js", "../../../../node_modules/.pnpm/@turf+helpers@7.1.0/node_modules/@turf/helpers/index.ts", "../../../../node_modules/.pnpm/@turf+invariant@7.1.0/node_modules/@turf/invariant/index.ts", "../../../../node_modules/.pnpm/@turf+bearing@7.1.0/node_modules/@turf/bearing/index.ts", "../../../../node_modules/.pnpm/@turf+destination@7.1.0/node_modules/@turf/destination/index.ts", "../../../../node_modules/.pnpm/@turf+distance@7.1.0/node_modules/@turf/distance/index.ts", "../../../../node_modules/.pnpm/@turf+along@7.1.0/node_modules/@turf/along/index.ts", "../../../../node_modules/.pnpm/@turf+rhumb-bearing@7.1.0/node_modules/@turf/rhumb-bearing/index.ts", "../../../../node_modules/.pnpm/@turf+angle@7.1.0/node_modules/@turf/angle/index.ts", "../../../../node_modules/.pnpm/@turf+meta@7.1.0/node_modules/@turf/meta/index.js", "../../../../node_modules/.pnpm/@turf+area@7.1.0/node_modules/@turf/area/index.ts", "../../../../node_modules/.pnpm/@turf+bbox@7.1.0/node_modules/@turf/bbox/index.ts", "../../../../node_modules/.pnpm/@turf+bbox-clip@7.1.0/node_modules/@turf/bbox-clip/index.ts", "../../../../node_modules/.pnpm/@turf+bbox-clip@7.1.0/node_modules/@turf/bbox-clip/lib/lineclip.ts", "../../../../node_modules/.pnpm/@turf+bbox-polygon@7.1.0/node_modules/@turf/bbox-polygon/index.ts", "../../../../node_modules/.pnpm/@turf+bezier-spline@7.1.0/node_modules/@turf/bezier-spline/index.ts", "../../../../node_modules/.pnpm/@turf+bezier-spline@7.1.0/node_modules/@turf/bezier-spline/lib/spline.ts", "../../../../node_modules/.pnpm/@turf+boolean-clockwise@7.1.0/node_modules/@turf/boolean-clockwise/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-concave@7.1.0/node_modules/@turf/boolean-concave/index.ts", "../../../../node_modules/.pnpm/point-in-polygon-hao@1.1.0/node_modules/point-in-polygon-hao/dist/pointInPolygon.mjs", "../../../../node_modules/.pnpm/@turf+boolean-point-in-polygon@7.1.0/node_modules/@turf/boolean-point-in-polygon/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-point-on-line@7.1.0/node_modules/@turf/boolean-point-on-line/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-contains@7.1.0/node_modules/@turf/boolean-contains/index.ts", "../../../../node_modules/.pnpm/sweepline-intersections@1.5.0/node_modules/sweepline-intersections/dist/sweeplineIntersections.esm.js", "../../../../node_modules/.pnpm/@turf+line-intersect@7.1.0/node_modules/@turf/line-intersect/index.ts", "../../../../node_modules/.pnpm/@turf+line-intersect@7.1.0/node_modules/@turf/line-intersect/lib/sweepline-intersections-export.ts", "../../../../node_modules/.pnpm/@turf+polygon-to-line@7.1.0/node_modules/@turf/polygon-to-line/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-crosses@7.1.0/node_modules/@turf/boolean-crosses/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-disjoint@7.1.0/node_modules/@turf/boolean-disjoint/index.ts", "../../../../node_modules/.pnpm/geojson-equality-ts@1.0.2/node_modules/geojson-equality-ts/index.ts", "../../../../node_modules/.pnpm/@turf+clean-coords@7.1.0/node_modules/@turf/clean-coords/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-equal@7.1.0/node_modules/@turf/boolean-equal/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-intersects@7.1.0/node_modules/@turf/boolean-intersects/index.ts", "../../../../node_modules/.pnpm/quickselect@2.0.0/node_modules/quickselect/index.js", "../../../../node_modules/.pnpm/rbush@3.0.1/node_modules/rbush/index.js", "../../../../node_modules/.pnpm/@turf+geojson-rbush@7.1.0/node_modules/@turf/geojson-rbush/index.js", "../../../../node_modules/.pnpm/@turf+line-segment@7.1.0/node_modules/@turf/line-segment/index.ts", "../../../../node_modules/.pnpm/@turf+nearest-point-on-line@7.1.0/node_modules/@turf/nearest-point-on-line/index.ts", "../../../../node_modules/.pnpm/@turf+line-overlap@7.1.0/node_modules/@turf/line-overlap/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-overlap@7.1.0/node_modules/@turf/boolean-overlap/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-parallel@7.1.0/node_modules/@turf/boolean-parallel/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-touches@7.1.0/node_modules/@turf/boolean-touches/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-valid@7.1.0/node_modules/@turf/boolean-valid/index.ts", "../../../../node_modules/.pnpm/@turf+boolean-within@7.1.0/node_modules/@turf/boolean-within/index.ts", "../../../../node_modules/.pnpm/@turf+center@7.1.0/node_modules/@turf/center/index.ts", "../../../../node_modules/.pnpm/@turf+buffer@7.1.0/node_modules/@turf/buffer/index.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/adder.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/math.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/noop.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/stream.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/area.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/cartesian.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/bounds.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/compose.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/rotation.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/circle.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/clip/buffer.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/clip/line.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/pointEqual.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/clip/polygon.js", "../../../../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/ascending.js", "../../../../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/bisector.js", "../../../../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/bisect.js", "../../../../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/array.js", "../../../../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/ticks.js", "../../../../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/merge.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/clip/extent.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/polygonContains.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/length.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/identity.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/path/area.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/path/bounds.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/path/context.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/path/measure.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/path/string.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/clip/index.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/clip/antimeridian.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/clip/circle.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/transform.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/fit.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/resample.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/index.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/azimuthal.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/azimuthalEqualArea.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/azimuthalEquidistant.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/mercator.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/equirectangular.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/gnomonic.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/naturalEarth1.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/orthographic.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/stereographic.js", "../../../../node_modules/.pnpm/d3-geo@1.7.1/node_modules/d3-geo/src/projection/transverseMercator.js", "../../../../node_modules/.pnpm/@turf+center-mean@7.1.0/node_modules/@turf/center-mean/index.ts", "../../../../node_modules/.pnpm/@turf+centroid@7.1.0/node_modules/@turf/centroid/index.ts", "../../../../node_modules/.pnpm/@turf+center-median@7.1.0/node_modules/@turf/center-median/index.ts", "../../../../node_modules/.pnpm/@turf+convex@7.1.0/node_modules/@turf/convex/index.ts", "../../../../node_modules/.pnpm/@turf+center-of-mass@7.1.0/node_modules/@turf/center-of-mass/index.ts", "../../../../node_modules/.pnpm/@turf+circle@7.1.0/node_modules/@turf/circle/index.ts", "../../../../node_modules/.pnpm/@turf+clone@7.1.0/node_modules/@turf/clone/index.ts", "../../../../node_modules/.pnpm/@turf+clusters@7.1.0/node_modules/@turf/clusters/index.ts", "../../../../node_modules/.pnpm/@turf+clusters-dbscan@7.1.0/node_modules/@turf/clusters-dbscan/index.ts", "../../../../node_modules/.pnpm/@turf+clusters-dbscan@7.1.0/node_modules/@turf/clusters-dbscan/lib/rbush-export.ts", "../../../../node_modules/.pnpm/@turf+clusters-kmeans@7.1.0/node_modules/@turf/clusters-kmeans/index.ts", "../../../../node_modules/.pnpm/@turf+collect@7.1.0/node_modules/@turf/collect/index.ts", "../../../../node_modules/.pnpm/@turf+collect@7.1.0/node_modules/@turf/collect/lib/rbush-export.ts", "../../../../node_modules/.pnpm/@turf+combine@7.1.0/node_modules/@turf/combine/index.ts", "../../../../node_modules/.pnpm/@turf+tin@7.1.0/node_modules/@turf/tin/index.ts", "../../../../node_modules/.pnpm/topojson-client@3.1.0/node_modules/topojson-client/src/identity.js", "../../../../node_modules/.pnpm/topojson-client@3.1.0/node_modules/topojson-client/src/transform.js", "../../../../node_modules/.pnpm/topojson-client@3.1.0/node_modules/topojson-client/src/reverse.js", "../../../../node_modules/.pnpm/topojson-client@3.1.0/node_modules/topojson-client/src/feature.js", "../../../../node_modules/.pnpm/topojson-client@3.1.0/node_modules/topojson-client/src/stitch.js", "../../../../node_modules/.pnpm/topojson-client@3.1.0/node_modules/topojson-client/src/merge.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/object.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/bounds.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/hash/hashset.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/hash/hashmap.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/hash/point-equal.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/hash/point-hash.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/join.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/cut.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/dedup.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/delta.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/extract.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/geometry.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/prequantize.js", "../../../../node_modules/.pnpm/topojson-server@3.0.1/node_modules/topojson-server/src/topology.js", "../../../../node_modules/.pnpm/@turf+concave@7.1.0/node_modules/@turf/concave/index.ts", "../../../../node_modules/.pnpm/@turf+concave@7.1.0/node_modules/@turf/concave/lib/turf-dissolve.ts", "../../../../node_modules/.pnpm/@turf+concave@7.1.0/node_modules/@turf/concave/lib/turf-line-dissolve.ts", "../../../../node_modules/.pnpm/@turf+concave@7.1.0/node_modules/@turf/concave/lib/turf-polygon-dissolve.ts", "../../../../node_modules/.pnpm/splaytree@3.1.2/node_modules/splaytree/dist/splay.esm.js", "../../../../node_modules/.pnpm/robust-predicates@3.0.2/node_modules/robust-predicates/esm/util.js", "../../../../node_modules/.pnpm/robust-predicates@3.0.2/node_modules/robust-predicates/esm/orient2d.js", "../../../../node_modules/.pnpm/robust-predicates@3.0.2/node_modules/robust-predicates/esm/orient3d.js", "../../../../node_modules/.pnpm/robust-predicates@3.0.2/node_modules/robust-predicates/esm/incircle.js", "../../../../node_modules/.pnpm/robust-predicates@3.0.2/node_modules/robust-predicates/esm/insphere.js", "../../../../node_modules/.pnpm/polygon-clipping@0.15.7/node_modules/polygon-clipping/dist/polygon-clipping.esm.js", "../../../../node_modules/.pnpm/@turf+difference@7.1.0/node_modules/@turf/difference/index.ts", "../../../../node_modules/.pnpm/@turf+flatten@7.1.0/node_modules/@turf/flatten/index.ts", "../../../../node_modules/.pnpm/@turf+dissolve@7.1.0/node_modules/@turf/dissolve/index.ts", "../../../../node_modules/.pnpm/@turf+distance-weight@7.1.0/node_modules/@turf/distance-weight/index.ts", "../../../../node_modules/.pnpm/@turf+rhumb-destination@7.1.0/node_modules/@turf/rhumb-destination/index.ts", "../../../../node_modules/.pnpm/@turf+rhumb-distance@7.1.0/node_modules/@turf/rhumb-distance/index.ts", "../../../../node_modules/.pnpm/@turf+transform-rotate@7.1.0/node_modules/@turf/transform-rotate/index.ts", "../../../../node_modules/.pnpm/@turf+ellipse@7.1.0/node_modules/@turf/ellipse/index.ts", "../../../../node_modules/.pnpm/@turf+envelope@7.1.0/node_modules/@turf/envelope/index.ts", "../../../../node_modules/.pnpm/@turf+explode@7.1.0/node_modules/@turf/explode/index.ts", "../../../../node_modules/.pnpm/@turf+flip@7.1.0/node_modules/@turf/flip/index.ts", "../../../../node_modules/.pnpm/@turf+great-circle@7.1.0/node_modules/@turf/great-circle/index.js", "../../../../node_modules/.pnpm/@turf+great-circle@7.1.0/node_modules/@turf/great-circle/lib/arc.js", "../../../../node_modules/.pnpm/@turf+intersect@7.1.0/node_modules/@turf/intersect/index.ts", "../../../../node_modules/.pnpm/@turf+hex-grid@7.1.0/node_modules/@turf/hex-grid/index.ts", "../../../../node_modules/.pnpm/@turf+point-grid@7.1.0/node_modules/@turf/point-grid/index.ts", "../../../../node_modules/.pnpm/@turf+rectangle-grid@7.1.0/node_modules/@turf/rectangle-grid/index.ts", "../../../../node_modules/.pnpm/@turf+square-grid@7.1.0/node_modules/@turf/square-grid/index.ts", "../../../../node_modules/.pnpm/@turf+triangle-grid@7.1.0/node_modules/@turf/triangle-grid/index.ts", "../../../../node_modules/.pnpm/@turf+interpolate@7.1.0/node_modules/@turf/interpolate/index.js", "../../../../node_modules/.pnpm/marchingsquares@1.3.3/node_modules/marchingsquares/dist/marchingsquares-esm.js", "../../../../node_modules/.pnpm/@turf+isobands@7.1.0/node_modules/@turf/isobands/index.ts", "../../../../node_modules/.pnpm/@turf+isobands@7.1.0/node_modules/@turf/isobands/lib/grid-to-matrix.js", "../../../../node_modules/.pnpm/@turf+isolines@7.1.0/node_modules/@turf/isolines/index.ts", "../../../../node_modules/.pnpm/@turf+isolines@7.1.0/node_modules/@turf/isolines/lib/grid-to-matrix.js", "../../../../node_modules/.pnpm/@turf+kinks@7.1.0/node_modules/@turf/kinks/index.ts", "../../../../node_modules/.pnpm/@turf+length@7.1.0/node_modules/@turf/length/index.ts", "../../../../node_modules/.pnpm/@turf+line-arc@7.1.0/node_modules/@turf/line-arc/index.ts", "../../../../node_modules/.pnpm/@turf+line-slice-along@7.1.0/node_modules/@turf/line-slice-along/index.js", "../../../../node_modules/.pnpm/@turf+line-chunk@7.1.0/node_modules/@turf/line-chunk/index.js", "../../../../node_modules/.pnpm/@turf+line-offset@7.1.0/node_modules/@turf/line-offset/index.js", "../../../../node_modules/.pnpm/@turf+line-offset@7.1.0/node_modules/@turf/line-offset/lib/intersection.js", "../../../../node_modules/.pnpm/@turf+line-slice@7.1.0/node_modules/@turf/line-slice/index.js", "../../../../node_modules/.pnpm/@turf+square@7.1.0/node_modules/@turf/square/index.ts", "../../../../node_modules/.pnpm/@turf+truncate@7.1.0/node_modules/@turf/truncate/index.ts", "../../../../node_modules/.pnpm/@turf+line-split@7.1.0/node_modules/@turf/line-split/index.js", "../../../../node_modules/.pnpm/@turf+line-to-polygon@7.1.0/node_modules/@turf/line-to-polygon/index.ts", "../../../../node_modules/.pnpm/@turf+mask@7.1.0/node_modules/@turf/mask/index.ts", "../../../../node_modules/.pnpm/@turf+midpoint@7.1.0/node_modules/@turf/midpoint/index.ts", "../../../../node_modules/.pnpm/@turf+moran-index@7.1.0/node_modules/@turf/moran-index/index.ts", "../../../../node_modules/.pnpm/@turf+nearest-point@7.1.0/node_modules/@turf/nearest-point/index.ts", "../../../../node_modules/.pnpm/@turf+nearest-neighbor-analysis@7.1.0/node_modules/@turf/nearest-neighbor-analysis/index.ts", "../../../../node_modules/.pnpm/@turf+point-to-line-distance@7.1.0/node_modules/@turf/point-to-line-distance/index.ts", "../../../../node_modules/.pnpm/@turf+nearest-point-to-line@7.1.0/node_modules/@turf/nearest-point-to-line/index.ts", "../../../../node_modules/.pnpm/@turf+planepoint@7.1.0/node_modules/@turf/planepoint/index.ts", "../../../../node_modules/.pnpm/@turf+point-on-feature@7.1.0/node_modules/@turf/point-on-feature/index.ts", "../../../../node_modules/.pnpm/@turf+points-within-polygon@7.1.0/node_modules/@turf/points-within-polygon/index.ts", "../../../../node_modules/.pnpm/@turf+polygonize@7.1.0/node_modules/@turf/polygonize/index.ts", "../../../../node_modules/.pnpm/@turf+polygonize@7.1.0/node_modules/@turf/polygonize/lib/util.ts", "../../../../node_modules/.pnpm/@turf+polygonize@7.1.0/node_modules/@turf/polygonize/lib/Node.ts", "../../../../node_modules/.pnpm/@turf+polygonize@7.1.0/node_modules/@turf/polygonize/lib/Edge.ts", "../../../../node_modules/.pnpm/@turf+polygonize@7.1.0/node_modules/@turf/polygonize/lib/EdgeRing.ts", "../../../../node_modules/.pnpm/@turf+polygonize@7.1.0/node_modules/@turf/polygonize/lib/Graph.ts", "../../../../node_modules/.pnpm/@turf+polygon-smooth@7.1.0/node_modules/@turf/polygon-smooth/index.ts", "../../../../node_modules/.pnpm/@turf+polygon-tangents@7.1.0/node_modules/@turf/polygon-tangents/index.ts", "../../../../node_modules/.pnpm/@turf+projection@7.1.0/node_modules/@turf/projection/index.ts", "../../../../node_modules/.pnpm/@turf+quadrat-analysis@7.1.0/node_modules/@turf/quadrat-analysis/index.ts", "../../../../node_modules/.pnpm/@turf+random@7.1.0/node_modules/@turf/random/index.ts", "../../../../node_modules/.pnpm/@turf+rewind@7.1.0/node_modules/@turf/rewind/index.ts", "../../../../node_modules/.pnpm/@turf+sample@7.1.0/node_modules/@turf/sample/index.ts", "../../../../node_modules/.pnpm/@turf+sector@7.1.0/node_modules/@turf/sector/index.ts", "../../../../node_modules/.pnpm/@turf+transform-scale@7.1.0/node_modules/@turf/transform-scale/index.ts", "../../../../node_modules/.pnpm/@turf+shortest-path@7.1.0/node_modules/@turf/shortest-path/index.ts", "../../../../node_modules/.pnpm/@turf+shortest-path@7.1.0/node_modules/@turf/shortest-path/lib/javascript-astar.js", "../../../../node_modules/.pnpm/@turf+simplify@7.1.0/node_modules/@turf/simplify/index.ts", "../../../../node_modules/.pnpm/@turf+simplify@7.1.0/node_modules/@turf/simplify/lib/simplify.js", "../../../../node_modules/.pnpm/@turf+standard-deviational-ellipse@7.1.0/node_modules/@turf/standard-deviational-ellipse/index.ts", "../../../../node_modules/.pnpm/@turf+tag@7.1.0/node_modules/@turf/tag/index.ts", "../../../../node_modules/.pnpm/@turf+tesselate@7.1.0/node_modules/@turf/tesselate/index.ts", "../../../../node_modules/.pnpm/@turf+transform-translate@7.1.0/node_modules/@turf/transform-translate/index.ts", "../../../../node_modules/.pnpm/@turf+union@7.1.0/node_modules/@turf/union/index.ts", "../../../../node_modules/.pnpm/@turf+unkink-polygon@7.1.0/node_modules/@turf/unkink-polygon/index.ts", "../../../../node_modules/.pnpm/@turf+unkink-polygon@7.1.0/node_modules/@turf/unkink-polygon/lib/geojson-polygon-self-intersections.js", "../../../../node_modules/.pnpm/@turf+unkink-polygon@7.1.0/node_modules/@turf/unkink-polygon/lib/simplepolygon.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/constant.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/point.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/RedBlackTree.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/Edge.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/Cell.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/Circle.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/Beach.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/Diagram.js", "../../../../node_modules/.pnpm/d3-voronoi@1.1.2/node_modules/d3-voronoi/src/voronoi.js", "../../../../node_modules/.pnpm/@turf+voronoi@7.1.0/node_modules/@turf/voronoi/index.ts"],
  "sourcesContent": ["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).jsts=e()}(this,(function(){\"use strict\";function t(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}function e(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function n(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}function i(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}function r(t){return r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},r(t)}function s(t,e){return s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},s(t,e)}function a(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function o(t,e,n){return o=a()?Reflect.construct:function(t,e,n){var i=[null];i.push.apply(i,e);var r=new(Function.bind.apply(t,i));return n&&s(r,n.prototype),r},o.apply(null,arguments)}function u(t){var e=\"function\"==typeof Map?new Map:void 0;return u=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf(\"[native code]\")))return t;var n;if(\"function\"!=typeof t)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,i)}function i(){return o(t,arguments,r(this).constructor)}return i.prototype=Object.create(t.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),s(i,t)},u(t)}function l(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}function h(t,e){if(e&&(\"object\"==typeof e||\"function\"==typeof e))return e;if(void 0!==e)throw new TypeError(\"Derived constructors may only return object or undefined\");return l(t)}function c(t){var e=a();return function(){var n,i=r(t);if(e){var s=r(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return h(this,n)}}function f(t,e,n){return f=\"undefined\"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=r(t)););return t}(t,e);if(i){var s=Object.getOwnPropertyDescriptor(i,e);return s.get?s.get.call(n):s.value}},f(t,e,n||t)}function v(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if(\"undefined\"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t[\"@@iterator\"])return Array.from(t)}(t)||g(t)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function g(t,e){if(t){if(\"string\"==typeof t)return y(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===n&&t.constructor&&(n=t.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(t):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function d(t,e){var n=\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(!n){if(Array.isArray(t)||(n=g(t))||e&&t&&\"number\"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var s,a=!0,o=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){o=!0,s=t},f:function(){try{a||null==n.return||n.return()}finally{if(o)throw s}}}}var _=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getEndCapStyle\",value:function(){return this._endCapStyle}},{key:\"isSingleSided\",value:function(){return this._isSingleSided}},{key:\"setQuadrantSegments\",value:function(t){this._quadrantSegments=t,0===this._quadrantSegments&&(this._joinStyle=e.JOIN_BEVEL),this._quadrantSegments<0&&(this._joinStyle=e.JOIN_MITRE,this._mitreLimit=Math.abs(this._quadrantSegments)),t<=0&&(this._quadrantSegments=1),this._joinStyle!==e.JOIN_ROUND&&(this._quadrantSegments=e.DEFAULT_QUADRANT_SEGMENTS)}},{key:\"getJoinStyle\",value:function(){return this._joinStyle}},{key:\"setJoinStyle\",value:function(t){this._joinStyle=t}},{key:\"setSimplifyFactor\",value:function(t){this._simplifyFactor=t<0?0:t}},{key:\"getSimplifyFactor\",value:function(){return this._simplifyFactor}},{key:\"getQuadrantSegments\",value:function(){return this._quadrantSegments}},{key:\"setEndCapStyle\",value:function(t){this._endCapStyle=t}},{key:\"getMitreLimit\",value:function(){return this._mitreLimit}},{key:\"setMitreLimit\",value:function(t){this._mitreLimit=t}},{key:\"setSingleSided\",value:function(t){this._isSingleSided=t}}],[{key:\"constructor_\",value:function(){if(this._quadrantSegments=e.DEFAULT_QUADRANT_SEGMENTS,this._endCapStyle=e.CAP_ROUND,this._joinStyle=e.JOIN_ROUND,this._mitreLimit=e.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this._simplifyFactor=e.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.setQuadrantSegments(t)}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.setQuadrantSegments(n),this.setEndCapStyle(i)}else if(4===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2],o=arguments[3];this.setQuadrantSegments(r),this.setEndCapStyle(s),this.setJoinStyle(a),this.setMitreLimit(o)}}},{key:\"bufferDistanceError\",value:function(t){var e=Math.PI/2/t;return 1-Math.cos(e/2)}}]),e}();_.CAP_ROUND=1,_.CAP_FLAT=2,_.CAP_SQUARE=3,_.JOIN_ROUND=1,_.JOIN_MITRE=2,_.JOIN_BEVEL=3,_.DEFAULT_QUADRANT_SEGMENTS=8,_.DEFAULT_MITRE_LIMIT=5,_.DEFAULT_SIMPLIFY_FACTOR=.01;var p=function(e){i(s,e);var r=c(s);function s(e){var n;return t(this,s),(n=r.call(this,e)).name=Object.keys({Exception:s})[0],n}return n(s,[{key:\"toString\",value:function(){return this.message}}]),s}(u(Error)),m=function(e){i(r,e);var n=c(r);function r(e){var i;return t(this,r),(i=n.call(this,e)).name=Object.keys({IllegalArgumentException:r})[0],i}return r}(p),k=function(){function e(){t(this,e)}return n(e,[{key:\"filter\",value:function(t){}}]),e}();function x(){}function I(){}function E(){}var N,T,S,L,C,R,w,O,b=function(){function e(){t(this,e)}return n(e,null,[{key:\"equalsWithTolerance\",value:function(t,e,n){return Math.abs(t-e)<=n}}]),e}(),M=function(){function e(n,i){t(this,e),this.low=i||0,this.high=n||0}return n(e,null,[{key:\"toBinaryString\",value:function(t){var e,n=\"\";for(e=2147483648;e>0;e>>>=1)n+=(t.high&e)===e?\"1\":\"0\";for(e=2147483648;e>0;e>>>=1)n+=(t.low&e)===e?\"1\":\"0\";return n}}]),e}();function A(){}function P(){}A.NaN=NaN,A.isNaN=function(t){return Number.isNaN(t)},A.isInfinite=function(t){return!Number.isFinite(t)},A.MAX_VALUE=Number.MAX_VALUE,A.POSITIVE_INFINITY=Number.POSITIVE_INFINITY,A.NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY,\"function\"==typeof Float64Array&&\"function\"==typeof Int32Array?(R=2146435072,w=new Float64Array(1),O=new Int32Array(w.buffer),A.doubleToLongBits=function(t){w[0]=t;var e=0|O[0],n=0|O[1];return(n&R)===R&&0!=(1048575&n)&&0!==e&&(e=0,n=2146959360),new M(n,e)},A.longBitsToDouble=function(t){return O[0]=t.low,O[1]=t.high,w[0]}):(N=1023,T=Math.log2,S=Math.floor,L=Math.pow,C=function(){for(var t=53;t>0;t--){var e=L(2,t)-1;if(S(T(e))+1===t)return e}return 0}(),A.doubleToLongBits=function(t){var e,n,i,r,s,a,o,u,l;if(t<0||1/t===Number.NEGATIVE_INFINITY?(a=1<<31,t=-t):a=0,0===t)return new M(u=a,l=0);if(t===1/0)return new M(u=2146435072|a,l=0);if(t!=t)return new M(u=2146959360,l=0);if(r=0,l=0,(e=S(t))>1)if(e<=C)(r=S(T(e)))<=20?(l=0,u=e<<20-r&1048575):(l=e%(n=L(2,i=r-20))<<32-i,u=e/n&1048575);else for(i=e,l=0;0!==(i=S(n=i/2));)r++,l>>>=1,l|=(1&u)<<31,u>>>=1,n!==i&&(u|=524288);if(o=r+N,s=0===e,e=t-e,r<52&&0!==e)for(i=0;;){if((n=2*e)>=1?(e=n-1,s?(o--,s=!1):(i<<=1,i|=1,r++)):(e=n,s?0==--o&&(r++,s=!1):(i<<=1,r++)),20===r)u|=i,i=0;else if(52===r){l|=i;break}if(1===n){r<20?u|=i<<20-r:r<52&&(l|=i<<52-r);break}}return u|=o<<20,new M(u|=a,l)},A.longBitsToDouble=function(t){var e,n,i,r,s=t.high,a=t.low,o=s&1<<31?-1:1;for(i=((2146435072&s)>>20)-N,r=0,n=1<<19,e=1;e<=20;e++)s&n&&(r+=L(2,-e)),n>>>=1;for(n=1<<31,e=21;e<=52;e++)a&n&&(r+=L(2,-e)),n>>>=1;if(-1023===i){if(0===r)return 0*o;i=-1022}else{if(1024===i)return 0===r?o/0:NaN;r+=1}return o*r*L(2,i)});var D=function(e){i(r,e);var n=c(r);function r(e){var i;return t(this,r),(i=n.call(this,e)).name=Object.keys({RuntimeException:r})[0],i}return r}(p),F=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,null,[{key:\"constructor_\",value:function(){if(0===arguments.length)D.constructor_.call(this);else if(1===arguments.length){var t=arguments[0];D.constructor_.call(this,t)}}}]),s}(D),G=function(){function e(){t(this,e)}return n(e,null,[{key:\"shouldNeverReachHere\",value:function(){if(0===arguments.length)e.shouldNeverReachHere(null);else if(1===arguments.length){var t=arguments[0];throw new F(\"Should never reach here\"+(null!==t?\": \"+t:\"\"))}}},{key:\"isTrue\",value:function(){if(1===arguments.length){var t=arguments[0];e.isTrue(t,null)}else if(2===arguments.length){var n=arguments[0],i=arguments[1];if(!n)throw null===i?new F:new F(i)}}},{key:\"equals\",value:function(){if(2===arguments.length){var t=arguments[0],n=arguments[1];e.equals(t,n,null)}else if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];if(!r.equals(i))throw new F(\"Expected \"+i+\" but encountered \"+r+(null!==s?\": \"+s:\"\"))}}}]),e}(),q=new ArrayBuffer(8),Y=new Float64Array(q),z=new Int32Array(q),X=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getM\",value:function(){return A.NaN}},{key:\"setOrdinate\",value:function(t,n){switch(t){case e.X:this.x=n;break;case e.Y:this.y=n;break;case e.Z:this.setZ(n);break;default:throw new m(\"Invalid ordinate index: \"+t)}}},{key:\"equals2D\",value:function(){if(1===arguments.length){var t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!b.equalsWithTolerance(this.x,e.x,n)&&!!b.equalsWithTolerance(this.y,e.y,n)}}},{key:\"setM\",value:function(t){throw new m(\"Invalid ordinate index: \"+e.M)}},{key:\"getZ\",value:function(){return this.z}},{key:\"getOrdinate\",value:function(t){switch(t){case e.X:return this.x;case e.Y:return this.y;case e.Z:return this.getZ()}throw new m(\"Invalid ordinate index: \"+t)}},{key:\"equals3D\",value:function(t){return this.x===t.x&&this.y===t.y&&(this.getZ()===t.getZ()||A.isNaN(this.getZ())&&A.isNaN(t.getZ()))}},{key:\"equals\",value:function(t){return t instanceof e&&this.equals2D(t)}},{key:\"equalInZ\",value:function(t,e){return b.equalsWithTolerance(this.getZ(),t.getZ(),e)}},{key:\"setX\",value:function(t){this.x=t}},{key:\"compareTo\",value:function(t){var e=t;return this.x<e.x?-1:this.x>e.x?1:this.y<e.y?-1:this.y>e.y?1:0}},{key:\"getX\",value:function(){return this.x}},{key:\"setZ\",value:function(t){this.z=t}},{key:\"clone\",value:function(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return G.shouldNeverReachHere(\"this shouldn't happen because this class is Cloneable\"),null;throw t}}},{key:\"copy\",value:function(){return new e(this)}},{key:\"toString\",value:function(){return\"(\"+this.x+\", \"+this.y+\", \"+this.getZ()+\")\"}},{key:\"distance3D\",value:function(t){var e=this.x-t.x,n=this.y-t.y,i=this.getZ()-t.getZ();return Math.sqrt(e*e+n*n+i*i)}},{key:\"getY\",value:function(){return this.y}},{key:\"setY\",value:function(t){this.y=t}},{key:\"distance\",value:function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)}},{key:\"hashCode\",value:function(){var t=17;return t=37*(t=37*t+e.hashCode(this.x))+e.hashCode(this.y)}},{key:\"setCoordinate\",value:function(t){this.x=t.x,this.y=t.y,this.z=t.getZ()}},{key:\"interfaces_\",get:function(){return[x,I,E]}}],[{key:\"constructor_\",value:function(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)e.constructor_.call(this,0,0);else if(1===arguments.length){var t=arguments[0];e.constructor_.call(this,t.x,t.y,t.getZ())}else if(2===arguments.length){var n=arguments[0],i=arguments[1];e.constructor_.call(this,n,i,e.NULL_ORDINATE)}else if(3===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2];this.x=r,this.y=s,this.z=a}}},{key:\"hashCode\",value:function(t){return Y[0]=t,z[0]^z[1]}}]),e}(),B=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"compare\",value:function(t,n){var i=e.compare(t.x,n.x);if(0!==i)return i;var r=e.compare(t.y,n.y);return 0!==r?r:this._dimensionsToTest<=2?0:e.compare(t.getZ(),n.getZ())}},{key:\"interfaces_\",get:function(){return[P]}}],[{key:\"constructor_\",value:function(){if(this._dimensionsToTest=2,0===arguments.length)e.constructor_.call(this,2);else if(1===arguments.length){var t=arguments[0];if(2!==t&&3!==t)throw new m(\"only 2 or 3 dimensions may be specified\");this._dimensionsToTest=t}}},{key:\"compare\",value:function(t,e){return t<e?-1:t>e?1:A.isNaN(t)?A.isNaN(e)?0:-1:A.isNaN(e)?1:0}}]),e}();X.DimensionalComparator=B,X.NULL_ORDINATE=A.NaN,X.X=0,X.Y=1,X.Z=2,X.M=3;var U=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getArea\",value:function(){return this.getWidth()*this.getHeight()}},{key:\"equals\",value:function(t){if(!(t instanceof e))return!1;var n=t;return this.isNull()?n.isNull():this._maxx===n.getMaxX()&&this._maxy===n.getMaxY()&&this._minx===n.getMinX()&&this._miny===n.getMinY()}},{key:\"intersection\",value:function(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new e;var n=this._minx>t._minx?this._minx:t._minx,i=this._miny>t._miny?this._miny:t._miny;return new e(n,this._maxx<t._maxx?this._maxx:t._maxx,i,this._maxy<t._maxy?this._maxy:t._maxy)}},{key:\"isNull\",value:function(){return this._maxx<this._minx}},{key:\"getMaxX\",value:function(){return this._maxx}},{key:\"covers\",value:function(){if(1===arguments.length){if(arguments[0]instanceof X){var t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof e){var n=arguments[0];return!this.isNull()&&!n.isNull()&&(n.getMinX()>=this._minx&&n.getMaxX()<=this._maxx&&n.getMinY()>=this._miny&&n.getMaxY()<=this._maxy)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];return!this.isNull()&&(i>=this._minx&&i<=this._maxx&&r>=this._miny&&r<=this._maxy)}}},{key:\"intersects\",value:function(){if(1===arguments.length){if(arguments[0]instanceof e){var t=arguments[0];return!this.isNull()&&!t.isNull()&&!(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}if(arguments[0]instanceof X){var n=arguments[0];return this.intersects(n.x,n.y)}}else if(2===arguments.length){if(arguments[0]instanceof X&&arguments[1]instanceof X){var i=arguments[0],r=arguments[1];if(this.isNull())return!1;var s=i.x<r.x?i.x:r.x;if(s>this._maxx)return!1;var a=i.x>r.x?i.x:r.x;if(a<this._minx)return!1;var o=i.y<r.y?i.y:r.y;if(o>this._maxy)return!1;var u=i.y>r.y?i.y:r.y;return!(u<this._miny)}if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var l=arguments[0],h=arguments[1];return!this.isNull()&&!(l>this._maxx||l<this._minx||h>this._maxy||h<this._miny)}}}},{key:\"getMinY\",value:function(){return this._miny}},{key:\"getDiameter\",value:function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return Math.sqrt(t*t+e*e)}},{key:\"getMinX\",value:function(){return this._minx}},{key:\"expandToInclude\",value:function(){if(1===arguments.length){if(arguments[0]instanceof X){var t=arguments[0];this.expandToInclude(t.x,t.y)}else if(arguments[0]instanceof e){var n=arguments[0];if(n.isNull())return null;this.isNull()?(this._minx=n.getMinX(),this._maxx=n.getMaxX(),this._miny=n.getMinY(),this._maxy=n.getMaxY()):(n._minx<this._minx&&(this._minx=n._minx),n._maxx>this._maxx&&(this._maxx=n._maxx),n._miny<this._miny&&(this._miny=n._miny),n._maxy>this._maxy&&(this._maxy=n._maxy))}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.isNull()?(this._minx=i,this._maxx=i,this._miny=r,this._maxy=r):(i<this._minx&&(this._minx=i),i>this._maxx&&(this._maxx=i),r<this._miny&&(this._miny=r),r>this._maxy&&(this._maxy=r))}}},{key:\"minExtent\",value:function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t<e?t:e}},{key:\"getWidth\",value:function(){return this.isNull()?0:this._maxx-this._minx}},{key:\"compareTo\",value:function(t){var e=t;return this.isNull()?e.isNull()?0:-1:e.isNull()?1:this._minx<e._minx?-1:this._minx>e._minx?1:this._miny<e._miny?-1:this._miny>e._miny?1:this._maxx<e._maxx?-1:this._maxx>e._maxx?1:this._maxy<e._maxy?-1:this._maxy>e._maxy?1:0}},{key:\"translate\",value:function(t,e){if(this.isNull())return null;this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e)}},{key:\"copy\",value:function(){return new e(this)}},{key:\"toString\",value:function(){return\"Env[\"+this._minx+\" : \"+this._maxx+\", \"+this._miny+\" : \"+this._maxy+\"]\"}},{key:\"setToNull\",value:function(){this._minx=0,this._maxx=-1,this._miny=0,this._maxy=-1}},{key:\"disjoint\",value:function(t){return!(!this.isNull()&&!t.isNull())||(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}},{key:\"getHeight\",value:function(){return this.isNull()?0:this._maxy-this._miny}},{key:\"maxExtent\",value:function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t>e?t:e}},{key:\"expandBy\",value:function(){if(1===arguments.length){var t=arguments[0];this.expandBy(t,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this.isNull())return null;this._minx-=e,this._maxx+=e,this._miny-=n,this._maxy+=n,(this._minx>this._maxx||this._miny>this._maxy)&&this.setToNull()}}},{key:\"contains\",value:function(){if(1===arguments.length){if(arguments[0]instanceof e){var t=arguments[0];return this.covers(t)}if(arguments[0]instanceof X){var n=arguments[0];return this.covers(n)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];return this.covers(i,r)}}},{key:\"centre\",value:function(){return this.isNull()?null:new X((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)}},{key:\"init\",value:function(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof X){var t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof e){var n=arguments[0];this._minx=n._minx,this._maxx=n._maxx,this._miny=n._miny,this._maxy=n._maxy}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.init(i.x,r.x,i.y,r.y)}else if(4===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2],u=arguments[3];s<a?(this._minx=s,this._maxx=a):(this._minx=a,this._maxx=s),o<u?(this._miny=o,this._maxy=u):(this._miny=u,this._maxy=o)}}},{key:\"getMaxY\",value:function(){return this._maxy}},{key:\"distance\",value:function(t){if(this.intersects(t))return 0;var e=0;this._maxx<t._minx?e=t._minx-this._maxx:this._minx>t._maxx&&(e=this._minx-t._maxx);var n=0;return this._maxy<t._miny?n=t._miny-this._maxy:this._miny>t._maxy&&(n=this._miny-t._maxy),0===e?n:0===n?e:Math.sqrt(e*e+n*n)}},{key:\"hashCode\",value:function(){var t=17;return t=37*(t=37*(t=37*(t=37*t+X.hashCode(this._minx))+X.hashCode(this._maxx))+X.hashCode(this._miny))+X.hashCode(this._maxy)}},{key:\"interfaces_\",get:function(){return[x,E]}}],[{key:\"constructor_\",value:function(){if(this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof X){var t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof e){var n=arguments[0];this.init(n)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.init(i.x,r.x,i.y,r.y)}else if(4===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2],u=arguments[3];this.init(s,a,o,u)}}},{key:\"intersects\",value:function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];return n.x>=(t.x<e.x?t.x:e.x)&&n.x<=(t.x>e.x?t.x:e.x)&&n.y>=(t.y<e.y?t.y:e.y)&&n.y<=(t.y>e.y?t.y:e.y)}if(4===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2],a=arguments[3],o=Math.min(s.x,a.x),u=Math.max(s.x,a.x),l=Math.min(i.x,r.x),h=Math.max(i.x,r.x);return!(l>u)&&(!(h<o)&&(o=Math.min(s.y,a.y),u=Math.max(s.y,a.y),l=Math.min(i.y,r.y),h=Math.max(i.y,r.y),!(l>u)&&!(h<o)))}}}]),e}(),V=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"isGeometryCollection\",value:function(){return this.getTypeCode()===e.TYPECODE_GEOMETRYCOLLECTION}},{key:\"getFactory\",value:function(){return this._factory}},{key:\"getGeometryN\",value:function(t){return this}},{key:\"getArea\",value:function(){return 0}},{key:\"isRectangle\",value:function(){return!1}},{key:\"equalsExact\",value:function(t){return this===t||this.equalsExact(t,0)}},{key:\"geometryChanged\",value:function(){this.apply(e.geometryChangedFilter)}},{key:\"geometryChangedAction\",value:function(){this._envelope=null}},{key:\"equalsNorm\",value:function(t){return null!==t&&this.norm().equalsExact(t.norm())}},{key:\"getLength\",value:function(){return 0}},{key:\"getNumGeometries\",value:function(){return 1}},{key:\"compareTo\",value:function(){var t;if(1===arguments.length){var e=arguments[0];return t=e,this.getTypeCode()!==t.getTypeCode()?this.getTypeCode()-t.getTypeCode():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(e)}if(2===arguments.length){var n=arguments[0],i=arguments[1];return t=n,this.getTypeCode()!==t.getTypeCode()?this.getTypeCode()-t.getTypeCode():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(n,i)}}},{key:\"getUserData\",value:function(){return this._userData}},{key:\"getSRID\",value:function(){return this._SRID}},{key:\"getEnvelope\",value:function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())}},{key:\"checkNotGeometryCollection\",value:function(t){if(t.getTypeCode()===e.TYPECODE_GEOMETRYCOLLECTION)throw new m(\"This method does not support GeometryCollection arguments\")}},{key:\"equal\",value:function(t,e,n){return 0===n?t.equals(e):t.distance(e)<=n}},{key:\"norm\",value:function(){var t=this.copy();return t.normalize(),t}},{key:\"reverse\",value:function(){var t=this.reverseInternal();return null!=this.envelope&&(t.envelope=this.envelope.copy()),t.setSRID(this.getSRID()),t}},{key:\"copy\",value:function(){var t=this.copyInternal();return t.envelope=null==this._envelope?null:this._envelope.copy(),t._SRID=this._SRID,t._userData=this._userData,t}},{key:\"getPrecisionModel\",value:function(){return this._factory.getPrecisionModel()}},{key:\"getEnvelopeInternal\",value:function(){return null===this._envelope&&(this._envelope=this.computeEnvelopeInternal()),new U(this._envelope)}},{key:\"setSRID\",value:function(t){this._SRID=t}},{key:\"setUserData\",value:function(t){this._userData=t}},{key:\"compare\",value:function(t,e){for(var n=t.iterator(),i=e.iterator();n.hasNext()&&i.hasNext();){var r=n.next(),s=i.next(),a=r.compareTo(s);if(0!==a)return a}return n.hasNext()?1:i.hasNext()?-1:0}},{key:\"hashCode\",value:function(){return this.getEnvelopeInternal().hashCode()}},{key:\"isEquivalentClass\",value:function(t){return this.getClass()===t.getClass()}},{key:\"isGeometryCollectionOrDerived\",value:function(){return this.getTypeCode()===e.TYPECODE_GEOMETRYCOLLECTION||this.getTypeCode()===e.TYPECODE_MULTIPOINT||this.getTypeCode()===e.TYPECODE_MULTILINESTRING||this.getTypeCode()===e.TYPECODE_MULTIPOLYGON}},{key:\"interfaces_\",get:function(){return[I,x,E]}},{key:\"getClass\",value:function(){return e}}],[{key:\"hasNonEmptyElements\",value:function(t){for(var e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1}},{key:\"hasNullElements\",value:function(t){for(var e=0;e<t.length;e++)if(null===t[e])return!0;return!1}}]),e}();V.constructor_=function(t){t&&(this._envelope=null,this._userData=null,this._factory=t,this._SRID=t.getSRID())},V.TYPECODE_POINT=0,V.TYPECODE_MULTIPOINT=1,V.TYPECODE_LINESTRING=2,V.TYPECODE_LINEARRING=3,V.TYPECODE_MULTILINESTRING=4,V.TYPECODE_POLYGON=5,V.TYPECODE_MULTIPOLYGON=6,V.TYPECODE_GEOMETRYCOLLECTION=7,V.TYPENAME_POINT=\"Point\",V.TYPENAME_MULTIPOINT=\"MultiPoint\",V.TYPENAME_LINESTRING=\"LineString\",V.TYPENAME_LINEARRING=\"LinearRing\",V.TYPENAME_MULTILINESTRING=\"MultiLineString\",V.TYPENAME_POLYGON=\"Polygon\",V.TYPENAME_MULTIPOLYGON=\"MultiPolygon\",V.TYPENAME_GEOMETRYCOLLECTION=\"GeometryCollection\",V.geometryChangedFilter={get interfaces_(){return[k]},filter:function(t){t.geometryChangedAction()}};var H=function(){function e(){t(this,e)}return n(e,null,[{key:\"toLocationSymbol\",value:function(t){switch(t){case e.EXTERIOR:return\"e\";case e.BOUNDARY:return\"b\";case e.INTERIOR:return\"i\";case e.NONE:return\"-\"}throw new m(\"Unknown location value: \"+t)}}]),e}();H.INTERIOR=0,H.BOUNDARY=1,H.EXTERIOR=2,H.NONE=-1;var Z=function(){function e(){t(this,e)}return n(e,[{key:\"add\",value:function(){}},{key:\"addAll\",value:function(){}},{key:\"isEmpty\",value:function(){}},{key:\"iterator\",value:function(){}},{key:\"size\",value:function(){}},{key:\"toArray\",value:function(){}},{key:\"remove\",value:function(){}}]),e}(),j=function(e){i(r,e);var n=c(r);function r(e){var i;return t(this,r),(i=n.call(this,e)).name=Object.keys({NoSuchElementException:r})[0],i}return r}(p),W=function(e){i(r,e);var n=c(r);function r(e){var i;return t(this,r),(i=n.call(this,e)).name=Object.keys({UnsupportedOperationException:r})[0],i}return r}(p),K=function(e){i(s,e);var r=c(s);function s(){return t(this,s),r.apply(this,arguments)}return n(s,[{key:\"contains\",value:function(){}}]),s}(Z),J=function(e,r){i(a,e);var s=c(a);function a(e){var n;return t(this,a),(n=s.call(this)).map=new Map,e instanceof Z&&n.addAll(e),n}return n(a,[{key:\"contains\",value:function(t){var e=t.hashCode?t.hashCode():t;return!!this.map.has(e)}},{key:\"add\",value:function(t){var e=t.hashCode?t.hashCode():t;return!this.map.has(e)&&!!this.map.set(e,t)}},{key:\"addAll\",value:function(t){var e,n=d(t);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.add(i)}}catch(t){n.e(t)}finally{n.f()}return!0}},{key:\"remove\",value:function(){throw new W}},{key:\"size\",value:function(){return this.map.size}},{key:\"isEmpty\",value:function(){return 0===this.map.size}},{key:\"toArray\",value:function(){return Array.from(this.map.values())}},{key:\"iterator\",value:function(){return new Q(this.map)}},{key:r,value:function(){return this.map}}]),a}(K,Symbol.iterator),Q=function(){function e(n){t(this,e),this.iterator=n.values();var i=this.iterator.next(),r=i.done,s=i.value;this.done=r,this.value=s}return n(e,[{key:\"next\",value:function(){if(this.done)throw new j;var t=this.value,e=this.iterator.next(),n=e.done,i=e.value;return this.done=n,this.value=i,t}},{key:\"hasNext\",value:function(){return!this.done}},{key:\"remove\",value:function(){throw new W}}]),e}(),$=function(){function e(){t(this,e)}return n(e,null,[{key:\"opposite\",value:function(t){return t===e.LEFT?e.RIGHT:t===e.RIGHT?e.LEFT:t}}]),e}();$.ON=0,$.LEFT=1,$.RIGHT=2;var tt=function(e){i(r,e);var n=c(r);function r(e){var i;return t(this,r),(i=n.call(this,e)).name=Object.keys({EmptyStackException:r})[0],i}return r}(p),et=function(e){i(r,e);var n=c(r);function r(e){var i;return t(this,r),(i=n.call(this,e)).name=Object.keys({IndexOutOfBoundsException:r})[0],i}return r}(p),nt=function(e){i(s,e);var r=c(s);function s(){return t(this,s),r.apply(this,arguments)}return n(s,[{key:\"get\",value:function(){}},{key:\"set\",value:function(){}},{key:\"isEmpty\",value:function(){}}]),s}(Z),it=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),(e=r.call(this)).array=[],e}return n(s,[{key:\"add\",value:function(t){return this.array.push(t),!0}},{key:\"get\",value:function(t){if(t<0||t>=this.size())throw new et;return this.array[t]}},{key:\"push\",value:function(t){return this.array.push(t),t}},{key:\"pop\",value:function(){if(0===this.array.length)throw new tt;return this.array.pop()}},{key:\"peek\",value:function(){if(0===this.array.length)throw new tt;return this.array[this.array.length-1]}},{key:\"empty\",value:function(){return 0===this.array.length}},{key:\"isEmpty\",value:function(){return this.empty()}},{key:\"search\",value:function(t){return this.array.indexOf(t)}},{key:\"size\",value:function(){return this.array.length}},{key:\"toArray\",value:function(){return this.array.slice()}}]),s}(nt);function rt(t,e){return t.interfaces_&&t.interfaces_.indexOf(e)>-1}var st=function(){function e(n){t(this,e),this.str=n}return n(e,[{key:\"append\",value:function(t){this.str+=t}},{key:\"setCharAt\",value:function(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)}},{key:\"toString\",value:function(){return this.str}}]),e}(),at=function(){function e(n){t(this,e),this.value=n}return n(e,[{key:\"intValue\",value:function(){return this.value}},{key:\"compareTo\",value:function(t){return this.value<t?-1:this.value>t?1:0}}],[{key:\"compare\",value:function(t,e){return t<e?-1:t>e?1:0}},{key:\"isNan\",value:function(t){return Number.isNaN(t)}},{key:\"valueOf\",value:function(t){return new e(t)}}]),e}(),ot=function(){function e(){t(this,e)}return n(e,null,[{key:\"isWhitespace\",value:function(t){return t<=32&&t>=0||127===t}},{key:\"toUpperCase\",value:function(t){return t.toUpperCase()}}]),e}(),ut=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"le\",value:function(t){return this._hi<t._hi||this._hi===t._hi&&this._lo<=t._lo}},{key:\"extractSignificantDigits\",value:function(t,n){var i=this.abs(),r=e.magnitude(i._hi),s=e.TEN.pow(r);(i=i.divide(s)).gt(e.TEN)?(i=i.divide(e.TEN),r+=1):i.lt(e.ONE)&&(i=i.multiply(e.TEN),r-=1);for(var a=r+1,o=new st,u=e.MAX_PRINT_DIGITS-1,l=0;l<=u;l++){t&&l===a&&o.append(\".\");var h=Math.trunc(i._hi);if(h<0)break;var c=!1,f=0;h>9?(c=!0,f=\"9\"):f=\"0\"+h,o.append(f),i=i.subtract(e.valueOf(h)).multiply(e.TEN),c&&i.selfAdd(e.TEN);var v=!0,g=e.magnitude(i._hi);if(g<0&&Math.abs(g)>=u-l&&(v=!1),!v)break}return n[0]=r,o.toString()}},{key:\"sqr\",value:function(){return this.multiply(this)}},{key:\"doubleValue\",value:function(){return this._hi+this._lo}},{key:\"subtract\",value:function(){if(arguments[0]instanceof e){var t=arguments[0];return this.add(t.negate())}if(\"number\"==typeof arguments[0]){var n=arguments[0];return this.add(-n)}}},{key:\"equals\",value:function(){if(1===arguments.length&&arguments[0]instanceof e){var t=arguments[0];return this._hi===t._hi&&this._lo===t._lo}}},{key:\"isZero\",value:function(){return 0===this._hi&&0===this._lo}},{key:\"selfSubtract\",value:function(){if(arguments[0]instanceof e){var t=arguments[0];return this.isNaN()?this:this.selfAdd(-t._hi,-t._lo)}if(\"number\"==typeof arguments[0]){var n=arguments[0];return this.isNaN()?this:this.selfAdd(-n,0)}}},{key:\"getSpecialNumberString\",value:function(){return this.isZero()?\"0.0\":this.isNaN()?\"NaN \":null}},{key:\"min\",value:function(t){return this.le(t)?this:t}},{key:\"selfDivide\",value:function(){if(1===arguments.length){if(arguments[0]instanceof e){var t=arguments[0];return this.selfDivide(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var n=arguments[0];return this.selfDivide(n,0)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1],s=null,a=null,o=null,u=null,l=null,h=null,c=null,f=null;return l=this._hi/i,f=(s=(h=e.SPLIT*l)-(s=h-l))*(o=(f=e.SPLIT*i)-(o=f-i))-(c=l*i)+s*(u=i-o)+(a=l-s)*o+a*u,f=l+(h=(this._hi-c-f+this._lo-l*r)/i),this._hi=f,this._lo=l-f+h,this}}},{key:\"dump\",value:function(){return\"DD<\"+this._hi+\", \"+this._lo+\">\"}},{key:\"divide\",value:function(){if(arguments[0]instanceof e){var t=arguments[0],n=null,i=null,r=null,s=null,a=null,o=null,u=null,l=null;i=(a=this._hi/t._hi)-(n=(o=e.SPLIT*a)-(n=o-a)),l=n*(r=(l=e.SPLIT*t._hi)-(r=l-t._hi))-(u=a*t._hi)+n*(s=t._hi-r)+i*r+i*s;var h=l=a+(o=(this._hi-u-l+this._lo-a*t._lo)/t._hi),c=a-l+o;return new e(h,c)}if(\"number\"==typeof arguments[0]){var f=arguments[0];return A.isNaN(f)?e.createNaN():e.copy(this).selfDivide(f,0)}}},{key:\"ge\",value:function(t){return this._hi>t._hi||this._hi===t._hi&&this._lo>=t._lo}},{key:\"pow\",value:function(t){if(0===t)return e.valueOf(1);var n=new e(this),i=e.valueOf(1),r=Math.abs(t);if(r>1)for(;r>0;)r%2==1&&i.selfMultiply(n),(r/=2)>0&&(n=n.sqr());else i=n;return t<0?i.reciprocal():i}},{key:\"ceil\",value:function(){if(this.isNaN())return e.NaN;var t=Math.ceil(this._hi),n=0;return t===this._hi&&(n=Math.ceil(this._lo)),new e(t,n)}},{key:\"compareTo\",value:function(t){var e=t;return this._hi<e._hi?-1:this._hi>e._hi?1:this._lo<e._lo?-1:this._lo>e._lo?1:0}},{key:\"rint\",value:function(){return this.isNaN()?this:this.add(.5).floor()}},{key:\"setValue\",value:function(){if(arguments[0]instanceof e){var t=arguments[0];return this.init(t),this}if(\"number\"==typeof arguments[0]){var n=arguments[0];return this.init(n),this}}},{key:\"max\",value:function(t){return this.ge(t)?this:t}},{key:\"sqrt\",value:function(){if(this.isZero())return e.valueOf(0);if(this.isNegative())return e.NaN;var t=1/Math.sqrt(this._hi),n=this._hi*t,i=e.valueOf(n),r=this.subtract(i.sqr())._hi*(.5*t);return i.add(r)}},{key:\"selfAdd\",value:function(){if(1===arguments.length){if(arguments[0]instanceof e){var t=arguments[0];return this.selfAdd(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var n=arguments[0],i=null,r=null,s=null,a=null,o=null,u=null;return a=(s=this._hi+n)-(o=s-this._hi),r=(u=(a=n-o+(this._hi-a))+this._lo)+(s-(i=s+u)),this._hi=i+r,this._lo=r+(i-this._hi),this}}else if(2===arguments.length){var l=arguments[0],h=arguments[1],c=null,f=null,v=null,g=null,y=null,d=null,_=null;g=this._hi+l,f=this._lo+h,y=g-(d=g-this._hi),v=f-(_=f-this._lo);var p=(c=g+(d=(y=l-d+(this._hi-y))+f))+(d=(v=h-_+(this._lo-v))+(d+(g-c))),m=d+(c-p);return this._hi=p,this._lo=m,this}}},{key:\"selfMultiply\",value:function(){if(1===arguments.length){if(arguments[0]instanceof e){var t=arguments[0];return this.selfMultiply(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var n=arguments[0];return this.selfMultiply(n,0)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1],s=null,a=null,o=null,u=null,l=null,h=null;s=(l=e.SPLIT*this._hi)-this._hi,h=e.SPLIT*i,s=l-s,a=this._hi-s,o=h-i;var c=(l=this._hi*i)+(h=s*(o=h-o)-l+s*(u=i-o)+a*o+a*u+(this._hi*r+this._lo*i)),f=h+(s=l-c);return this._hi=c,this._lo=f,this}}},{key:\"selfSqr\",value:function(){return this.selfMultiply(this)}},{key:\"floor\",value:function(){if(this.isNaN())return e.NaN;var t=Math.floor(this._hi),n=0;return t===this._hi&&(n=Math.floor(this._lo)),new e(t,n)}},{key:\"negate\",value:function(){return this.isNaN()?this:new e(-this._hi,-this._lo)}},{key:\"clone\",value:function(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return null;throw t}}},{key:\"multiply\",value:function(){if(arguments[0]instanceof e){var t=arguments[0];return t.isNaN()?e.createNaN():e.copy(this).selfMultiply(t)}if(\"number\"==typeof arguments[0]){var n=arguments[0];return A.isNaN(n)?e.createNaN():e.copy(this).selfMultiply(n,0)}}},{key:\"isNaN\",value:function(){return A.isNaN(this._hi)}},{key:\"intValue\",value:function(){return Math.trunc(this._hi)}},{key:\"toString\",value:function(){var t=e.magnitude(this._hi);return t>=-3&&t<=20?this.toStandardNotation():this.toSciNotation()}},{key:\"toStandardNotation\",value:function(){var t=this.getSpecialNumberString();if(null!==t)return t;var n=new Array(1).fill(null),i=this.extractSignificantDigits(!0,n),r=n[0]+1,s=i;if(\".\"===i.charAt(0))s=\"0\"+i;else if(r<0)s=\"0.\"+e.stringOfChar(\"0\",-r)+i;else if(-1===i.indexOf(\".\")){var a=r-i.length;s=i+e.stringOfChar(\"0\",a)+\".0\"}return this.isNegative()?\"-\"+s:s}},{key:\"reciprocal\",value:function(){var t,n,i,r,s=null,a=null,o=null,u=null;t=(i=1/this._hi)-(s=(o=e.SPLIT*i)-(s=o-i)),a=(u=e.SPLIT*this._hi)-this._hi;var l=i+(o=(1-(r=i*this._hi)-(u=s*(a=u-a)-r+s*(n=this._hi-a)+t*a+t*n)-i*this._lo)/this._hi);return new e(l,i-l+o)}},{key:\"toSciNotation\",value:function(){if(this.isZero())return e.SCI_NOT_ZERO;var t=this.getSpecialNumberString();if(null!==t)return t;var n=new Array(1).fill(null),i=this.extractSignificantDigits(!1,n),r=e.SCI_NOT_EXPONENT_CHAR+n[0];if(\"0\"===i.charAt(0))throw new IllegalStateException(\"Found leading zero: \"+i);var s=\"\";i.length>1&&(s=i.substring(1));var a=i.charAt(0)+\".\"+s;return this.isNegative()?\"-\"+a+r:a+r}},{key:\"abs\",value:function(){return this.isNaN()?e.NaN:this.isNegative()?this.negate():new e(this)}},{key:\"isPositive\",value:function(){return this._hi>0||0===this._hi&&this._lo>0}},{key:\"lt\",value:function(t){return this._hi<t._hi||this._hi===t._hi&&this._lo<t._lo}},{key:\"add\",value:function(){if(arguments[0]instanceof e){var t=arguments[0];return e.copy(this).selfAdd(t)}if(\"number\"==typeof arguments[0]){var n=arguments[0];return e.copy(this).selfAdd(n)}}},{key:\"init\",value:function(){if(1===arguments.length){if(\"number\"==typeof arguments[0]){var t=arguments[0];this._hi=t,this._lo=0}else if(arguments[0]instanceof e){var n=arguments[0];this._hi=n._hi,this._lo=n._lo}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this._hi=i,this._lo=r}}},{key:\"gt\",value:function(t){return this._hi>t._hi||this._hi===t._hi&&this._lo>t._lo}},{key:\"isNegative\",value:function(){return this._hi<0||0===this._hi&&this._lo<0}},{key:\"trunc\",value:function(){return this.isNaN()?e.NaN:this.isPositive()?this.floor():this.ceil()}},{key:\"signum\",value:function(){return this._hi>0?1:this._hi<0?-1:this._lo>0?1:this._lo<0?-1:0}},{key:\"interfaces_\",get:function(){return[E,x,I]}}],[{key:\"constructor_\",value:function(){if(this._hi=0,this._lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if(\"number\"==typeof arguments[0]){var t=arguments[0];this.init(t)}else if(arguments[0]instanceof e){var n=arguments[0];this.init(n)}else if(\"string\"==typeof arguments[0]){var i=arguments[0];e.constructor_.call(this,e.parse(i))}}else if(2===arguments.length){var r=arguments[0],s=arguments[1];this.init(r,s)}}},{key:\"determinant\",value:function(){if(\"number\"==typeof arguments[3]&&\"number\"==typeof arguments[2]&&\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],n=arguments[1],i=arguments[2],r=arguments[3];return e.determinant(e.valueOf(t),e.valueOf(n),e.valueOf(i),e.valueOf(r))}if(arguments[3]instanceof e&&arguments[2]instanceof e&&arguments[0]instanceof e&&arguments[1]instanceof e){var s=arguments[0],a=arguments[1],o=arguments[2],u=arguments[3],l=s.multiply(u).selfSubtract(a.multiply(o));return l}}},{key:\"sqr\",value:function(t){return e.valueOf(t).selfMultiply(t)}},{key:\"valueOf\",value:function(){if(\"string\"==typeof arguments[0]){var t=arguments[0];return e.parse(t)}if(\"number\"==typeof arguments[0]){var n=arguments[0];return new e(n)}}},{key:\"sqrt\",value:function(t){return e.valueOf(t).sqrt()}},{key:\"parse\",value:function(t){for(var n=0,i=t.length;ot.isWhitespace(t.charAt(n));)n++;var r=!1;if(n<i){var s=t.charAt(n);\"-\"!==s&&\"+\"!==s||(n++,\"-\"===s&&(r=!0))}for(var a=new e,o=0,u=0,l=0,h=!1;!(n>=i);){var c=t.charAt(n);if(n++,ot.isDigit(c)){var f=c-\"0\";a.selfMultiply(e.TEN),a.selfAdd(f),o++}else{if(\".\"!==c){if(\"e\"===c||\"E\"===c){var v=t.substring(n);try{l=at.parseInt(v)}catch(e){throw e instanceof NumberFormatException?new NumberFormatException(\"Invalid exponent \"+v+\" in string \"+t):e}break}throw new NumberFormatException(\"Unexpected character '\"+c+\"' at position \"+n+\" in string \"+t)}u=o,h=!0}}var g=a;h||(u=o);var y=o-u-l;if(0===y)g=a;else if(y>0){var d=e.TEN.pow(y);g=a.divide(d)}else if(y<0){var _=e.TEN.pow(-y);g=a.multiply(_)}return r?g.negate():g}},{key:\"createNaN\",value:function(){return new e(A.NaN,A.NaN)}},{key:\"copy\",value:function(t){return new e(t)}},{key:\"magnitude\",value:function(t){var e=Math.abs(t),n=Math.log(e)/Math.log(10),i=Math.trunc(Math.floor(n));return 10*Math.pow(10,i)<=e&&(i+=1),i}},{key:\"stringOfChar\",value:function(t,e){for(var n=new st,i=0;i<e;i++)n.append(t);return n.toString()}}]),e}();ut.PI=new ut(3.141592653589793,12246467991473532e-32),ut.TWO_PI=new ut(6.283185307179586,24492935982947064e-32),ut.PI_2=new ut(1.5707963267948966,6123233995736766e-32),ut.E=new ut(2.718281828459045,14456468917292502e-32),ut.NaN=new ut(A.NaN,A.NaN),ut.EPS=123259516440783e-46,ut.SPLIT=134217729,ut.MAX_PRINT_DIGITS=32,ut.TEN=ut.valueOf(10),ut.ONE=ut.valueOf(1),ut.SCI_NOT_EXPONENT_CHAR=\"E\",ut.SCI_NOT_ZERO=\"0.0E0\";var lt=function(){function e(){t(this,e)}return n(e,null,[{key:\"orientationIndex\",value:function(t,n,i){var r=e.orientationIndexFilter(t,n,i);if(r<=1)return r;var s=ut.valueOf(n.x).selfAdd(-t.x),a=ut.valueOf(n.y).selfAdd(-t.y),o=ut.valueOf(i.x).selfAdd(-n.x),u=ut.valueOf(i.y).selfAdd(-n.y);return s.selfMultiply(u).selfSubtract(a.selfMultiply(o)).signum()}},{key:\"signOfDet2x2\",value:function(){if(arguments[3]instanceof ut&&arguments[2]instanceof ut&&arguments[0]instanceof ut&&arguments[1]instanceof ut){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],r=t.multiply(i).selfSubtract(e.multiply(n));return r.signum()}if(\"number\"==typeof arguments[3]&&\"number\"==typeof arguments[2]&&\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var s=arguments[0],a=arguments[1],o=arguments[2],u=arguments[3],l=ut.valueOf(s),h=ut.valueOf(a),c=ut.valueOf(o),f=ut.valueOf(u),v=l.multiply(f).selfSubtract(h.multiply(c));return v.signum()}}},{key:\"intersection\",value:function(t,e,n,i){var r=new ut(t.y).selfSubtract(e.y),s=new ut(e.x).selfSubtract(t.x),a=new ut(t.x).selfMultiply(e.y).selfSubtract(new ut(e.x).selfMultiply(t.y)),o=new ut(n.y).selfSubtract(i.y),u=new ut(i.x).selfSubtract(n.x),l=new ut(n.x).selfMultiply(i.y).selfSubtract(new ut(i.x).selfMultiply(n.y)),h=s.multiply(l).selfSubtract(u.multiply(a)),c=o.multiply(a).selfSubtract(r.multiply(l)),f=r.multiply(u).selfSubtract(o.multiply(s)),v=h.selfDivide(f).doubleValue(),g=c.selfDivide(f).doubleValue();return A.isNaN(v)||A.isInfinite(v)||A.isNaN(g)||A.isInfinite(g)?null:new X(v,g)}},{key:\"orientationIndexFilter\",value:function(t,n,i){var r=null,s=(t.x-i.x)*(n.y-i.y),a=(t.y-i.y)*(n.x-i.x),o=s-a;if(s>0){if(a<=0)return e.signum(o);r=s+a}else{if(!(s<0))return e.signum(o);if(a>=0)return e.signum(o);r=-s-a}var u=e.DP_SAFE_EPSILON*r;return o>=u||-o>=u?e.signum(o):2}},{key:\"signum\",value:function(t){return t>0?1:t<0?-1:0}}]),e}();lt.DP_SAFE_EPSILON=1e-15;var ht=function(){function e(){t(this,e)}return n(e,[{key:\"getM\",value:function(t){if(this.hasM()){var e=this.getDimension()-this.getMeasures();return this.getOrdinate(t,e)}return A.NaN}},{key:\"setOrdinate\",value:function(t,e,n){}},{key:\"getZ\",value:function(t){return this.hasZ()?this.getOrdinate(t,2):A.NaN}},{key:\"size\",value:function(){}},{key:\"getOrdinate\",value:function(t,e){}},{key:\"getCoordinate\",value:function(){}},{key:\"getCoordinateCopy\",value:function(t){}},{key:\"createCoordinate\",value:function(){}},{key:\"getDimension\",value:function(){}},{key:\"hasM\",value:function(){return this.getMeasures()>0}},{key:\"getX\",value:function(t){}},{key:\"hasZ\",value:function(){return this.getDimension()-this.getMeasures()>2}},{key:\"getMeasures\",value:function(){return 0}},{key:\"expandEnvelope\",value:function(t){}},{key:\"copy\",value:function(){}},{key:\"getY\",value:function(t){}},{key:\"toCoordinateArray\",value:function(){}},{key:\"interfaces_\",get:function(){return[I]}}]),e}();ht.X=0,ht.Y=1,ht.Z=2,ht.M=3;var ct=function(){function e(){t(this,e)}return n(e,null,[{key:\"index\",value:function(t,e,n){return lt.orientationIndex(t,e,n)}},{key:\"isCCW\",value:function(){if(arguments[0]instanceof Array){var t=arguments[0],n=t.length-1;if(n<3)throw new m(\"Ring has fewer than 4 points, so orientation cannot be determined\");for(var i=t[0],r=0,s=1;s<=n;s++){var a=t[s];a.y>i.y&&(i=a,r=s)}var o=r;do{(o-=1)<0&&(o=n)}while(t[o].equals2D(i)&&o!==r);var u=r;do{u=(u+1)%n}while(t[u].equals2D(i)&&u!==r);var l=t[o],h=t[u];if(l.equals2D(i)||h.equals2D(i)||l.equals2D(h))return!1;var c=e.index(l,i,h),f=null;return f=0===c?l.x>h.x:c>0,f}if(rt(arguments[0],ht)){var v=arguments[0],g=v.size()-1;if(g<3)throw new m(\"Ring has fewer than 4 points, so orientation cannot be determined\");for(var y=v.getCoordinate(0),d=0,_=1;_<=g;_++){var p=v.getCoordinate(_);p.y>y.y&&(y=p,d=_)}var k=null,x=d;do{(x-=1)<0&&(x=g),k=v.getCoordinate(x)}while(k.equals2D(y)&&x!==d);var I=null,E=d;do{E=(E+1)%g,I=v.getCoordinate(E)}while(I.equals2D(y)&&E!==d);if(k.equals2D(y)||I.equals2D(y)||k.equals2D(I))return!1;var N=e.index(k,y,I);return 0===N?k.x>I.x:N>0}}}]),e}();ct.CLOCKWISE=-1,ct.RIGHT=ct.CLOCKWISE,ct.COUNTERCLOCKWISE=1,ct.LEFT=ct.COUNTERCLOCKWISE,ct.COLLINEAR=0,ct.STRAIGHT=ct.COLLINEAR;var ft=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getCoordinate\",value:function(){return this._minCoord}},{key:\"getRightmostSide\",value:function(t,e){var n=this.getRightmostSideOfSegment(t,e);return n<0&&(n=this.getRightmostSideOfSegment(t,e-1)),n<0&&(this._minCoord=null,this.checkForRightmostCoordinate(t)),n}},{key:\"findRightmostEdgeAtVertex\",value:function(){var t=this._minDe.getEdge().getCoordinates();G.isTrue(this._minIndex>0&&this._minIndex<t.length,\"rightmost point expected to be interior vertex of edge\");var e=t[this._minIndex-1],n=t[this._minIndex+1],i=ct.index(this._minCoord,n,e),r=!1;(e.y<this._minCoord.y&&n.y<this._minCoord.y&&i===ct.COUNTERCLOCKWISE||e.y>this._minCoord.y&&n.y>this._minCoord.y&&i===ct.CLOCKWISE)&&(r=!0),r&&(this._minIndex=this._minIndex-1)}},{key:\"getRightmostSideOfSegment\",value:function(t,e){var n=t.getEdge().getCoordinates();if(e<0||e+1>=n.length)return-1;if(n[e].y===n[e+1].y)return-1;var i=$.LEFT;return n[e].y<n[e+1].y&&(i=$.RIGHT),i}},{key:\"getEdge\",value:function(){return this._orientedDe}},{key:\"checkForRightmostCoordinate\",value:function(t){for(var e=t.getEdge().getCoordinates(),n=0;n<e.length-1;n++)(null===this._minCoord||e[n].x>this._minCoord.x)&&(this._minDe=t,this._minIndex=n,this._minCoord=e[n])}},{key:\"findRightmostEdgeAtNode\",value:function(){var t=this._minDe.getNode().getEdges();this._minDe=t.getRightmostEdge(),this._minDe.isForward()||(this._minDe=this._minDe.getSym(),this._minIndex=this._minDe.getEdge().getCoordinates().length-1)}},{key:\"findEdge\",value:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();n.isForward()&&this.checkForRightmostCoordinate(n)}G.isTrue(0!==this._minIndex||this._minCoord.equals(this._minDe.getCoordinate()),\"inconsistency in rightmost processing\"),0===this._minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this._orientedDe=this._minDe,this.getRightmostSide(this._minDe,this._minIndex)===$.LEFT&&(this._orientedDe=this._minDe.getSym())}}],[{key:\"constructor_\",value:function(){this._minIndex=-1,this._minCoord=null,this._minDe=null,this._orientedDe=null}}]),e}(),vt=function(e){i(s,e);var r=c(s);function s(e,n){var i;return t(this,s),(i=r.call(this,n?e+\" [ \"+n+\" ]\":e)).pt=n?new X(n):void 0,i.name=Object.keys({TopologyException:s})[0],i}return n(s,[{key:\"getCoordinate\",value:function(){return this.pt}}]),s}(D),gt=function(){function e(){t(this,e),this.array=[]}return n(e,[{key:\"addLast\",value:function(t){this.array.push(t)}},{key:\"removeFirst\",value:function(){return this.array.shift()}},{key:\"isEmpty\",value:function(){return 0===this.array.length}}]),e}(),yt=function(e,r){i(a,e);var s=c(a);function a(e){var n;return t(this,a),(n=s.call(this)).array=[],e instanceof Z&&n.addAll(e),n}return n(a,[{key:\"interfaces_\",get:function(){return[nt,Z]}},{key:\"ensureCapacity\",value:function(){}},{key:\"add\",value:function(t){return 1===arguments.length?this.array.push(t):this.array.splice(arguments[0],0,arguments[1]),!0}},{key:\"clear\",value:function(){this.array=[]}},{key:\"addAll\",value:function(t){var e,n=d(t);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.array.push(i)}}catch(t){n.e(t)}finally{n.f()}}},{key:\"set\",value:function(t,e){var n=this.array[t];return this.array[t]=e,n}},{key:\"iterator\",value:function(){return new dt(this)}},{key:\"get\",value:function(t){if(t<0||t>=this.size())throw new et;return this.array[t]}},{key:\"isEmpty\",value:function(){return 0===this.array.length}},{key:\"sort\",value:function(t){t?this.array.sort((function(e,n){return t.compare(e,n)})):this.array.sort()}},{key:\"size\",value:function(){return this.array.length}},{key:\"toArray\",value:function(){return this.array.slice()}},{key:\"remove\",value:function(t){for(var e=0,n=this.array.length;e<n;e++)if(this.array[e]===t)return!!this.array.splice(e,1);return!1}},{key:r,value:function(){return this.array.values()}}]),a}(nt,Symbol.iterator),dt=function(){function e(n){t(this,e),this.arrayList=n,this.position=0}return n(e,[{key:\"next\",value:function(){if(this.position===this.arrayList.size())throw new j;return this.arrayList.get(this.position++)}},{key:\"hasNext\",value:function(){return this.position<this.arrayList.size()}},{key:\"set\",value:function(t){return this.arrayList.set(this.position-1,t)}},{key:\"remove\",value:function(){this.arrayList.remove(this.arrayList.get(this.position))}}]),e}(),_t=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"clearVisitedEdges\",value:function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){t.next().setVisited(!1)}}},{key:\"getRightmostCoordinate\",value:function(){return this._rightMostCoord}},{key:\"computeNodeDepth\",value:function(t){for(var e=null,n=t.getEdges().iterator();n.hasNext();){var i=n.next();if(i.isVisited()||i.getSym().isVisited()){e=i;break}}if(null===e)throw new vt(\"unable to find edge to compute depths at \"+t.getCoordinate());t.getEdges().computeDepths(e);for(var r=t.getEdges().iterator();r.hasNext();){var s=r.next();s.setVisited(!0),this.copySymDepths(s)}}},{key:\"computeDepth\",value:function(t){this.clearVisitedEdges();var e=this._finder.getEdge();e.getNode(),e.getLabel(),e.setEdgeDepths($.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)}},{key:\"create\",value:function(t){this.addReachable(t),this._finder.findEdge(this._dirEdgeList),this._rightMostCoord=this._finder.getCoordinate()}},{key:\"findResultEdges\",value:function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){var e=t.next();e.getDepth($.RIGHT)>=1&&e.getDepth($.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}}},{key:\"computeDepths\",value:function(t){var e=new J,n=new gt,i=t.getNode();for(n.addLast(i),e.add(i),t.setVisited(!0);!n.isEmpty();){var r=n.removeFirst();e.add(r),this.computeNodeDepth(r);for(var s=r.getEdges().iterator();s.hasNext();){var a=s.next().getSym();if(!a.isVisited()){var o=a.getNode();e.contains(o)||(n.addLast(o),e.add(o))}}}}},{key:\"compareTo\",value:function(t){var e=t;return this._rightMostCoord.x<e._rightMostCoord.x?-1:this._rightMostCoord.x>e._rightMostCoord.x?1:0}},{key:\"getEnvelope\",value:function(){if(null===this._env){for(var t=new U,e=this._dirEdgeList.iterator();e.hasNext();)for(var n=e.next().getEdge().getCoordinates(),i=0;i<n.length-1;i++)t.expandToInclude(n[i]);this._env=t}return this._env}},{key:\"addReachable\",value:function(t){var e=new it;for(e.add(t);!e.empty();){var n=e.pop();this.add(n,e)}}},{key:\"copySymDepths\",value:function(t){var e=t.getSym();e.setDepth($.LEFT,t.getDepth($.RIGHT)),e.setDepth($.RIGHT,t.getDepth($.LEFT))}},{key:\"add\",value:function(t,e){t.setVisited(!0),this._nodes.add(t);for(var n=t.getEdges().iterator();n.hasNext();){var i=n.next();this._dirEdgeList.add(i);var r=i.getSym().getNode();r.isVisited()||e.push(r)}}},{key:\"getNodes\",value:function(){return this._nodes}},{key:\"getDirectedEdges\",value:function(){return this._dirEdgeList}},{key:\"interfaces_\",get:function(){return[x]}}],[{key:\"constructor_\",value:function(){this._finder=null,this._dirEdgeList=new yt,this._nodes=new yt,this._rightMostCoord=null,this._env=null,this._finder=new ft}}]),e}(),pt=function(){function e(){t(this,e)}return n(e,null,[{key:\"intersection\",value:function(t,e,n,i){var r=t.x<e.x?t.x:e.x,s=t.y<e.y?t.y:e.y,a=t.x>e.x?t.x:e.x,o=t.y>e.y?t.y:e.y,u=n.x<i.x?n.x:i.x,l=n.y<i.y?n.y:i.y,h=n.x>i.x?n.x:i.x,c=n.y>i.y?n.y:i.y,f=((r>u?r:u)+(a<h?a:h))/2,v=((s>l?s:l)+(o<c?o:c))/2,g=t.x-f,y=t.y-v,d=e.x-f,_=e.y-v,p=n.x-f,m=n.y-v,k=i.x-f,x=i.y-v,I=y-_,E=d-g,N=g*_-d*y,T=m-x,S=k-p,L=p*x-k*m,C=I*S-T*E,R=(E*L-S*N)/C,w=(T*N-I*L)/C;return A.isNaN(R)||A.isInfinite(R)||A.isNaN(w)||A.isInfinite(w)?null:new X(R+f,w+v)}}]),e}(),mt=function(){function e(){t(this,e)}return n(e,null,[{key:\"arraycopy\",value:function(t,e,n,i,r){for(var s=0,a=e;a<e+r;a++)n[i+s]=t[a],s++}},{key:\"getProperty\",value:function(t){return{\"line.separator\":\"\\n\"}[t]}}]),e}(),kt=function(){function e(){t(this,e)}return n(e,null,[{key:\"log10\",value:function(t){var n=Math.log(t);return A.isInfinite(n)||A.isNaN(n)?n:n/e.LOG_10}},{key:\"min\",value:function(t,e,n,i){var r=t;return e<r&&(r=e),n<r&&(r=n),i<r&&(r=i),r}},{key:\"clamp\",value:function(){if(\"number\"==typeof arguments[2]&&\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],e=arguments[1],n=arguments[2];return t<e?e:t>n?n:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var i=arguments[0],r=arguments[1],s=arguments[2];return i<r?r:i>s?s:i}}},{key:\"wrap\",value:function(t,e){return t<0?e- -t%e:t%e}},{key:\"max\",value:function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=t;return e>i&&(i=e),n>i&&(i=n),i}if(4===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2],o=arguments[3],u=r;return s>u&&(u=s),a>u&&(u=a),o>u&&(u=o),u}}},{key:\"average\",value:function(t,e){return(t+e)/2}}]),e}();kt.LOG_10=Math.log(10);var xt=function(){function e(){t(this,e)}return n(e,null,[{key:\"segmentToSegment\",value:function(t,n,i,r){if(t.equals(n))return e.pointToSegment(t,i,r);if(i.equals(r))return e.pointToSegment(r,t,n);var s=!1;if(U.intersects(t,n,i,r)){var a=(n.x-t.x)*(r.y-i.y)-(n.y-t.y)*(r.x-i.x);if(0===a)s=!0;else{var o=(t.y-i.y)*(r.x-i.x)-(t.x-i.x)*(r.y-i.y),u=((t.y-i.y)*(n.x-t.x)-(t.x-i.x)*(n.y-t.y))/a,l=o/a;(l<0||l>1||u<0||u>1)&&(s=!0)}}else s=!0;return s?kt.min(e.pointToSegment(t,i,r),e.pointToSegment(n,i,r),e.pointToSegment(i,t,n),e.pointToSegment(r,t,n)):0}},{key:\"pointToSegment\",value:function(t,e,n){if(e.x===n.x&&e.y===n.y)return t.distance(e);var i=(n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y),r=((t.x-e.x)*(n.x-e.x)+(t.y-e.y)*(n.y-e.y))/i;if(r<=0)return t.distance(e);if(r>=1)return t.distance(n);var s=((e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y))/i;return Math.abs(s)*Math.sqrt(i)}},{key:\"pointToLinePerpendicular\",value:function(t,e,n){var i=(n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y),r=((e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y))/i;return Math.abs(r)*Math.sqrt(i)}},{key:\"pointToSegmentString\",value:function(t,n){if(0===n.length)throw new m(\"Line array must contain at least one vertex\");for(var i=t.distance(n[0]),r=0;r<n.length-1;r++){var s=e.pointToSegment(t,n[r],n[r+1]);s<i&&(i=s)}return i}}]),e}(),It=function(){function e(){t(this,e)}return n(e,[{key:\"create\",value:function(){if(1===arguments.length)arguments[0]instanceof Array||rt(arguments[0],ht);else if(2===arguments.length);else if(3===arguments.length){var t=arguments[0],e=arguments[1];return this.create(t,e)}}}]),e}(),Et=function(){function e(){t(this,e)}return n(e,[{key:\"filter\",value:function(t){}}]),e}(),Nt=function(){function e(){t(this,e)}return n(e,null,[{key:\"ofLine\",value:function(t){var e=t.size();if(e<=1)return 0;var n=0,i=new X;t.getCoordinate(0,i);for(var r=i.x,s=i.y,a=1;a<e;a++){t.getCoordinate(a,i);var o=i.x,u=i.y,l=o-r,h=u-s;n+=Math.sqrt(l*l+h*h),r=o,s=u}return n}}]),e}(),Tt=function e(){t(this,e)},St=function(){function e(){t(this,e)}return n(e,null,[{key:\"copyCoord\",value:function(t,e,n,i){for(var r=Math.min(t.getDimension(),n.getDimension()),s=0;s<r;s++)n.setOrdinate(i,s,t.getOrdinate(e,s))}},{key:\"isRing\",value:function(t){var e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,ht.X)===t.getOrdinate(e-1,ht.X)&&t.getOrdinate(0,ht.Y)===t.getOrdinate(e-1,ht.Y))}},{key:\"scroll\",value:function(){if(2===arguments.length){if(rt(arguments[0],ht)&&Number.isInteger(arguments[1])){var t=arguments[0],n=arguments[1];e.scroll(t,n,e.isRing(t))}else if(rt(arguments[0],ht)&&arguments[1]instanceof X){var i=arguments[0],r=arguments[1],s=e.indexOf(r,i);if(s<=0)return null;e.scroll(i,s)}}else if(3===arguments.length){var a=arguments[0],o=arguments[1],u=arguments[2],l=o;if(l<=0)return null;for(var h=a.copy(),c=u?a.size()-1:a.size(),f=0;f<c;f++)for(var v=0;v<a.getDimension();v++)a.setOrdinate(f,v,h.getOrdinate((o+f)%c,v));if(u)for(var g=0;g<a.getDimension();g++)a.setOrdinate(c,g,a.getOrdinate(0,g))}}},{key:\"isEqual\",value:function(t,e){var n=t.size();if(n!==e.size())return!1;for(var i=Math.min(t.getDimension(),e.getDimension()),r=0;r<n;r++)for(var s=0;s<i;s++){var a=t.getOrdinate(r,s),o=e.getOrdinate(r,s);if(t.getOrdinate(r,s)!==e.getOrdinate(r,s)&&(!A.isNaN(a)||!A.isNaN(o)))return!1}return!0}},{key:\"minCoordinateIndex\",value:function(){if(1===arguments.length){var t=arguments[0];return e.minCoordinateIndex(t,0,t.size()-1)}if(3===arguments.length){for(var n=arguments[0],i=arguments[1],r=arguments[2],s=-1,a=null,o=i;o<=r;o++){var u=n.getCoordinate(o);(null===a||a.compareTo(u)>0)&&(a=u,s=o)}return s}}},{key:\"extend\",value:function(t,n,i){var r=t.create(i,n.getDimension()),s=n.size();if(e.copy(n,0,r,0,s),s>0)for(var a=s;a<i;a++)e.copy(n,s-1,r,a,1);return r}},{key:\"reverse\",value:function(t){for(var n=t.size()-1,i=Math.trunc(n/2),r=0;r<=i;r++)e.swap(t,r,n-r)}},{key:\"swap\",value:function(t,e,n){if(e===n)return null;for(var i=0;i<t.getDimension();i++){var r=t.getOrdinate(e,i);t.setOrdinate(e,i,t.getOrdinate(n,i)),t.setOrdinate(n,i,r)}}},{key:\"copy\",value:function(t,n,i,r,s){for(var a=0;a<s;a++)e.copyCoord(t,n+a,i,r+a)}},{key:\"ensureValidRing\",value:function(t,n){var i=n.size();return 0===i?n:i<=3?e.createClosedRing(t,n,4):n.getOrdinate(0,ht.X)===n.getOrdinate(i-1,ht.X)&&n.getOrdinate(0,ht.Y)===n.getOrdinate(i-1,ht.Y)?n:e.createClosedRing(t,n,i+1)}},{key:\"indexOf\",value:function(t,e){for(var n=0;n<e.size();n++)if(t.x===e.getOrdinate(n,ht.X)&&t.y===e.getOrdinate(n,ht.Y))return n;return-1}},{key:\"createClosedRing\",value:function(t,n,i){var r=t.create(i,n.getDimension()),s=n.size();e.copy(n,0,r,0,s);for(var a=s;a<i;a++)e.copy(n,0,r,a,1);return r}},{key:\"minCoordinate\",value:function(t){for(var e=null,n=0;n<t.size();n++){var i=t.getCoordinate(n);(null===e||e.compareTo(i)>0)&&(e=i)}return e}}]),e}(),Lt=function(){function e(){t(this,e)}return n(e,null,[{key:\"toDimensionSymbol\",value:function(t){switch(t){case e.FALSE:return e.SYM_FALSE;case e.TRUE:return e.SYM_TRUE;case e.DONTCARE:return e.SYM_DONTCARE;case e.P:return e.SYM_P;case e.L:return e.SYM_L;case e.A:return e.SYM_A}throw new m(\"Unknown dimension value: \"+t)}},{key:\"toDimensionValue\",value:function(t){switch(ot.toUpperCase(t)){case e.SYM_FALSE:return e.FALSE;case e.SYM_TRUE:return e.TRUE;case e.SYM_DONTCARE:return e.DONTCARE;case e.SYM_P:return e.P;case e.SYM_L:return e.L;case e.SYM_A:return e.A}throw new m(\"Unknown dimension symbol: \"+t)}}]),e}();Lt.P=0,Lt.L=1,Lt.A=2,Lt.FALSE=-1,Lt.TRUE=-2,Lt.DONTCARE=-3,Lt.SYM_FALSE=\"F\",Lt.SYM_TRUE=\"T\",Lt.SYM_DONTCARE=\"*\",Lt.SYM_P=\"0\",Lt.SYM_L=\"1\",Lt.SYM_A=\"2\";var Ct=function(){function e(){t(this,e)}return n(e,[{key:\"filter\",value:function(t){}}]),e}(),Rt=function(){function e(){t(this,e)}return n(e,[{key:\"filter\",value:function(t,e){}},{key:\"isDone\",value:function(){}},{key:\"isGeometryChanged\",value:function(){}}]),e}(),wt=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"computeEnvelopeInternal\",value:function(){return this.isEmpty()?new U:this._points.expandEnvelope(new U)}},{key:\"isRing\",value:function(){return this.isClosed()&&this.isSimple()}},{key:\"getCoordinates\",value:function(){return this._points.toCoordinateArray()}},{key:\"copyInternal\",value:function(){return new a(this._points.copy(),this._factory)}},{key:\"equalsExact\",value:function(){if(2===arguments.length&&\"number\"==typeof arguments[1]&&arguments[0]instanceof V){var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t;if(this._points.size()!==n._points.size())return!1;for(var i=0;i<this._points.size();i++)if(!this.equal(this._points.getCoordinate(i),n._points.getCoordinate(i),e))return!1;return!0}return f(r(a.prototype),\"equalsExact\",this).apply(this,arguments)}},{key:\"normalize\",value:function(){for(var t=0;t<Math.trunc(this._points.size()/2);t++){var e=this._points.size()-1-t;if(!this._points.getCoordinate(t).equals(this._points.getCoordinate(e))){if(this._points.getCoordinate(t).compareTo(this._points.getCoordinate(e))>0){var n=this._points.copy();St.reverse(n),this._points=n}return null}}}},{key:\"getCoordinate\",value:function(){return this.isEmpty()?null:this._points.getCoordinate(0)}},{key:\"getBoundaryDimension\",value:function(){return this.isClosed()?Lt.FALSE:0}},{key:\"isClosed\",value:function(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))}},{key:\"reverseInternal\",value:function(){var t=this._points.copy();return St.reverse(t),this.getFactory().createLineString(t)}},{key:\"getEndPoint\",value:function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_LINESTRING}},{key:\"getDimension\",value:function(){return 1}},{key:\"getLength\",value:function(){return Nt.ofLine(this._points)}},{key:\"getNumPoints\",value:function(){return this._points.size()}},{key:\"compareToSameClass\",value:function(){if(1===arguments.length){for(var t=arguments[0],e=t,n=0,i=0;n<this._points.size()&&i<e._points.size();){var r=this._points.getCoordinate(n).compareTo(e._points.getCoordinate(i));if(0!==r)return r;n++,i++}return n<this._points.size()?1:i<e._points.size()?-1:0}if(2===arguments.length){var s=arguments[0],a=arguments[1],o=s;return a.compare(this._points,o._points)}}},{key:\"apply\",value:function(){if(rt(arguments[0],Et))for(var t=arguments[0],e=0;e<this._points.size();e++)t.filter(this._points.getCoordinate(e));else if(rt(arguments[0],Rt)){var n=arguments[0];if(0===this._points.size())return null;for(var i=0;i<this._points.size()&&(n.filter(this._points,i),!n.isDone());i++);n.isGeometryChanged()&&this.geometryChanged()}else if(rt(arguments[0],Ct)){var r=arguments[0];r.filter(this)}else if(rt(arguments[0],k)){var s=arguments[0];s.filter(this)}}},{key:\"getBoundary\",value:function(){throw new W}},{key:\"isEquivalentClass\",value:function(t){return t instanceof a}},{key:\"getCoordinateN\",value:function(t){return this._points.getCoordinate(t)}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_LINESTRING}},{key:\"getCoordinateSequence\",value:function(){return this._points}},{key:\"isEmpty\",value:function(){return 0===this._points.size()}},{key:\"init\",value:function(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new m(\"Invalid number of points in LineString (found \"+t.size()+\" - must be 0 or >= 2)\");this._points=t}},{key:\"isCoordinate\",value:function(t){for(var e=0;e<this._points.size();e++)if(this._points.getCoordinate(e).equals(t))return!0;return!1}},{key:\"getStartPoint\",value:function(){return this.isEmpty()?null:this.getPointN(0)}},{key:\"getPointN\",value:function(t){return this.getFactory().createPoint(this._points.getCoordinate(t))}},{key:\"interfaces_\",get:function(){return[Tt]}}],[{key:\"constructor_\",value:function(){if(this._points=null,0===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];V.constructor_.call(this,e),this.init(t)}}}]),a}(V),Ot=function e(){t(this,e)},bt=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"computeEnvelopeInternal\",value:function(){if(this.isEmpty())return new U;var t=new U;return t.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0)),t}},{key:\"getCoordinates\",value:function(){return this.isEmpty()?[]:[this.getCoordinate()]}},{key:\"copyInternal\",value:function(){return new a(this._coordinates.copy(),this._factory)}},{key:\"equalsExact\",value:function(){if(2===arguments.length&&\"number\"==typeof arguments[1]&&arguments[0]instanceof V){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&(!(!this.isEmpty()||!t.isEmpty())||this.isEmpty()===t.isEmpty()&&this.equal(t.getCoordinate(),this.getCoordinate(),e))}return f(r(a.prototype),\"equalsExact\",this).apply(this,arguments)}},{key:\"normalize\",value:function(){}},{key:\"getCoordinate\",value:function(){return 0!==this._coordinates.size()?this._coordinates.getCoordinate(0):null}},{key:\"getBoundaryDimension\",value:function(){return Lt.FALSE}},{key:\"reverseInternal\",value:function(){return this.getFactory().createPoint(this._coordinates.copy())}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_POINT}},{key:\"getDimension\",value:function(){return 0}},{key:\"getNumPoints\",value:function(){return this.isEmpty()?0:1}},{key:\"getX\",value:function(){if(null===this.getCoordinate())throw new IllegalStateException(\"getX called on empty Point\");return this.getCoordinate().x}},{key:\"compareToSameClass\",value:function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getCoordinate().compareTo(e.getCoordinate())}if(2===arguments.length){var n=arguments[0],i=arguments[1],r=n;return i.compare(this._coordinates,r._coordinates)}}},{key:\"apply\",value:function(){if(rt(arguments[0],Et)){var t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate())}else if(rt(arguments[0],Rt)){var e=arguments[0];if(this.isEmpty())return null;e.filter(this._coordinates,0),e.isGeometryChanged()&&this.geometryChanged()}else if(rt(arguments[0],Ct)){var n=arguments[0];n.filter(this)}else if(rt(arguments[0],k)){var i=arguments[0];i.filter(this)}}},{key:\"getBoundary\",value:function(){return this.getFactory().createGeometryCollection()}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_POINT}},{key:\"getCoordinateSequence\",value:function(){return this._coordinates}},{key:\"getY\",value:function(){if(null===this.getCoordinate())throw new IllegalStateException(\"getY called on empty Point\");return this.getCoordinate().y}},{key:\"isEmpty\",value:function(){return 0===this._coordinates.size()}},{key:\"init\",value:function(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),G.isTrue(t.size()<=1),this._coordinates=t}},{key:\"isSimple\",value:function(){return!0}},{key:\"interfaces_\",get:function(){return[Ot]}}],[{key:\"constructor_\",value:function(){this._coordinates=null;var t=arguments[0],e=arguments[1];V.constructor_.call(this,e),this.init(t)}}]),a}(V),Mt=function(){function e(){t(this,e)}return n(e,null,[{key:\"ofRing\",value:function(){if(arguments[0]instanceof Array){var t=arguments[0];return Math.abs(e.ofRingSigned(t))}if(rt(arguments[0],ht)){var n=arguments[0];return Math.abs(e.ofRingSigned(n))}}},{key:\"ofRingSigned\",value:function(){if(arguments[0]instanceof Array){var t=arguments[0];if(t.length<3)return 0;for(var e=0,n=t[0].x,i=1;i<t.length-1;i++){var r=t[i].x-n,s=t[i+1].y,a=t[i-1].y;e+=r*(a-s)}return e/2}if(rt(arguments[0],ht)){var o=arguments[0],u=o.size();if(u<3)return 0;var l=new X,h=new X,c=new X;o.getCoordinate(0,h),o.getCoordinate(1,c);var f=h.x;c.x-=f;for(var v=0,g=1;g<u-1;g++)l.y=h.y,h.x=c.x,h.y=c.y,o.getCoordinate(g+1,c),c.x-=f,v+=h.x*(l.y-c.y);return v/2}}}]),e}(),At=function(){function e(){t(this,e)}return n(e,null,[{key:\"sort\",value:function(){var t=arguments,e=arguments[0];if(1===arguments.length)e.sort((function(t,e){return t.compareTo(e)}));else if(2===arguments.length)e.sort((function(e,n){return t[1].compare(e,n)}));else if(3===arguments.length){var n=e.slice(arguments[1],arguments[2]);n.sort();var i=e.slice(0,arguments[1]).concat(n,e.slice(arguments[2],e.length));e.splice(0,e.length);var r,s=d(i);try{for(s.s();!(r=s.n()).done;){var a=r.value;e.push(a)}}catch(t){s.e(t)}finally{s.f()}}else if(4===arguments.length){var o=e.slice(arguments[1],arguments[2]);o.sort((function(e,n){return t[3].compare(e,n)}));var u=e.slice(0,arguments[1]).concat(o,e.slice(arguments[2],e.length));e.splice(0,e.length);var l,h=d(u);try{for(h.s();!(l=h.n()).done;){var c=l.value;e.push(c)}}catch(t){h.e(t)}finally{h.f()}}}},{key:\"asList\",value:function(t){var e,n=new yt,i=d(t);try{for(i.s();!(e=i.n()).done;){var r=e.value;n.add(r)}}catch(t){i.e(t)}finally{i.f()}return n}},{key:\"copyOf\",value:function(t,e){return t.slice(0,e)}}]),e}(),Pt=function e(){t(this,e)},Dt=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"computeEnvelopeInternal\",value:function(){return this._shell.getEnvelopeInternal()}},{key:\"getCoordinates\",value:function(){if(this.isEmpty())return[];for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=this._shell.getCoordinates(),i=0;i<n.length;i++)t[++e]=n[i];for(var r=0;r<this._holes.length;r++)for(var s=this._holes[r].getCoordinates(),a=0;a<s.length;a++)t[++e]=s[a];return t}},{key:\"getArea\",value:function(){var t=0;t+=Mt.ofRing(this._shell.getCoordinateSequence());for(var e=0;e<this._holes.length;e++)t-=Mt.ofRing(this._holes[e].getCoordinateSequence());return t}},{key:\"copyInternal\",value:function(){for(var t=this._shell.copy(),e=new Array(this._holes.length).fill(null),n=0;n<this._holes.length;n++)e[n]=this._holes[n].copy();return new a(t,e,this._factory)}},{key:\"isRectangle\",value:function(){if(0!==this.getNumInteriorRing())return!1;if(null===this._shell)return!1;if(5!==this._shell.getNumPoints())return!1;for(var t=this._shell.getCoordinateSequence(),e=this.getEnvelopeInternal(),n=0;n<5;n++){var i=t.getX(n);if(i!==e.getMinX()&&i!==e.getMaxX())return!1;var r=t.getY(n);if(r!==e.getMinY()&&r!==e.getMaxY())return!1}for(var s=t.getX(0),a=t.getY(0),o=1;o<=4;o++){var u=t.getX(o),l=t.getY(o);if(u!==s===(l!==a))return!1;s=u,a=l}return!0}},{key:\"equalsExact\",value:function(){if(2===arguments.length&&\"number\"==typeof arguments[1]&&arguments[0]instanceof V){var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t,i=this._shell,s=n._shell;if(!i.equalsExact(s,e))return!1;if(this._holes.length!==n._holes.length)return!1;for(var o=0;o<this._holes.length;o++)if(!this._holes[o].equalsExact(n._holes[o],e))return!1;return!0}return f(r(a.prototype),\"equalsExact\",this).apply(this,arguments)}},{key:\"normalize\",value:function(){if(0===arguments.length){this._shell=this.normalized(this._shell,!0);for(var t=0;t<this._holes.length;t++)this._holes[t]=this.normalized(this._holes[t],!1);At.sort(this._holes)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(e.isEmpty())return null;var i=e.getCoordinateSequence(),r=St.minCoordinateIndex(i,0,i.size()-2);St.scroll(i,r,!0),ct.isCCW(i)===n&&St.reverse(i)}}},{key:\"getCoordinate\",value:function(){return this._shell.getCoordinate()}},{key:\"getNumInteriorRing\",value:function(){return this._holes.length}},{key:\"getBoundaryDimension\",value:function(){return 1}},{key:\"reverseInternal\",value:function(){for(var t=this.getExteriorRing().reverse(),e=new Array(this.getNumInteriorRing()).fill(null),n=0;n<e.length;n++)e[n]=this.getInteriorRingN(n).reverse();return this.getFactory().createPolygon(t,e)}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_POLYGON}},{key:\"getDimension\",value:function(){return 2}},{key:\"getLength\",value:function(){var t=0;t+=this._shell.getLength();for(var e=0;e<this._holes.length;e++)t+=this._holes[e].getLength();return t}},{key:\"getNumPoints\",value:function(){for(var t=this._shell.getNumPoints(),e=0;e<this._holes.length;e++)t+=this._holes[e].getNumPoints();return t}},{key:\"convexHull\",value:function(){return this.getExteriorRing().convexHull()}},{key:\"normalized\",value:function(t,e){var n=t.copy();return this.normalize(n,e),n}},{key:\"compareToSameClass\",value:function(){if(1===arguments.length){var t=arguments[0],e=this._shell,n=t._shell;return e.compareToSameClass(n)}if(2===arguments.length){var i=arguments[0],r=arguments[1],s=i,a=this._shell,o=s._shell,u=a.compareToSameClass(o,r);if(0!==u)return u;for(var l=this.getNumInteriorRing(),h=s.getNumInteriorRing(),c=0;c<l&&c<h;){var f=this.getInteriorRingN(c),v=s.getInteriorRingN(c),g=f.compareToSameClass(v,r);if(0!==g)return g;c++}return c<l?1:c<h?-1:0}}},{key:\"apply\",value:function(){if(rt(arguments[0],Et)){var t=arguments[0];this._shell.apply(t);for(var e=0;e<this._holes.length;e++)this._holes[e].apply(t)}else if(rt(arguments[0],Rt)){var n=arguments[0];if(this._shell.apply(n),!n.isDone())for(var i=0;i<this._holes.length&&(this._holes[i].apply(n),!n.isDone());i++);n.isGeometryChanged()&&this.geometryChanged()}else if(rt(arguments[0],Ct)){var r=arguments[0];r.filter(this)}else if(rt(arguments[0],k)){var s=arguments[0];s.filter(this),this._shell.apply(s);for(var a=0;a<this._holes.length;a++)this._holes[a].apply(s)}}},{key:\"getBoundary\",value:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();var t=new Array(this._holes.length+1).fill(null);t[0]=this._shell;for(var e=0;e<this._holes.length;e++)t[e+1]=this._holes[e];return t.length<=1?this.getFactory().createLinearRing(t[0].getCoordinateSequence()):this.getFactory().createMultiLineString(t)}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_POLYGON}},{key:\"getExteriorRing\",value:function(){return this._shell}},{key:\"isEmpty\",value:function(){return this._shell.isEmpty()}},{key:\"getInteriorRingN\",value:function(t){return this._holes[t]}},{key:\"interfaces_\",get:function(){return[Pt]}}],[{key:\"constructor_\",value:function(){this._shell=null,this._holes=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(V.constructor_.call(this,n),null===t&&(t=this.getFactory().createLinearRing()),null===e&&(e=[]),V.hasNullElements(e))throw new m(\"holes must not contain null elements\");if(t.isEmpty()&&V.hasNonEmptyElements(e))throw new m(\"shell is empty but holes are not\");this._shell=t,this._holes=e}}]),a}(V),Ft=function(e){i(r,e);var n=c(r);function r(){return t(this,r),n.apply(this,arguments)}return r}(K),Gt=function(e){i(s,e);var r=c(s);function s(e){var n;return t(this,s),(n=r.call(this)).array=[],e instanceof Z&&n.addAll(e),n}return n(s,[{key:\"contains\",value:function(t){var e,n=d(this.array);try{for(n.s();!(e=n.n()).done;){if(0===e.value.compareTo(t))return!0}}catch(t){n.e(t)}finally{n.f()}return!1}},{key:\"add\",value:function(t){if(this.contains(t))return!1;for(var e=0,n=this.array.length;e<n;e++){if(1===this.array[e].compareTo(t))return!!this.array.splice(e,0,t)}return this.array.push(t),!0}},{key:\"addAll\",value:function(t){var e,n=d(t);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.add(i)}}catch(t){n.e(t)}finally{n.f()}return!0}},{key:\"remove\",value:function(){throw new W}},{key:\"size\",value:function(){return this.array.length}},{key:\"isEmpty\",value:function(){return 0===this.array.length}},{key:\"toArray\",value:function(){return this.array.slice()}},{key:\"iterator\",value:function(){return new qt(this.array)}}]),s}(Ft),qt=function(){function e(n){t(this,e),this.array=n,this.position=0}return n(e,[{key:\"next\",value:function(){if(this.position===this.array.length)throw new j;return this.array[this.position++]}},{key:\"hasNext\",value:function(){return this.position<this.array.length}},{key:\"remove\",value:function(){throw new W}}]),e}(),Yt=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"computeEnvelopeInternal\",value:function(){for(var t=new U,e=0;e<this._geometries.length;e++)t.expandToInclude(this._geometries[e].getEnvelopeInternal());return t}},{key:\"getGeometryN\",value:function(t){return this._geometries[t]}},{key:\"getCoordinates\",value:function(){for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=0;n<this._geometries.length;n++)for(var i=this._geometries[n].getCoordinates(),r=0;r<i.length;r++)t[++e]=i[r];return t}},{key:\"getArea\",value:function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getArea();return t}},{key:\"copyInternal\",value:function(){for(var t=new Array(this._geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new a(t,this._factory)}},{key:\"equalsExact\",value:function(){if(2===arguments.length&&\"number\"==typeof arguments[1]&&arguments[0]instanceof V){var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t;if(this._geometries.length!==n._geometries.length)return!1;for(var i=0;i<this._geometries.length;i++)if(!this._geometries[i].equalsExact(n._geometries[i],e))return!1;return!0}return f(r(a.prototype),\"equalsExact\",this).apply(this,arguments)}},{key:\"normalize\",value:function(){for(var t=0;t<this._geometries.length;t++)this._geometries[t].normalize();At.sort(this._geometries)}},{key:\"getCoordinate\",value:function(){return this.isEmpty()?null:this._geometries[0].getCoordinate()}},{key:\"getBoundaryDimension\",value:function(){for(var t=Lt.FALSE,e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getBoundaryDimension());return t}},{key:\"reverseInternal\",value:function(){for(var t=this._geometries.length,e=new yt(t),n=0;n<t;n++)e.add(this._geometries[n].reverse());return this.getFactory().buildGeometry(e)}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_GEOMETRYCOLLECTION}},{key:\"getDimension\",value:function(){for(var t=Lt.FALSE,e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getDimension());return t}},{key:\"getLength\",value:function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getLength();return t}},{key:\"getNumPoints\",value:function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getNumPoints();return t}},{key:\"getNumGeometries\",value:function(){return this._geometries.length}},{key:\"compareToSameClass\",value:function(){if(1===arguments.length){var t=arguments[0],e=new Gt(At.asList(this._geometries)),n=new Gt(At.asList(t._geometries));return this.compare(e,n)}if(2===arguments.length){for(var i=arguments[0],r=arguments[1],s=i,a=this.getNumGeometries(),o=s.getNumGeometries(),u=0;u<a&&u<o;){var l=this.getGeometryN(u),h=s.getGeometryN(u),c=l.compareToSameClass(h,r);if(0!==c)return c;u++}return u<a?1:u<o?-1:0}}},{key:\"apply\",value:function(){if(rt(arguments[0],Et))for(var t=arguments[0],e=0;e<this._geometries.length;e++)this._geometries[e].apply(t);else if(rt(arguments[0],Rt)){var n=arguments[0];if(0===this._geometries.length)return null;for(var i=0;i<this._geometries.length&&(this._geometries[i].apply(n),!n.isDone());i++);n.isGeometryChanged()&&this.geometryChanged()}else if(rt(arguments[0],Ct)){var r=arguments[0];r.filter(this);for(var s=0;s<this._geometries.length;s++)this._geometries[s].apply(r)}else if(rt(arguments[0],k)){var a=arguments[0];a.filter(this);for(var o=0;o<this._geometries.length;o++)this._geometries[o].apply(a)}}},{key:\"getBoundary\",value:function(){return V.checkNotGeometryCollection(this),G.shouldNeverReachHere(),null}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_GEOMETRYCOLLECTION}},{key:\"isEmpty\",value:function(){for(var t=0;t<this._geometries.length;t++)if(!this._geometries[t].isEmpty())return!1;return!0}}],[{key:\"constructor_\",value:function(){if(this._geometries=null,0===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];if(V.constructor_.call(this,e),null===t&&(t=[]),V.hasNullElements(t))throw new m(\"geometries must not contain null elements\");this._geometries=t}}}]),a}(V),zt=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"copyInternal\",value:function(){for(var t=new Array(this._geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new a(t,this._factory)}},{key:\"isValid\",value:function(){return!0}},{key:\"equalsExact\",value:function(){if(2===arguments.length&&\"number\"==typeof arguments[1]&&arguments[0]instanceof V){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&f(r(a.prototype),\"equalsExact\",this).call(this,t,e)}return f(r(a.prototype),\"equalsExact\",this).apply(this,arguments)}},{key:\"getCoordinate\",value:function(){if(1===arguments.length&&Number.isInteger(arguments[0])){var t=arguments[0];return this._geometries[t].getCoordinate()}return f(r(a.prototype),\"getCoordinate\",this).apply(this,arguments)}},{key:\"getBoundaryDimension\",value:function(){return Lt.FALSE}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_MULTIPOINT}},{key:\"getDimension\",value:function(){return 0}},{key:\"getBoundary\",value:function(){return this.getFactory().createGeometryCollection()}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_MULTIPOINT}},{key:\"interfaces_\",get:function(){return[Ot]}}],[{key:\"constructor_\",value:function(){var t=arguments[0],e=arguments[1];Yt.constructor_.call(this,t,e)}}]),a}(Yt),Xt=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"copyInternal\",value:function(){return new a(this._points.copy(),this._factory)}},{key:\"getBoundaryDimension\",value:function(){return Lt.FALSE}},{key:\"isClosed\",value:function(){return!!this.isEmpty()||f(r(a.prototype),\"isClosed\",this).call(this)}},{key:\"reverseInternal\",value:function(){var t=this._points.copy();return St.reverse(t),this.getFactory().createLinearRing(t)}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_LINEARRING}},{key:\"validateConstruction\",value:function(){if(!this.isEmpty()&&!f(r(a.prototype),\"isClosed\",this).call(this))throw new m(\"Points of LinearRing do not form a closed linestring\");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<a.MINIMUM_VALID_SIZE)throw new m(\"Invalid number of points in LinearRing (found \"+this.getCoordinateSequence().size()+\" - must be 0 or >= 4)\")}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_LINEARRING}}],[{key:\"constructor_\",value:function(){var t=arguments[0],e=arguments[1];wt.constructor_.call(this,t,e),this.validateConstruction()}}]),a}(wt);Xt.MINIMUM_VALID_SIZE=4;var Bt=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,[{key:\"setOrdinate\",value:function(t,e){switch(t){case s.X:this.x=e;break;case s.Y:this.y=e;break;default:throw new m(\"Invalid ordinate index: \"+t)}}},{key:\"getZ\",value:function(){return X.NULL_ORDINATE}},{key:\"getOrdinate\",value:function(t){switch(t){case s.X:return this.x;case s.Y:return this.y}throw new m(\"Invalid ordinate index: \"+t)}},{key:\"setZ\",value:function(t){throw new m(\"CoordinateXY dimension 2 does not support z-ordinate\")}},{key:\"copy\",value:function(){return new s(this)}},{key:\"toString\",value:function(){return\"(\"+this.x+\", \"+this.y+\")\"}},{key:\"setCoordinate\",value:function(t){this.x=t.x,this.y=t.y,this.z=t.getZ()}}],[{key:\"constructor_\",value:function(){if(0===arguments.length)X.constructor_.call(this);else if(1===arguments.length){if(arguments[0]instanceof s){var t=arguments[0];X.constructor_.call(this,t.x,t.y)}else if(arguments[0]instanceof X){var e=arguments[0];X.constructor_.call(this,e.x,e.y)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];X.constructor_.call(this,n,i,X.NULL_ORDINATE)}}}]),s}(X);Bt.X=0,Bt.Y=1,Bt.Z=-1,Bt.M=-1;var Ut=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,[{key:\"getM\",value:function(){return this._m}},{key:\"setOrdinate\",value:function(t,e){switch(t){case s.X:this.x=e;break;case s.Y:this.y=e;break;case s.M:this._m=e;break;default:throw new m(\"Invalid ordinate index: \"+t)}}},{key:\"setM\",value:function(t){this._m=t}},{key:\"getZ\",value:function(){return X.NULL_ORDINATE}},{key:\"getOrdinate\",value:function(t){switch(t){case s.X:return this.x;case s.Y:return this.y;case s.M:return this._m}throw new m(\"Invalid ordinate index: \"+t)}},{key:\"setZ\",value:function(t){throw new m(\"CoordinateXY dimension 2 does not support z-ordinate\")}},{key:\"copy\",value:function(){return new s(this)}},{key:\"toString\",value:function(){return\"(\"+this.x+\", \"+this.y+\" m=\"+this.getM()+\")\"}},{key:\"setCoordinate\",value:function(t){this.x=t.x,this.y=t.y,this.z=t.getZ(),this._m=t.getM()}}],[{key:\"constructor_\",value:function(){if(this._m=null,0===arguments.length)X.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof s){var t=arguments[0];X.constructor_.call(this,t.x,t.y),this._m=t._m}else if(arguments[0]instanceof X){var e=arguments[0];X.constructor_.call(this,e.x,e.y),this._m=this.getM()}}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];X.constructor_.call(this,n,i,X.NULL_ORDINATE),this._m=r}}}]),s}(X);Ut.X=0,Ut.Y=1,Ut.Z=-1,Ut.M=2;var Vt=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,[{key:\"getM\",value:function(){return this._m}},{key:\"setOrdinate\",value:function(t,e){switch(t){case X.X:this.x=e;break;case X.Y:this.y=e;break;case X.Z:this.z=e;break;case X.M:this._m=e;break;default:throw new m(\"Invalid ordinate index: \"+t)}}},{key:\"setM\",value:function(t){this._m=t}},{key:\"getOrdinate\",value:function(t){switch(t){case X.X:return this.x;case X.Y:return this.y;case X.Z:return this.getZ();case X.M:return this.getM()}throw new m(\"Invalid ordinate index: \"+t)}},{key:\"copy\",value:function(){return new s(this)}},{key:\"toString\",value:function(){return\"(\"+this.x+\", \"+this.y+\", \"+this.getZ()+\" m=\"+this.getM()+\")\"}},{key:\"setCoordinate\",value:function(t){this.x=t.x,this.y=t.y,this.z=t.getZ(),this._m=t.getM()}}],[{key:\"constructor_\",value:function(){if(this._m=null,0===arguments.length)X.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof s){var t=arguments[0];X.constructor_.call(this,t),this._m=t._m}else if(arguments[0]instanceof X){var e=arguments[0];X.constructor_.call(this,e),this._m=this.getM()}}else if(4===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],a=arguments[3];X.constructor_.call(this,n,i,r),this._m=a}}}]),s}(X),Ht=function(){function e(){t(this,e)}return n(e,null,[{key:\"measures\",value:function(t){return t instanceof Bt?0:t instanceof Ut||t instanceof Vt?1:0}},{key:\"dimension\",value:function(t){return t instanceof Bt?2:t instanceof Ut?3:t instanceof Vt?4:3}},{key:\"create\",value:function(){if(1===arguments.length){var t=arguments[0];return e.create(t,0)}if(2===arguments.length){var n=arguments[0],i=arguments[1];return 2===n?new Bt:3===n&&0===i?new X:3===n&&1===i?new Ut:4===n&&1===i?new Vt:new X}}}]),e}(),Zt=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"getCoordinate\",value:function(t){return this.get(t)}},{key:\"addAll\",value:function(){if(2===arguments.length&&\"boolean\"==typeof arguments[1]&&rt(arguments[0],Z)){for(var t=arguments[0],e=arguments[1],n=!1,i=t.iterator();i.hasNext();)this.add(i.next(),e),n=!0;return n}return f(r(a.prototype),\"addAll\",this).apply(this,arguments)}},{key:\"clone\",value:function(){for(var t=f(r(a.prototype),\"clone\",this).call(this),e=0;e<this.size();e++)t.add(e,this.get(e).clone());return t}},{key:\"toCoordinateArray\",value:function(){if(0===arguments.length)return this.toArray(a.coordArrayType);if(1===arguments.length){var t=arguments[0];if(t)return this.toArray(a.coordArrayType);for(var e=this.size(),n=new Array(e).fill(null),i=0;i<e;i++)n[i]=this.get(e-i-1);return n}}},{key:\"add\",value:function(){if(1===arguments.length){var t=arguments[0];return f(r(a.prototype),\"add\",this).call(this,t)}if(2===arguments.length){if(arguments[0]instanceof Array&&\"boolean\"==typeof arguments[1]){var e=arguments[0],n=arguments[1];return this.add(e,n,!0),!0}if(arguments[0]instanceof X&&\"boolean\"==typeof arguments[1]){var i=arguments[0],s=arguments[1];if(!s&&this.size()>=1){var o=this.get(this.size()-1);if(o.equals2D(i))return null}f(r(a.prototype),\"add\",this).call(this,i)}else if(arguments[0]instanceof Object&&\"boolean\"==typeof arguments[1]){var u=arguments[0],l=arguments[1];return this.add(u,l),!0}}else if(3===arguments.length){if(\"boolean\"==typeof arguments[2]&&arguments[0]instanceof Array&&\"boolean\"==typeof arguments[1]){var h=arguments[0],c=arguments[1],v=arguments[2];if(v)for(var g=0;g<h.length;g++)this.add(h[g],c);else for(var y=h.length-1;y>=0;y--)this.add(h[y],c);return!0}if(\"boolean\"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof X){var d=arguments[0],_=arguments[1],p=arguments[2];if(!p){var m=this.size();if(m>0){if(d>0){var k=this.get(d-1);if(k.equals2D(_))return null}if(d<m){var x=this.get(d);if(x.equals2D(_))return null}}}f(r(a.prototype),\"add\",this).call(this,d,_)}}else if(4===arguments.length){var I=arguments[0],E=arguments[1],N=arguments[2],T=arguments[3],S=1;N>T&&(S=-1);for(var L=N;L!==T;L+=S)this.add(I[L],E);return!0}}},{key:\"closeRing\",value:function(){if(this.size()>0){var t=this.get(0).copy();this.add(t,!1)}}}],[{key:\"constructor_\",value:function(){if(0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.ensureCapacity(t.length),this.add(t,!0)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.ensureCapacity(e.length),this.add(e,n)}}}]),a}(yt);Zt.coordArrayType=new Array(0).fill(null);var jt=function(){function e(){t(this,e)}return n(e,null,[{key:\"isRing\",value:function(t){return!(t.length<4)&&!!t[0].equals2D(t[t.length-1])}},{key:\"ptNotInList\",value:function(t,n){for(var i=0;i<t.length;i++){var r=t[i];if(e.indexOf(r,n)<0)return r}return null}},{key:\"scroll\",value:function(t,n){var i=e.indexOf(n,t);if(i<0)return null;var r=new Array(t.length).fill(null);mt.arraycopy(t,i,r,0,t.length-i),mt.arraycopy(t,0,r,t.length-i,i),mt.arraycopy(r,0,t,0,t.length)}},{key:\"equals\",value:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].equals(e[n]))return!1;return!0}if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];if(i===r)return!0;if(null===i||null===r)return!1;if(i.length!==r.length)return!1;for(var a=0;a<i.length;a++)if(0!==s.compare(i[a],r[a]))return!1;return!0}}},{key:\"intersection\",value:function(t,e){for(var n=new Zt,i=0;i<t.length;i++)e.intersects(t[i])&&n.add(t[i],!0);return n.toCoordinateArray()}},{key:\"measures\",value:function(t){if(null===t||0===t.length)return 0;var e,n=0,i=d(t);try{for(i.s();!(e=i.n()).done;){var r=e.value;n=Math.max(n,Ht.measures(r))}}catch(t){i.e(t)}finally{i.f()}return n}},{key:\"hasRepeatedPoints\",value:function(t){for(var e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1}},{key:\"removeRepeatedPoints\",value:function(t){return e.hasRepeatedPoints(t)?new Zt(t,!1).toCoordinateArray():t}},{key:\"reverse\",value:function(t){for(var e=t.length-1,n=Math.trunc(e/2),i=0;i<=n;i++){var r=t[i];t[i]=t[e-i],t[e-i]=r}}},{key:\"removeNull\",value:function(t){for(var e=0,n=0;n<t.length;n++)null!==t[n]&&e++;var i=new Array(e).fill(null);if(0===e)return i;for(var r=0,s=0;s<t.length;s++)null!==t[s]&&(i[r++]=t[s]);return i}},{key:\"copyDeep\",value:function(){if(1===arguments.length){for(var t=arguments[0],e=new Array(t.length).fill(null),n=0;n<t.length;n++)e[n]=t[n].copy();return e}if(5===arguments.length)for(var i=arguments[0],r=arguments[1],s=arguments[2],a=arguments[3],o=arguments[4],u=0;u<o;u++)s[a+u]=i[r+u].copy()}},{key:\"isEqualReversed\",value:function(t,e){for(var n=0;n<t.length;n++){var i=t[n],r=e[t.length-n-1];if(0!==i.compareTo(r))return!1}return!0}},{key:\"envelope\",value:function(t){for(var e=new U,n=0;n<t.length;n++)e.expandToInclude(t[n]);return e}},{key:\"toCoordinateArray\",value:function(t){return t.toArray(e.coordArrayType)}},{key:\"dimension\",value:function(t){if(null===t||0===t.length)return 3;var e,n=0,i=d(t);try{for(i.s();!(e=i.n()).done;){var r=e.value;n=Math.max(n,Ht.dimension(r))}}catch(t){i.e(t)}finally{i.f()}return n}},{key:\"atLeastNCoordinatesOrNothing\",value:function(t,e){return e.length>=t?e:[]}},{key:\"indexOf\",value:function(t,e){for(var n=0;n<e.length;n++)if(t.equals(e[n]))return n;return-1}},{key:\"increasingDirection\",value:function(t){for(var e=0;e<Math.trunc(t.length/2);e++){var n=t.length-1-e,i=t[e].compareTo(t[n]);if(0!==i)return i}return 1}},{key:\"compare\",value:function(t,e){for(var n=0;n<t.length&&n<e.length;){var i=t[n].compareTo(e[n]);if(0!==i)return i;n++}return n<e.length?-1:n<t.length?1:0}},{key:\"minCoordinate\",value:function(t){for(var e=null,n=0;n<t.length;n++)(null===e||e.compareTo(t[n])>0)&&(e=t[n]);return e}},{key:\"extract\",value:function(t,e,n){e=kt.clamp(e,0,t.length);var i=(n=kt.clamp(n,-1,t.length))-e+1;n<0&&(i=0),e>=t.length&&(i=0),n<e&&(i=0);var r=new Array(i).fill(null);if(0===i)return r;for(var s=0,a=e;a<=n;a++)r[s++]=t[a];return r}}]),e}(),Wt=function(){function e(){t(this,e)}return n(e,[{key:\"compare\",value:function(t,e){var n=t,i=e;return jt.compare(n,i)}},{key:\"interfaces_\",get:function(){return[P]}}]),e}(),Kt=function(){function e(){t(this,e)}return n(e,[{key:\"compare\",value:function(t,e){var n=t,i=e;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;var r=jt.compare(n,i);return jt.isEqualReversed(n,i)?0:r}},{key:\"OLDcompare\",value:function(t,e){var n=t,i=e;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;for(var r=jt.increasingDirection(n),s=jt.increasingDirection(i),a=r>0?0:n.length-1,o=s>0?0:n.length-1,u=0;u<n.length;u++){var l=n[a].compareTo(i[o]);if(0!==l)return l;a+=r,o+=s}return 0}},{key:\"interfaces_\",get:function(){return[P]}}]),e}();jt.ForwardComparator=Wt,jt.BidirectionalComparator=Kt,jt.coordArrayType=new Array(0).fill(null);var Jt=function(){function e(n){t(this,e),this.str=n}return n(e,[{key:\"append\",value:function(t){this.str+=t}},{key:\"setCharAt\",value:function(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)}},{key:\"toString\",value:function(){return this.str}}]),e}(),Qt=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getM\",value:function(t){return this.hasM()?this._coordinates[t].getM():A.NaN}},{key:\"setOrdinate\",value:function(t,e,n){switch(e){case ht.X:this._coordinates[t].x=n;break;case ht.Y:this._coordinates[t].y=n;break;default:this._coordinates[t].setOrdinate(e,n)}}},{key:\"getZ\",value:function(t){return this.hasZ()?this._coordinates[t].getZ():A.NaN}},{key:\"size\",value:function(){return this._coordinates.length}},{key:\"getOrdinate\",value:function(t,e){switch(e){case ht.X:return this._coordinates[t].x;case ht.Y:return this._coordinates[t].y;default:return this._coordinates[t].getOrdinate(e)}}},{key:\"getCoordinate\",value:function(){if(1===arguments.length){var t=arguments[0];return this._coordinates[t]}if(2===arguments.length){var e=arguments[0],n=arguments[1];n.setCoordinate(this._coordinates[e])}}},{key:\"getCoordinateCopy\",value:function(t){var e=this.createCoordinate();return e.setCoordinate(this._coordinates[t]),e}},{key:\"createCoordinate\",value:function(){return Ht.create(this.getDimension(),this.getMeasures())}},{key:\"getDimension\",value:function(){return this._dimension}},{key:\"getX\",value:function(t){return this._coordinates[t].x}},{key:\"getMeasures\",value:function(){return this._measures}},{key:\"expandEnvelope\",value:function(t){for(var e=0;e<this._coordinates.length;e++)t.expandToInclude(this._coordinates[e]);return t}},{key:\"copy\",value:function(){for(var t=new Array(this.size()).fill(null),n=0;n<this._coordinates.length;n++){var i=this.createCoordinate();i.setCoordinate(this._coordinates[n]),t[n]=i}return new e(t,this._dimension,this._measures)}},{key:\"toString\",value:function(){if(this._coordinates.length>0){var t=new Jt(17*this._coordinates.length);t.append(\"(\"),t.append(this._coordinates[0]);for(var e=1;e<this._coordinates.length;e++)t.append(\", \"),t.append(this._coordinates[e]);return t.append(\")\"),t.toString()}return\"()\"}},{key:\"getY\",value:function(t){return this._coordinates[t].y}},{key:\"toCoordinateArray\",value:function(){return this._coordinates}},{key:\"interfaces_\",get:function(){return[ht,E]}}],[{key:\"constructor_\",value:function(){if(this._dimension=3,this._measures=0,this._coordinates=null,1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];e.constructor_.call(this,t,jt.dimension(t),jt.measures(t))}else if(Number.isInteger(arguments[0])){var n=arguments[0];this._coordinates=new Array(n).fill(null);for(var i=0;i<n;i++)this._coordinates[i]=new X}else if(rt(arguments[0],ht)){var r=arguments[0];if(null===r)return this._coordinates=new Array(0).fill(null),null;this._dimension=r.getDimension(),this._measures=r.getMeasures(),this._coordinates=new Array(r.size()).fill(null);for(var s=0;s<this._coordinates.length;s++)this._coordinates[s]=r.getCoordinateCopy(s)}}else if(2===arguments.length){if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var a=arguments[0],o=arguments[1];e.constructor_.call(this,a,o,jt.measures(a))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var u=arguments[0],l=arguments[1];this._coordinates=new Array(u).fill(null),this._dimension=l;for(var h=0;h<u;h++)this._coordinates[h]=Ht.create(l)}}else if(3===arguments.length)if(Number.isInteger(arguments[2])&&arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var c=arguments[0],f=arguments[1],v=arguments[2];this._dimension=f,this._measures=v,this._coordinates=null===c?new Array(0).fill(null):c}else if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var g=arguments[0],y=arguments[1],d=arguments[2];this._coordinates=new Array(g).fill(null),this._dimension=y,this._measures=d;for(var _=0;_<g;_++)this._coordinates[_]=this.createCoordinate()}}}]),e}(),$t=function(){function e(){t(this,e)}return n(e,[{key:\"readResolve\",value:function(){return e.instance()}},{key:\"create\",value:function(){if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new Qt(t)}if(rt(arguments[0],ht)){var e=arguments[0];return new Qt(e)}}else{if(2===arguments.length){var n=arguments[0],i=arguments[1];return i>3&&(i=3),i<2&&(i=2),new Qt(n,i)}if(3===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2],o=s-a;return a>1&&(a=1),o>3&&(o=3),o<2&&(o=2),new Qt(r,o+a,a)}}}},{key:\"interfaces_\",get:function(){return[It,E]}}],[{key:\"instance\",value:function(){return e.instanceObject}}]),e}();$t.instanceObject=new $t;var te=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"copyInternal\",value:function(){for(var t=new Array(this._geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new a(t,this._factory)}},{key:\"equalsExact\",value:function(){if(2===arguments.length&&\"number\"==typeof arguments[1]&&arguments[0]instanceof V){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&f(r(a.prototype),\"equalsExact\",this).call(this,t,e)}return f(r(a.prototype),\"equalsExact\",this).apply(this,arguments)}},{key:\"getBoundaryDimension\",value:function(){return 1}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_MULTIPOLYGON}},{key:\"getDimension\",value:function(){return 2}},{key:\"getBoundary\",value:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();for(var t=new yt,e=0;e<this._geometries.length;e++)for(var n=this._geometries[e].getBoundary(),i=0;i<n.getNumGeometries();i++)t.add(n.getGeometryN(i));var r=new Array(t.size()).fill(null);return this.getFactory().createMultiLineString(t.toArray(r))}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_MULTIPOLYGON}},{key:\"interfaces_\",get:function(){return[Pt]}}],[{key:\"constructor_\",value:function(){var t=arguments[0],e=arguments[1];Yt.constructor_.call(this,t,e)}}]),a}(Yt),ee=function(){function e(){t(this,e)}return n(e,[{key:\"get\",value:function(){}},{key:\"put\",value:function(){}},{key:\"size\",value:function(){}},{key:\"values\",value:function(){}},{key:\"entrySet\",value:function(){}}]),e}(),ne=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),(e=r.call(this)).map=new Map,e}return n(s,[{key:\"get\",value:function(t){return this.map.get(t)||null}},{key:\"put\",value:function(t,e){return this.map.set(t,e),e}},{key:\"values\",value:function(){for(var t=new yt,e=this.map.values(),n=e.next();!n.done;)t.add(n.value),n=e.next();return t}},{key:\"entrySet\",value:function(){var t=new J;return this.map.entries().forEach((function(e){return t.add(e)})),t}},{key:\"size\",value:function(){return this.map.size()}}]),s}(ee),ie=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"equals\",value:function(t){if(!(t instanceof e))return!1;var n=t;return this._modelType===n._modelType&&this._scale===n._scale}},{key:\"compareTo\",value:function(t){var e=t,n=this.getMaximumSignificantDigits(),i=e.getMaximumSignificantDigits();return at.compare(n,i)}},{key:\"getScale\",value:function(){return this._scale}},{key:\"isFloating\",value:function(){return this._modelType===e.FLOATING||this._modelType===e.FLOATING_SINGLE}},{key:\"getType\",value:function(){return this._modelType}},{key:\"toString\",value:function(){var t=\"UNKNOWN\";return this._modelType===e.FLOATING?t=\"Floating\":this._modelType===e.FLOATING_SINGLE?t=\"Floating-Single\":this._modelType===e.FIXED&&(t=\"Fixed (Scale=\"+this.getScale()+\")\"),t}},{key:\"makePrecise\",value:function(){if(\"number\"==typeof arguments[0]){var t=arguments[0];if(A.isNaN(t))return t;if(this._modelType===e.FLOATING_SINGLE){return t}return this._modelType===e.FIXED?Math.round(t*this._scale)/this._scale:t}if(arguments[0]instanceof X){var n=arguments[0];if(this._modelType===e.FLOATING)return null;n.x=this.makePrecise(n.x),n.y=this.makePrecise(n.y)}}},{key:\"getMaximumSignificantDigits\",value:function(){var t=16;return this._modelType===e.FLOATING?t=16:this._modelType===e.FLOATING_SINGLE?t=6:this._modelType===e.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t}},{key:\"setScale\",value:function(t){this._scale=Math.abs(t)}},{key:\"interfaces_\",get:function(){return[E,x]}}],[{key:\"constructor_\",value:function(){if(this._modelType=null,this._scale=null,0===arguments.length)this._modelType=e.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof re){var t=arguments[0];this._modelType=t,t===e.FIXED&&this.setScale(1)}else if(\"number\"==typeof arguments[0]){var n=arguments[0];this._modelType=e.FIXED,this.setScale(n)}else if(arguments[0]instanceof e){var i=arguments[0];this._modelType=i._modelType,this._scale=i._scale}}},{key:\"mostPrecise\",value:function(t,e){return t.compareTo(e)>=0?t:e}}]),e}(),re=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"readResolve\",value:function(){return e.nameToTypeMap.get(this._name)}},{key:\"toString\",value:function(){return this._name}},{key:\"interfaces_\",get:function(){return[E]}}],[{key:\"constructor_\",value:function(){this._name=null;var t=arguments[0];this._name=t,e.nameToTypeMap.put(t,this)}}]),e}();re.nameToTypeMap=new ne,ie.Type=re,ie.FIXED=new re(\"FIXED\"),ie.FLOATING=new re(\"FLOATING\"),ie.FLOATING_SINGLE=new re(\"FLOATING SINGLE\"),ie.maximumPreciseValue=9007199254740992;var se=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"copyInternal\",value:function(){for(var t=new Array(this._geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new a(t,this._factory)}},{key:\"equalsExact\",value:function(){if(2===arguments.length&&\"number\"==typeof arguments[1]&&arguments[0]instanceof V){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&f(r(a.prototype),\"equalsExact\",this).call(this,t,e)}return f(r(a.prototype),\"equalsExact\",this).apply(this,arguments)}},{key:\"getBoundaryDimension\",value:function(){return this.isClosed()?Lt.FALSE:0}},{key:\"isClosed\",value:function(){if(this.isEmpty())return!1;for(var t=0;t<this._geometries.length;t++)if(!this._geometries[t].isClosed())return!1;return!0}},{key:\"getTypeCode\",value:function(){return V.TYPECODE_MULTILINESTRING}},{key:\"getDimension\",value:function(){return 1}},{key:\"getBoundary\",value:function(){throw new W}},{key:\"getGeometryType\",value:function(){return V.TYPENAME_MULTILINESTRING}},{key:\"interfaces_\",get:function(){return[Tt]}}],[{key:\"constructor_\",value:function(){var t=arguments[0],e=arguments[1];Yt.constructor_.call(this,t,e)}}]),a}(Yt),ae=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"createEmpty\",value:function(t){switch(t){case-1:return this.createGeometryCollection();case 0:return this.createPoint();case 1:return this.createLineString();case 2:return this.createPolygon();default:throw new m(\"Invalid dimension: \"+t)}}},{key:\"toGeometry\",value:function(t){return t.isNull()?this.createPoint():t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new X(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new X(t.getMinX(),t.getMinY()),new X(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new X(t.getMinX(),t.getMinY()),new X(t.getMinX(),t.getMaxY()),new X(t.getMaxX(),t.getMaxY()),new X(t.getMaxX(),t.getMinY()),new X(t.getMinX(),t.getMinY())]),null)}},{key:\"createLineString\",value:function(){if(0===arguments.length)return this.createLineString(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLineString(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(rt(arguments[0],ht)){var e=arguments[0];return new wt(e,this)}}}},{key:\"createMultiLineString\",value:function(){if(0===arguments.length)return new se(null,this);if(1===arguments.length){var t=arguments[0];return new se(t,this)}}},{key:\"buildGeometry\",value:function(t){for(var n=null,i=!1,r=!1,s=t.iterator();s.hasNext();){var a=s.next(),o=a.getTypeCode();null===n&&(n=o),o!==n&&(i=!0),a instanceof Yt&&(r=!0)}if(null===n)return this.createGeometryCollection();if(i||r)return this.createGeometryCollection(e.toGeometryArray(t));var u=t.iterator().next();if(t.size()>1){if(u instanceof Dt)return this.createMultiPolygon(e.toPolygonArray(t));if(u instanceof wt)return this.createMultiLineString(e.toLineStringArray(t));if(u instanceof bt)return this.createMultiPoint(e.toPointArray(t));G.shouldNeverReachHere(\"Unhandled geometry type: \"+u.getGeometryType())}return u}},{key:\"createMultiPointFromCoords\",value:function(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)}},{key:\"createPoint\",value:function(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof X){var t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(rt(arguments[0],ht)){var e=arguments[0];return new bt(e,this)}}}},{key:\"getCoordinateSequenceFactory\",value:function(){return this._coordinateSequenceFactory}},{key:\"createPolygon\",value:function(){if(0===arguments.length)return this.createPolygon(null,null);if(1===arguments.length){if(rt(arguments[0],ht)){var t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){var e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof Xt){var n=arguments[0];return this.createPolygon(n,null)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];return new Dt(i,r,this)}}},{key:\"getSRID\",value:function(){return this._SRID}},{key:\"createGeometryCollection\",value:function(){if(0===arguments.length)return new Yt(null,this);if(1===arguments.length){var t=arguments[0];return new Yt(t,this)}}},{key:\"getPrecisionModel\",value:function(){return this._precisionModel}},{key:\"createLinearRing\",value:function(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(rt(arguments[0],ht)){var e=arguments[0];return new Xt(e,this)}}}},{key:\"createMultiPolygon\",value:function(){if(0===arguments.length)return new te(null,this);if(1===arguments.length){var t=arguments[0];return new te(t,this)}}},{key:\"createMultiPoint\",value:function(){if(0===arguments.length)return new zt(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new zt(t,this)}if(rt(arguments[0],ht)){var e=arguments[0];if(null===e)return this.createMultiPoint(new Array(0).fill(null));for(var n=new Array(e.size()).fill(null),i=0;i<e.size();i++){var r=this.getCoordinateSequenceFactory().create(1,e.getDimension(),e.getMeasures());St.copy(e,i,r,0,1),n[i]=this.createPoint(r)}return this.createMultiPoint(n)}}}},{key:\"interfaces_\",get:function(){return[E]}}],[{key:\"constructor_\",value:function(){if(this._precisionModel=null,this._coordinateSequenceFactory=null,this._SRID=null,0===arguments.length)e.constructor_.call(this,new ie,0);else if(1===arguments.length){if(rt(arguments[0],It)){var t=arguments[0];e.constructor_.call(this,new ie,0,t)}else if(arguments[0]instanceof ie){var n=arguments[0];e.constructor_.call(this,n,0,e.getDefaultCoordinateSequenceFactory())}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];e.constructor_.call(this,i,r,e.getDefaultCoordinateSequenceFactory())}else if(3===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2];this._precisionModel=s,this._coordinateSequenceFactory=o,this._SRID=a}}},{key:\"toMultiPolygonArray\",value:function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"toGeometryArray\",value:function(t){if(null===t)return null;var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"getDefaultCoordinateSequenceFactory\",value:function(){return $t.instance()}},{key:\"toMultiLineStringArray\",value:function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"toLineStringArray\",value:function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"toMultiPointArray\",value:function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"toLinearRingArray\",value:function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"toPointArray\",value:function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"toPolygonArray\",value:function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)}},{key:\"createPointFromInternalCoord\",value:function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)}}]),e}(),oe=\"XY\",ue=\"XYZ\",le=\"XYM\",he=\"XYZM\",ce={POINT:\"Point\",LINE_STRING:\"LineString\",LINEAR_RING:\"LinearRing\",POLYGON:\"Polygon\",MULTI_POINT:\"MultiPoint\",MULTI_LINE_STRING:\"MultiLineString\",MULTI_POLYGON:\"MultiPolygon\",GEOMETRY_COLLECTION:\"GeometryCollection\",CIRCLE:\"Circle\"},fe=\"EMPTY\",ve=1,ge=2,ye=3,de=4,_e=5,pe=6,me={};for(var ke in ce)me[ke]=ce[ke].toUpperCase();var xe=function(){function e(n){t(this,e),this.wkt=n,this.index_=-1}return n(e,[{key:\"isAlpha_\",value:function(t){return t>=\"a\"&&t<=\"z\"||t>=\"A\"&&t<=\"Z\"}},{key:\"isNumeric_\",value:function(t,e){return t>=\"0\"&&t<=\"9\"||\".\"==t&&!(void 0!==e&&e)}},{key:\"isWhiteSpace_\",value:function(t){return\" \"==t||\"\\t\"==t||\"\\r\"==t||\"\\n\"==t}},{key:\"nextChar_\",value:function(){return this.wkt.charAt(++this.index_)}},{key:\"nextToken\",value:function(){var t,e=this.nextChar_(),n=this.index_,i=e;if(\"(\"==e)t=ge;else if(\",\"==e)t=_e;else if(\")\"==e)t=ye;else if(this.isNumeric_(e)||\"-\"==e)t=de,i=this.readNumber_();else if(this.isAlpha_(e))t=ve,i=this.readText_();else{if(this.isWhiteSpace_(e))return this.nextToken();if(\"\"!==e)throw new Error(\"Unexpected character: \"+e);t=pe}return{position:n,value:i,type:t}}},{key:\"readNumber_\",value:function(){var t,e=this.index_,n=!1,i=!1;do{\".\"==t?n=!0:\"e\"!=t&&\"E\"!=t||(i=!0),t=this.nextChar_()}while(this.isNumeric_(t,n)||!i&&(\"e\"==t||\"E\"==t)||i&&(\"-\"==t||\"+\"==t));return parseFloat(this.wkt.substring(e,this.index_--))}},{key:\"readText_\",value:function(){var t,e=this.index_;do{t=this.nextChar_()}while(this.isAlpha_(t));return this.wkt.substring(e,this.index_--).toUpperCase()}}]),e}(),Ie=function(){function e(n,i){t(this,e),this.lexer_=n,this.token_,this.layout_=oe,this.factory=i}return n(e,[{key:\"consume_\",value:function(){this.token_=this.lexer_.nextToken()}},{key:\"isTokenType\",value:function(t){return this.token_.type==t}},{key:\"match\",value:function(t){var e=this.isTokenType(t);return e&&this.consume_(),e}},{key:\"parse\",value:function(){return this.consume_(),this.parseGeometry_()}},{key:\"parseGeometryLayout_\",value:function(){var t=oe,e=this.token_;if(this.isTokenType(ve)){var n=e.value;\"Z\"===n?t=ue:\"M\"===n?t=le:\"ZM\"===n&&(t=he),t!==oe&&this.consume_()}return t}},{key:\"parseGeometryCollectionText_\",value:function(){if(this.match(ge)){var t=[];do{t.push(this.parseGeometry_())}while(this.match(_e));if(this.match(ye))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}},{key:\"parsePointText_\",value:function(){if(this.match(ge)){var t=this.parsePoint_();if(this.match(ye))return t}else if(this.isEmptyGeometry_())return null;throw new Error(this.formatErrorMessage_())}},{key:\"parseLineStringText_\",value:function(){if(this.match(ge)){var t=this.parsePointList_();if(this.match(ye))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}},{key:\"parsePolygonText_\",value:function(){if(this.match(ge)){var t=this.parseLineStringTextList_();if(this.match(ye))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}},{key:\"parseMultiPointText_\",value:function(){var t;if(this.match(ge)){if(t=this.token_.type==ge?this.parsePointTextList_():this.parsePointList_(),this.match(ye))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}},{key:\"parseMultiLineStringText_\",value:function(){if(this.match(ge)){var t=this.parseLineStringTextList_();if(this.match(ye))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}},{key:\"parseMultiPolygonText_\",value:function(){if(this.match(ge)){var t=this.parsePolygonTextList_();if(this.match(ye))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}},{key:\"parsePoint_\",value:function(){for(var t=[],e=this.layout_.length,n=0;n<e;++n){var i=this.token_;if(!this.match(de))break;t.push(i.value)}if(t.length==e)return t;throw new Error(this.formatErrorMessage_())}},{key:\"parsePointList_\",value:function(){for(var t=[this.parsePoint_()];this.match(_e);)t.push(this.parsePoint_());return t}},{key:\"parsePointTextList_\",value:function(){for(var t=[this.parsePointText_()];this.match(_e);)t.push(this.parsePointText_());return t}},{key:\"parseLineStringTextList_\",value:function(){for(var t=[this.parseLineStringText_()];this.match(_e);)t.push(this.parseLineStringText_());return t}},{key:\"parsePolygonTextList_\",value:function(){for(var t=[this.parsePolygonText_()];this.match(_e);)t.push(this.parsePolygonText_());return t}},{key:\"isEmptyGeometry_\",value:function(){var t=this.isTokenType(ve)&&this.token_.value==fe;return t&&this.consume_(),t}},{key:\"formatErrorMessage_\",value:function(){return\"Unexpected `\"+this.token_.value+\"` at position \"+this.token_.position+\" in `\"+this.lexer_.wkt+\"`\"}},{key:\"parseGeometry_\",value:function(){var t=this.factory,e=function(t){return o(X,v(t))},n=function(n){var i=n.map((function(n){return t.createLinearRing(n.map(e))}));return i.length>1?t.createPolygon(i[0],i.slice(1)):t.createPolygon(i[0])},i=this.token_;if(this.match(ve)){var r=i.value;if(this.layout_=this.parseGeometryLayout_(),\"GEOMETRYCOLLECTION\"==r){var s=this.parseGeometryCollectionText_();return t.createGeometryCollection(s)}switch(r){case\"POINT\":var a=this.parsePointText_();return a?t.createPoint(o(X,v(a))):t.createPoint();case\"LINESTRING\":var u=this.parseLineStringText_().map(e);return t.createLineString(u);case\"LINEARRING\":var l=this.parseLineStringText_().map(e);return t.createLinearRing(l);case\"POLYGON\":var h=this.parsePolygonText_();return h&&0!==h.length?n(h):t.createPolygon();case\"MULTIPOINT\":var c=this.parseMultiPointText_();if(!c||0===c.length)return t.createMultiPoint();var f=c.map(e).map((function(e){return t.createPoint(e)}));return t.createMultiPoint(f);case\"MULTILINESTRING\":var g=this.parseMultiLineStringText_().map((function(n){return t.createLineString(n.map(e))}));return t.createMultiLineString(g);case\"MULTIPOLYGON\":var y=this.parseMultiPolygonText_();if(!y||0===y.length)return t.createMultiPolygon();var d=y.map(n);return t.createMultiPolygon(d);default:throw new Error(\"Invalid geometry type: \"+r)}}throw new Error(this.formatErrorMessage_())}}]),e}();function Ee(t){if(t.isEmpty())return\"\";var e=t.getCoordinate(),n=[e.x,e.y];return void 0===e.z||Number.isNaN(e.z)||n.push(e.z),void 0===e.m||Number.isNaN(e.m)||n.push(e.m),n.join(\" \")}function Ne(t){for(var e=t.getCoordinates().map((function(t){var e=[t.x,t.y];return void 0===t.z||Number.isNaN(t.z)||e.push(t.z),void 0===t.m||Number.isNaN(t.m)||e.push(t.m),e})),n=[],i=0,r=e.length;i<r;++i)n.push(e[i].join(\" \"));return n.join(\", \")}function Te(t){var e=[];e.push(\"(\"+Ne(t.getExteriorRing())+\")\");for(var n=0,i=t.getNumInteriorRing();n<i;++n)e.push(\"(\"+Ne(t.getInteriorRingN(n))+\")\");return e.join(\", \")}var Se={Point:Ee,LineString:Ne,LinearRing:Ne,Polygon:Te,MultiPoint:function(t){for(var e=[],n=0,i=t.getNumGeometries();n<i;++n)e.push(\"(\"+Ee(t.getGeometryN(n))+\")\");return e.join(\", \")},MultiLineString:function(t){for(var e=[],n=0,i=t.getNumGeometries();n<i;++n)e.push(\"(\"+Ne(t.getGeometryN(n))+\")\");return e.join(\", \")},MultiPolygon:function(t){for(var e=[],n=0,i=t.getNumGeometries();n<i;++n)e.push(\"(\"+Te(t.getGeometryN(n))+\")\");return e.join(\", \")},GeometryCollection:function(t){for(var e=[],n=0,i=t.getNumGeometries();n<i;++n)e.push(Le(t.getGeometryN(n)));return e.join(\", \")}};function Le(t){var e=t.getGeometryType(),n=Se[e];e=e.toUpperCase();var i=function(t){var e=\"\";if(t.isEmpty())return e;var n=t.getCoordinate();return void 0===n.z||Number.isNaN(n.z)||(e+=\"Z\"),void 0===n.m||Number.isNaN(n.m)||(e+=\"M\"),e}(t);return i.length>0&&(e+=\" \"+i),t.isEmpty()?e+\" \"+fe:e+\" (\"+n(t)+\")\"}var Ce=function(){function e(n){t(this,e),this.geometryFactory=n||new ae,this.precisionModel=this.geometryFactory.getPrecisionModel()}return n(e,[{key:\"read\",value:function(t){var e=new xe(t);return new Ie(e,this.geometryFactory).parse()}},{key:\"write\",value:function(t){return Le(t)}}]),e}(),Re=function(){function e(n){t(this,e),this.parser=new Ce(n)}return n(e,[{key:\"write\",value:function(t){return this.parser.write(t)}}],[{key:\"toLineString\",value:function(t,e){if(2!==arguments.length)throw new Error(\"Not implemented\");return\"LINESTRING ( \"+t.x+\" \"+t.y+\", \"+e.x+\" \"+e.y+\" )\"}}]),e}(),we=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getIndexAlongSegment\",value:function(t,e){return this.computeIntLineIndex(),this._intLineIndex[t][e]}},{key:\"getTopologySummary\",value:function(){var t=new Jt;return this.isEndPoint()&&t.append(\" endpoint\"),this._isProper&&t.append(\" proper\"),this.isCollinear()&&t.append(\" collinear\"),t.toString()}},{key:\"computeIntersection\",value:function(t,e,n,i){this._inputLines[0][0]=t,this._inputLines[0][1]=e,this._inputLines[1][0]=n,this._inputLines[1][1]=i,this._result=this.computeIntersect(t,e,n,i)}},{key:\"getIntersectionNum\",value:function(){return this._result}},{key:\"computeIntLineIndex\",value:function(){if(0===arguments.length)null===this._intLineIndex&&(this._intLineIndex=Array(2).fill().map((function(){return Array(2)})),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){var t=arguments[0],e=this.getEdgeDistance(t,0),n=this.getEdgeDistance(t,1);e>n?(this._intLineIndex[t][0]=0,this._intLineIndex[t][1]=1):(this._intLineIndex[t][0]=1,this._intLineIndex[t][1]=0)}}},{key:\"isProper\",value:function(){return this.hasIntersection()&&this._isProper}},{key:\"setPrecisionModel\",value:function(t){this._precisionModel=t}},{key:\"isInteriorIntersection\",value:function(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){for(var t=arguments[0],e=0;e<this._result;e++)if(!this._intPt[e].equals2D(this._inputLines[t][0])&&!this._intPt[e].equals2D(this._inputLines[t][1]))return!0;return!1}}},{key:\"getIntersection\",value:function(t){return this._intPt[t]}},{key:\"isEndPoint\",value:function(){return this.hasIntersection()&&!this._isProper}},{key:\"hasIntersection\",value:function(){return this._result!==e.NO_INTERSECTION}},{key:\"getEdgeDistance\",value:function(t,n){return e.computeEdgeDistance(this._intPt[n],this._inputLines[t][0],this._inputLines[t][1])}},{key:\"isCollinear\",value:function(){return this._result===e.COLLINEAR_INTERSECTION}},{key:\"toString\",value:function(){return Re.toLineString(this._inputLines[0][0],this._inputLines[0][1])+\" - \"+Re.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary()}},{key:\"getEndpoint\",value:function(t,e){return this._inputLines[t][e]}},{key:\"isIntersection\",value:function(t){for(var e=0;e<this._result;e++)if(this._intPt[e].equals2D(t))return!0;return!1}},{key:\"getIntersectionAlongSegment\",value:function(t,e){return this.computeIntLineIndex(),this._intPt[this._intLineIndex[t][e]]}}],[{key:\"constructor_\",value:function(){this._result=null,this._inputLines=Array(2).fill().map((function(){return Array(2)})),this._intPt=new Array(2).fill(null),this._intLineIndex=null,this._isProper=null,this._pa=null,this._pb=null,this._precisionModel=null,this._intPt[0]=new X,this._intPt[1]=new X,this._pa=this._intPt[0],this._pb=this._intPt[1],this._result=0}},{key:\"computeEdgeDistance\",value:function(t,e,n){var i=Math.abs(n.x-e.x),r=Math.abs(n.y-e.y),s=-1;if(t.equals(e))s=0;else if(t.equals(n))s=i>r?i:r;else{var a=Math.abs(t.x-e.x),o=Math.abs(t.y-e.y);0!==(s=i>r?a:o)||t.equals(e)||(s=Math.max(a,o))}return G.isTrue(!(0===s&&!t.equals(e)),\"Bad distance calculation\"),s}},{key:\"nonRobustComputeEdgeDistance\",value:function(t,e,n){var i=t.x-e.x,r=t.y-e.y,s=Math.sqrt(i*i+r*r);return G.isTrue(!(0===s&&!t.equals(e)),\"Invalid distance calculation\"),s}}]),e}();we.DONT_INTERSECT=0,we.DO_INTERSECT=1,we.COLLINEAR=2,we.NO_INTERSECTION=0,we.POINT_INTERSECTION=1,we.COLLINEAR_INTERSECTION=2;var Oe=function(e){i(a,e);var s=c(a);function a(){return t(this,a),s.call(this)}return n(a,[{key:\"isInSegmentEnvelopes\",value:function(t){var e=new U(this._inputLines[0][0],this._inputLines[0][1]),n=new U(this._inputLines[1][0],this._inputLines[1][1]);return e.contains(t)&&n.contains(t)}},{key:\"computeIntersection\",value:function(){if(3!==arguments.length)return f(r(a.prototype),\"computeIntersection\",this).apply(this,arguments);var t=arguments[0],e=arguments[1],n=arguments[2];if(this._isProper=!1,U.intersects(e,n,t)&&0===ct.index(e,n,t)&&0===ct.index(n,e,t))return this._isProper=!0,(t.equals(e)||t.equals(n))&&(this._isProper=!1),this._result=we.POINT_INTERSECTION,null;this._result=we.NO_INTERSECTION}},{key:\"intersection\",value:function(t,e,n,i){var r=this.intersectionSafe(t,e,n,i);return this.isInSegmentEnvelopes(r)||(r=new X(a.nearestEndpoint(t,e,n,i))),null!==this._precisionModel&&this._precisionModel.makePrecise(r),r}},{key:\"checkDD\",value:function(t,e,n,i,r){var s=lt.intersection(t,e,n,i),a=this.isInSegmentEnvelopes(s);mt.out.println(\"DD in env = \"+a+\"  --------------------- \"+s),r.distance(s)>1e-4&&mt.out.println(\"Distance = \"+r.distance(s))}},{key:\"intersectionSafe\",value:function(t,e,n,i){var r=pt.intersection(t,e,n,i);return null===r&&(r=a.nearestEndpoint(t,e,n,i)),r}},{key:\"computeCollinearIntersection\",value:function(t,e,n,i){var r=U.intersects(t,e,n),s=U.intersects(t,e,i),a=U.intersects(n,i,t),o=U.intersects(n,i,e);return r&&s?(this._intPt[0]=n,this._intPt[1]=i,we.COLLINEAR_INTERSECTION):a&&o?(this._intPt[0]=t,this._intPt[1]=e,we.COLLINEAR_INTERSECTION):r&&a?(this._intPt[0]=n,this._intPt[1]=t,!n.equals(t)||s||o?we.COLLINEAR_INTERSECTION:we.POINT_INTERSECTION):r&&o?(this._intPt[0]=n,this._intPt[1]=e,!n.equals(e)||s||a?we.COLLINEAR_INTERSECTION:we.POINT_INTERSECTION):s&&a?(this._intPt[0]=i,this._intPt[1]=t,!i.equals(t)||r||o?we.COLLINEAR_INTERSECTION:we.POINT_INTERSECTION):s&&o?(this._intPt[0]=i,this._intPt[1]=e,!i.equals(e)||r||a?we.COLLINEAR_INTERSECTION:we.POINT_INTERSECTION):we.NO_INTERSECTION}},{key:\"computeIntersect\",value:function(t,e,n,i){if(this._isProper=!1,!U.intersects(t,e,n,i))return we.NO_INTERSECTION;var r=ct.index(t,e,n),s=ct.index(t,e,i);if(r>0&&s>0||r<0&&s<0)return we.NO_INTERSECTION;var a=ct.index(n,i,t),o=ct.index(n,i,e);return a>0&&o>0||a<0&&o<0?we.NO_INTERSECTION:0===r&&0===s&&0===a&&0===o?this.computeCollinearIntersection(t,e,n,i):(0===r||0===s||0===a||0===o?(this._isProper=!1,t.equals2D(n)||t.equals2D(i)?this._intPt[0]=t:e.equals2D(n)||e.equals2D(i)?this._intPt[0]=e:0===r?this._intPt[0]=new X(n):0===s?this._intPt[0]=new X(i):0===a?this._intPt[0]=new X(t):0===o&&(this._intPt[0]=new X(e))):(this._isProper=!0,this._intPt[0]=this.intersection(t,e,n,i)),we.POINT_INTERSECTION)}}],[{key:\"nearestEndpoint\",value:function(t,e,n,i){var r=t,s=xt.pointToSegment(t,n,i),a=xt.pointToSegment(e,n,i);return a<s&&(s=a,r=e),(a=xt.pointToSegment(n,t,e))<s&&(s=a,r=n),(a=xt.pointToSegment(i,t,e))<s&&(s=a,r=i),r}}]),a}(we),be=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"countSegment\",value:function(t,e){if(t.x<this._p.x&&e.x<this._p.x)return null;if(this._p.x===e.x&&this._p.y===e.y)return this._isPointOnSegment=!0,null;if(t.y===this._p.y&&e.y===this._p.y){var n=t.x,i=e.x;return n>i&&(n=e.x,i=t.x),this._p.x>=n&&this._p.x<=i&&(this._isPointOnSegment=!0),null}if(t.y>this._p.y&&e.y<=this._p.y||e.y>this._p.y&&t.y<=this._p.y){var r=ct.index(t,e,this._p);if(r===ct.COLLINEAR)return this._isPointOnSegment=!0,null;e.y<t.y&&(r=-r),r===ct.LEFT&&this._crossingCount++}}},{key:\"isPointInPolygon\",value:function(){return this.getLocation()!==H.EXTERIOR}},{key:\"getLocation\",value:function(){return this._isPointOnSegment?H.BOUNDARY:this._crossingCount%2==1?H.INTERIOR:H.EXTERIOR}},{key:\"isOnSegment\",value:function(){return this._isPointOnSegment}}],[{key:\"constructor_\",value:function(){this._p=null,this._crossingCount=0,this._isPointOnSegment=!1;var t=arguments[0];this._p=t}},{key:\"locatePointInRing\",value:function(){if(arguments[0]instanceof X&&rt(arguments[1],ht)){for(var t=arguments[0],n=arguments[1],i=new e(t),r=new X,s=new X,a=1;a<n.size();a++)if(n.getCoordinate(a,r),n.getCoordinate(a-1,s),i.countSegment(r,s),i.isOnSegment())return i.getLocation();return i.getLocation()}if(arguments[0]instanceof X&&arguments[1]instanceof Array){for(var o=arguments[0],u=arguments[1],l=new e(o),h=1;h<u.length;h++){var c=u[h],f=u[h-1];if(l.countSegment(c,f),l.isOnSegment())return l.getLocation()}return l.getLocation()}}}]),e}(),Me=function(){function e(){t(this,e)}return n(e,null,[{key:\"isOnLine\",value:function(){if(arguments[0]instanceof X&&rt(arguments[1],ht)){for(var t=arguments[0],e=arguments[1],n=new Oe,i=new X,r=new X,s=e.size(),a=1;a<s;a++)if(e.getCoordinate(a-1,i),e.getCoordinate(a,r),n.computeIntersection(t,i,r),n.hasIntersection())return!0;return!1}if(arguments[0]instanceof X&&arguments[1]instanceof Array){for(var o=arguments[0],u=arguments[1],l=new Oe,h=1;h<u.length;h++){var c=u[h-1],f=u[h];if(l.computeIntersection(o,c,f),l.hasIntersection())return!0}return!1}}},{key:\"locateInRing\",value:function(t,e){return be.locatePointInRing(t,e)}},{key:\"isInRing\",value:function(t,n){return e.locateInRing(t,n)!==H.EXTERIOR}}]),e}(),Ae=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"setAllLocations\",value:function(t){for(var e=0;e<this.location.length;e++)this.location[e]=t}},{key:\"isNull\",value:function(){for(var t=0;t<this.location.length;t++)if(this.location[t]!==H.NONE)return!1;return!0}},{key:\"setAllLocationsIfNull\",value:function(t){for(var e=0;e<this.location.length;e++)this.location[e]===H.NONE&&(this.location[e]=t)}},{key:\"isLine\",value:function(){return 1===this.location.length}},{key:\"merge\",value:function(t){if(t.location.length>this.location.length){var e=new Array(3).fill(null);e[$.ON]=this.location[$.ON],e[$.LEFT]=H.NONE,e[$.RIGHT]=H.NONE,this.location=e}for(var n=0;n<this.location.length;n++)this.location[n]===H.NONE&&n<t.location.length&&(this.location[n]=t.location[n])}},{key:\"getLocations\",value:function(){return this.location}},{key:\"flip\",value:function(){if(this.location.length<=1)return null;var t=this.location[$.LEFT];this.location[$.LEFT]=this.location[$.RIGHT],this.location[$.RIGHT]=t}},{key:\"toString\",value:function(){var t=new st;return this.location.length>1&&t.append(H.toLocationSymbol(this.location[$.LEFT])),t.append(H.toLocationSymbol(this.location[$.ON])),this.location.length>1&&t.append(H.toLocationSymbol(this.location[$.RIGHT])),t.toString()}},{key:\"setLocations\",value:function(t,e,n){this.location[$.ON]=t,this.location[$.LEFT]=e,this.location[$.RIGHT]=n}},{key:\"get\",value:function(t){return t<this.location.length?this.location[t]:H.NONE}},{key:\"isArea\",value:function(){return this.location.length>1}},{key:\"isAnyNull\",value:function(){for(var t=0;t<this.location.length;t++)if(this.location[t]===H.NONE)return!0;return!1}},{key:\"setLocation\",value:function(){if(1===arguments.length){var t=arguments[0];this.setLocation($.ON,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.location[e]=n}}},{key:\"init\",value:function(t){this.location=new Array(t).fill(null),this.setAllLocations(H.NONE)}},{key:\"isEqualOnSide\",value:function(t,e){return this.location[e]===t.location[e]}},{key:\"allPositionsEqual\",value:function(t){for(var e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0}}],[{key:\"constructor_\",value:function(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];this.init(t.length)}else if(Number.isInteger(arguments[0])){var n=arguments[0];this.init(1),this.location[$.ON]=n}else if(arguments[0]instanceof e){var i=arguments[0];if(this.init(i.location.length),null!==i)for(var r=0;r<this.location.length;r++)this.location[r]=i.location[r]}}else if(3===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2];this.init(3),this.location[$.ON]=s,this.location[$.LEFT]=a,this.location[$.RIGHT]=o}}}]),e}(),Pe=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getGeometryCount\",value:function(){var t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t}},{key:\"setAllLocations\",value:function(t,e){this.elt[t].setAllLocations(e)}},{key:\"isNull\",value:function(t){return this.elt[t].isNull()}},{key:\"setAllLocationsIfNull\",value:function(){if(1===arguments.length){var t=arguments[0];this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.elt[e].setAllLocationsIfNull(n)}}},{key:\"isLine\",value:function(t){return this.elt[t].isLine()}},{key:\"merge\",value:function(t){for(var e=0;e<2;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new Ae(t.elt[e]):this.elt[e].merge(t.elt[e])}},{key:\"flip\",value:function(){this.elt[0].flip(),this.elt[1].flip()}},{key:\"getLocation\",value:function(){if(1===arguments.length){var t=arguments[0];return this.elt[t].get($.ON)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return this.elt[e].get(n)}}},{key:\"toString\",value:function(){var t=new st;return null!==this.elt[0]&&(t.append(\"A:\"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(\" B:\"),t.append(this.elt[1].toString())),t.toString()}},{key:\"isArea\",value:function(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){var t=arguments[0];return this.elt[t].isArea()}}},{key:\"isAnyNull\",value:function(t){return this.elt[t].isAnyNull()}},{key:\"setLocation\",value:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.elt[t].setLocation($.ON,e)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.elt[n].setLocation(i,r)}}},{key:\"isEqualOnSide\",value:function(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)}},{key:\"allPositionsEqual\",value:function(t,e){return this.elt[t].allPositionsEqual(e)}},{key:\"toLine\",value:function(t){this.elt[t].isArea()&&(this.elt[t]=new Ae(this.elt[t].location[0]))}}],[{key:\"constructor_\",value:function(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){var t=arguments[0];this.elt[0]=new Ae(t),this.elt[1]=new Ae(t)}else if(arguments[0]instanceof e){var n=arguments[0];this.elt[0]=new Ae(n.elt[0]),this.elt[1]=new Ae(n.elt[1])}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.elt[0]=new Ae(H.NONE),this.elt[1]=new Ae(H.NONE),this.elt[i].setLocation(r)}else if(3===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2];this.elt[0]=new Ae(s,a,o),this.elt[1]=new Ae(s,a,o)}else if(4===arguments.length){var u=arguments[0],l=arguments[1],h=arguments[2],c=arguments[3];this.elt[0]=new Ae(H.NONE,H.NONE,H.NONE),this.elt[1]=new Ae(H.NONE,H.NONE,H.NONE),this.elt[u].setLocations(l,h,c)}}},{key:\"toLineLabel\",value:function(t){for(var n=new e(H.NONE),i=0;i<2;i++)n.setLocation(i,t.getLocation(i));return n}}]),e}(),De=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"computeRing\",value:function(){if(null!==this._ring)return null;for(var t=new Array(this._pts.size()).fill(null),e=0;e<this._pts.size();e++)t[e]=this._pts.get(e);this._ring=this._geometryFactory.createLinearRing(t),this._isHole=ct.isCCW(this._ring.getCoordinates())}},{key:\"isIsolated\",value:function(){return 1===this._label.getGeometryCount()}},{key:\"computePoints\",value:function(t){this._startDe=t;var e=t,n=!0;do{if(null===e)throw new vt(\"Found null DirectedEdge\");if(e.getEdgeRing()===this)throw new vt(\"Directed Edge visited twice during ring-building at \"+e.getCoordinate());this._edges.add(e);var i=e.getLabel();G.isTrue(i.isArea()),this.mergeLabel(i),this.addPoints(e.getEdge(),e.isForward(),n),n=!1,this.setEdgeRing(e,this),e=this.getNext(e)}while(e!==this._startDe)}},{key:\"getLinearRing\",value:function(){return this._ring}},{key:\"getCoordinate\",value:function(t){return this._pts.get(t)}},{key:\"computeMaxNodeDegree\",value:function(){this._maxNodeDegree=0;var t=this._startDe;do{var e=t.getNode().getEdges().getOutgoingDegree(this);e>this._maxNodeDegree&&(this._maxNodeDegree=e),t=this.getNext(t)}while(t!==this._startDe);this._maxNodeDegree*=2}},{key:\"addPoints\",value:function(t,e,n){var i=t.getCoordinates();if(e){var r=1;n&&(r=0);for(var s=r;s<i.length;s++)this._pts.add(i[s])}else{var a=i.length-2;n&&(a=i.length-1);for(var o=a;o>=0;o--)this._pts.add(i[o])}}},{key:\"isHole\",value:function(){return this._isHole}},{key:\"setInResult\",value:function(){var t=this._startDe;do{t.getEdge().setInResult(!0),t=t.getNext()}while(t!==this._startDe)}},{key:\"containsPoint\",value:function(t){var e=this.getLinearRing();if(!e.getEnvelopeInternal().contains(t))return!1;if(!Me.isInRing(t,e.getCoordinates()))return!1;for(var n=this._holes.iterator();n.hasNext();){if(n.next().containsPoint(t))return!1}return!0}},{key:\"addHole\",value:function(t){this._holes.add(t)}},{key:\"isShell\",value:function(){return null===this._shell}},{key:\"getLabel\",value:function(){return this._label}},{key:\"getEdges\",value:function(){return this._edges}},{key:\"getMaxNodeDegree\",value:function(){return this._maxNodeDegree<0&&this.computeMaxNodeDegree(),this._maxNodeDegree}},{key:\"getShell\",value:function(){return this._shell}},{key:\"mergeLabel\",value:function(){if(1===arguments.length){var t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=e.getLocation(n,$.RIGHT);if(i===H.NONE)return null;if(this._label.getLocation(n)===H.NONE)return this._label.setLocation(n,i),null}}},{key:\"setShell\",value:function(t){this._shell=t,null!==t&&t.addHole(this)}},{key:\"toPolygon\",value:function(t){for(var e=new Array(this._holes.size()).fill(null),n=0;n<this._holes.size();n++)e[n]=this._holes.get(n).getLinearRing();return t.createPolygon(this.getLinearRing(),e)}}],[{key:\"constructor_\",value:function(){if(this._startDe=null,this._maxNodeDegree=-1,this._edges=new yt,this._pts=new yt,this._label=new Pe(H.NONE),this._ring=null,this._isHole=null,this._shell=null,this._holes=new yt,this._geometryFactory=null,0===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];this._geometryFactory=e,this.computePoints(t),this.computeRing()}}}]),e}(),Fe=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,[{key:\"setEdgeRing\",value:function(t,e){t.setMinEdgeRing(e)}},{key:\"getNext\",value:function(t){return t.getNextMin()}}],[{key:\"constructor_\",value:function(){var t=arguments[0],e=arguments[1];De.constructor_.call(this,t,e)}}]),s}(De),Ge=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,[{key:\"buildMinimalRings\",value:function(){var t=new yt,e=this._startDe;do{if(null===e.getMinEdgeRing()){var n=new Fe(e,this._geometryFactory);t.add(n)}e=e.getNext()}while(e!==this._startDe);return t}},{key:\"setEdgeRing\",value:function(t,e){t.setEdgeRing(e)}},{key:\"linkDirectedEdgesForMinimalEdgeRings\",value:function(){var t=this._startDe;do{t.getNode().getEdges().linkMinimalDirectedEdges(this),t=t.getNext()}while(t!==this._startDe)}},{key:\"getNext\",value:function(t){return t.getNext()}}],[{key:\"constructor_\",value:function(){var t=arguments[0],e=arguments[1];De.constructor_.call(this,t,e)}}]),s}(De),qe=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"setVisited\",value:function(t){this._isVisited=t}},{key:\"setInResult\",value:function(t){this._isInResult=t}},{key:\"isCovered\",value:function(){return this._isCovered}},{key:\"isCoveredSet\",value:function(){return this._isCoveredSet}},{key:\"setLabel\",value:function(t){this._label=t}},{key:\"getLabel\",value:function(){return this._label}},{key:\"setCovered\",value:function(t){this._isCovered=t,this._isCoveredSet=!0}},{key:\"updateIM\",value:function(t){G.isTrue(this._label.getGeometryCount()>=2,\"found partial label\"),this.computeIM(t)}},{key:\"isInResult\",value:function(){return this._isInResult}},{key:\"isVisited\",value:function(){return this._isVisited}}],[{key:\"constructor_\",value:function(){if(this._label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._label=t}}}]),e}(),Ye=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"isIncidentEdgeInResult\",value:function(){for(var t=this.getEdges().getEdges().iterator();t.hasNext();){if(t.next().getEdge().isInResult())return!0}return!1}},{key:\"isIsolated\",value:function(){return 1===this._label.getGeometryCount()}},{key:\"getCoordinate\",value:function(){return this._coord}},{key:\"print\",value:function(t){t.println(\"node \"+this._coord+\" lbl: \"+this._label)}},{key:\"computeIM\",value:function(t){}},{key:\"computeMergedLocation\",value:function(t,e){var n=H.NONE;if(n=this._label.getLocation(e),!t.isNull(e)){var i=t.getLocation(e);n!==H.BOUNDARY&&(n=i)}return n}},{key:\"setLabel\",value:function(){if(2!==arguments.length||!Number.isInteger(arguments[1])||!Number.isInteger(arguments[0]))return f(r(a.prototype),\"setLabel\",this).apply(this,arguments);var t=arguments[0],e=arguments[1];null===this._label?this._label=new Pe(t,e):this._label.setLocation(t,e)}},{key:\"getEdges\",value:function(){return this._edges}},{key:\"mergeLabel\",value:function(){if(arguments[0]instanceof a){var t=arguments[0];this.mergeLabel(t._label)}else if(arguments[0]instanceof Pe)for(var e=arguments[0],n=0;n<2;n++){var i=this.computeMergedLocation(e,n),r=this._label.getLocation(n);r===H.NONE&&this._label.setLocation(n,i)}}},{key:\"add\",value:function(t){this._edges.insert(t),t.setNode(this)}},{key:\"setLabelBoundary\",value:function(t){if(null===this._label)return null;var e=H.NONE;null!==this._label&&(e=this._label.getLocation(t));var n=null;switch(e){case H.BOUNDARY:n=H.INTERIOR;break;case H.INTERIOR:default:n=H.BOUNDARY}this._label.setLocation(t,n)}}],[{key:\"constructor_\",value:function(){this._coord=null,this._edges=null;var t=arguments[0],e=arguments[1];this._coord=t,this._edges=e,this._label=new Pe(0,H.NONE)}}]),a}(qe),ze=function(e){i(r,e);var n=c(r);function r(){return t(this,r),n.apply(this,arguments)}return r}(ee);function Xe(t){return null==t?0:t.color}function Be(t){return null==t?null:t.parent}function Ue(t,e){null!==t&&(t.color=e)}function Ve(t){return null==t?null:t.left}function He(t){return null==t?null:t.right}var Ze=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),(e=r.call(this)).root_=null,e.size_=0,e}return n(s,[{key:\"get\",value:function(t){for(var e=this.root_;null!==e;){var n=t.compareTo(e.key);if(n<0)e=e.left;else{if(!(n>0))return e.value;e=e.right}}return null}},{key:\"put\",value:function(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:0,getValue:function(){return this.value},getKey:function(){return this.key}},this.size_=1,null;var n,i,r=this.root_;do{if(n=r,(i=t.compareTo(r.key))<0)r=r.left;else{if(!(i>0)){var s=r.value;return r.value=e,s}r=r.right}}while(null!==r);var a={key:t,left:null,right:null,value:e,parent:n,color:0,getValue:function(){return this.value},getKey:function(){return this.key}};return i<0?n.left=a:n.right=a,this.fixAfterInsertion(a),this.size_++,null}},{key:\"fixAfterInsertion\",value:function(t){var e;for(t.color=1;null!=t&&t!==this.root_&&1===t.parent.color;)Be(t)===Ve(Be(Be(t)))?1===Xe(e=He(Be(Be(t))))?(Ue(Be(t),0),Ue(e,0),Ue(Be(Be(t)),1),t=Be(Be(t))):(t===He(Be(t))&&(t=Be(t),this.rotateLeft(t)),Ue(Be(t),0),Ue(Be(Be(t)),1),this.rotateRight(Be(Be(t)))):1===Xe(e=Ve(Be(Be(t))))?(Ue(Be(t),0),Ue(e,0),Ue(Be(Be(t)),1),t=Be(Be(t))):(t===Ve(Be(t))&&(t=Be(t),this.rotateRight(t)),Ue(Be(t),0),Ue(Be(Be(t)),1),this.rotateLeft(Be(Be(t))));this.root_.color=0}},{key:\"values\",value:function(){var t=new yt,e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=s.successor(e));)t.add(e.value);return t}},{key:\"entrySet\",value:function(){var t=new J,e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=s.successor(e));)t.add(e);return t}},{key:\"rotateLeft\",value:function(t){if(null!=t){var e=t.right;t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.left===t?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e}}},{key:\"rotateRight\",value:function(t){if(null!=t){var e=t.left;t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.right===t?t.parent.right=e:t.parent.left=e,e.right=t,t.parent=e}}},{key:\"getFirstEntry\",value:function(){var t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t}},{key:\"size\",value:function(){return this.size_}},{key:\"containsKey\",value:function(t){for(var e=this.root_;null!==e;){var n=t.compareTo(e.key);if(n<0)e=e.left;else{if(!(n>0))return!0;e=e.right}}return!1}}],[{key:\"successor\",value:function(t){var e;if(null===t)return null;if(null!==t.right){for(e=t.right;null!==e.left;)e=e.left;return e}e=t.parent;for(var n=t;null!==e&&n===e.right;)n=e,e=e.parent;return e}}]),s}(ze),je=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"find\",value:function(t){return this.nodeMap.get(t)}},{key:\"addNode\",value:function(){if(arguments[0]instanceof X){var t=arguments[0],e=this.nodeMap.get(t);return null===e&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof Ye){var n=arguments[0],i=this.nodeMap.get(n.getCoordinate());return null===i?(this.nodeMap.put(n.getCoordinate(),n),n):(i.mergeLabel(n),i)}}},{key:\"print\",value:function(t){for(var e=this.iterator();e.hasNext();){e.next().print(t)}}},{key:\"iterator\",value:function(){return this.nodeMap.values().iterator()}},{key:\"values\",value:function(){return this.nodeMap.values()}},{key:\"getBoundaryNodes\",value:function(t){for(var e=new yt,n=this.iterator();n.hasNext();){var i=n.next();i.getLabel().getLocation(t)===H.BOUNDARY&&e.add(i)}return e}},{key:\"add\",value:function(t){var e=t.getCoordinate();this.addNode(e).add(t)}}],[{key:\"constructor_\",value:function(){this.nodeMap=new Ze,this.nodeFact=null;var t=arguments[0];this.nodeFact=t}}]),e}(),We=function(){function e(){t(this,e)}return n(e,null,[{key:\"isNorthern\",value:function(t){return t===e.NE||t===e.NW}},{key:\"isOpposite\",value:function(t,e){return t!==e&&2===(t-e+4)%4}},{key:\"commonHalfPlane\",value:function(t,e){if(t===e)return t;if(2===(t-e+4)%4)return-1;var n=t<e?t:e;return 0===n&&3===(t>e?t:e)?3:n}},{key:\"isInHalfPlane\",value:function(t,n){return n===e.SE?t===e.SE||t===e.SW:t===n||t===n+1}},{key:\"quadrant\",value:function(){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],n=arguments[1];if(0===t&&0===n)throw new m(\"Cannot compute the quadrant for point ( \"+t+\", \"+n+\" )\");return t>=0?n>=0?e.NE:e.SE:n>=0?e.NW:e.SW}if(arguments[0]instanceof X&&arguments[1]instanceof X){var i=arguments[0],r=arguments[1];if(r.x===i.x&&r.y===i.y)throw new m(\"Cannot compute the quadrant for two identical points \"+i);return r.x>=i.x?r.y>=i.y?e.NE:e.SE:r.y>=i.y?e.NW:e.SW}}}]),e}();We.NE=0,We.NW=1,We.SW=2,We.SE=3;var Ke=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"compareDirection\",value:function(t){return this._dx===t._dx&&this._dy===t._dy?0:this._quadrant>t._quadrant?1:this._quadrant<t._quadrant?-1:ct.index(t._p0,t._p1,this._p1)}},{key:\"getDy\",value:function(){return this._dy}},{key:\"getCoordinate\",value:function(){return this._p0}},{key:\"setNode\",value:function(t){this._node=t}},{key:\"print\",value:function(t){var e=Math.atan2(this._dy,this._dx),n=this.getClass().getName(),i=n.lastIndexOf(\".\"),r=n.substring(i+1);t.print(\"  \"+r+\": \"+this._p0+\" - \"+this._p1+\" \"+this._quadrant+\":\"+e+\"   \"+this._label)}},{key:\"compareTo\",value:function(t){var e=t;return this.compareDirection(e)}},{key:\"getDirectedCoordinate\",value:function(){return this._p1}},{key:\"getDx\",value:function(){return this._dx}},{key:\"getLabel\",value:function(){return this._label}},{key:\"getEdge\",value:function(){return this._edge}},{key:\"getQuadrant\",value:function(){return this._quadrant}},{key:\"getNode\",value:function(){return this._node}},{key:\"toString\",value:function(){var t=Math.atan2(this._dy,this._dx),e=this.getClass().getName(),n=e.lastIndexOf(\".\");return\"  \"+e.substring(n+1)+\": \"+this._p0+\" - \"+this._p1+\" \"+this._quadrant+\":\"+t+\"   \"+this._label}},{key:\"computeLabel\",value:function(t){}},{key:\"init\",value:function(t,e){this._p0=t,this._p1=e,this._dx=e.x-t.x,this._dy=e.y-t.y,this._quadrant=We.quadrant(this._dx,this._dy),G.isTrue(!(0===this._dx&&0===this._dy),\"EdgeEnd with identical endpoints found\")}},{key:\"interfaces_\",get:function(){return[x]}}],[{key:\"constructor_\",value:function(){if(this._edge=null,this._label=null,this._node=null,this._p0=null,this._p1=null,this._dx=null,this._dy=null,this._quadrant=null,1===arguments.length){var t=arguments[0];this._edge=t}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];e.constructor_.call(this,n,i,r,null)}else if(4===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2],u=arguments[3];e.constructor_.call(this,s),this.init(a,o),this._label=u}}}]),e}(),Je=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"getNextMin\",value:function(){return this._nextMin}},{key:\"getDepth\",value:function(t){return this._depth[t]}},{key:\"setVisited\",value:function(t){this._isVisited=t}},{key:\"computeDirectedLabel\",value:function(){this._label=new Pe(this._edge.getLabel()),this._isForward||this._label.flip()}},{key:\"getNext\",value:function(){return this._next}},{key:\"setDepth\",value:function(t,e){if(-999!==this._depth[t]&&this._depth[t]!==e)throw new vt(\"assigned depths do not match\",this.getCoordinate());this._depth[t]=e}},{key:\"isInteriorAreaEdge\",value:function(){for(var t=!0,e=0;e<2;e++)this._label.isArea(e)&&this._label.getLocation(e,$.LEFT)===H.INTERIOR&&this._label.getLocation(e,$.RIGHT)===H.INTERIOR||(t=!1);return t}},{key:\"setNextMin\",value:function(t){this._nextMin=t}},{key:\"print\",value:function(t){f(r(a.prototype),\"print\",this).call(this,t),t.print(\" \"+this._depth[$.LEFT]+\"/\"+this._depth[$.RIGHT]),t.print(\" (\"+this.getDepthDelta()+\")\"),this._isInResult&&t.print(\" inResult\")}},{key:\"setMinEdgeRing\",value:function(t){this._minEdgeRing=t}},{key:\"isLineEdge\",value:function(){var t=this._label.isLine(0)||this._label.isLine(1),e=!this._label.isArea(0)||this._label.allPositionsEqual(0,H.EXTERIOR),n=!this._label.isArea(1)||this._label.allPositionsEqual(1,H.EXTERIOR);return t&&e&&n}},{key:\"setEdgeRing\",value:function(t){this._edgeRing=t}},{key:\"getMinEdgeRing\",value:function(){return this._minEdgeRing}},{key:\"getDepthDelta\",value:function(){var t=this._edge.getDepthDelta();return this._isForward||(t=-t),t}},{key:\"setInResult\",value:function(t){this._isInResult=t}},{key:\"getSym\",value:function(){return this._sym}},{key:\"isForward\",value:function(){return this._isForward}},{key:\"getEdge\",value:function(){return this._edge}},{key:\"printEdge\",value:function(t){this.print(t),t.print(\" \"),this._isForward?this._edge.print(t):this._edge.printReverse(t)}},{key:\"setSym\",value:function(t){this._sym=t}},{key:\"setVisitedEdge\",value:function(t){this.setVisited(t),this._sym.setVisited(t)}},{key:\"setEdgeDepths\",value:function(t,e){var n=this.getEdge().getDepthDelta();this._isForward||(n=-n);var i=1;t===$.LEFT&&(i=-1);var r=$.opposite(t),s=e+n*i;this.setDepth(t,e),this.setDepth(r,s)}},{key:\"getEdgeRing\",value:function(){return this._edgeRing}},{key:\"isInResult\",value:function(){return this._isInResult}},{key:\"setNext\",value:function(t){this._next=t}},{key:\"isVisited\",value:function(){return this._isVisited}}],[{key:\"constructor_\",value:function(){this._isForward=null,this._isInResult=!1,this._isVisited=!1,this._sym=null,this._next=null,this._nextMin=null,this._edgeRing=null,this._minEdgeRing=null,this._depth=[0,-999,-999];var t=arguments[0],e=arguments[1];if(Ke.constructor_.call(this,t),this._isForward=e,e)this.init(t.getCoordinate(0),t.getCoordinate(1));else{var n=t.getNumPoints()-1;this.init(t.getCoordinate(n),t.getCoordinate(n-1))}this.computeDirectedLabel()}},{key:\"depthFactor\",value:function(t,e){return t===H.EXTERIOR&&e===H.INTERIOR?1:t===H.INTERIOR&&e===H.EXTERIOR?-1:0}}]),a}(Ke),Qe=function(){function e(){t(this,e)}return n(e,[{key:\"createNode\",value:function(t){return new Ye(t,null)}}]),e}(),$e=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"printEdges\",value:function(t){t.println(\"Edges:\");for(var e=0;e<this._edges.size();e++){t.println(\"edge \"+e+\":\");var n=this._edges.get(e);n.print(t),n.eiList.print(t)}}},{key:\"find\",value:function(t){return this._nodes.find(t)}},{key:\"addNode\",value:function(){if(arguments[0]instanceof Ye){var t=arguments[0];return this._nodes.addNode(t)}if(arguments[0]instanceof X){var e=arguments[0];return this._nodes.addNode(e)}}},{key:\"getNodeIterator\",value:function(){return this._nodes.iterator()}},{key:\"linkResultDirectedEdges\",value:function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges()}}},{key:\"debugPrintln\",value:function(t){mt.out.println(t)}},{key:\"isBoundaryNode\",value:function(t,e){var n=this._nodes.find(e);if(null===n)return!1;var i=n.getLabel();return null!==i&&i.getLocation(t)===H.BOUNDARY}},{key:\"linkAllDirectedEdges\",value:function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkAllDirectedEdges()}}},{key:\"matchInSameDirection\",value:function(t,e,n,i){return!!t.equals(n)&&(ct.index(t,e,i)===ct.COLLINEAR&&We.quadrant(t,e)===We.quadrant(n,i))}},{key:\"getEdgeEnds\",value:function(){return this._edgeEndList}},{key:\"debugPrint\",value:function(t){mt.out.print(t)}},{key:\"getEdgeIterator\",value:function(){return this._edges.iterator()}},{key:\"findEdgeInSameDirection\",value:function(t,e){for(var n=0;n<this._edges.size();n++){var i=this._edges.get(n),r=i.getCoordinates();if(this.matchInSameDirection(t,e,r[0],r[1]))return i;if(this.matchInSameDirection(t,e,r[r.length-1],r[r.length-2]))return i}return null}},{key:\"insertEdge\",value:function(t){this._edges.add(t)}},{key:\"findEdgeEnd\",value:function(t){for(var e=this.getEdgeEnds().iterator();e.hasNext();){var n=e.next();if(n.getEdge()===t)return n}return null}},{key:\"addEdges\",value:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this._edges.add(n);var i=new Je(n,!0),r=new Je(n,!1);i.setSym(r),r.setSym(i),this.add(i),this.add(r)}}},{key:\"add\",value:function(t){this._nodes.add(t),this._edgeEndList.add(t)}},{key:\"getNodes\",value:function(){return this._nodes.values()}},{key:\"findEdge\",value:function(t,e){for(var n=0;n<this._edges.size();n++){var i=this._edges.get(n),r=i.getCoordinates();if(t.equals(r[0])&&e.equals(r[1]))return i}return null}}],[{key:\"constructor_\",value:function(){if(this._edges=new yt,this._nodes=null,this._edgeEndList=new yt,0===arguments.length)this._nodes=new je(new Qe);else if(1===arguments.length){var t=arguments[0];this._nodes=new je(t)}}},{key:\"linkResultDirectedEdges\",value:function(t){for(var e=t.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges()}}}]),e}(),tn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"sortShellsAndHoles\",value:function(t,e,n){for(var i=t.iterator();i.hasNext();){var r=i.next();r.isHole()?n.add(r):e.add(r)}}},{key:\"computePolygons\",value:function(t){for(var e=new yt,n=t.iterator();n.hasNext();){var i=n.next().toPolygon(this._geometryFactory);e.add(i)}return e}},{key:\"placeFreeHoles\",value:function(t,n){for(var i=n.iterator();i.hasNext();){var r=i.next();if(null===r.getShell()){var s=e.findEdgeRingContaining(r,t);if(null===s)throw new vt(\"unable to assign hole to a shell\",r.getCoordinate(0));r.setShell(s)}}}},{key:\"buildMinimalEdgeRings\",value:function(t,e,n){for(var i=new yt,r=t.iterator();r.hasNext();){var s=r.next();if(s.getMaxNodeDegree()>2){s.linkDirectedEdgesForMinimalEdgeRings();var a=s.buildMinimalRings(),o=this.findShell(a);null!==o?(this.placePolygonHoles(o,a),e.add(o)):n.addAll(a)}else i.add(s)}return i}},{key:\"buildMaximalEdgeRings\",value:function(t){for(var e=new yt,n=t.iterator();n.hasNext();){var i=n.next();if(i.isInResult()&&i.getLabel().isArea()&&null===i.getEdgeRing()){var r=new Ge(i,this._geometryFactory);e.add(r),r.setInResult()}}return e}},{key:\"placePolygonHoles\",value:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();i.isHole()&&i.setShell(t)}}},{key:\"getPolygons\",value:function(){return this.computePolygons(this._shellList)}},{key:\"findShell\",value:function(t){for(var e=0,n=null,i=t.iterator();i.hasNext();){var r=i.next();r.isHole()||(n=r,e++)}return G.isTrue(e<=1,\"found two shells in MinimalEdgeRing list\"),n}},{key:\"add\",value:function(){if(1===arguments.length){var t=arguments[0];this.add(t.getEdgeEnds(),t.getNodes())}else if(2===arguments.length){var e=arguments[0],n=arguments[1];$e.linkResultDirectedEdges(n);var i=this.buildMaximalEdgeRings(e),r=new yt,s=this.buildMinimalEdgeRings(i,this._shellList,r);this.sortShellsAndHoles(s,this._shellList,r),this.placeFreeHoles(this._shellList,r)}}}],[{key:\"constructor_\",value:function(){this._geometryFactory=null,this._shellList=new yt;var t=arguments[0];this._geometryFactory=t}},{key:\"findEdgeRingContaining\",value:function(t,e){for(var n=t.getLinearRing(),i=n.getEnvelopeInternal(),r=n.getCoordinateN(0),s=null,a=null,o=e.iterator();o.hasNext();){var u=o.next(),l=u.getLinearRing(),h=l.getEnvelopeInternal();if(!h.equals(i)&&h.contains(i)){r=jt.ptNotInList(n.getCoordinates(),l.getCoordinates());var c=!1;Me.isInRing(r,l.getCoordinates())&&(c=!0),c&&(null===s||a.contains(h))&&(a=(s=u).getLinearRing().getEnvelopeInternal())}}return s}}]),e}(),en=function(){function e(){t(this,e)}return n(e,[{key:\"getBounds\",value:function(){}}]),e}(),nn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getItem\",value:function(){return this._item}},{key:\"getBounds\",value:function(){return this._bounds}},{key:\"interfaces_\",get:function(){return[en,E]}}],[{key:\"constructor_\",value:function(){this._bounds=null,this._item=null;var t=arguments[0],e=arguments[1];this._bounds=t,this._item=e}}]),e}(),rn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"poll\",value:function(){if(this.isEmpty())return null;var t=this._items.get(1);return this._items.set(1,this._items.get(this._size)),this._size-=1,this.reorder(1),t}},{key:\"size\",value:function(){return this._size}},{key:\"reorder\",value:function(t){for(var e=null,n=this._items.get(t);2*t<=this._size&&((e=2*t)!==this._size&&this._items.get(e+1).compareTo(this._items.get(e))<0&&e++,this._items.get(e).compareTo(n)<0);t=e)this._items.set(t,this._items.get(e));this._items.set(t,n)}},{key:\"clear\",value:function(){this._size=0,this._items.clear()}},{key:\"peek\",value:function(){return this.isEmpty()?null:this._items.get(1)}},{key:\"isEmpty\",value:function(){return 0===this._size}},{key:\"add\",value:function(t){this._items.add(null),this._size+=1;var e=this._size;for(this._items.set(0,t);t.compareTo(this._items.get(Math.trunc(e/2)))<0;e/=2)this._items.set(e,this._items.get(Math.trunc(e/2)));this._items.set(e,t)}}],[{key:\"constructor_\",value:function(){this._size=null,this._items=null,this._size=0,this._items=new yt,this._items.add(null)}}]),e}(),sn=function(){function e(){t(this,e)}return n(e,[{key:\"insert\",value:function(t,e){}},{key:\"remove\",value:function(t,e){}},{key:\"query\",value:function(){}}]),e}(),an=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getLevel\",value:function(){return this._level}},{key:\"size\",value:function(){return this._childBoundables.size()}},{key:\"getChildBoundables\",value:function(){return this._childBoundables}},{key:\"addChildBoundable\",value:function(t){G.isTrue(null===this._bounds),this._childBoundables.add(t)}},{key:\"isEmpty\",value:function(){return this._childBoundables.isEmpty()}},{key:\"getBounds\",value:function(){return null===this._bounds&&(this._bounds=this.computeBounds()),this._bounds}},{key:\"interfaces_\",get:function(){return[en,E]}}],[{key:\"constructor_\",value:function(){if(this._childBoundables=new yt,this._bounds=null,this._level=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._level=t}}}]),e}(),on={reverseOrder:function(){return{compare:function(t,e){return e.compareTo(t)}}},min:function(t){return on.sort(t),t.get(0)},sort:function(t,e){var n=t.toArray();e?At.sort(n,e):At.sort(n);for(var i=t.iterator(),r=0,s=n.length;r<s;r++)i.next(),i.set(n[r])},singletonList:function(t){var e=new yt;return e.add(t),e}},un=function(){function e(){t(this,e)}return n(e,null,[{key:\"maxDistance\",value:function(t,n,i,r,s,a,o,u){var l=e.distance(t,n,s,a);return l=Math.max(l,e.distance(t,n,o,u)),l=Math.max(l,e.distance(i,r,s,a)),l=Math.max(l,e.distance(i,r,o,u))}},{key:\"distance\",value:function(t,e,n,i){var r=n-t,s=i-e;return Math.sqrt(r*r+s*s)}},{key:\"maximumDistance\",value:function(t,n){var i=Math.min(t.getMinX(),n.getMinX()),r=Math.min(t.getMinY(),n.getMinY()),s=Math.max(t.getMaxX(),n.getMaxX()),a=Math.max(t.getMaxY(),n.getMaxY());return e.distance(i,r,s,a)}},{key:\"minMaxDistance\",value:function(t,n){var i=t.getMinX(),r=t.getMinY(),s=t.getMaxX(),a=t.getMaxY(),o=n.getMinX(),u=n.getMinY(),l=n.getMaxX(),h=n.getMaxY(),c=e.maxDistance(i,r,i,a,o,u,o,h);return c=Math.min(c,e.maxDistance(i,r,i,a,o,u,l,u)),c=Math.min(c,e.maxDistance(i,r,i,a,l,h,o,h)),c=Math.min(c,e.maxDistance(i,r,i,a,l,h,l,u)),c=Math.min(c,e.maxDistance(i,r,s,r,o,u,o,h)),c=Math.min(c,e.maxDistance(i,r,s,r,o,u,l,u)),c=Math.min(c,e.maxDistance(i,r,s,r,l,h,o,h)),c=Math.min(c,e.maxDistance(i,r,s,r,l,h,l,u)),c=Math.min(c,e.maxDistance(s,a,i,a,o,u,o,h)),c=Math.min(c,e.maxDistance(s,a,i,a,o,u,l,u)),c=Math.min(c,e.maxDistance(s,a,i,a,l,h,o,h)),c=Math.min(c,e.maxDistance(s,a,i,a,l,h,l,u)),c=Math.min(c,e.maxDistance(s,a,s,r,o,u,o,h)),c=Math.min(c,e.maxDistance(s,a,s,r,o,u,l,u)),c=Math.min(c,e.maxDistance(s,a,s,r,l,h,o,h)),c=Math.min(c,e.maxDistance(s,a,s,r,l,h,l,u))}}]),e}(),ln=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"maximumDistance\",value:function(){return un.maximumDistance(this._boundable1.getBounds(),this._boundable2.getBounds())}},{key:\"expandToQueue\",value:function(t,n){var i=e.isComposite(this._boundable1),r=e.isComposite(this._boundable2);if(i&&r)return e.area(this._boundable1)>e.area(this._boundable2)?(this.expand(this._boundable1,this._boundable2,!1,t,n),null):(this.expand(this._boundable2,this._boundable1,!0,t,n),null);if(i)return this.expand(this._boundable1,this._boundable2,!1,t,n),null;if(r)return this.expand(this._boundable2,this._boundable1,!0,t,n),null;throw new m(\"neither boundable is composite\")}},{key:\"isLeaves\",value:function(){return!(e.isComposite(this._boundable1)||e.isComposite(this._boundable2))}},{key:\"compareTo\",value:function(t){var e=t;return this._distance<e._distance?-1:this._distance>e._distance?1:0}},{key:\"expand\",value:function(t,n,i,r,s){for(var a=t.getChildBoundables().iterator();a.hasNext();){var o=a.next(),u=null;(u=i?new e(n,o,this._itemDistance):new e(o,n,this._itemDistance)).getDistance()<s&&r.add(u)}}},{key:\"getBoundable\",value:function(t){return 0===t?this._boundable1:this._boundable2}},{key:\"getDistance\",value:function(){return this._distance}},{key:\"distance\",value:function(){return this.isLeaves()?this._itemDistance.distance(this._boundable1,this._boundable2):this._boundable1.getBounds().distance(this._boundable2.getBounds())}},{key:\"interfaces_\",get:function(){return[x]}}],[{key:\"constructor_\",value:function(){this._boundable1=null,this._boundable2=null,this._distance=null,this._itemDistance=null;var t=arguments[0],e=arguments[1],n=arguments[2];this._boundable1=t,this._boundable2=e,this._itemDistance=n,this._distance=this.distance()}},{key:\"area\",value:function(t){return t.getBounds().getArea()}},{key:\"isComposite\",value:function(t){return t instanceof an}}]),e}(),hn=function(){function e(){t(this,e)}return n(e,[{key:\"visitItem\",value:function(t){}}]),e}(),cn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"queryInternal\",value:function(){if(rt(arguments[2],hn)&&arguments[0]instanceof Object&&arguments[1]instanceof an)for(var t=arguments[0],e=arguments[1],n=arguments[2],i=e.getChildBoundables(),r=0;r<i.size();r++){var s=i.get(r);this.getIntersectsOp().intersects(s.getBounds(),t)&&(s instanceof an?this.queryInternal(t,s,n):s instanceof nn?n.visitItem(s.getItem()):G.shouldNeverReachHere())}else if(rt(arguments[2],nt)&&arguments[0]instanceof Object&&arguments[1]instanceof an)for(var a=arguments[0],o=arguments[1],u=arguments[2],l=o.getChildBoundables(),h=0;h<l.size();h++){var c=l.get(h);this.getIntersectsOp().intersects(c.getBounds(),a)&&(c instanceof an?this.queryInternal(a,c,u):c instanceof nn?u.add(c.getItem()):G.shouldNeverReachHere())}}},{key:\"getNodeCapacity\",value:function(){return this._nodeCapacity}},{key:\"lastNode\",value:function(t){return t.get(t.size()-1)}},{key:\"size\",value:function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this._root));if(1===arguments.length){for(var t=arguments[0],e=0,n=t.getChildBoundables().iterator();n.hasNext();){var i=n.next();i instanceof an?e+=this.size(i):i instanceof nn&&(e+=1)}return e}}},{key:\"removeItem\",value:function(t,e){for(var n=null,i=t.getChildBoundables().iterator();i.hasNext();){var r=i.next();r instanceof nn&&r.getItem()===e&&(n=r)}return null!==n&&(t.getChildBoundables().remove(n),!0)}},{key:\"itemsTree\",value:function(){if(0===arguments.length){this.build();var t=this.itemsTree(this._root);return null===t?new yt:t}if(1===arguments.length){for(var e=arguments[0],n=new yt,i=e.getChildBoundables().iterator();i.hasNext();){var r=i.next();if(r instanceof an){var s=this.itemsTree(r);null!==s&&n.add(s)}else r instanceof nn?n.add(r.getItem()):G.shouldNeverReachHere()}return n.size()<=0?null:n}}},{key:\"insert\",value:function(t,e){G.isTrue(!this._built,\"Cannot insert items into an STR packed R-tree after it has been built.\"),this._itemBoundables.add(new nn(t,e))}},{key:\"boundablesAtLevel\",value:function(){if(1===arguments.length){var t=arguments[0],e=new yt;return this.boundablesAtLevel(t,this._root,e),e}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];if(G.isTrue(n>-2),i.getLevel()===n)return r.add(i),null;for(var s=i.getChildBoundables().iterator();s.hasNext();){var a=s.next();a instanceof an?this.boundablesAtLevel(n,a,r):(G.isTrue(a instanceof nn),-1===n&&r.add(a))}return null}}},{key:\"query\",value:function(){if(1===arguments.length){var t=arguments[0];this.build();var e=new yt;return this.isEmpty()||this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.queryInternal(t,this._root,e),e}if(2===arguments.length){var n=arguments[0],i=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this._root.getBounds(),n)&&this.queryInternal(n,this._root,i)}}},{key:\"build\",value:function(){if(this._built)return null;this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1),this._itemBoundables=null,this._built=!0}},{key:\"getRoot\",value:function(){return this.build(),this._root}},{key:\"remove\",value:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.remove(t,this._root,e)}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],s=this.removeItem(i,r);if(s)return!0;for(var a=null,o=i.getChildBoundables().iterator();o.hasNext();){var u=o.next();if(this.getIntersectsOp().intersects(u.getBounds(),n)&&(u instanceof an&&(s=this.remove(n,u,r)))){a=u;break}}return null!==a&&a.getChildBoundables().isEmpty()&&i.getChildBoundables().remove(a),s}}},{key:\"createHigherLevels\",value:function(t,e){G.isTrue(!t.isEmpty());var n=this.createParentBoundables(t,e+1);return 1===n.size()?n.get(0):this.createHigherLevels(n,e+1)}},{key:\"depth\",value:function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this._root));if(1===arguments.length){for(var t=arguments[0],e=0,n=t.getChildBoundables().iterator();n.hasNext();){var i=n.next();if(i instanceof an){var r=this.depth(i);r>e&&(e=r)}}return e+1}}},{key:\"createParentBoundables\",value:function(t,e){G.isTrue(!t.isEmpty());var n=new yt;n.add(this.createNode(e));var i=new yt(t);on.sort(i,this.getComparator());for(var r=i.iterator();r.hasNext();){var s=r.next();this.lastNode(n).getChildBoundables().size()===this.getNodeCapacity()&&n.add(this.createNode(e)),this.lastNode(n).addChildBoundable(s)}return n}},{key:\"isEmpty\",value:function(){return this._built?this._root.isEmpty():this._itemBoundables.isEmpty()}},{key:\"interfaces_\",get:function(){return[E]}}],[{key:\"constructor_\",value:function(){if(this._root=null,this._built=!1,this._itemBoundables=new yt,this._nodeCapacity=null,0===arguments.length)e.constructor_.call(this,e.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){var t=arguments[0];G.isTrue(t>1,\"Node capacity must be greater than 1\"),this._nodeCapacity=t}}},{key:\"compareDoubles\",value:function(t,e){return t>e?1:t<e?-1:0}}]),e}();cn.IntersectsOp=function(){},cn.DEFAULT_NODE_CAPACITY=10;var fn=function(){function e(){t(this,e)}return n(e,[{key:\"distance\",value:function(t,e){}}]),e}(),vn=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"createParentBoundablesFromVerticalSlices\",value:function(t,e){G.isTrue(t.length>0);for(var n=new yt,i=0;i<t.length;i++)n.addAll(this.createParentBoundablesFromVerticalSlice(t[i],e));return n}},{key:\"nearestNeighbourK\",value:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.nearestNeighbourK(t,A.POSITIVE_INFINITY,e)}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],s=i,o=new rn;o.add(n);for(var u=new rn;!o.isEmpty()&&s>=0;){var l=o.poll(),h=l.getDistance();if(h>=s)break;if(l.isLeaves())if(u.size()<r)u.add(l);else{var c=u.peek();c.getDistance()>h&&(u.poll(),u.add(l));var f=u.peek();s=f.getDistance()}else l.expandToQueue(o,s)}return a.getItems(u)}}},{key:\"createNode\",value:function(t){return new gn(t)}},{key:\"size\",value:function(){return 0===arguments.length?f(r(a.prototype),\"size\",this).call(this):f(r(a.prototype),\"size\",this).apply(this,arguments)}},{key:\"insert\",value:function(){if(!(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof U))return f(r(a.prototype),\"insert\",this).apply(this,arguments);var t=arguments[0],e=arguments[1];if(t.isNull())return null;f(r(a.prototype),\"insert\",this).call(this,t,e)}},{key:\"getIntersectsOp\",value:function(){return a.intersectsOp}},{key:\"verticalSlices\",value:function(t,e){for(var n=Math.trunc(Math.ceil(t.size()/e)),i=new Array(e).fill(null),r=t.iterator(),s=0;s<e;s++){i[s]=new yt;for(var a=0;r.hasNext()&&a<n;){var o=r.next();i[s].add(o),a++}}return i}},{key:\"query\",value:function(){if(1===arguments.length){var t=arguments[0];return f(r(a.prototype),\"query\",this).call(this,t)}if(2===arguments.length){var e=arguments[0],n=arguments[1];f(r(a.prototype),\"query\",this).call(this,e,n)}}},{key:\"getComparator\",value:function(){return a.yComparator}},{key:\"createParentBoundablesFromVerticalSlice\",value:function(t,e){return f(r(a.prototype),\"createParentBoundables\",this).call(this,t,e)}},{key:\"remove\",value:function(){if(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof U){var t=arguments[0],e=arguments[1];return f(r(a.prototype),\"remove\",this).call(this,t,e)}return f(r(a.prototype),\"remove\",this).apply(this,arguments)}},{key:\"depth\",value:function(){return 0===arguments.length?f(r(a.prototype),\"depth\",this).call(this):f(r(a.prototype),\"depth\",this).apply(this,arguments)}},{key:\"createParentBoundables\",value:function(t,e){G.isTrue(!t.isEmpty());var n=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),i=new yt(t);on.sort(i,a.xComparator);var r=this.verticalSlices(i,Math.trunc(Math.ceil(Math.sqrt(n))));return this.createParentBoundablesFromVerticalSlices(r,e)}},{key:\"nearestNeighbour\",value:function(){if(1===arguments.length){if(rt(arguments[0],fn)){var t=arguments[0];if(this.isEmpty())return null;var e=new ln(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(e)}if(arguments[0]instanceof ln){var n=arguments[0],i=A.POSITIVE_INFINITY,r=null,s=new rn;for(s.add(n);!s.isEmpty()&&i>0;){var a=s.poll(),o=a.getDistance();if(o>=i)break;a.isLeaves()?(i=o,r=a):a.expandToQueue(s,i)}return null===r?null:[r.getBoundable(0).getItem(),r.getBoundable(1).getItem()]}}else{if(2===arguments.length){var u=arguments[0],l=arguments[1];if(this.isEmpty()||u.isEmpty())return null;var h=new ln(this.getRoot(),u.getRoot(),l);return this.nearestNeighbour(h)}if(3===arguments.length){var c=arguments[0],f=arguments[1],v=arguments[2],g=new nn(c,f),y=new ln(this.getRoot(),g,v);return this.nearestNeighbour(y)[0]}if(4===arguments.length){var d=arguments[0],_=arguments[1],p=arguments[2],m=arguments[3],k=new nn(d,_),x=new ln(this.getRoot(),k,p);return this.nearestNeighbourK(x,m)}}}},{key:\"isWithinDistance\",value:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=A.POSITIVE_INFINITY,i=new rn;for(i.add(t);!i.isEmpty();){var r=i.poll(),s=r.getDistance();if(s>e)return!1;if(r.maximumDistance()<=e)return!0;if(r.isLeaves()){if((n=s)<=e)return!0}else r.expandToQueue(i,n)}return!1}if(3===arguments.length){var a=arguments[0],o=arguments[1],u=arguments[2],l=new ln(this.getRoot(),a.getRoot(),o);return this.isWithinDistance(l,u)}}},{key:\"interfaces_\",get:function(){return[sn,E]}}],[{key:\"constructor_\",value:function(){if(0===arguments.length)a.constructor_.call(this,a.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){var t=arguments[0];cn.constructor_.call(this,t)}}},{key:\"centreX\",value:function(t){return a.avg(t.getMinX(),t.getMaxX())}},{key:\"avg\",value:function(t,e){return(t+e)/2}},{key:\"getItems\",value:function(t){for(var e=new Array(t.size()).fill(null),n=0;!t.isEmpty();){var i=t.poll();e[n]=i.getBoundable(0).getItem(),n++}return e}},{key:\"centreY\",value:function(t){return a.avg(t.getMinY(),t.getMaxY())}}]),a}(cn),gn=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,[{key:\"computeBounds\",value:function(){for(var t=null,e=this.getChildBoundables().iterator();e.hasNext();){var n=e.next();null===t?t=new U(n.getBounds()):t.expandToInclude(n.getBounds())}return t}}],[{key:\"constructor_\",value:function(){var t=arguments[0];an.constructor_.call(this,t)}}]),s}(an);vn.STRtreeNode=gn,vn.xComparator=new(function(){function e(){t(this,e)}return n(e,[{key:\"interfaces_\",get:function(){return[P]}},{key:\"compare\",value:function(t,e){return cn.compareDoubles(vn.centreX(t.getBounds()),vn.centreX(e.getBounds()))}}]),e}()),vn.yComparator=new(function(){function e(){t(this,e)}return n(e,[{key:\"interfaces_\",get:function(){return[P]}},{key:\"compare\",value:function(t,e){return cn.compareDoubles(vn.centreY(t.getBounds()),vn.centreY(e.getBounds()))}}]),e}()),vn.intersectsOp=new(function(){function e(){t(this,e)}return n(e,[{key:\"interfaces_\",get:function(){return[IntersectsOp]}},{key:\"intersects\",value:function(t,e){return t.intersects(e)}}]),e}()),vn.DEFAULT_NODE_CAPACITY=10;var yn=function(){function e(){t(this,e)}return n(e,null,[{key:\"relativeSign\",value:function(t,e){return t<e?-1:t>e?1:0}},{key:\"compare\",value:function(t,n,i){if(n.equals2D(i))return 0;var r=e.relativeSign(n.x,i.x),s=e.relativeSign(n.y,i.y);switch(t){case 0:return e.compareValue(r,s);case 1:return e.compareValue(s,r);case 2:return e.compareValue(s,-r);case 3:return e.compareValue(-r,s);case 4:return e.compareValue(-r,-s);case 5:return e.compareValue(-s,-r);case 6:return e.compareValue(-s,r);case 7:return e.compareValue(r,-s)}return G.shouldNeverReachHere(\"invalid octant value\"),0}},{key:\"compareValue\",value:function(t,e){return t<0?-1:t>0?1:e<0?-1:e>0?1:0}}]),e}(),dn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getCoordinate\",value:function(){return this.coord}},{key:\"print\",value:function(t){t.print(this.coord),t.print(\" seg # = \"+this.segmentIndex)}},{key:\"compareTo\",value:function(t){var e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:this._isInterior?e._isInterior?yn.compare(this._segmentOctant,this.coord,e.coord):1:-1}},{key:\"isEndPoint\",value:function(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t}},{key:\"toString\",value:function(){return this.segmentIndex+\":\"+this.coord.toString()}},{key:\"isInterior\",value:function(){return this._isInterior}},{key:\"interfaces_\",get:function(){return[x]}}],[{key:\"constructor_\",value:function(){this._segString=null,this.coord=null,this.segmentIndex=null,this._segmentOctant=null,this._isInterior=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this._segString=t,this.coord=new X(e),this.segmentIndex=n,this._segmentOctant=i,this._isInterior=!e.equals2D(t.getCoordinate(n))}}]),e}(),_n=function(){function e(){t(this,e)}return n(e,[{key:\"hasNext\",value:function(){}},{key:\"next\",value:function(){}},{key:\"remove\",value:function(){}}]),e}(),pn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getSplitCoordinates\",value:function(){var t=new Zt;this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next();this.addEdgeCoordinates(n,i,t),n=i}return t.toCoordinateArray()}},{key:\"addCollapsedNodes\",value:function(){var t=new yt;this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(var e=t.iterator();e.hasNext();){var n=e.next().intValue();this.add(this._edge.getCoordinate(n),n)}}},{key:\"createSplitEdgePts\",value:function(t,e){var n=e.segmentIndex-t.segmentIndex+2;if(2===n)return[new X(t.coord),new X(e.coord)];var i=this._edge.getCoordinate(e.segmentIndex),r=e.isInterior()||!e.coord.equals2D(i);r||n--;var s=new Array(n).fill(null),a=0;s[a++]=new X(t.coord);for(var o=t.segmentIndex+1;o<=e.segmentIndex;o++)s[a++]=this._edge.getCoordinate(o);return r&&(s[a]=new X(e.coord)),s}},{key:\"print\",value:function(t){t.println(\"Intersections:\");for(var e=this.iterator();e.hasNext();){e.next().print(t)}}},{key:\"findCollapsesFromExistingVertices\",value:function(t){for(var e=0;e<this._edge.size()-2;e++){var n=this._edge.getCoordinate(e);this._edge.getCoordinate(e+1);var i=this._edge.getCoordinate(e+2);n.equals2D(i)&&t.add(at.valueOf(e+1))}}},{key:\"addEdgeCoordinates\",value:function(t,e,n){var i=this.createSplitEdgePts(t,e);n.add(i,!1)}},{key:\"iterator\",value:function(){return this._nodeMap.values().iterator()}},{key:\"addSplitEdges\",value:function(t){this.addEndpoints(),this.addCollapsedNodes();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}}},{key:\"findCollapseIndex\",value:function(t,e,n){if(!t.coord.equals2D(e.coord))return!1;var i=e.segmentIndex-t.segmentIndex;return e.isInterior()||i--,1===i&&(n[0]=t.segmentIndex+1,!0)}},{key:\"findCollapsesFromInsertedNodes\",value:function(t){for(var e=new Array(1).fill(null),n=this.iterator(),i=n.next();n.hasNext();){var r=n.next();this.findCollapseIndex(i,r,e)&&t.add(at.valueOf(e[0])),i=r}}},{key:\"getEdge\",value:function(){return this._edge}},{key:\"addEndpoints\",value:function(){var t=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0),this.add(this._edge.getCoordinate(t),t)}},{key:\"createSplitEdge\",value:function(t,e){var n=this.createSplitEdgePts(t,e);return new In(n,this._edge.getData())}},{key:\"add\",value:function(t,e){var n=new dn(this._edge,t,e,this._edge.getSegmentOctant(e)),i=this._nodeMap.get(n);return null!==i?(G.isTrue(i.coord.equals2D(t),\"Found equal nodes with different coordinates\"),i):(this._nodeMap.put(n,n),n)}},{key:\"checkSplitEdgesCorrectness\",value:function(t){var e=this._edge.getCoordinates(),n=t.get(0).getCoordinate(0);if(!n.equals2D(e[0]))throw new D(\"bad split edge start point at \"+n);var i=t.get(t.size()-1).getCoordinates(),r=i[i.length-1];if(!r.equals2D(e[e.length-1]))throw new D(\"bad split edge end point at \"+r)}}],[{key:\"constructor_\",value:function(){this._nodeMap=new Ze,this._edge=null;var t=arguments[0];this._edge=t}}]),e}(),mn=function(){function e(){t(this,e)}return n(e,null,[{key:\"octant\",value:function(){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],n=arguments[1];if(0===t&&0===n)throw new m(\"Cannot compute the octant for point ( \"+t+\", \"+n+\" )\");var i=Math.abs(t),r=Math.abs(n);return t>=0?n>=0?i>=r?0:1:i>=r?7:6:n>=0?i>=r?3:2:i>=r?4:5}if(arguments[0]instanceof X&&arguments[1]instanceof X){var s=arguments[0],a=arguments[1],o=a.x-s.x,u=a.y-s.y;if(0===o&&0===u)throw new m(\"Cannot compute the octant for two identical points \"+s);return e.octant(o,u)}}}]),e}(),kn=function(){function e(){t(this,e)}return n(e,[{key:\"getCoordinates\",value:function(){}},{key:\"size\",value:function(){}},{key:\"getCoordinate\",value:function(t){}},{key:\"isClosed\",value:function(){}},{key:\"setData\",value:function(t){}},{key:\"getData\",value:function(){}}]),e}(),xn=function(){function e(){t(this,e)}return n(e,[{key:\"addIntersection\",value:function(t,e){}},{key:\"interfaces_\",get:function(){return[kn]}}]),e}(),In=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getCoordinates\",value:function(){return this._pts}},{key:\"size\",value:function(){return this._pts.length}},{key:\"getCoordinate\",value:function(t){return this._pts[t]}},{key:\"isClosed\",value:function(){return this._pts[0].equals(this._pts[this._pts.length-1])}},{key:\"getSegmentOctant\",value:function(t){return t===this._pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))}},{key:\"setData\",value:function(t){this._data=t}},{key:\"safeOctant\",value:function(t,e){return t.equals2D(e)?0:mn.octant(t,e)}},{key:\"getData\",value:function(){return this._data}},{key:\"addIntersection\",value:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.addIntersectionNode(t,e)}else if(4===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[3],s=new X(n.getIntersection(r));this.addIntersection(s,i)}}},{key:\"toString\",value:function(){return Re.toLineString(new Qt(this._pts))}},{key:\"getNodeList\",value:function(){return this._nodeList}},{key:\"addIntersectionNode\",value:function(t,e){var n=e,i=n+1;if(i<this._pts.length){var r=this._pts[i];t.equals2D(r)&&(n=i)}return this._nodeList.add(t,n)}},{key:\"addIntersections\",value:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)}},{key:\"interfaces_\",get:function(){return[xn]}}],[{key:\"constructor_\",value:function(){this._nodeList=new pn(this),this._pts=null,this._data=null;var t=arguments[0],e=arguments[1];this._pts=t,this._data=e}},{key:\"getNodedSubstrings\",value:function(){if(1===arguments.length){var t=arguments[0],n=new yt;return e.getNodedSubstrings(t,n),n}if(2===arguments.length)for(var i=arguments[0],r=arguments[1],s=i.iterator();s.hasNext();){var a=s.next();a.getNodeList().addSplitEdges(r)}}}]),e}(),En=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"minX\",value:function(){return Math.min(this.p0.x,this.p1.x)}},{key:\"orientationIndex\",value:function(){if(arguments[0]instanceof e){var t=arguments[0],n=ct.index(this.p0,this.p1,t.p0),i=ct.index(this.p0,this.p1,t.p1);return n>=0&&i>=0||n<=0&&i<=0?Math.max(n,i):0}if(arguments[0]instanceof X){var r=arguments[0];return ct.index(this.p0,this.p1,r)}}},{key:\"toGeometry\",value:function(t){return t.createLineString([this.p0,this.p1])}},{key:\"isVertical\",value:function(){return this.p0.x===this.p1.x}},{key:\"equals\",value:function(t){if(!(t instanceof e))return!1;var n=t;return this.p0.equals(n.p0)&&this.p1.equals(n.p1)}},{key:\"intersection\",value:function(t){var e=new Oe;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null}},{key:\"project\",value:function(){if(arguments[0]instanceof X){var t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new X(t);var n=this.projectionFactor(t),i=new X;return i.x=this.p0.x+n*(this.p1.x-this.p0.x),i.y=this.p0.y+n*(this.p1.y-this.p0.y),i}if(arguments[0]instanceof e){var r=arguments[0],s=this.projectionFactor(r.p0),a=this.projectionFactor(r.p1);if(s>=1&&a>=1)return null;if(s<=0&&a<=0)return null;var o=this.project(r.p0);s<0&&(o=this.p0),s>1&&(o=this.p1);var u=this.project(r.p1);return a<0&&(u=this.p0),a>1&&(u=this.p1),new e(o,u)}}},{key:\"normalize\",value:function(){this.p1.compareTo(this.p0)<0&&this.reverse()}},{key:\"angle\",value:function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)}},{key:\"getCoordinate\",value:function(t){return 0===t?this.p0:this.p1}},{key:\"distancePerpendicular\",value:function(t){return xt.pointToLinePerpendicular(t,this.p0,this.p1)}},{key:\"minY\",value:function(){return Math.min(this.p0.y,this.p1.y)}},{key:\"midPoint\",value:function(){return e.midPoint(this.p0,this.p1)}},{key:\"projectionFactor\",value:function(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;var e=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y,i=e*e+n*n;return i<=0?A.NaN:((t.x-this.p0.x)*e+(t.y-this.p0.y)*n)/i}},{key:\"closestPoints\",value:function(t){var e=this.intersection(t);if(null!==e)return[e,e];var n=new Array(2).fill(null),i=A.MAX_VALUE,r=null,s=this.closestPoint(t.p0);i=s.distance(t.p0),n[0]=s,n[1]=t.p0;var a=this.closestPoint(t.p1);(r=a.distance(t.p1))<i&&(i=r,n[0]=a,n[1]=t.p1);var o=t.closestPoint(this.p0);(r=o.distance(this.p0))<i&&(i=r,n[0]=this.p0,n[1]=o);var u=t.closestPoint(this.p1);return(r=u.distance(this.p1))<i&&(i=r,n[0]=this.p1,n[1]=u),n}},{key:\"closestPoint\",value:function(t){var e=this.projectionFactor(t);return e>0&&e<1?this.project(t):this.p0.distance(t)<this.p1.distance(t)?this.p0:this.p1}},{key:\"maxX\",value:function(){return Math.max(this.p0.x,this.p1.x)}},{key:\"getLength\",value:function(){return this.p0.distance(this.p1)}},{key:\"compareTo\",value:function(t){var e=t,n=this.p0.compareTo(e.p0);return 0!==n?n:this.p1.compareTo(e.p1)}},{key:\"reverse\",value:function(){var t=this.p0;this.p0=this.p1,this.p1=t}},{key:\"equalsTopo\",value:function(t){return this.p0.equals(t.p0)&&this.p1.equals(t.p1)||this.p0.equals(t.p1)&&this.p1.equals(t.p0)}},{key:\"lineIntersection\",value:function(t){return pt.intersection(this.p0,this.p1,t.p0,t.p1)}},{key:\"maxY\",value:function(){return Math.max(this.p0.y,this.p1.y)}},{key:\"pointAlongOffset\",value:function(t,e){var n=this.p0.x+t*(this.p1.x-this.p0.x),i=this.p0.y+t*(this.p1.y-this.p0.y),r=this.p1.x-this.p0.x,s=this.p1.y-this.p0.y,a=Math.sqrt(r*r+s*s),o=0,u=0;if(0!==e){if(a<=0)throw new IllegalStateException(\"Cannot compute offset from zero-length line segment\");o=e*r/a,u=e*s/a}return new X(n-u,i+o)}},{key:\"setCoordinates\",value:function(){if(1===arguments.length){var t=arguments[0];this.setCoordinates(t.p0,t.p1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.p0.x=e.x,this.p0.y=e.y,this.p1.x=n.x,this.p1.y=n.y}}},{key:\"segmentFraction\",value:function(t){var e=this.projectionFactor(t);return e<0?e=0:(e>1||A.isNaN(e))&&(e=1),e}},{key:\"toString\",value:function(){return\"LINESTRING( \"+this.p0.x+\" \"+this.p0.y+\", \"+this.p1.x+\" \"+this.p1.y+\")\"}},{key:\"isHorizontal\",value:function(){return this.p0.y===this.p1.y}},{key:\"reflect\",value:function(t){var e=this.p1.getY()-this.p0.getY(),n=this.p0.getX()-this.p1.getX(),i=this.p0.getY()*(this.p1.getX()-this.p0.getX())-this.p0.getX()*(this.p1.getY()-this.p0.getY()),r=e*e+n*n,s=e*e-n*n,a=t.getX(),o=t.getY();return new X((-s*a-2*e*n*o-2*e*i)/r,(s*o-2*e*n*a-2*n*i)/r)}},{key:\"distance\",value:function(){if(arguments[0]instanceof e){var t=arguments[0];return xt.segmentToSegment(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof X){var n=arguments[0];return xt.pointToSegment(n,this.p0,this.p1)}}},{key:\"pointAlong\",value:function(t){var e=new X;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e}},{key:\"hashCode\",value:function(){var t=A.doubleToLongBits(this.p0.x);t^=31*A.doubleToLongBits(this.p0.y);var e=Math.trunc(t)^Math.trunc(t>>32),n=A.doubleToLongBits(this.p1.x);return n^=31*A.doubleToLongBits(this.p1.y),e^(Math.trunc(n)^Math.trunc(n>>32))}},{key:\"interfaces_\",get:function(){return[x,E]}}],[{key:\"constructor_\",value:function(){if(this.p0=null,this.p1=null,0===arguments.length)e.constructor_.call(this,new X,new X);else if(1===arguments.length){var t=arguments[0];e.constructor_.call(this,t.p0,t.p1)}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.p0=n,this.p1=i}else if(4===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2],o=arguments[3];e.constructor_.call(this,new X(r,s),new X(a,o))}}},{key:\"midPoint\",value:function(t,e){return new X((t.x+e.x)/2,(t.y+e.y)/2)}}]),e}(),Nn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"overlap\",value:function(){if(2===arguments.length);else if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];t.getLineSegment(e,this._overlapSeg1),n.getLineSegment(i,this._overlapSeg2),this.overlap(this._overlapSeg1,this._overlapSeg2)}}}],[{key:\"constructor_\",value:function(){this._overlapSeg1=new En,this._overlapSeg2=new En}}]),e}(),Tn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getLineSegment\",value:function(t,e){e.p0=this._pts[t],e.p1=this._pts[t+1]}},{key:\"computeSelect\",value:function(t,e,n,i){var r=this._pts[e],s=this._pts[n];if(n-e==1)return i.select(this,e),null;if(!t.intersects(r,s))return null;var a=Math.trunc((e+n)/2);e<a&&this.computeSelect(t,e,a,i),a<n&&this.computeSelect(t,a,n,i)}},{key:\"getCoordinates\",value:function(){for(var t=new Array(this._end-this._start+1).fill(null),e=0,n=this._start;n<=this._end;n++)t[e++]=this._pts[n];return t}},{key:\"computeOverlaps\",value:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.computeOverlaps(this._start,this._end,t,t._start,t._end,e)}else if(6===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],s=arguments[3],a=arguments[4],o=arguments[5];if(i-n==1&&a-s==1)return o.overlap(this,n,r,s),null;if(!this.overlaps(n,i,r,s,a))return null;var u=Math.trunc((n+i)/2),l=Math.trunc((s+a)/2);n<u&&(s<l&&this.computeOverlaps(n,u,r,s,l,o),l<a&&this.computeOverlaps(n,u,r,l,a,o)),u<i&&(s<l&&this.computeOverlaps(u,i,r,s,l,o),l<a&&this.computeOverlaps(u,i,r,l,a,o))}}},{key:\"setId\",value:function(t){this._id=t}},{key:\"select\",value:function(t,e){this.computeSelect(t,this._start,this._end,e)}},{key:\"getEnvelope\",value:function(){if(null===this._env){var t=this._pts[this._start],e=this._pts[this._end];this._env=new U(t,e)}return this._env}},{key:\"overlaps\",value:function(t,e,n,i,r){return U.intersects(this._pts[t],this._pts[e],n._pts[i],n._pts[r])}},{key:\"getEndIndex\",value:function(){return this._end}},{key:\"getStartIndex\",value:function(){return this._start}},{key:\"getContext\",value:function(){return this._context}},{key:\"getId\",value:function(){return this._id}}],[{key:\"constructor_\",value:function(){this._pts=null,this._start=null,this._end=null,this._env=null,this._context=null,this._id=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this._pts=t,this._start=e,this._end=n,this._context=i}}]),e}(),Sn=function(){function e(){t(this,e)}return n(e,null,[{key:\"findChainEnd\",value:function(t,e){for(var n=e;n<t.length-1&&t[n].equals2D(t[n+1]);)n++;if(n>=t.length-1)return t.length-1;for(var i=We.quadrant(t[n],t[n+1]),r=e+1;r<t.length;){if(!t[r-1].equals2D(t[r]))if(We.quadrant(t[r-1],t[r])!==i)break;r++}return r-1}},{key:\"getChains\",value:function(){if(1===arguments.length){var t=arguments[0];return e.getChains(t,null)}if(2===arguments.length){var n=arguments[0],i=arguments[1],r=new yt,s=0;do{var a=e.findChainEnd(n,s),o=new Tn(n,s,a,i);r.add(o),s=a}while(s<n.length-1);return r}}}]),e}(),Ln=function(){function e(){t(this,e)}return n(e,[{key:\"computeNodes\",value:function(t){}},{key:\"getNodedSubstrings\",value:function(){}}]),e}(),Cn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"setSegmentIntersector\",value:function(t){this._segInt=t}},{key:\"interfaces_\",get:function(){return[Ln]}}],[{key:\"constructor_\",value:function(){if(this._segInt=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.setSegmentIntersector(t)}}}]),e}(),Rn=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,[{key:\"getMonotoneChains\",value:function(){return this._monoChains}},{key:\"getNodedSubstrings\",value:function(){return In.getNodedSubstrings(this._nodedSegStrings)}},{key:\"getIndex\",value:function(){return this._index}},{key:\"add\",value:function(t){for(var e=Sn.getChains(t.getCoordinates(),t).iterator();e.hasNext();){var n=e.next();n.setId(this._idCounter++),this._index.insert(n.getEnvelope(),n),this._monoChains.add(n)}}},{key:\"computeNodes\",value:function(t){this._nodedSegStrings=t;for(var e=t.iterator();e.hasNext();)this.add(e.next());this.intersectChains()}},{key:\"intersectChains\",value:function(){for(var t=new wn(this._segInt),e=this._monoChains.iterator();e.hasNext();)for(var n=e.next(),i=this._index.query(n.getEnvelope()).iterator();i.hasNext();){var r=i.next();if(r.getId()>n.getId()&&(n.computeOverlaps(r,t),this._nOverlaps++),this._segInt.isDone())return null}}}],[{key:\"constructor_\",value:function(){if(this._monoChains=new yt,this._index=new vn,this._idCounter=0,this._nodedSegStrings=null,this._nOverlaps=0,0===arguments.length);else if(1===arguments.length){var t=arguments[0];Cn.constructor_.call(this,t)}}}]),s}(Cn),wn=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"overlap\",value:function(){if(4!==arguments.length)return f(r(a.prototype),\"overlap\",this).apply(this,arguments);var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],s=t.getContext(),o=n.getContext();this._si.processIntersections(s,e,o,i)}}],[{key:\"constructor_\",value:function(){this._si=null;var t=arguments[0];this._si=t}}]),a}(Nn);Rn.SegmentOverlapAction=wn;var On=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"isDeletable\",value:function(t,e,n,i){var r=this._inputLine[t],s=this._inputLine[e],a=this._inputLine[n];return!!this.isConcave(r,s,a)&&(!!this.isShallow(r,s,a,i)&&this.isShallowSampled(r,s,t,n,i))}},{key:\"deleteShallowConcavities\",value:function(){for(var t=1,n=this.findNextNonDeletedIndex(t),i=this.findNextNonDeletedIndex(n),r=!1;i<this._inputLine.length;){var s=!1;this.isDeletable(t,n,i,this._distanceTol)&&(this._isDeleted[n]=e.DELETE,s=!0,r=!0),t=s?i:n,n=this.findNextNonDeletedIndex(t),i=this.findNextNonDeletedIndex(n)}return r}},{key:\"isShallowConcavity\",value:function(t,e,n,i){return ct.index(t,e,n)===this._angleOrientation&&xt.pointToSegment(e,t,n)<i}},{key:\"isShallowSampled\",value:function(t,n,i,r,s){var a=Math.trunc((r-i)/e.NUM_PTS_TO_CHECK);a<=0&&(a=1);for(var o=i;o<r;o+=a)if(!this.isShallow(t,n,this._inputLine[o],s))return!1;return!0}},{key:\"isConcave\",value:function(t,e,n){var i=ct.index(t,e,n)===this._angleOrientation;return i}},{key:\"simplify\",value:function(t){this._distanceTol=Math.abs(t),t<0&&(this._angleOrientation=ct.CLOCKWISE),this._isDeleted=new Array(this._inputLine.length).fill(null);var e=!1;do{e=this.deleteShallowConcavities()}while(e);return this.collapseLine()}},{key:\"findNextNonDeletedIndex\",value:function(t){for(var n=t+1;n<this._inputLine.length&&this._isDeleted[n]===e.DELETE;)n++;return n}},{key:\"isShallow\",value:function(t,e,n,i){return xt.pointToSegment(e,t,n)<i}},{key:\"collapseLine\",value:function(){for(var t=new Zt,n=0;n<this._inputLine.length;n++)this._isDeleted[n]!==e.DELETE&&t.add(this._inputLine[n]);return t.toCoordinateArray()}}],[{key:\"constructor_\",value:function(){this._inputLine=null,this._distanceTol=null,this._isDeleted=null,this._angleOrientation=ct.COUNTERCLOCKWISE;var t=arguments[0];this._inputLine=t}},{key:\"simplify\",value:function(t,n){return new e(t).simplify(n)}}]),e}();On.INIT=0,On.DELETE=1,On.KEEP=1,On.NUM_PTS_TO_CHECK=10;var bn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getCoordinates\",value:function(){return this._ptList.toArray(e.COORDINATE_ARRAY_TYPE)}},{key:\"setPrecisionModel\",value:function(t){this._precisionModel=t}},{key:\"addPt\",value:function(t){var e=new X(t);if(this._precisionModel.makePrecise(e),this.isRedundant(e))return null;this._ptList.add(e)}},{key:\"reverse\",value:function(){}},{key:\"addPts\",value:function(t,e){if(e)for(var n=0;n<t.length;n++)this.addPt(t[n]);else for(var i=t.length-1;i>=0;i--)this.addPt(t[i])}},{key:\"isRedundant\",value:function(t){if(this._ptList.size()<1)return!1;var e=this._ptList.get(this._ptList.size()-1);return t.distance(e)<this._minimimVertexDistance}},{key:\"toString\",value:function(){return(new ae).createLineString(this.getCoordinates()).toString()}},{key:\"closeRing\",value:function(){if(this._ptList.size()<1)return null;var t=new X(this._ptList.get(0)),e=this._ptList.get(this._ptList.size()-1);if(t.equals(e))return null;this._ptList.add(t)}},{key:\"setMinimumVertexDistance\",value:function(t){this._minimimVertexDistance=t}}],[{key:\"constructor_\",value:function(){this._ptList=null,this._precisionModel=null,this._minimimVertexDistance=0,this._ptList=new yt}}]),e}();bn.COORDINATE_ARRAY_TYPE=new Array(0).fill(null);var Mn=function(){function e(){t(this,e)}return n(e,null,[{key:\"toDegrees\",value:function(t){return 180*t/Math.PI}},{key:\"normalize\",value:function(t){for(;t>Math.PI;)t-=e.PI_TIMES_2;for(;t<=-Math.PI;)t+=e.PI_TIMES_2;return t}},{key:\"angle\",value:function(){if(1===arguments.length){var t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){var e=arguments[0],n=arguments[1],i=n.x-e.x,r=n.y-e.y;return Math.atan2(r,i)}}},{key:\"isAcute\",value:function(t,e,n){var i=t.x-e.x,r=t.y-e.y;return i*(n.x-e.x)+r*(n.y-e.y)>0}},{key:\"isObtuse\",value:function(t,e,n){var i=t.x-e.x,r=t.y-e.y;return i*(n.x-e.x)+r*(n.y-e.y)<0}},{key:\"interiorAngle\",value:function(t,n,i){var r=e.angle(n,t),s=e.angle(n,i);return Math.abs(s-r)}},{key:\"normalizePositive\",value:function(t){if(t<0){for(;t<0;)t+=e.PI_TIMES_2;t>=e.PI_TIMES_2&&(t=0)}else{for(;t>=e.PI_TIMES_2;)t-=e.PI_TIMES_2;t<0&&(t=0)}return t}},{key:\"angleBetween\",value:function(t,n,i){var r=e.angle(n,t),s=e.angle(n,i);return e.diff(r,s)}},{key:\"diff\",value:function(t,e){var n=null;return(n=t<e?e-t:t-e)>Math.PI&&(n=2*Math.PI-n),n}},{key:\"toRadians\",value:function(t){return t*Math.PI/180}},{key:\"getTurn\",value:function(t,n){var i=Math.sin(n-t);return i>0?e.COUNTERCLOCKWISE:i<0?e.CLOCKWISE:e.NONE}},{key:\"angleBetweenOriented\",value:function(t,n,i){var r=e.angle(n,t),s=e.angle(n,i)-r;return s<=-Math.PI?s+e.PI_TIMES_2:s>Math.PI?s-e.PI_TIMES_2:s}}]),e}();Mn.PI_TIMES_2=2*Math.PI,Mn.PI_OVER_2=Math.PI/2,Mn.PI_OVER_4=Math.PI/4,Mn.COUNTERCLOCKWISE=ct.COUNTERCLOCKWISE,Mn.CLOCKWISE=ct.CLOCKWISE,Mn.NONE=ct.COLLINEAR;var An=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"addNextSegment\",value:function(t,e){if(this._s0=this._s1,this._s1=this._s2,this._s2=t,this._seg0.setCoordinates(this._s0,this._s1),this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0),this._seg1.setCoordinates(this._s1,this._s2),this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1),this._s1.equals(this._s2))return null;var n=ct.index(this._s0,this._s1,this._s2),i=n===ct.CLOCKWISE&&this._side===$.LEFT||n===ct.COUNTERCLOCKWISE&&this._side===$.RIGHT;0===n?this.addCollinear(e):i?this.addOutsideTurn(n,e):this.addInsideTurn(n,e)}},{key:\"addLineEndCap\",value:function(t,e){var n=new En(t,e),i=new En;this.computeOffsetSegment(n,$.LEFT,this._distance,i);var r=new En;this.computeOffsetSegment(n,$.RIGHT,this._distance,r);var s=e.x-t.x,a=e.y-t.y,o=Math.atan2(a,s);switch(this._bufParams.getEndCapStyle()){case _.CAP_ROUND:this._segList.addPt(i.p1),this.addDirectedFillet(e,o+Math.PI/2,o-Math.PI/2,ct.CLOCKWISE,this._distance),this._segList.addPt(r.p1);break;case _.CAP_FLAT:this._segList.addPt(i.p1),this._segList.addPt(r.p1);break;case _.CAP_SQUARE:var u=new X;u.x=Math.abs(this._distance)*Math.cos(o),u.y=Math.abs(this._distance)*Math.sin(o);var l=new X(i.p1.x+u.x,i.p1.y+u.y),h=new X(r.p1.x+u.x,r.p1.y+u.y);this._segList.addPt(l),this._segList.addPt(h)}}},{key:\"getCoordinates\",value:function(){return this._segList.getCoordinates()}},{key:\"addMitreJoin\",value:function(t,e,n,i){var r=pt.intersection(e.p0,e.p1,n.p0,n.p1);if(null!==r&&(i<=0?1:r.distance(t)/Math.abs(i))<=this._bufParams.getMitreLimit())return this._segList.addPt(r),null;this.addLimitedMitreJoin(e,n,i,this._bufParams.getMitreLimit())}},{key:\"addOutsideTurn\",value:function(t,n){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*e.OFFSET_SEGMENT_SEPARATION_FACTOR)return this._segList.addPt(this._offset0.p1),null;this._bufParams.getJoinStyle()===_.JOIN_MITRE?this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance):this._bufParams.getJoinStyle()===_.JOIN_BEVEL?this.addBevelJoin(this._offset0,this._offset1):(n&&this._segList.addPt(this._offset0.p1),this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,t,this._distance),this._segList.addPt(this._offset1.p0))}},{key:\"createSquare\",value:function(t){this._segList.addPt(new X(t.x+this._distance,t.y+this._distance)),this._segList.addPt(new X(t.x+this._distance,t.y-this._distance)),this._segList.addPt(new X(t.x-this._distance,t.y-this._distance)),this._segList.addPt(new X(t.x-this._distance,t.y+this._distance)),this._segList.closeRing()}},{key:\"addSegments\",value:function(t,e){this._segList.addPts(t,e)}},{key:\"addFirstSegment\",value:function(){this._segList.addPt(this._offset1.p0)}},{key:\"addCornerFillet\",value:function(t,e,n,i,r){var s=e.x-t.x,a=e.y-t.y,o=Math.atan2(a,s),u=n.x-t.x,l=n.y-t.y,h=Math.atan2(l,u);i===ct.CLOCKWISE?o<=h&&(o+=2*Math.PI):o>=h&&(o-=2*Math.PI),this._segList.addPt(e),this.addDirectedFillet(t,o,h,i,r),this._segList.addPt(n)}},{key:\"addLastSegment\",value:function(){this._segList.addPt(this._offset1.p1)}},{key:\"initSideSegments\",value:function(t,e,n){this._s1=t,this._s2=e,this._side=n,this._seg1.setCoordinates(t,e),this.computeOffsetSegment(this._seg1,n,this._distance,this._offset1)}},{key:\"addLimitedMitreJoin\",value:function(t,e,n,i){var r=this._seg0.p1,s=Mn.angle(r,this._seg0.p0),a=Mn.angleBetweenOriented(this._seg0.p0,r,this._seg1.p1)/2,o=Mn.normalize(s+a),u=Mn.normalize(o+Math.PI),l=i*n,h=n-l*Math.abs(Math.sin(a)),c=r.x+l*Math.cos(u),f=r.y+l*Math.sin(u),v=new X(c,f),g=new En(r,v),y=g.pointAlongOffset(1,h),d=g.pointAlongOffset(1,-h);this._side===$.LEFT?(this._segList.addPt(y),this._segList.addPt(d)):(this._segList.addPt(d),this._segList.addPt(y))}},{key:\"addDirectedFillet\",value:function(t,e,n,i,r){var s=i===ct.CLOCKWISE?-1:1,a=Math.abs(e-n),o=Math.trunc(a/this._filletAngleQuantum+.5);if(o<1)return null;for(var u=a/o,l=new X,h=0;h<o;h++){var c=e+s*h*u;l.x=t.x+r*Math.cos(c),l.y=t.y+r*Math.sin(c),this._segList.addPt(l)}}},{key:\"computeOffsetSegment\",value:function(t,e,n,i){var r=e===$.LEFT?1:-1,s=t.p1.x-t.p0.x,a=t.p1.y-t.p0.y,o=Math.sqrt(s*s+a*a),u=r*n*s/o,l=r*n*a/o;i.p0.x=t.p0.x-l,i.p0.y=t.p0.y+u,i.p1.x=t.p1.x-l,i.p1.y=t.p1.y+u}},{key:\"addInsideTurn\",value:function(t,n){if(this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1),this._li.hasIntersection())this._segList.addPt(this._li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this._offset0.p1.distance(this._offset1.p0)<this._distance*e.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this._segList.addPt(this._offset0.p1);else{if(this._segList.addPt(this._offset0.p1),this._closingSegLengthFactor>0){var i=new X((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(i);var r=new X((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(r)}else this._segList.addPt(this._s1);this._segList.addPt(this._offset1.p0)}}},{key:\"createCircle\",value:function(t){var e=new X(t.x+this._distance,t.y);this._segList.addPt(e),this.addDirectedFillet(t,0,2*Math.PI,-1,this._distance),this._segList.closeRing()}},{key:\"addBevelJoin\",value:function(t,e){this._segList.addPt(t.p1),this._segList.addPt(e.p0)}},{key:\"init\",value:function(t){this._distance=t,this._maxCurveSegmentError=t*(1-Math.cos(this._filletAngleQuantum/2)),this._segList=new bn,this._segList.setPrecisionModel(this._precisionModel),this._segList.setMinimumVertexDistance(t*e.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)}},{key:\"addCollinear\",value:function(t){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2),this._li.getIntersectionNum()>=2&&(this._bufParams.getJoinStyle()===_.JOIN_BEVEL||this._bufParams.getJoinStyle()===_.JOIN_MITRE?(t&&this._segList.addPt(this._offset0.p1),this._segList.addPt(this._offset1.p0)):this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,ct.CLOCKWISE,this._distance))}},{key:\"closeRing\",value:function(){this._segList.closeRing()}},{key:\"hasNarrowConcaveAngle\",value:function(){return this._hasNarrowConcaveAngle}}],[{key:\"constructor_\",value:function(){this._maxCurveSegmentError=0,this._filletAngleQuantum=null,this._closingSegLengthFactor=1,this._segList=null,this._distance=0,this._precisionModel=null,this._bufParams=null,this._li=null,this._s0=null,this._s1=null,this._s2=null,this._seg0=new En,this._seg1=new En,this._offset0=new En,this._offset1=new En,this._side=0,this._hasNarrowConcaveAngle=!1;var t=arguments[0],n=arguments[1],i=arguments[2];this._precisionModel=t,this._bufParams=n,this._li=new Oe,this._filletAngleQuantum=Math.PI/2/n.getQuadrantSegments(),n.getQuadrantSegments()>=8&&n.getJoinStyle()===_.JOIN_ROUND&&(this._closingSegLengthFactor=e.MAX_CLOSING_SEG_LEN_FACTOR),this.init(i)}}]),e}();An.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,An.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,An.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,An.MAX_CLOSING_SEG_LEN_FACTOR=80;var Pn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getOffsetCurve\",value:function(t,e){if(this._distance=e,0===e)return null;var n=e<0,i=Math.abs(e),r=this.getSegGen(i);t.length<=1?this.computePointCurve(t[0],r):this.computeOffsetCurve(t,n,r);var s=r.getCoordinates();return n&&jt.reverse(s),s}},{key:\"computeSingleSidedBufferCurve\",value:function(t,e,n){var i=this.simplifyTolerance(this._distance);if(e){n.addSegments(t,!0);var r=On.simplify(t,-i),s=r.length-1;n.initSideSegments(r[s],r[s-1],$.LEFT),n.addFirstSegment();for(var a=s-2;a>=0;a--)n.addNextSegment(r[a],!0)}else{n.addSegments(t,!1);var o=On.simplify(t,i),u=o.length-1;n.initSideSegments(o[0],o[1],$.LEFT),n.addFirstSegment();for(var l=2;l<=u;l++)n.addNextSegment(o[l],!0)}n.addLastSegment(),n.closeRing()}},{key:\"computeRingBufferCurve\",value:function(t,e,n){var i=this.simplifyTolerance(this._distance);e===$.RIGHT&&(i=-i);var r=On.simplify(t,i),s=r.length-1;n.initSideSegments(r[s-1],r[0],e);for(var a=1;a<=s;a++){var o=1!==a;n.addNextSegment(r[a],o)}n.closeRing()}},{key:\"computeLineBufferCurve\",value:function(t,e){var n=this.simplifyTolerance(this._distance),i=On.simplify(t,n),r=i.length-1;e.initSideSegments(i[0],i[1],$.LEFT);for(var s=2;s<=r;s++)e.addNextSegment(i[s],!0);e.addLastSegment(),e.addLineEndCap(i[r-1],i[r]);var a=On.simplify(t,-n),o=a.length-1;e.initSideSegments(a[o],a[o-1],$.LEFT);for(var u=o-2;u>=0;u--)e.addNextSegment(a[u],!0);e.addLastSegment(),e.addLineEndCap(a[1],a[0]),e.closeRing()}},{key:\"computePointCurve\",value:function(t,e){switch(this._bufParams.getEndCapStyle()){case _.CAP_ROUND:e.createCircle(t);break;case _.CAP_SQUARE:e.createSquare(t)}}},{key:\"getLineCurve\",value:function(t,e){if(this._distance=e,this.isLineOffsetEmpty(e))return null;var n=Math.abs(e),i=this.getSegGen(n);if(t.length<=1)this.computePointCurve(t[0],i);else if(this._bufParams.isSingleSided()){var r=e<0;this.computeSingleSidedBufferCurve(t,r,i)}else this.computeLineBufferCurve(t,i);return i.getCoordinates()}},{key:\"getBufferParameters\",value:function(){return this._bufParams}},{key:\"simplifyTolerance\",value:function(t){return t*this._bufParams.getSimplifyFactor()}},{key:\"getRingCurve\",value:function(t,n,i){if(this._distance=i,t.length<=2)return this.getLineCurve(t,i);if(0===i)return e.copyCoordinates(t);var r=this.getSegGen(i);return this.computeRingBufferCurve(t,n,r),r.getCoordinates()}},{key:\"computeOffsetCurve\",value:function(t,e,n){var i=this.simplifyTolerance(this._distance);if(e){var r=On.simplify(t,-i),s=r.length-1;n.initSideSegments(r[s],r[s-1],$.LEFT),n.addFirstSegment();for(var a=s-2;a>=0;a--)n.addNextSegment(r[a],!0)}else{var o=On.simplify(t,i),u=o.length-1;n.initSideSegments(o[0],o[1],$.LEFT),n.addFirstSegment();for(var l=2;l<=u;l++)n.addNextSegment(o[l],!0)}n.addLastSegment()}},{key:\"isLineOffsetEmpty\",value:function(t){return 0===t||t<0&&!this._bufParams.isSingleSided()}},{key:\"getSegGen\",value:function(t){return new An(this._precisionModel,this._bufParams,t)}}],[{key:\"constructor_\",value:function(){this._distance=0,this._precisionModel=null,this._bufParams=null;var t=arguments[0],e=arguments[1];this._precisionModel=t,this._bufParams=e}},{key:\"copyCoordinates\",value:function(t){for(var e=new Array(t.length).fill(null),n=0;n<e.length;n++)e[n]=new X(t[n]);return e}}]),e}(),Dn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"findStabbedSegments\",value:function(){if(1===arguments.length){for(var t=arguments[0],e=new yt,n=this._subgraphs.iterator();n.hasNext();){var i=n.next(),r=i.getEnvelope();t.y<r.getMinY()||t.y>r.getMaxY()||this.findStabbedSegments(t,i.getDirectedEdges(),e)}return e}if(3===arguments.length)if(rt(arguments[2],nt)&&arguments[0]instanceof X&&arguments[1]instanceof Je)for(var s=arguments[0],a=arguments[1],o=arguments[2],u=a.getEdge().getCoordinates(),l=0;l<u.length-1;l++){this._seg.p0=u[l],this._seg.p1=u[l+1],this._seg.p0.y>this._seg.p1.y&&this._seg.reverse();var h=Math.max(this._seg.p0.x,this._seg.p1.x);if(!(h<s.x)&&!(this._seg.isHorizontal()||s.y<this._seg.p0.y||s.y>this._seg.p1.y||ct.index(this._seg.p0,this._seg.p1,s)===ct.RIGHT)){var c=a.getDepth($.LEFT);this._seg.p0.equals(u[l])||(c=a.getDepth($.RIGHT));var f=new Fn(this._seg,c);o.add(f)}}else if(rt(arguments[2],nt)&&arguments[0]instanceof X&&rt(arguments[1],nt))for(var v=arguments[0],g=arguments[1],y=arguments[2],d=g.iterator();d.hasNext();){var _=d.next();_.isForward()&&this.findStabbedSegments(v,_,y)}}},{key:\"getDepth\",value:function(t){var e=this.findStabbedSegments(t);return 0===e.size()?0:on.min(e)._leftDepth}}],[{key:\"constructor_\",value:function(){this._subgraphs=null,this._seg=new En;var t=arguments[0];this._subgraphs=t}}]),e}(),Fn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"compareTo\",value:function(t){var e=t;if(this._upwardSeg.minX()>=e._upwardSeg.maxX())return 1;if(this._upwardSeg.maxX()<=e._upwardSeg.minX())return-1;var n=this._upwardSeg.orientationIndex(e._upwardSeg);return 0!==n||0!==(n=-1*e._upwardSeg.orientationIndex(this._upwardSeg))?n:this._upwardSeg.compareTo(e._upwardSeg)}},{key:\"compareX\",value:function(t,e){var n=t.p0.compareTo(e.p0);return 0!==n?n:t.p1.compareTo(e.p1)}},{key:\"toString\",value:function(){return this._upwardSeg.toString()}},{key:\"interfaces_\",get:function(){return[x]}}],[{key:\"constructor_\",value:function(){this._upwardSeg=null,this._leftDepth=null;var t=arguments[0],e=arguments[1];this._upwardSeg=new En(t),this._leftDepth=e}}]),e}();Dn.DepthSegment=Fn;var Gn=function(e){i(s,e);var r=c(s);function s(){var e;return t(this,s),e=r.call(this),s.constructor_.apply(l(e),arguments),e}return n(s,null,[{key:\"constructor_\",value:function(){p.constructor_.call(this,\"Projective point not representable on the Cartesian plane.\")}}]),s}(p),qn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getY\",value:function(){var t=this.y/this.w;if(A.isNaN(t)||A.isInfinite(t))throw new Gn;return t}},{key:\"getX\",value:function(){var t=this.x/this.w;if(A.isNaN(t)||A.isInfinite(t))throw new Gn;return t}},{key:\"getCoordinate\",value:function(){var t=new X;return t.x=this.getX(),t.y=this.getY(),t}}],[{key:\"constructor_\",value:function(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){var t=arguments[0];this.x=t.x,this.y=t.y,this.w=1}else if(2===arguments.length){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var n=arguments[0],i=arguments[1];this.x=n,this.y=i,this.w=1}else if(arguments[0]instanceof e&&arguments[1]instanceof e){var r=arguments[0],s=arguments[1];this.x=r.y*s.w-s.y*r.w,this.y=s.x*r.w-r.x*s.w,this.w=r.x*s.y-s.x*r.y}else if(arguments[0]instanceof X&&arguments[1]instanceof X){var a=arguments[0],o=arguments[1];this.x=a.y-o.y,this.y=o.x-a.x,this.w=a.x*o.y-o.x*a.y}}else if(3===arguments.length){var u=arguments[0],l=arguments[1],h=arguments[2];this.x=u,this.y=l,this.w=h}else if(4===arguments.length){var c=arguments[0],f=arguments[1],v=arguments[2],g=arguments[3],y=c.y-f.y,d=f.x-c.x,_=c.x*f.y-f.x*c.y,p=v.y-g.y,m=g.x-v.x,k=v.x*g.y-g.x*v.y;this.x=d*k-m*_,this.y=p*_-y*k,this.w=y*m-p*d}}}]),e}(),Yn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"area\",value:function(){return e.area(this.p0,this.p1,this.p2)}},{key:\"signedArea\",value:function(){return e.signedArea(this.p0,this.p1,this.p2)}},{key:\"interpolateZ\",value:function(t){if(null===t)throw new m(\"Supplied point is null.\");return e.interpolateZ(t,this.p0,this.p1,this.p2)}},{key:\"longestSideLength\",value:function(){return e.longestSideLength(this.p0,this.p1,this.p2)}},{key:\"isAcute\",value:function(){return e.isAcute(this.p0,this.p1,this.p2)}},{key:\"circumcentre\",value:function(){return e.circumcentre(this.p0,this.p1,this.p2)}},{key:\"area3D\",value:function(){return e.area3D(this.p0,this.p1,this.p2)}},{key:\"centroid\",value:function(){return e.centroid(this.p0,this.p1,this.p2)}},{key:\"inCentre\",value:function(){return e.inCentre(this.p0,this.p1,this.p2)}}],[{key:\"constructor_\",value:function(){this.p0=null,this.p1=null,this.p2=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.p0=t,this.p1=e,this.p2=n}},{key:\"area\",value:function(t,e,n){return Math.abs(((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2)}},{key:\"signedArea\",value:function(t,e,n){return((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2}},{key:\"det\",value:function(t,e,n,i){return t*i-e*n}},{key:\"interpolateZ\",value:function(t,e,n,i){var r=e.x,s=e.y,a=n.x-r,o=i.x-r,u=n.y-s,l=i.y-s,h=a*l-o*u,c=t.x-r,f=t.y-s,v=(l*c-o*f)/h,g=(-u*c+a*f)/h;return e.getZ()+v*(n.getZ()-e.getZ())+g*(i.getZ()-e.getZ())}},{key:\"longestSideLength\",value:function(t,e,n){var i=t.distance(e),r=e.distance(n),s=n.distance(t),a=i;return r>a&&(a=r),s>a&&(a=s),a}},{key:\"circumcentreDD\",value:function(t,e,n){var i=ut.valueOf(t.x).subtract(n.x),r=ut.valueOf(t.y).subtract(n.y),s=ut.valueOf(e.x).subtract(n.x),a=ut.valueOf(e.y).subtract(n.y),o=ut.determinant(i,r,s,a).multiply(2),u=i.sqr().add(r.sqr()),l=s.sqr().add(a.sqr()),h=ut.determinant(r,u,a,l),c=ut.determinant(i,u,s,l),f=ut.valueOf(n.x).subtract(h.divide(o)).doubleValue(),v=ut.valueOf(n.y).add(c.divide(o)).doubleValue();return new X(f,v)}},{key:\"isAcute\",value:function(t,e,n){return!!Mn.isAcute(t,e,n)&&(!!Mn.isAcute(e,n,t)&&!!Mn.isAcute(n,t,e))}},{key:\"circumcentre\",value:function(t,n,i){var r=i.x,s=i.y,a=t.x-r,o=t.y-s,u=n.x-r,l=n.y-s,h=2*e.det(a,o,u,l),c=e.det(o,a*a+o*o,l,u*u+l*l),f=e.det(a,a*a+o*o,u,u*u+l*l);return new X(r-c/h,s+f/h)}},{key:\"perpendicularBisector\",value:function(t,e){var n=e.x-t.x,i=e.y-t.y,r=new qn(t.x+n/2,t.y+i/2,1),s=new qn(t.x-i+n/2,t.y+n+i/2,1);return new qn(r,s)}},{key:\"angleBisector\",value:function(t,e,n){var i=e.distance(t),r=i/(i+e.distance(n)),s=n.x-t.x,a=n.y-t.y;return new X(t.x+r*s,t.y+r*a)}},{key:\"area3D\",value:function(t,e,n){var i=e.x-t.x,r=e.y-t.y,s=e.getZ()-t.getZ(),a=n.x-t.x,o=n.y-t.y,u=n.getZ()-t.getZ(),l=r*u-s*o,h=s*a-i*u,c=i*o-r*a,f=l*l+h*h+c*c,v=Math.sqrt(f)/2;return v}},{key:\"centroid\",value:function(t,e,n){var i=(t.x+e.x+n.x)/3,r=(t.y+e.y+n.y)/3;return new X(i,r)}},{key:\"inCentre\",value:function(t,e,n){var i=e.distance(n),r=t.distance(n),s=t.distance(e),a=i+r+s,o=(i*t.x+r*e.x+s*n.x)/a,u=(i*t.y+r*e.y+s*n.y)/a;return new X(o,u)}}]),e}(),zn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"addRingSide\",value:function(t,e,n,i,r){if(0===e&&t.length<Xt.MINIMUM_VALID_SIZE)return null;var s=i,a=r;t.length>=Xt.MINIMUM_VALID_SIZE&&ct.isCCW(t)&&(s=r,a=i,n=$.opposite(n));var o=this._curveBuilder.getRingCurve(t,n,e);this.addCurve(o,s,a)}},{key:\"addRingBothSides\",value:function(t,e){this.addRingSide(t,e,$.LEFT,H.EXTERIOR,H.INTERIOR),this.addRingSide(t,e,$.RIGHT,H.INTERIOR,H.EXTERIOR)}},{key:\"addPoint\",value:function(t){if(this._distance<=0)return null;var e=t.getCoordinates(),n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,H.EXTERIOR,H.INTERIOR)}},{key:\"addPolygon\",value:function(t){var e=this._distance,n=$.LEFT;this._distance<0&&(e=-this._distance,n=$.RIGHT);var i=t.getExteriorRing(),r=jt.removeRepeatedPoints(i.getCoordinates());if(this._distance<0&&this.isErodedCompletely(i,this._distance))return null;if(this._distance<=0&&r.length<3)return null;this.addRingSide(r,e,n,H.EXTERIOR,H.INTERIOR);for(var s=0;s<t.getNumInteriorRing();s++){var a=t.getInteriorRingN(s),o=jt.removeRepeatedPoints(a.getCoordinates());this._distance>0&&this.isErodedCompletely(a,-this._distance)||this.addRingSide(o,e,$.opposite(n),H.INTERIOR,H.EXTERIOR)}}},{key:\"isTriangleErodedCompletely\",value:function(t,e){var n=new Yn(t[0],t[1],t[2]),i=n.inCentre();return xt.pointToSegment(i,n.p0,n.p1)<Math.abs(e)}},{key:\"addLineString\",value:function(t){if(this._curveBuilder.isLineOffsetEmpty(this._distance))return null;var e=jt.removeRepeatedPoints(t.getCoordinates());if(jt.isRing(e)&&!this._curveBuilder.getBufferParameters().isSingleSided())this.addRingBothSides(e,this._distance);else{var n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,H.EXTERIOR,H.INTERIOR)}}},{key:\"addCurve\",value:function(t,e,n){if(null===t||t.length<2)return null;var i=new In(t,new Pe(0,H.BOUNDARY,e,n));this._curveList.add(i)}},{key:\"getCurves\",value:function(){return this.add(this._inputGeom),this._curveList}},{key:\"add\",value:function(t){if(t.isEmpty())return null;if(t instanceof Dt)this.addPolygon(t);else if(t instanceof wt)this.addLineString(t);else if(t instanceof bt)this.addPoint(t);else if(t instanceof zt)this.addCollection(t);else if(t instanceof se)this.addCollection(t);else if(t instanceof te)this.addCollection(t);else{if(!(t instanceof Yt))throw new W(t.getGeometryType());this.addCollection(t)}}},{key:\"isErodedCompletely\",value:function(t,e){var n=t.getCoordinates();if(n.length<4)return e<0;if(4===n.length)return this.isTriangleErodedCompletely(n,e);var i=t.getEnvelopeInternal(),r=Math.min(i.getHeight(),i.getWidth());return e<0&&2*Math.abs(e)>r}},{key:\"addCollection\",value:function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}}}],[{key:\"constructor_\",value:function(){this._inputGeom=null,this._distance=null,this._curveBuilder=null,this._curveList=new yt;var t=arguments[0],e=arguments[1],n=arguments[2];this._inputGeom=t,this._distance=e,this._curveBuilder=n}}]),e}(),Xn=function(){function e(){t(this,e)}return n(e,[{key:\"locate\",value:function(t){}}]),e}(),Bn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"next\",value:function(){if(this._atStart)return this._atStart=!1,e.isAtomic(this._parent)&&this._index++,this._parent;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return this._subcollectionIterator.next();this._subcollectionIterator=null}if(this._index>=this._max)throw new j;var t=this._parent.getGeometryN(this._index++);return t instanceof Yt?(this._subcollectionIterator=new e(t),this._subcollectionIterator.next()):t}},{key:\"remove\",value:function(){throw new W(this.getClass().getName())}},{key:\"hasNext\",value:function(){if(this._atStart)return!0;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return!0;this._subcollectionIterator=null}return!(this._index>=this._max)}},{key:\"interfaces_\",get:function(){return[_n]}}],[{key:\"constructor_\",value:function(){this._parent=null,this._atStart=null,this._max=null,this._index=null,this._subcollectionIterator=null;var t=arguments[0];this._parent=t,this._atStart=!0,this._index=0,this._max=t.getNumGeometries()}},{key:\"isAtomic\",value:function(t){return!(t instanceof Yt)}}]),e}(),Un=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"locate\",value:function(t){return e.locate(t,this._geom)}},{key:\"interfaces_\",get:function(){return[Xn]}}],[{key:\"constructor_\",value:function(){this._geom=null;var t=arguments[0];this._geom=t}},{key:\"locatePointInPolygon\",value:function(t,n){if(n.isEmpty())return H.EXTERIOR;var i=n.getExteriorRing(),r=e.locatePointInRing(t,i);if(r!==H.INTERIOR)return r;for(var s=0;s<n.getNumInteriorRing();s++){var a=n.getInteriorRingN(s),o=e.locatePointInRing(t,a);if(o===H.BOUNDARY)return H.BOUNDARY;if(o===H.INTERIOR)return H.EXTERIOR}return H.INTERIOR}},{key:\"locatePointInRing\",value:function(t,e){return e.getEnvelopeInternal().intersects(t)?Me.locateInRing(t,e.getCoordinates()):H.EXTERIOR}},{key:\"containsPointInPolygon\",value:function(t,n){return H.EXTERIOR!==e.locatePointInPolygon(t,n)}},{key:\"locateInGeometry\",value:function(t,n){if(n instanceof Dt)return e.locatePointInPolygon(t,n);if(n instanceof Yt)for(var i=new Bn(n);i.hasNext();){var r=i.next();if(r!==n){var s=e.locateInGeometry(t,r);if(s!==H.EXTERIOR)return s}}return H.EXTERIOR}},{key:\"isContained\",value:function(t,n){return H.EXTERIOR!==e.locate(t,n)}},{key:\"locate\",value:function(t,n){return n.isEmpty()?H.EXTERIOR:n.getEnvelopeInternal().intersects(t)?e.locateInGeometry(t,n):H.EXTERIOR}}]),e}(),Vn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getNextCW\",value:function(t){this.getEdges();var e=this._edgeList.indexOf(t),n=e-1;return 0===e&&(n=this._edgeList.size()-1),this._edgeList.get(n)}},{key:\"propagateSideLabels\",value:function(t){for(var e=H.NONE,n=this.iterator();n.hasNext();){var i=n.next().getLabel();i.isArea(t)&&i.getLocation(t,$.LEFT)!==H.NONE&&(e=i.getLocation(t,$.LEFT))}if(e===H.NONE)return null;for(var r=e,s=this.iterator();s.hasNext();){var a=s.next(),o=a.getLabel();if(o.getLocation(t,$.ON)===H.NONE&&o.setLocation(t,$.ON,r),o.isArea(t)){var u=o.getLocation(t,$.LEFT),l=o.getLocation(t,$.RIGHT);if(l!==H.NONE){if(l!==r)throw new vt(\"side location conflict\",a.getCoordinate());u===H.NONE&&G.shouldNeverReachHere(\"found single null side (at \"+a.getCoordinate()+\")\"),r=u}else G.isTrue(o.getLocation(t,$.LEFT)===H.NONE,\"found single null side\"),o.setLocation(t,$.RIGHT,r),o.setLocation(t,$.LEFT,r)}}}},{key:\"getCoordinate\",value:function(){var t=this.iterator();return t.hasNext()?t.next().getCoordinate():null}},{key:\"print\",value:function(t){mt.out.println(\"EdgeEndStar:   \"+this.getCoordinate());for(var e=this.iterator();e.hasNext();){e.next().print(t)}}},{key:\"isAreaLabelsConsistent\",value:function(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)}},{key:\"checkAreaLabelsConsistent\",value:function(t){var e=this.getEdges();if(e.size()<=0)return!0;var n=e.size()-1,i=e.get(n).getLabel().getLocation(t,$.LEFT);G.isTrue(i!==H.NONE,\"Found unlabelled area edge\");for(var r=i,s=this.iterator();s.hasNext();){var a=s.next().getLabel();G.isTrue(a.isArea(t),\"Found non-area edge\");var o=a.getLocation(t,$.LEFT),u=a.getLocation(t,$.RIGHT);if(o===u)return!1;if(u!==r)return!1;r=o}return!0}},{key:\"findIndex\",value:function(t){this.iterator();for(var e=0;e<this._edgeList.size();e++){if(this._edgeList.get(e)===t)return e}return-1}},{key:\"iterator\",value:function(){return this.getEdges().iterator()}},{key:\"getEdges\",value:function(){return null===this._edgeList&&(this._edgeList=new yt(this._edgeMap.values())),this._edgeList}},{key:\"getLocation\",value:function(t,e,n){return this._ptInAreaLocation[t]===H.NONE&&(this._ptInAreaLocation[t]=Un.locate(e,n[t].getGeometry())),this._ptInAreaLocation[t]}},{key:\"toString\",value:function(){var t=new st;t.append(\"EdgeEndStar:   \"+this.getCoordinate()),t.append(\"\\n\");for(var e=this.iterator();e.hasNext();){var n=e.next();t.append(n),t.append(\"\\n\")}return t.toString()}},{key:\"computeEdgeEndLabels\",value:function(t){for(var e=this.iterator();e.hasNext();){e.next().computeLabel(t)}}},{key:\"computeLabelling\",value:function(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var e=[!1,!1],n=this.iterator();n.hasNext();)for(var i=n.next().getLabel(),r=0;r<2;r++)i.isLine(r)&&i.getLocation(r)===H.BOUNDARY&&(e[r]=!0);for(var s=this.iterator();s.hasNext();)for(var a=s.next(),o=a.getLabel(),u=0;u<2;u++)if(o.isAnyNull(u)){var l=H.NONE;if(e[u])l=H.EXTERIOR;else{var h=a.getCoordinate();l=this.getLocation(u,h,t)}o.setAllLocationsIfNull(u,l)}}},{key:\"getDegree\",value:function(){return this._edgeMap.size()}},{key:\"insertEdgeEnd\",value:function(t,e){this._edgeMap.put(t,e),this._edgeList=null}}],[{key:\"constructor_\",value:function(){this._edgeMap=new Ze,this._edgeList=null,this._ptInAreaLocation=[H.NONE,H.NONE]}}]),e}(),Hn=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"linkResultDirectedEdges\",value:function(){this.getResultAreaEdges();for(var t=null,e=null,n=this._SCANNING_FOR_INCOMING,i=0;i<this._resultAreaEdgeList.size();i++){var r=this._resultAreaEdgeList.get(i),s=r.getSym();if(r.getLabel().isArea())switch(null===t&&r.isInResult()&&(t=r),n){case this._SCANNING_FOR_INCOMING:if(!s.isInResult())continue;e=s,n=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(!r.isInResult())continue;e.setNext(r),n=this._SCANNING_FOR_INCOMING}}if(n===this._LINKING_TO_OUTGOING){if(null===t)throw new vt(\"no outgoing dirEdge found\",this.getCoordinate());G.isTrue(t.isInResult(),\"unable to link last incoming dirEdge\"),e.setNext(t)}}},{key:\"insert\",value:function(t){var e=t;this.insertEdgeEnd(e,e)}},{key:\"getRightmostEdge\",value:function(){var t=this.getEdges(),e=t.size();if(e<1)return null;var n=t.get(0);if(1===e)return n;var i=t.get(e-1),r=n.getQuadrant(),s=i.getQuadrant();return We.isNorthern(r)&&We.isNorthern(s)?n:We.isNorthern(r)||We.isNorthern(s)?0!==n.getDy()?n:0!==i.getDy()?i:(G.shouldNeverReachHere(\"found two horizontal edges incident on node\"),null):i}},{key:\"print\",value:function(t){mt.out.println(\"DirectedEdgeStar: \"+this.getCoordinate());for(var e=this.iterator();e.hasNext();){var n=e.next();t.print(\"out \"),n.print(t),t.println(),t.print(\"in \"),n.getSym().print(t),t.println()}}},{key:\"getResultAreaEdges\",value:function(){if(null!==this._resultAreaEdgeList)return this._resultAreaEdgeList;this._resultAreaEdgeList=new yt;for(var t=this.iterator();t.hasNext();){var e=t.next();(e.isInResult()||e.getSym().isInResult())&&this._resultAreaEdgeList.add(e)}return this._resultAreaEdgeList}},{key:\"updateLabelling\",value:function(t){for(var e=this.iterator();e.hasNext();){var n=e.next().getLabel();n.setAllLocationsIfNull(0,t.getLocation(0)),n.setAllLocationsIfNull(1,t.getLocation(1))}}},{key:\"linkAllDirectedEdges\",value:function(){this.getEdges();for(var t=null,e=null,n=this._edgeList.size()-1;n>=0;n--){var i=this._edgeList.get(n),r=i.getSym();null===e&&(e=r),null!==t&&r.setNext(t),t=i}e.setNext(t)}},{key:\"computeDepths\",value:function(){if(1===arguments.length){var t=arguments[0],e=this.findIndex(t),n=t.getDepth($.LEFT),i=t.getDepth($.RIGHT),r=this.computeDepths(e+1,this._edgeList.size(),n),s=this.computeDepths(0,e,r);if(s!==i)throw new vt(\"depth mismatch at \"+t.getCoordinate())}else if(3===arguments.length){for(var a=arguments[0],o=arguments[1],u=arguments[2],l=u,h=a;h<o;h++){var c=this._edgeList.get(h);c.setEdgeDepths($.RIGHT,l),l=c.getDepth($.LEFT)}return l}}},{key:\"mergeSymLabels\",value:function(){for(var t=this.iterator();t.hasNext();){var e=t.next();e.getLabel().merge(e.getSym().getLabel())}}},{key:\"linkMinimalDirectedEdges\",value:function(t){for(var e=null,n=null,i=this._SCANNING_FOR_INCOMING,r=this._resultAreaEdgeList.size()-1;r>=0;r--){var s=this._resultAreaEdgeList.get(r),a=s.getSym();switch(null===e&&s.getEdgeRing()===t&&(e=s),i){case this._SCANNING_FOR_INCOMING:if(a.getEdgeRing()!==t)continue;n=a,i=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(s.getEdgeRing()!==t)continue;n.setNextMin(s),i=this._SCANNING_FOR_INCOMING}}i===this._LINKING_TO_OUTGOING&&(G.isTrue(null!==e,\"found null for first outgoing dirEdge\"),G.isTrue(e.getEdgeRing()===t,\"unable to link last incoming dirEdge\"),n.setNextMin(e))}},{key:\"getOutgoingDegree\",value:function(){if(0===arguments.length){for(var t=0,e=this.iterator();e.hasNext();){var n=e.next();n.isInResult()&&t++}return t}if(1===arguments.length){for(var i=arguments[0],r=0,s=this.iterator();s.hasNext();){var a=s.next();a.getEdgeRing()===i&&r++}return r}}},{key:\"getLabel\",value:function(){return this._label}},{key:\"findCoveredLineEdges\",value:function(){for(var t=H.NONE,e=this.iterator();e.hasNext();){var n=e.next(),i=n.getSym();if(!n.isLineEdge()){if(n.isInResult()){t=H.INTERIOR;break}if(i.isInResult()){t=H.EXTERIOR;break}}}if(t===H.NONE)return null;for(var r=t,s=this.iterator();s.hasNext();){var a=s.next(),o=a.getSym();a.isLineEdge()?a.getEdge().setCovered(r===H.INTERIOR):(a.isInResult()&&(r=H.EXTERIOR),o.isInResult()&&(r=H.INTERIOR))}}},{key:\"computeLabelling\",value:function(t){f(r(a.prototype),\"computeLabelling\",this).call(this,t),this._label=new Pe(H.NONE);for(var e=this.iterator();e.hasNext();)for(var n=e.next().getEdge().getLabel(),i=0;i<2;i++){var s=n.getLocation(i);s!==H.INTERIOR&&s!==H.BOUNDARY||this._label.setLocation(i,H.INTERIOR)}}}],[{key:\"constructor_\",value:function(){this._resultAreaEdgeList=null,this._label=null,this._SCANNING_FOR_INCOMING=1,this._LINKING_TO_OUTGOING=2}}]),a}(Vn),Zn=function(e){i(s,e);var r=c(s);function s(){return t(this,s),r.call(this)}return n(s,[{key:\"createNode\",value:function(t){return new Ye(t,new Hn)}}]),s}(Qe),jn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"compareTo\",value:function(t){var n=t;return e.compareOriented(this._pts,this._orientation,n._pts,n._orientation)}},{key:\"interfaces_\",get:function(){return[x]}}],[{key:\"constructor_\",value:function(){this._pts=null,this._orientation=null;var t=arguments[0];this._pts=t,this._orientation=e.orientation(t)}},{key:\"orientation\",value:function(t){return 1===jt.increasingDirection(t)}},{key:\"compareOriented\",value:function(t,e,n,i){for(var r=e?1:-1,s=i?1:-1,a=e?t.length:-1,o=i?n.length:-1,u=e?0:t.length-1,l=i?0:n.length-1;;){var h=t[u].compareTo(n[l]);if(0!==h)return h;var c=(u+=r)===a,f=(l+=s)===o;if(c&&!f)return-1;if(!c&&f)return 1;if(c&&f)return 0}}}]),e}(),Wn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"print\",value:function(t){t.print(\"MULTILINESTRING ( \");for(var e=0;e<this._edges.size();e++){var n=this._edges.get(e);e>0&&t.print(\",\"),t.print(\"(\");for(var i=n.getCoordinates(),r=0;r<i.length;r++)r>0&&t.print(\",\"),t.print(i[r].x+\" \"+i[r].y);t.println(\")\")}t.print(\")  \")}},{key:\"addAll\",value:function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next())}},{key:\"findEdgeIndex\",value:function(t){for(var e=0;e<this._edges.size();e++)if(this._edges.get(e).equals(t))return e;return-1}},{key:\"iterator\",value:function(){return this._edges.iterator()}},{key:\"getEdges\",value:function(){return this._edges}},{key:\"get\",value:function(t){return this._edges.get(t)}},{key:\"findEqualEdge\",value:function(t){var e=new jn(t.getCoordinates());return this._ocaMap.get(e)}},{key:\"add\",value:function(t){this._edges.add(t);var e=new jn(t.getCoordinates());this._ocaMap.put(e,t)}}],[{key:\"constructor_\",value:function(){this._edges=new yt,this._ocaMap=new Ze}}]),e}(),Kn=function(){function e(){t(this,e)}return n(e,[{key:\"processIntersections\",value:function(t,e,n,i){}},{key:\"isDone\",value:function(){}}]),e}(),Jn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"isTrivialIntersection\",value:function(t,n,i,r){if(t===i&&1===this._li.getIntersectionNum()){if(e.isAdjacentSegments(n,r))return!0;if(t.isClosed()){var s=t.size()-1;if(0===n&&r===s||0===r&&n===s)return!0}}return!1}},{key:\"getProperIntersectionPoint\",value:function(){return this._properIntersectionPoint}},{key:\"hasProperInteriorIntersection\",value:function(){return this._hasProperInterior}},{key:\"getLineIntersector\",value:function(){return this._li}},{key:\"hasProperIntersection\",value:function(){return this._hasProper}},{key:\"processIntersections\",value:function(t,e,n,i){if(t===n&&e===i)return null;this.numTests++;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],a=n.getCoordinates()[i],o=n.getCoordinates()[i+1];this._li.computeIntersection(r,s,a,o),this._li.hasIntersection()&&(this.numIntersections++,this._li.isInteriorIntersection()&&(this.numInteriorIntersections++,this._hasInterior=!0),this.isTrivialIntersection(t,e,n,i)||(this._hasIntersection=!0,t.addIntersections(this._li,e,0),n.addIntersections(this._li,i,1),this._li.isProper()&&(this.numProperIntersections++,this._hasProper=!0,this._hasProperInterior=!0)))}},{key:\"hasIntersection\",value:function(){return this._hasIntersection}},{key:\"isDone\",value:function(){return!1}},{key:\"hasInteriorIntersection\",value:function(){return this._hasInterior}},{key:\"interfaces_\",get:function(){return[Kn]}}],[{key:\"constructor_\",value:function(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._hasInterior=!1,this._properIntersectionPoint=null,this._li=null,this._isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;var t=arguments[0];this._li=t}},{key:\"isAdjacentSegments\",value:function(t,e){return 1===Math.abs(t-e)}}]),e}(),Qn=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getSegmentIndex\",value:function(){return this.segmentIndex}},{key:\"getCoordinate\",value:function(){return this.coord}},{key:\"print\",value:function(t){t.print(this.coord),t.print(\" seg # = \"+this.segmentIndex),t.println(\" dist = \"+this.dist)}},{key:\"compareTo\",value:function(t){var e=t;return this.compare(e.segmentIndex,e.dist)}},{key:\"isEndPoint\",value:function(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t}},{key:\"toString\",value:function(){return this.coord+\" seg # = \"+this.segmentIndex+\" dist = \"+this.dist}},{key:\"getDistance\",value:function(){return this.dist}},{key:\"compare\",value:function(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0}},{key:\"interfaces_\",get:function(){return[x]}}],[{key:\"constructor_\",value:function(){this.coord=null,this.segmentIndex=null,this.dist=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.coord=new X(t),this.segmentIndex=e,this.dist=n}}]),e}(),$n=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"print\",value:function(t){t.println(\"Intersections:\");for(var e=this.iterator();e.hasNext();){e.next().print(t)}}},{key:\"iterator\",value:function(){return this._nodeMap.values().iterator()}},{key:\"addSplitEdges\",value:function(t){this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}}},{key:\"addEndpoints\",value:function(){var t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)}},{key:\"createSplitEdge\",value:function(t,e){var n=e.segmentIndex-t.segmentIndex+2,i=this.edge.pts[e.segmentIndex],r=e.dist>0||!e.coord.equals2D(i);r||n--;var s=new Array(n).fill(null),a=0;s[a++]=new X(t.coord);for(var o=t.segmentIndex+1;o<=e.segmentIndex;o++)s[a++]=this.edge.pts[o];return r&&(s[a]=e.coord),new si(s,new Pe(this.edge._label))}},{key:\"add\",value:function(t,e,n){var i=new Qn(t,e,n),r=this._nodeMap.get(i);return null!==r?r:(this._nodeMap.put(i,i),i)}},{key:\"isIntersection\",value:function(t){for(var e=this.iterator();e.hasNext();){if(e.next().coord.equals(t))return!0}return!1}}],[{key:\"constructor_\",value:function(){this._nodeMap=new Ze,this.edge=null;var t=arguments[0];this.edge=t}}]),e}(),ti=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"isIntersects\",value:function(){return!this.isDisjoint()}},{key:\"isCovers\",value:function(){return(e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])||e.isTrue(this._matrix[H.INTERIOR][H.BOUNDARY])||e.isTrue(this._matrix[H.BOUNDARY][H.INTERIOR])||e.isTrue(this._matrix[H.BOUNDARY][H.BOUNDARY]))&&this._matrix[H.EXTERIOR][H.INTERIOR]===Lt.FALSE&&this._matrix[H.EXTERIOR][H.BOUNDARY]===Lt.FALSE}},{key:\"isCoveredBy\",value:function(){return(e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])||e.isTrue(this._matrix[H.INTERIOR][H.BOUNDARY])||e.isTrue(this._matrix[H.BOUNDARY][H.INTERIOR])||e.isTrue(this._matrix[H.BOUNDARY][H.BOUNDARY]))&&this._matrix[H.INTERIOR][H.EXTERIOR]===Lt.FALSE&&this._matrix[H.BOUNDARY][H.EXTERIOR]===Lt.FALSE}},{key:\"set\",value:function(){if(1===arguments.length)for(var t=arguments[0],e=0;e<t.length;e++){var n=Math.trunc(e/3),i=e%3;this._matrix[n][i]=Lt.toDimensionValue(t.charAt(e))}else if(3===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2];this._matrix[r][s]=a}}},{key:\"isContains\",value:function(){return e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])&&this._matrix[H.EXTERIOR][H.INTERIOR]===Lt.FALSE&&this._matrix[H.EXTERIOR][H.BOUNDARY]===Lt.FALSE}},{key:\"setAtLeast\",value:function(){if(1===arguments.length)for(var t=arguments[0],e=0;e<t.length;e++){var n=Math.trunc(e/3),i=e%3;this.setAtLeast(n,i,Lt.toDimensionValue(t.charAt(e)))}else if(3===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2];this._matrix[r][s]<a&&(this._matrix[r][s]=a)}}},{key:\"setAtLeastIfValid\",value:function(t,e,n){t>=0&&e>=0&&this.setAtLeast(t,e,n)}},{key:\"isWithin\",value:function(){return e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])&&this._matrix[H.INTERIOR][H.EXTERIOR]===Lt.FALSE&&this._matrix[H.BOUNDARY][H.EXTERIOR]===Lt.FALSE}},{key:\"isTouches\",value:function(t,n){return t>n?this.isTouches(n,t):(t===Lt.A&&n===Lt.A||t===Lt.L&&n===Lt.L||t===Lt.L&&n===Lt.A||t===Lt.P&&n===Lt.A||t===Lt.P&&n===Lt.L)&&(this._matrix[H.INTERIOR][H.INTERIOR]===Lt.FALSE&&(e.isTrue(this._matrix[H.INTERIOR][H.BOUNDARY])||e.isTrue(this._matrix[H.BOUNDARY][H.INTERIOR])||e.isTrue(this._matrix[H.BOUNDARY][H.BOUNDARY])))}},{key:\"isOverlaps\",value:function(t,n){return t===Lt.P&&n===Lt.P||t===Lt.A&&n===Lt.A?e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])&&e.isTrue(this._matrix[H.INTERIOR][H.EXTERIOR])&&e.isTrue(this._matrix[H.EXTERIOR][H.INTERIOR]):t===Lt.L&&n===Lt.L&&(1===this._matrix[H.INTERIOR][H.INTERIOR]&&e.isTrue(this._matrix[H.INTERIOR][H.EXTERIOR])&&e.isTrue(this._matrix[H.EXTERIOR][H.INTERIOR]))}},{key:\"isEquals\",value:function(t,n){return t===n&&(e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])&&this._matrix[H.INTERIOR][H.EXTERIOR]===Lt.FALSE&&this._matrix[H.BOUNDARY][H.EXTERIOR]===Lt.FALSE&&this._matrix[H.EXTERIOR][H.INTERIOR]===Lt.FALSE&&this._matrix[H.EXTERIOR][H.BOUNDARY]===Lt.FALSE)}},{key:\"toString\",value:function(){for(var t=new Jt(\"123456789\"),e=0;e<3;e++)for(var n=0;n<3;n++)t.setCharAt(3*e+n,Lt.toDimensionSymbol(this._matrix[e][n]));return t.toString()}},{key:\"setAll\",value:function(t){for(var e=0;e<3;e++)for(var n=0;n<3;n++)this._matrix[e][n]=t}},{key:\"get\",value:function(t,e){return this._matrix[t][e]}},{key:\"transpose\",value:function(){var t=this._matrix[1][0];return this._matrix[1][0]=this._matrix[0][1],this._matrix[0][1]=t,t=this._matrix[2][0],this._matrix[2][0]=this._matrix[0][2],this._matrix[0][2]=t,t=this._matrix[2][1],this._matrix[2][1]=this._matrix[1][2],this._matrix[1][2]=t,this}},{key:\"matches\",value:function(t){if(9!==t.length)throw new m(\"Should be length 9: \"+t);for(var n=0;n<3;n++)for(var i=0;i<3;i++)if(!e.matches(this._matrix[n][i],t.charAt(3*n+i)))return!1;return!0}},{key:\"add\",value:function(t){for(var e=0;e<3;e++)for(var n=0;n<3;n++)this.setAtLeast(e,n,t.get(e,n))}},{key:\"isDisjoint\",value:function(){return this._matrix[H.INTERIOR][H.INTERIOR]===Lt.FALSE&&this._matrix[H.INTERIOR][H.BOUNDARY]===Lt.FALSE&&this._matrix[H.BOUNDARY][H.INTERIOR]===Lt.FALSE&&this._matrix[H.BOUNDARY][H.BOUNDARY]===Lt.FALSE}},{key:\"isCrosses\",value:function(t,n){return t===Lt.P&&n===Lt.L||t===Lt.P&&n===Lt.A||t===Lt.L&&n===Lt.A?e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])&&e.isTrue(this._matrix[H.INTERIOR][H.EXTERIOR]):t===Lt.L&&n===Lt.P||t===Lt.A&&n===Lt.P||t===Lt.A&&n===Lt.L?e.isTrue(this._matrix[H.INTERIOR][H.INTERIOR])&&e.isTrue(this._matrix[H.EXTERIOR][H.INTERIOR]):t===Lt.L&&n===Lt.L&&0===this._matrix[H.INTERIOR][H.INTERIOR]}},{key:\"interfaces_\",get:function(){return[I]}}],[{key:\"constructor_\",value:function(){if(this._matrix=null,0===arguments.length)this._matrix=Array(3).fill().map((function(){return Array(3)})),this.setAll(Lt.FALSE);else if(1===arguments.length)if(\"string\"==typeof arguments[0]){var t=arguments[0];e.constructor_.call(this),this.set(t)}else if(arguments[0]instanceof e){var n=arguments[0];e.constructor_.call(this),this._matrix[H.INTERIOR][H.INTERIOR]=n._matrix[H.INTERIOR][H.INTERIOR],this._matrix[H.INTERIOR][H.BOUNDARY]=n._matrix[H.INTERIOR][H.BOUNDARY],this._matrix[H.INTERIOR][H.EXTERIOR]=n._matrix[H.INTERIOR][H.EXTERIOR],this._matrix[H.BOUNDARY][H.INTERIOR]=n._matrix[H.BOUNDARY][H.INTERIOR],this._matrix[H.BOUNDARY][H.BOUNDARY]=n._matrix[H.BOUNDARY][H.BOUNDARY],this._matrix[H.BOUNDARY][H.EXTERIOR]=n._matrix[H.BOUNDARY][H.EXTERIOR],this._matrix[H.EXTERIOR][H.INTERIOR]=n._matrix[H.EXTERIOR][H.INTERIOR],this._matrix[H.EXTERIOR][H.BOUNDARY]=n._matrix[H.EXTERIOR][H.BOUNDARY],this._matrix[H.EXTERIOR][H.EXTERIOR]=n._matrix[H.EXTERIOR][H.EXTERIOR]}}},{key:\"matches\",value:function(){if(Number.isInteger(arguments[0])&&\"string\"==typeof arguments[1]){var t=arguments[0],n=arguments[1];return n===Lt.SYM_DONTCARE||(n===Lt.SYM_TRUE&&(t>=0||t===Lt.TRUE)||(n===Lt.SYM_FALSE&&t===Lt.FALSE||(n===Lt.SYM_P&&t===Lt.P||(n===Lt.SYM_L&&t===Lt.L||n===Lt.SYM_A&&t===Lt.A))))}if(\"string\"==typeof arguments[0]&&\"string\"==typeof arguments[1]){var i=arguments[0],r=arguments[1],s=new e(i);return s.matches(r)}}},{key:\"isTrue\",value:function(t){return t>=0||t===Lt.TRUE}}]),e}(),ei=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"size\",value:function(){return this._size}},{key:\"addAll\",value:function(t){return null===t||0===t.length?null:(this.ensureCapacity(this._size+t.length),mt.arraycopy(t,0,this._data,this._size,t.length),void(this._size+=t.length))}},{key:\"ensureCapacity\",value:function(t){if(t<=this._data.length)return null;var e=Math.max(t,2*this._data.length);this._data=At.copyOf(this._data,e)}},{key:\"toArray\",value:function(){var t=new Array(this._size).fill(null);return mt.arraycopy(this._data,0,t,0,this._size),t}},{key:\"add\",value:function(t){this.ensureCapacity(this._size+1),this._data[this._size]=t,++this._size}}],[{key:\"constructor_\",value:function(){if(this._data=null,this._size=0,0===arguments.length)e.constructor_.call(this,10);else if(1===arguments.length){var t=arguments[0];this._data=new Array(t).fill(null)}}}]),e}(),ni=function(){function e(){t(this,e)}return n(e,[{key:\"getChainStartIndices\",value:function(t){var e=0,n=new ei(Math.trunc(t.length/2));n.add(e);do{var i=this.findChainEnd(t,e);n.add(i),e=i}while(e<t.length-1);return n.toArray()}},{key:\"findChainEnd\",value:function(t,e){for(var n=We.quadrant(t[e],t[e+1]),i=e+1;i<t.length;){if(We.quadrant(t[i-1],t[i])!==n)break;i++}return i-1}},{key:\"OLDgetChainStartIndices\",value:function(t){var n=0,i=new yt;i.add(n);do{var r=this.findChainEnd(t,n);i.add(r),n=r}while(n<t.length-1);return e.toIntArray(i)}}],[{key:\"toIntArray\",value:function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e}}]),e}(),ii=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getCoordinates\",value:function(){return this.pts}},{key:\"getMaxX\",value:function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e>n?e:n}},{key:\"getMinX\",value:function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e<n?e:n}},{key:\"computeIntersectsForChain\",value:function(){if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[n],e.startIndex[n+1],i)}else if(6===arguments.length){var r=arguments[0],s=arguments[1],a=arguments[2],o=arguments[3],u=arguments[4],l=arguments[5];if(s-r==1&&u-o==1)return l.addIntersections(this.e,r,a.e,o),null;if(!this.overlaps(r,s,a,o,u))return null;var h=Math.trunc((r+s)/2),c=Math.trunc((o+u)/2);r<h&&(o<c&&this.computeIntersectsForChain(r,h,a,o,c,l),c<u&&this.computeIntersectsForChain(r,h,a,c,u,l)),h<s&&(o<c&&this.computeIntersectsForChain(h,s,a,o,c,l),c<u&&this.computeIntersectsForChain(h,s,a,c,u,l))}}},{key:\"overlaps\",value:function(t,e,n,i,r){return U.intersects(this.pts[t],this.pts[e],n.pts[i],n.pts[r])}},{key:\"getStartIndexes\",value:function(){return this.startIndex}},{key:\"computeIntersects\",value:function(t,e){for(var n=0;n<this.startIndex.length-1;n++)for(var i=0;i<t.startIndex.length-1;i++)this.computeIntersectsForChain(n,t,i,e)}}],[{key:\"constructor_\",value:function(){this.e=null,this.pts=null,this.startIndex=null;var t=arguments[0];this.e=t,this.pts=t.getCoordinates();var e=new ni;this.startIndex=e.getChainStartIndices(this.pts)}}]),e}(),ri=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"getDepth\",value:function(t,e){return this._depth[t][e]}},{key:\"setDepth\",value:function(t,e,n){this._depth[t][e]=n}},{key:\"isNull\",value:function(){if(0===arguments.length){for(var t=0;t<2;t++)for(var n=0;n<3;n++)if(this._depth[t][n]!==e.NULL_VALUE)return!1;return!0}if(1===arguments.length){var i=arguments[0];return this._depth[i][1]===e.NULL_VALUE}if(2===arguments.length){var r=arguments[0],s=arguments[1];return this._depth[r][s]===e.NULL_VALUE}}},{key:\"normalize\",value:function(){for(var t=0;t<2;t++)if(!this.isNull(t)){var e=this._depth[t][1];this._depth[t][2]<e&&(e=this._depth[t][2]),e<0&&(e=0);for(var n=1;n<3;n++){var i=0;this._depth[t][n]>e&&(i=1),this._depth[t][n]=i}}}},{key:\"getDelta\",value:function(t){return this._depth[t][$.RIGHT]-this._depth[t][$.LEFT]}},{key:\"getLocation\",value:function(t,e){return this._depth[t][e]<=0?H.EXTERIOR:H.INTERIOR}},{key:\"toString\",value:function(){return\"A: \"+this._depth[0][1]+\",\"+this._depth[0][2]+\" B: \"+this._depth[1][1]+\",\"+this._depth[1][2]}},{key:\"add\",value:function(){if(1===arguments.length)for(var t=arguments[0],n=0;n<2;n++)for(var i=1;i<3;i++){var r=t.getLocation(n,i);r!==H.EXTERIOR&&r!==H.INTERIOR||(this.isNull(n,i)?this._depth[n][i]=e.depthAtLocation(r):this._depth[n][i]+=e.depthAtLocation(r))}else if(3===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2];o===H.INTERIOR&&this._depth[s][a]++}}}],[{key:\"constructor_\",value:function(){this._depth=Array(2).fill().map((function(){return Array(3)}));for(var t=0;t<2;t++)for(var n=0;n<3;n++)this._depth[t][n]=e.NULL_VALUE}},{key:\"depthAtLocation\",value:function(t){return t===H.EXTERIOR?0:t===H.INTERIOR?1:e.NULL_VALUE}}]),e}();ri.NULL_VALUE=-1;var si=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"getDepth\",value:function(){return this._depth}},{key:\"getCollapsedEdge\",value:function(){var t=new Array(2).fill(null);return t[0]=this.pts[0],t[1]=this.pts[1],new a(t,Pe.toLineLabel(this._label))}},{key:\"isIsolated\",value:function(){return this._isIsolated}},{key:\"getCoordinates\",value:function(){return this.pts}},{key:\"setIsolated\",value:function(t){this._isIsolated=t}},{key:\"setName\",value:function(t){this._name=t}},{key:\"equals\",value:function(t){if(!(t instanceof a))return!1;var e=t;if(this.pts.length!==e.pts.length)return!1;for(var n=!0,i=!0,r=this.pts.length,s=0;s<this.pts.length;s++)if(this.pts[s].equals2D(e.pts[s])||(n=!1),this.pts[s].equals2D(e.pts[--r])||(i=!1),!n&&!i)return!1;return!0}},{key:\"getCoordinate\",value:function(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){var t=arguments[0];return this.pts[t]}}},{key:\"print\",value:function(t){t.print(\"edge \"+this._name+\": \"),t.print(\"LINESTRING (\");for(var e=0;e<this.pts.length;e++)e>0&&t.print(\",\"),t.print(this.pts[e].x+\" \"+this.pts[e].y);t.print(\")  \"+this._label+\" \"+this._depthDelta)}},{key:\"computeIM\",value:function(t){a.updateIM(this._label,t)}},{key:\"isCollapsed\",value:function(){return!!this._label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))}},{key:\"isClosed\",value:function(){return this.pts[0].equals(this.pts[this.pts.length-1])}},{key:\"getMaximumSegmentIndex\",value:function(){return this.pts.length-1}},{key:\"getDepthDelta\",value:function(){return this._depthDelta}},{key:\"getNumPoints\",value:function(){return this.pts.length}},{key:\"printReverse\",value:function(t){t.print(\"edge \"+this._name+\": \");for(var e=this.pts.length-1;e>=0;e--)t.print(this.pts[e]+\" \");t.println(\"\")}},{key:\"getMonotoneChainEdge\",value:function(){return null===this._mce&&(this._mce=new ii(this)),this._mce}},{key:\"getEnvelope\",value:function(){if(null===this._env){this._env=new U;for(var t=0;t<this.pts.length;t++)this._env.expandToInclude(this.pts[t])}return this._env}},{key:\"addIntersection\",value:function(t,e,n,i){var r=new X(t.getIntersection(i)),s=e,a=t.getEdgeDistance(n,i),o=s+1;if(o<this.pts.length){var u=this.pts[o];r.equals2D(u)&&(s=o,a=0)}this.eiList.add(r,s,a)}},{key:\"toString\",value:function(){var t=new Jt;t.append(\"edge \"+this._name+\": \"),t.append(\"LINESTRING (\");for(var e=0;e<this.pts.length;e++)e>0&&t.append(\",\"),t.append(this.pts[e].x+\" \"+this.pts[e].y);return t.append(\")  \"+this._label+\" \"+this._depthDelta),t.toString()}},{key:\"isPointwiseEqual\",value:function(t){if(this.pts.length!==t.pts.length)return!1;for(var e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0}},{key:\"setDepthDelta\",value:function(t){this._depthDelta=t}},{key:\"getEdgeIntersectionList\",value:function(){return this.eiList}},{key:\"addIntersections\",value:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)}}],[{key:\"constructor_\",value:function(){if(this.pts=null,this._env=null,this.eiList=new $n(this),this._name=null,this._mce=null,this._isIsolated=!0,this._depth=new ri,this._depthDelta=0,1===arguments.length){var t=arguments[0];a.constructor_.call(this,t,null)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.pts=e,this._label=n}}},{key:\"updateIM\",value:function(){if(!(2===arguments.length&&arguments[1]instanceof ti&&arguments[0]instanceof Pe))return f(r(a),\"updateIM\",this).apply(this,arguments);var t=arguments[0],e=arguments[1];e.setAtLeastIfValid(t.getLocation(0,$.ON),t.getLocation(1,$.ON),1),t.isArea()&&(e.setAtLeastIfValid(t.getLocation(0,$.LEFT),t.getLocation(1,$.LEFT),2),e.setAtLeastIfValid(t.getLocation(0,$.RIGHT),t.getLocation(1,$.RIGHT),2))}}]),a}(qe),ai=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"setWorkingPrecisionModel\",value:function(t){this._workingPrecisionModel=t}},{key:\"insertUniqueEdge\",value:function(t){var n=this._edgeList.findEqualEdge(t);if(null!==n){var i=n.getLabel(),r=t.getLabel();n.isPointwiseEqual(t)||(r=new Pe(t.getLabel())).flip(),i.merge(r);var s=e.depthDelta(r),a=n.getDepthDelta()+s;n.setDepthDelta(a)}else this._edgeList.add(t),t.setDepthDelta(e.depthDelta(t.getLabel()))}},{key:\"buildSubgraphs\",value:function(t,e){for(var n=new yt,i=t.iterator();i.hasNext();){var r=i.next(),s=r.getRightmostCoordinate(),a=new Dn(n).getDepth(s);r.computeDepth(a),r.findResultEdges(),n.add(r),e.add(r.getDirectedEdges(),r.getNodes())}}},{key:\"createSubgraphs\",value:function(t){for(var e=new yt,n=t.getNodes().iterator();n.hasNext();){var i=n.next();if(!i.isVisited()){var r=new _t;r.create(i),e.add(r)}}return on.sort(e,on.reverseOrder()),e}},{key:\"createEmptyResultGeometry\",value:function(){return this._geomFact.createPolygon()}},{key:\"getNoder\",value:function(t){if(null!==this._workingNoder)return this._workingNoder;var e=new Rn,n=new Oe;return n.setPrecisionModel(t),e.setSegmentIntersector(new Jn(n)),e}},{key:\"buffer\",value:function(t,e){var n=this._workingPrecisionModel;null===n&&(n=t.getPrecisionModel()),this._geomFact=t.getFactory();var i=new Pn(n,this._bufParams),r=new zn(t,e,i).getCurves();if(r.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(r,n),this._graph=new $e(new Zn),this._graph.addEdges(this._edgeList.getEdges());var s=this.createSubgraphs(this._graph),a=new tn(this._geomFact);this.buildSubgraphs(s,a);var o=a.getPolygons();return o.size()<=0?this.createEmptyResultGeometry():this._geomFact.buildGeometry(o)}},{key:\"computeNodedEdges\",value:function(t,e){var n=this.getNoder(e);n.computeNodes(t);for(var i=n.getNodedSubstrings().iterator();i.hasNext();){var r=i.next(),s=r.getCoordinates();if(2!==s.length||!s[0].equals2D(s[1])){var a=r.getData(),o=new si(r.getCoordinates(),new Pe(a));this.insertUniqueEdge(o)}}}},{key:\"setNoder\",value:function(t){this._workingNoder=t}}],[{key:\"constructor_\",value:function(){this._bufParams=null,this._workingPrecisionModel=null,this._workingNoder=null,this._geomFact=null,this._graph=null,this._edgeList=new Wn;var t=arguments[0];this._bufParams=t}},{key:\"depthDelta\",value:function(t){var e=t.getLocation(0,$.LEFT),n=t.getLocation(0,$.RIGHT);return e===H.INTERIOR&&n===H.EXTERIOR?1:e===H.EXTERIOR&&n===H.INTERIOR?-1:0}},{key:\"convertSegStrings\",value:function(t){for(var e=new ae,n=new yt;t.hasNext();){var i=t.next(),r=e.createLineString(i.getCoordinates());n.add(r)}return e.buildGeometry(n)}}]),e}(),oi=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"rescale\",value:function(){if(rt(arguments[0],Z))for(var t=arguments[0],e=t.iterator();e.hasNext();){var n=e.next();this.rescale(n.getCoordinates())}else if(arguments[0]instanceof Array){for(var i=arguments[0],r=0;r<i.length;r++)i[r].x=i[r].x/this._scaleFactor+this._offsetX,i[r].y=i[r].y/this._scaleFactor+this._offsetY;2===i.length&&i[0].equals2D(i[1])&&mt.out.println(i)}}},{key:\"scale\",value:function(){if(rt(arguments[0],Z)){for(var t=arguments[0],e=new yt(t.size()),n=t.iterator();n.hasNext();){var i=n.next();e.add(new In(this.scale(i.getCoordinates()),i.getData()))}return e}if(arguments[0]instanceof Array){for(var r=arguments[0],s=new Array(r.length).fill(null),a=0;a<r.length;a++)s[a]=new X(Math.round((r[a].x-this._offsetX)*this._scaleFactor),Math.round((r[a].y-this._offsetY)*this._scaleFactor),r[a].getZ());var o=jt.removeRepeatedPoints(s);return o}}},{key:\"isIntegerPrecision\",value:function(){return 1===this._scaleFactor}},{key:\"getNodedSubstrings\",value:function(){var t=this._noder.getNodedSubstrings();return this._isScaled&&this.rescale(t),t}},{key:\"computeNodes\",value:function(t){var e=t;this._isScaled&&(e=this.scale(t)),this._noder.computeNodes(e)}},{key:\"interfaces_\",get:function(){return[Ln]}}],[{key:\"constructor_\",value:function(){if(this._noder=null,this._scaleFactor=null,this._offsetX=null,this._offsetY=null,this._isScaled=!1,2===arguments.length){var t=arguments[0],n=arguments[1];e.constructor_.call(this,t,n,0,0)}else if(4===arguments.length){var i=arguments[0],r=arguments[1];this._noder=i,this._scaleFactor=r,this._isScaled=!this.isIntegerPrecision()}}}]),e}(),ui=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"checkEndPtVertexIntersections\",value:function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();){var e=t.next(),n=e.getCoordinates();this.checkEndPtVertexIntersections(n[0],this._segStrings),this.checkEndPtVertexIntersections(n[n.length-1],this._segStrings)}else if(2===arguments.length)for(var i=arguments[0],r=arguments[1],s=r.iterator();s.hasNext();)for(var a=s.next(),o=a.getCoordinates(),u=1;u<o.length-1;u++)if(o[u].equals(i))throw new D(\"found endpt/interior pt intersection at index \"+u+\" :pt \"+i)}},{key:\"checkInteriorIntersections\",value:function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();)for(var e=t.next(),n=this._segStrings.iterator();n.hasNext();){var i=n.next();this.checkInteriorIntersections(e,i)}else if(2===arguments.length)for(var r=arguments[0],s=arguments[1],a=r.getCoordinates(),o=s.getCoordinates(),u=0;u<a.length-1;u++)for(var l=0;l<o.length-1;l++)this.checkInteriorIntersections(r,u,s,l);else if(4===arguments.length){var h=arguments[0],c=arguments[1],f=arguments[2],v=arguments[3];if(h===f&&c===v)return null;var g=h.getCoordinates()[c],y=h.getCoordinates()[c+1],d=f.getCoordinates()[v],_=f.getCoordinates()[v+1];if(this._li.computeIntersection(g,y,d,_),this._li.hasIntersection()&&(this._li.isProper()||this.hasInteriorIntersection(this._li,g,y)||this.hasInteriorIntersection(this._li,d,_)))throw new D(\"found non-noded intersection at \"+g+\"-\"+y+\" and \"+d+\"-\"+_)}}},{key:\"checkValid\",value:function(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()}},{key:\"checkCollapses\",value:function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();){var e=t.next();this.checkCollapses(e)}else if(1===arguments.length)for(var n=arguments[0],i=n.getCoordinates(),r=0;r<i.length-2;r++)this.checkCollapse(i[r],i[r+1],i[r+2])}},{key:\"hasInteriorIntersection\",value:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++){var r=t.getIntersection(i);if(!r.equals(e)&&!r.equals(n))return!0}return!1}},{key:\"checkCollapse\",value:function(t,n,i){if(t.equals(i))throw new D(\"found non-noded collapse at \"+e.fact.createLineString([t,n,i]))}}],[{key:\"constructor_\",value:function(){this._li=new Oe,this._segStrings=null;var t=arguments[0];this._segStrings=t}}]),e}();ui.fact=new ae;var li=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"intersectsScaled\",value:function(t,e){var n=Math.min(t.x,e.x),i=Math.max(t.x,e.x),r=Math.min(t.y,e.y),s=Math.max(t.y,e.y),a=this._maxx<n||this._minx>i||this._maxy<r||this._miny>s;if(a)return!1;var o=this.intersectsToleranceSquare(t,e);return G.isTrue(!(a&&o),\"Found bad envelope test\"),o}},{key:\"initCorners\",value:function(t){var e=.5;this._minx=t.x-e,this._maxx=t.x+e,this._miny=t.y-e,this._maxy=t.y+e,this._corner[0]=new X(this._maxx,this._maxy),this._corner[1]=new X(this._minx,this._maxy),this._corner[2]=new X(this._minx,this._miny),this._corner[3]=new X(this._maxx,this._miny)}},{key:\"intersects\",value:function(t,e){return 1===this._scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this._p0Scaled),this.copyScaled(e,this._p1Scaled),this.intersectsScaled(this._p0Scaled,this._p1Scaled))}},{key:\"scale\",value:function(t){return Math.round(t*this._scaleFactor)}},{key:\"getCoordinate\",value:function(){return this._originalPt}},{key:\"copyScaled\",value:function(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)}},{key:\"getSafeEnvelope\",value:function(){if(null===this._safeEnv){var t=e.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new U(this._originalPt.x-t,this._originalPt.x+t,this._originalPt.y-t,this._originalPt.y+t)}return this._safeEnv}},{key:\"intersectsPixelClosure\",value:function(t,e){return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.hasIntersection())))}},{key:\"intersectsToleranceSquare\",value:function(t,e){var n=!1,i=!1;return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.isProper()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.isProper()||(this._li.hasIntersection()&&(n=!0),this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.isProper()||(this._li.hasIntersection()&&(i=!0),this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.isProper()||(!(!n||!i)||(!!t.equals(this._pt)||!!e.equals(this._pt))))))}},{key:\"addSnappedNode\",value:function(t,e){var n=t.getCoordinate(e),i=t.getCoordinate(e+1);return!!this.intersects(n,i)&&(t.addIntersection(this.getCoordinate(),e),!0)}}],[{key:\"constructor_\",value:function(){this._li=null,this._pt=null,this._originalPt=null,this._ptScaled=null,this._p0Scaled=null,this._p1Scaled=null,this._scaleFactor=null,this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,this._corner=new Array(4).fill(null),this._safeEnv=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(this._originalPt=t,this._pt=t,this._scaleFactor=e,this._li=n,e<=0)throw new m(\"Scale factor must be non-zero\");1!==e&&(this._pt=new X(this.scale(t.x),this.scale(t.y)),this._p0Scaled=new X,this._p1Scaled=new X),this.initCorners(this._pt)}}]),e}();li.SAFE_ENV_EXPANSION_FACTOR=.75;var hi=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"select\",value:function(){if(1===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];t.getLineSegment(e,this.selectedSegment),this.select(this.selectedSegment)}}}],[{key:\"constructor_\",value:function(){this.selectedSegment=new En}}]),e}(),ci=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"snap\",value:function(){if(1===arguments.length){var e=arguments[0];return this.snap(e,null,-1)}if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2],a=i.getSafeEnvelope(),o=new fi(i,r,s);return this._index.query(a,new(function(){function e(){t(this,e)}return n(e,[{key:\"interfaces_\",get:function(){return[hn]}},{key:\"visitItem\",value:function(t){t.select(a,o)}}]),e}())),o.isNodeAdded()}}}],[{key:\"constructor_\",value:function(){this._index=null;var t=arguments[0];this._index=t}}]),e}(),fi=function(e){i(a,e);var s=c(a);function a(){var e;return t(this,a),e=s.call(this),a.constructor_.apply(l(e),arguments),e}return n(a,[{key:\"isNodeAdded\",value:function(){return this._isNodeAdded}},{key:\"select\",value:function(){if(!(2===arguments.length&&Number.isInteger(arguments[1])&&arguments[0]instanceof Tn))return f(r(a.prototype),\"select\",this).apply(this,arguments);var t=arguments[0],e=arguments[1],n=t.getContext();if(this._parentEdge===n&&(e===this._hotPixelVertexIndex||e+1===this._hotPixelVertexIndex))return null;this._isNodeAdded|=this._hotPixel.addSnappedNode(n,e)}}],[{key:\"constructor_\",value:function(){this._hotPixel=null,this._parentEdge=null,this._hotPixelVertexIndex=null,this._isNodeAdded=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this._hotPixel=t,this._parentEdge=e,this._hotPixelVertexIndex=n}}]),a}(hi);ci.HotPixelSnapAction=fi;var vi=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"processIntersections\",value:function(t,e,n,i){if(t===n&&e===i)return null;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],a=n.getCoordinates()[i],o=n.getCoordinates()[i+1];if(this._li.computeIntersection(r,s,a,o),this._li.hasIntersection()&&this._li.isInteriorIntersection()){for(var u=0;u<this._li.getIntersectionNum();u++)this._interiorIntersections.add(this._li.getIntersection(u));t.addIntersections(this._li,e,0),n.addIntersections(this._li,i,1)}}},{key:\"isDone\",value:function(){return!1}},{key:\"getInteriorIntersections\",value:function(){return this._interiorIntersections}},{key:\"interfaces_\",get:function(){return[Kn]}}],[{key:\"constructor_\",value:function(){this._li=null,this._interiorIntersections=null;var t=arguments[0];this._li=t,this._interiorIntersections=new yt}}]),e}(),gi=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"checkCorrectness\",value:function(t){var e=In.getNodedSubstrings(t),n=new ui(e);try{n.checkValid()}catch(t){if(!(t instanceof p))throw t;t.printStackTrace()}}},{key:\"getNodedSubstrings\",value:function(){return In.getNodedSubstrings(this._nodedSegStrings)}},{key:\"snapRound\",value:function(t,e){var n=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(n),this.computeVertexSnaps(t)}},{key:\"findInteriorIntersections\",value:function(t,e){var n=new vi(e);return this._noder.setSegmentIntersector(n),this._noder.computeNodes(t),n.getInteriorIntersections()}},{key:\"computeVertexSnaps\",value:function(){if(rt(arguments[0],Z))for(var t=arguments[0],e=t.iterator();e.hasNext();){var n=e.next();this.computeVertexSnaps(n)}else if(arguments[0]instanceof In)for(var i=arguments[0],r=i.getCoordinates(),s=0;s<r.length;s++){var a=new li(r[s],this._scaleFactor,this._li),o=this._pointSnapper.snap(a,i,s);o&&i.addIntersection(r[s],s)}}},{key:\"computeNodes\",value:function(t){this._nodedSegStrings=t,this._noder=new Rn,this._pointSnapper=new ci(this._noder.getIndex()),this.snapRound(t,this._li)}},{key:\"computeIntersectionSnaps\",value:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=new li(n,this._scaleFactor,this._li);this._pointSnapper.snap(i)}}},{key:\"interfaces_\",get:function(){return[Ln]}}],[{key:\"constructor_\",value:function(){this._pm=null,this._li=null,this._scaleFactor=null,this._noder=null,this._pointSnapper=null,this._nodedSegStrings=null;var t=arguments[0];this._pm=t,this._li=new Oe,this._li.setPrecisionModel(t),this._scaleFactor=t.getScale()}}]),e}(),yi=function(){function e(){t(this,e),e.constructor_.apply(this,arguments)}return n(e,[{key:\"bufferFixedPrecision\",value:function(t){var e=new oi(new gi(new ie(1)),t.getScale()),n=new ai(this._bufParams);n.setWorkingPrecisionModel(t),n.setNoder(e),this._resultGeometry=n.buffer(this._argGeom,this._distance)}},{key:\"bufferReducedPrecision\",value:function(){if(0===arguments.length){for(var t=e.MAX_PRECISION_DIGITS;t>=0;t--){try{this.bufferReducedPrecision(t)}catch(t){if(!(t instanceof vt))throw t;this._saveException=t}if(null!==this._resultGeometry)return null}throw this._saveException}if(1===arguments.length){var n=arguments[0],i=e.precisionScaleFactor(this._argGeom,this._distance,n),r=new ie(i);this.bufferFixedPrecision(r)}}},{key:\"computeGeometry\",value:function(){if(this.bufferOriginalPrecision(),null!==this._resultGeometry)return null;var t=this._argGeom.getFactory().getPrecisionModel();t.getType()===ie.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()}},{key:\"setQuadrantSegments\",value:function(t){this._bufParams.setQuadrantSegments(t)}},{key:\"bufferOriginalPrecision\",value:function(){try{var t=new ai(this._bufParams);this._resultGeometry=t.buffer(this._argGeom,this._distance)}catch(t){if(!(t instanceof D))throw t;this._saveException=t}}},{key:\"getResultGeometry\",value:function(t){return this._distance=t,this.computeGeometry(),this._resultGeometry}},{key:\"setEndCapStyle\",value:function(t){this._bufParams.setEndCapStyle(t)}}],[{key:\"constructor_\",value:function(){if(this._argGeom=null,this._distance=null,this._bufParams=new _,this._resultGeometry=null,this._saveException=null,1===arguments.length){var t=arguments[0];this._argGeom=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this._argGeom=e,this._bufParams=n}}},{key:\"bufferOp\",value:function(){if(2===arguments.length){var t=arguments[0],n=arguments[1],i=new e(t),r=i.getResultGeometry(n);return r}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof V&&\"number\"==typeof arguments[1]){var s=arguments[0],a=arguments[1],o=arguments[2],u=new e(s);u.setQuadrantSegments(o);var l=u.getResultGeometry(a);return l}if(arguments[2]instanceof _&&arguments[0]instanceof V&&\"number\"==typeof arguments[1]){var h=arguments[0],c=arguments[1],f=arguments[2],v=new e(h,f),g=v.getResultGeometry(c);return g}}else if(4===arguments.length){var y=arguments[0],d=arguments[1],p=arguments[2],m=arguments[3],k=new e(y);k.setQuadrantSegments(p),k.setEndCapStyle(m);var x=k.getResultGeometry(d);return x}}},{key:\"precisionScaleFactor\",value:function(t,e,n){var i=t.getEnvelopeInternal(),r=kt.max(Math.abs(i.getMaxX()),Math.abs(i.getMaxY()),Math.abs(i.getMinX()),Math.abs(i.getMinY()))+2*(e>0?e:0),s=n-Math.trunc(Math.log(r)/Math.log(10)+1);return Math.pow(10,s)}}]),e}();yi.CAP_ROUND=_.CAP_ROUND,yi.CAP_BUTT=_.CAP_FLAT,yi.CAP_FLAT=_.CAP_FLAT,yi.CAP_SQUARE=_.CAP_SQUARE,yi.MAX_PRECISION_DIGITS=12;var di=[\"Point\",\"MultiPoint\",\"LineString\",\"MultiLineString\",\"Polygon\",\"MultiPolygon\"],_i=function(){function e(n){t(this,e),this.geometryFactory=n||new ae}return n(e,[{key:\"read\",value:function(t){var e,n=(e=\"string\"==typeof t?JSON.parse(t):t).type;if(!pi[n])throw new Error(\"Unknown GeoJSON type: \"+e.type);return-1!==di.indexOf(n)?pi[n].call(this,e.coordinates):\"GeometryCollection\"===n?pi[n].call(this,e.geometries):pi[n].call(this,e)}},{key:\"write\",value:function(t){var e=t.getGeometryType();if(!mi[e])throw new Error(\"Geometry is not supported\");return mi[e].call(this,t)}}]),e}(),pi={Feature:function(t){var e={};for(var n in t)e[n]=t[n];if(t.geometry){var i=t.geometry.type;if(!pi[i])throw new Error(\"Unknown GeoJSON type: \"+t.type);e.geometry=this.read(t.geometry)}return t.bbox&&(e.bbox=pi.bbox.call(this,t.bbox)),e},FeatureCollection:function(t){var e={};if(t.features){e.features=[];for(var n=0;n<t.features.length;++n)e.features.push(this.read(t.features[n]))}return t.bbox&&(e.bbox=this.parse.bbox.call(this,t.bbox)),e},coordinates:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(o(X,v(i)))}return e},bbox:function(t){return this.geometryFactory.createLinearRing([new X(t[0],t[1]),new X(t[2],t[1]),new X(t[2],t[3]),new X(t[0],t[3]),new X(t[0],t[1])])},Point:function(t){var e=o(X,v(t));return this.geometryFactory.createPoint(e)},MultiPoint:function(t){for(var e=[],n=0;n<t.length;++n)e.push(pi.Point.call(this,t[n]));return this.geometryFactory.createMultiPoint(e)},LineString:function(t){var e=pi.coordinates.call(this,t);return this.geometryFactory.createLineString(e)},MultiLineString:function(t){for(var e=[],n=0;n<t.length;++n)e.push(pi.LineString.call(this,t[n]));return this.geometryFactory.createMultiLineString(e)},Polygon:function(t){for(var e=pi.coordinates.call(this,t[0]),n=this.geometryFactory.createLinearRing(e),i=[],r=1;r<t.length;++r){var s=t[r],a=pi.coordinates.call(this,s),o=this.geometryFactory.createLinearRing(a);i.push(o)}return this.geometryFactory.createPolygon(n,i)},MultiPolygon:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(pi.Polygon.call(this,i))}return this.geometryFactory.createMultiPolygon(e)},GeometryCollection:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(this.read(i))}return this.geometryFactory.createGeometryCollection(e)}},mi={coordinate:function(t){var e=[t.x,t.y];return t.z&&e.push(t.z),t.m&&e.push(t.m),e},Point:function(t){return{type:\"Point\",coordinates:mi.coordinate.call(this,t.getCoordinate())}},MultiPoint:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=mi.Point.call(this,i);e.push(r.coordinates)}return{type:\"MultiPoint\",coordinates:e}},LineString:function(t){for(var e=[],n=t.getCoordinates(),i=0;i<n.length;++i){var r=n[i];e.push(mi.coordinate.call(this,r))}return{type:\"LineString\",coordinates:e}},MultiLineString:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=mi.LineString.call(this,i);e.push(r.coordinates)}return{type:\"MultiLineString\",coordinates:e}},Polygon:function(t){var e=[],n=mi.LineString.call(this,t._shell);e.push(n.coordinates);for(var i=0;i<t._holes.length;++i){var r=t._holes[i],s=mi.LineString.call(this,r);e.push(s.coordinates)}return{type:\"Polygon\",coordinates:e}},MultiPolygon:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=mi.Polygon.call(this,i);e.push(r.coordinates)}return{type:\"MultiPolygon\",coordinates:e}},GeometryCollection:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=i.getGeometryType();e.push(mi[r].call(this,i))}return{type:\"GeometryCollection\",geometries:e}}};return{BufferOp:yi,GeoJSONReader:function(){function e(n){t(this,e),this.parser=new _i(n||new ae)}return n(e,[{key:\"read\",value:function(t){return this.parser.read(t)}}]),e}(),GeoJSONWriter:function(){function e(){t(this,e),this.parser=new _i(this.geometryFactory)}return n(e,[{key:\"write\",value:function(t){return this.parser.write(t)}}]),e}()}}));\n//# sourceMappingURL=jsts.min.js.map\n", "!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n", "\nexport default class TinyQueue {\n    constructor(data = [], compare = defaultCompare) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let left = (pos << 1) + 1;\n            let best = data[left];\n            const right = left + 1;\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n", "module.exports = function pointInPolygonFlat (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = (end-start)/2;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[start+i*2+0], yi = vs[start+i*2+1];\n        var xj = vs[start+j*2+0], yj = vs[start+j*2+1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n", "// ray-casting algorithm based on\n// https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\nmodule.exports = function pointInPolygonNested (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = end - start;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[i+start][0], yi = vs[i+start][1];\n        var xj = vs[j+start][0], yj = vs[j+start][1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n", "var pointInPolygonFlat = require('./flat.js')\nvar pointInPolygonNested = require('./nested.js')\n\nmodule.exports = function pointInPolygon (point, vs, start, end) {\n    if (vs.length > 0 && Array.isArray(vs[0])) {\n        return pointInPolygonNested(point, vs, start, end);\n    } else {\n        return pointInPolygonFlat(point, vs, start, end);\n    }\n}\nmodule.exports.nested = pointInPolygonNested\nmodule.exports.flat = pointInPolygonFlat\n", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e((t=t||self).predicates={})}(this,function(t){\"use strict\";const e=134217729,n=33306690738754706e-32;function r(t,e,n,r,o){let f,i,u,c,s=e[0],a=r[0],d=0,l=0;a>s==a>-s?(f=s,s=e[++d]):(f=a,a=r[++l]);let p=0;if(d<t&&l<n)for(a>s==a>-s?(u=f-((i=s+f)-s),s=e[++d]):(u=f-((i=a+f)-a),a=r[++l]),f=i,0!==u&&(o[p++]=u);d<t&&l<n;)a>s==a>-s?(u=f-((i=f+s)-(c=i-f))+(s-c),s=e[++d]):(u=f-((i=f+a)-(c=i-f))+(a-c),a=r[++l]),f=i,0!==u&&(o[p++]=u);for(;d<t;)u=f-((i=f+s)-(c=i-f))+(s-c),s=e[++d],f=i,0!==u&&(o[p++]=u);for(;l<n;)u=f-((i=f+a)-(c=i-f))+(a-c),a=r[++l],f=i,0!==u&&(o[p++]=u);return 0===f&&0!==p||(o[p++]=f),p}function o(t){return new Float64Array(t)}const f=33306690738754716e-32,i=22204460492503146e-32,u=11093356479670487e-47,c=o(4),s=o(8),a=o(12),d=o(16),l=o(4);t.orient2d=function(t,o,p,b,y,h){const M=(o-h)*(p-y),x=(t-y)*(b-h),j=M-x;if(0===M||0===x||M>0!=x>0)return j;const m=Math.abs(M+x);return Math.abs(j)>=f*m?j:-function(t,o,f,p,b,y,h){let M,x,j,m,_,v,w,A,F,O,P,g,k,q,z,B,C,D;const E=t-b,G=f-b,H=o-y,I=p-y;_=(z=(A=E-(w=(v=e*E)-(v-E)))*(O=I-(F=(v=e*I)-(v-I)))-((q=E*I)-w*F-A*F-w*O))-(P=z-(C=(A=H-(w=(v=e*H)-(v-H)))*(O=G-(F=(v=e*G)-(v-G)))-((B=H*G)-w*F-A*F-w*O))),c[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),c[1]=k-(P+_)+(_-B),_=(D=g+P)-g,c[2]=g-(D-_)+(P-_),c[3]=D;let J=function(t,e){let n=e[0];for(let r=1;r<t;r++)n+=e[r];return n}(4,c),K=i*h;if(J>=K||-J>=K)return J;if(M=t-(E+(_=t-E))+(_-b),j=f-(G+(_=f-G))+(_-b),x=o-(H+(_=o-H))+(_-y),m=p-(I+(_=p-I))+(_-y),0===M&&0===x&&0===j&&0===m)return J;if(K=u*h+n*Math.abs(J),(J+=E*m+I*M-(H*j+G*x))>=K||-J>=K)return J;_=(z=(A=M-(w=(v=e*M)-(v-M)))*(O=I-(F=(v=e*I)-(v-I)))-((q=M*I)-w*F-A*F-w*O))-(P=z-(C=(A=x-(w=(v=e*x)-(v-x)))*(O=G-(F=(v=e*G)-(v-G)))-((B=x*G)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const L=r(4,c,4,l,s);_=(z=(A=E-(w=(v=e*E)-(v-E)))*(O=m-(F=(v=e*m)-(v-m)))-((q=E*m)-w*F-A*F-w*O))-(P=z-(C=(A=H-(w=(v=e*H)-(v-H)))*(O=j-(F=(v=e*j)-(v-j)))-((B=H*j)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const N=r(L,s,4,l,a);_=(z=(A=M-(w=(v=e*M)-(v-M)))*(O=m-(F=(v=e*m)-(v-m)))-((q=M*m)-w*F-A*F-w*O))-(P=z-(C=(A=x-(w=(v=e*x)-(v-x)))*(O=j-(F=(v=e*j)-(v-j)))-((B=x*j)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const Q=r(N,a,4,l,d);return d[Q-1]}(t,o,p,b,y,h,m)},t.orient2dfast=function(t,e,n,r,o,f){return(e-f)*(n-o)-(t-o)*(r-f)},Object.defineProperty(t,\"__esModule\",{value:!0})});\n", "'use strict';\n\nvar RBush = require('rbush');\nvar Queue = require('tinyqueue');\nvar pointInPolygon = require('point-in-polygon');\nvar orient = require('robust-predicates/umd/orient2d.min.js').orient2d;\n\n// Fix for require issue in webpack https://github.com/mapbox/concaveman/issues/18\nif (Queue.default) {\n    Queue = Queue.default;\n}\n\nmodule.exports = concaveman;\nmodule.exports.default = concaveman;\n\nfunction concaveman(points, concavity, lengthThreshold) {\n    // a relative measure of concavity; higher value means simpler hull\n    concavity = Math.max(0, concavity === undefined ? 2 : concavity);\n\n    // when a segment goes below this length threshold, it won't be drilled down further\n    lengthThreshold = lengthThreshold || 0;\n\n    // start with a convex hull of the points\n    var hull = fastConvexHull(points);\n\n    // index the points with an R-tree\n    var tree = new RBush(16);\n    tree.toBBox = function (a) {\n        return {\n            minX: a[0],\n            minY: a[1],\n            maxX: a[0],\n            maxY: a[1]\n        };\n    };\n    tree.compareMinX = function (a, b) { return a[0] - b[0]; };\n    tree.compareMinY = function (a, b) { return a[1] - b[1]; };\n\n    tree.load(points);\n\n    // turn the convex hull into a linked list and populate the initial edge queue with the nodes\n    var queue = [];\n    for (var i = 0, last; i < hull.length; i++) {\n        var p = hull[i];\n        tree.remove(p);\n        last = insertNode(p, last);\n        queue.push(last);\n    }\n\n    // index the segments with an R-tree (for intersection checks)\n    var segTree = new RBush(16);\n    for (i = 0; i < queue.length; i++) segTree.insert(updateBBox(queue[i]));\n\n    var sqConcavity = concavity * concavity;\n    var sqLenThreshold = lengthThreshold * lengthThreshold;\n\n    // process edges one by one\n    while (queue.length) {\n        var node = queue.shift();\n        var a = node.p;\n        var b = node.next.p;\n\n        // skip the edge if it's already short enough\n        var sqLen = getSqDist(a, b);\n        if (sqLen < sqLenThreshold) continue;\n\n        var maxSqLen = sqLen / sqConcavity;\n\n        // find the best connection point for the current edge to flex inward to\n        p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree);\n\n        // if we found a connection and it satisfies our concavity measure\n        if (p && Math.min(getSqDist(p, a), getSqDist(p, b)) <= maxSqLen) {\n            // connect the edge endpoints through this point and add 2 new edges to the queue\n            queue.push(node);\n            queue.push(insertNode(p, node));\n\n            // update point and segment indexes\n            tree.remove(p);\n            segTree.remove(node);\n            segTree.insert(updateBBox(node));\n            segTree.insert(updateBBox(node.next));\n        }\n    }\n\n    // convert the resulting hull linked list to an array of points\n    node = last;\n    var concave = [];\n    do {\n        concave.push(node.p);\n        node = node.next;\n    } while (node !== last);\n\n    concave.push(node.p);\n\n    return concave;\n}\n\nfunction findCandidate(tree, a, b, c, d, maxDist, segTree) {\n    var queue = new Queue([], compareDist);\n    var node = tree.data;\n\n    // search through the point R-tree with a depth-first search using a priority queue\n    // in the order of distance to the edge (b, c)\n    while (node) {\n        for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);\n            if (dist > maxDist) continue; // skip the node if it's farther than we ever need\n\n            queue.push({\n                node: child,\n                dist: dist\n            });\n        }\n\n        while (queue.length && !queue.peek().node.children) {\n            var item = queue.pop();\n            var p = item.node;\n\n            // skip all points that are as close to adjacent edges (a,b) and (c,d),\n            // and points that would introduce self-intersections when connected\n            var d0 = sqSegDist(p, a, b);\n            var d1 = sqSegDist(p, c, d);\n            if (item.dist < d0 && item.dist < d1 &&\n                noIntersections(b, p, segTree) &&\n                noIntersections(c, p, segTree)) return p;\n        }\n\n        node = queue.pop();\n        if (node) node = node.node;\n    }\n\n    return null;\n}\n\nfunction compareDist(a, b) {\n    return a.dist - b.dist;\n}\n\n// square distance from a segment bounding box to the given one\nfunction sqSegBoxDist(a, b, bbox) {\n    if (inside(a, bbox) || inside(b, bbox)) return 0;\n    var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);\n    if (d1 === 0) return 0;\n    var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);\n    if (d2 === 0) return 0;\n    var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);\n    if (d3 === 0) return 0;\n    var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);\n    if (d4 === 0) return 0;\n    return Math.min(d1, d2, d3, d4);\n}\n\nfunction inside(a, bbox) {\n    return a[0] >= bbox.minX &&\n           a[0] <= bbox.maxX &&\n           a[1] >= bbox.minY &&\n           a[1] <= bbox.maxY;\n}\n\n// check if the edge (a,b) doesn't intersect any other edges\nfunction noIntersections(a, b, segTree) {\n    var minX = Math.min(a[0], b[0]);\n    var minY = Math.min(a[1], b[1]);\n    var maxX = Math.max(a[0], b[0]);\n    var maxY = Math.max(a[1], b[1]);\n\n    var edges = segTree.search({minX: minX, minY: minY, maxX: maxX, maxY: maxY});\n    for (var i = 0; i < edges.length; i++) {\n        if (intersects(edges[i].p, edges[i].next.p, a, b)) return false;\n    }\n    return true;\n}\n\nfunction cross(p1, p2, p3) {\n    return orient(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\n\n// check if the edges (p1,q1) and (p2,q2) intersect\nfunction intersects(p1, q1, p2, q2) {\n    return p1 !== q2 && q1 !== p2 &&\n        cross(p1, q1, p2) > 0 !== cross(p1, q1, q2) > 0 &&\n        cross(p2, q2, p1) > 0 !== cross(p2, q2, q1) > 0;\n}\n\n// update the bounding box of a node's edge\nfunction updateBBox(node) {\n    var p1 = node.p;\n    var p2 = node.next.p;\n    node.minX = Math.min(p1[0], p2[0]);\n    node.minY = Math.min(p1[1], p2[1]);\n    node.maxX = Math.max(p1[0], p2[0]);\n    node.maxY = Math.max(p1[1], p2[1]);\n    return node;\n}\n\n// speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points\nfunction fastConvexHull(points) {\n    var left = points[0];\n    var top = points[0];\n    var right = points[0];\n    var bottom = points[0];\n\n    // find the leftmost, rightmost, topmost and bottommost points\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        if (p[0] < left[0]) left = p;\n        if (p[0] > right[0]) right = p;\n        if (p[1] < top[1]) top = p;\n        if (p[1] > bottom[1]) bottom = p;\n    }\n\n    // filter out points that are inside the resulting quadrilateral\n    var cull = [left, top, right, bottom];\n    var filtered = cull.slice();\n    for (i = 0; i < points.length; i++) {\n        if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);\n    }\n\n    // get convex hull around the filtered points\n    return convexHull(filtered);\n}\n\n// create a new node in a doubly linked list\nfunction insertNode(p, prev) {\n    var node = {\n        p: p,\n        prev: null,\n        next: null,\n        minX: 0,\n        minY: 0,\n        maxX: 0,\n        maxY: 0\n    };\n\n    if (!prev) {\n        node.prev = node;\n        node.next = node;\n\n    } else {\n        node.next = prev.next;\n        node.prev = prev;\n        prev.next.prev = node;\n        prev.next = node;\n    }\n    return node;\n}\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction sqSegDist(p, p1, p2) {\n\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n\n// segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday\nfunction sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var ux = x1 - x0;\n    var uy = y1 - y0;\n    var vx = x3 - x2;\n    var vy = y3 - y2;\n    var wx = x0 - x2;\n    var wy = y0 - y2;\n    var a = ux * ux + uy * uy;\n    var b = ux * vx + uy * vy;\n    var c = vx * vx + vy * vy;\n    var d = ux * wx + uy * wy;\n    var e = vx * wx + vy * wy;\n    var D = a * c - b * b;\n\n    var sc, sN, tc, tN;\n    var sD = D;\n    var tD = D;\n\n    if (D === 0) {\n        sN = 0;\n        sD = 1;\n        tN = e;\n        tD = c;\n    } else {\n        sN = b * e - c * d;\n        tN = a * e - b * d;\n        if (sN < 0) {\n            sN = 0;\n            tN = e;\n            tD = c;\n        } else if (sN > sD) {\n            sN = sD;\n            tN = e + b;\n            tD = c;\n        }\n    }\n\n    if (tN < 0.0) {\n        tN = 0.0;\n        if (-d < 0.0) sN = 0.0;\n        else if (-d > a) sN = sD;\n        else {\n            sN = -d;\n            sD = a;\n        }\n    } else if (tN > tD) {\n        tN = tD;\n        if ((-d + b) < 0.0) sN = 0;\n        else if (-d + b > a) sN = sD;\n        else {\n            sN = -d + b;\n            sD = a;\n        }\n    }\n\n    sc = sN === 0 ? 0 : sN / sD;\n    tc = tN === 0 ? 0 : tN / tD;\n\n    var cx = (1 - sc) * x0 + sc * x1;\n    var cy = (1 - sc) * y0 + sc * y1;\n    var cx2 = (1 - tc) * x2 + tc * x3;\n    var cy2 = (1 - tc) * y2 + tc * y3;\n    var dx = cx2 - cx;\n    var dy = cy2 - cy;\n\n    return dx * dx + dy * dy;\n}\n\nfunction compareByX(a, b) {\n    return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\n}\n\nfunction convexHull(points) {\n    points.sort(compareByX);\n\n    var lower = [];\n    for (var i = 0; i < points.length; i++) {\n        while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {\n            lower.pop();\n        }\n        lower.push(points[i]);\n    }\n\n    var upper = [];\n    for (var ii = points.length - 1; ii >= 0; ii--) {\n        while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[ii]) <= 0) {\n            upper.pop();\n        }\n        upper.push(points[ii]);\n    }\n\n    upper.pop();\n    lower.pop();\n    return lower.concat(upper);\n}\n", "module.exports = {\n\t/**\n\t * Euclidean distance\n\t */\n\teudist(v1,v2,sqrt) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += d*d;\n\t\t}\n\t\t// Square root not really needed\n\t\treturn sqrt? Math.sqrt(sum) : sum;\n\t},\n\n\tmandist(v1,v2,sqrt) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tsum += Math.abs((v1[i]||0) - (v2[i]||0));\n\t\t}\n\n\t\t// Square root not really needed\n\t\treturn sqrt? Math.sqrt(sum) : sum;\n\t},\n\n\t/**\n\t * Unidimensional distance\n\t */\n\tdist(v1,v2,sqrt) {\n\t\tvar d = Math.abs(v1-v2);\n\t\treturn sqrt? d : d*d;\n\t}\n\n}\n", "const\n\tDistance = require(\"./distance.js\"),\n\teudist = Distance.eudist,\n\tdist = Distance.dist;\n\nmodule.exports = {\n\tkmrand(data,k) {\n\t\tvar map = {}, ks = [], t = k<<2;\n\t\tvar len = data.length;\n\t\tvar multi = data[0].length>0;\n\n\t\twhile(ks.length<k && (t--)>0) {\n\t\t\tlet d = data[Math.floor(Math.random()*len)];\n\t\t\tlet key = multi? d.join(\"_\") : `${d}`;\n\t\t\tif(!map[key]) {\n\t\t\t\tmap[key] = true;\n\t\t\t\tks.push(d);\n\t\t\t}\n\t\t}\n\n\t\tif(ks.length<k) throw new Error(\"Error initializating clusters\");\n\t\telse return ks;\n\t},\n\n\t/**\n\t * K-means++ initial centroid selection\n\t */\n\tkmpp(data,k) {\n\t\tvar distance = data[0].length? eudist : dist;\n\t\tvar ks = [], len = data.length;\n\t\tvar multi = data[0].length>0;\n\t\tvar map = {};\n\n\t\t// First random centroid\n\t\tvar c = data[Math.floor(Math.random()*len)];\n\t\tvar key = multi? c.join(\"_\") : `${c}`;\n\t\tks.push(c);\n\t\tmap[key] = true;\n\n\t\t// Retrieve next centroids\n\t\twhile(ks.length<k) {\n\t\t\t// Min Distances between current centroids and data points\n\t\t\tlet dists = [], lk = ks.length;\n\t\t\tlet dsum = 0, prs = [];\n\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet min = Infinity;\n\t\t\t\tfor(let j=0;j<lk;j++) {\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\n\t\t\t\t\tif(dist<=min) min = dist;\n\t\t\t\t}\n\t\t\t\tdists[i] = min;\n\t\t\t}\n\n\t\t\t// Sum all min distances\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tdsum += dists[i]\n\t\t\t}\n\n\t\t\t// Probabilities and cummulative prob (cumsum)\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\n\t\t\t}\n\n\t\t\t// Sort Probabilities\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\n\n\t\t\t// Cummulative Probabilities\n\t\t\tprs[0].cs = prs[0].pr;\n\t\t\tfor(let i=1;i<len;i++) {\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\n\t\t\t}\n\n\t\t\t// Randomize\n\t\t\tlet rnd = Math.random();\n\n\t\t\t// Gets only the items whose cumsum >= rnd\n\t\t\tlet idx = 0;\n\t\t\twhile(idx<len-1 && prs[idx++].cs<rnd);\n\t\t\tks.push(prs[idx-1].v);\n\t\t\t/*\n\t\t\tlet done = false;\n\t\t\twhile(!done) {\n\t\t\t\t// this is our new centroid\n\t\t\t\tc = prs[idx-1].v\n\t\t\t\tkey = multi? c.join(\"_\") : `${c}`;\n\t\t\t\tif(!map[key]) {\n\t\t\t\t\tmap[key] = true;\n\t\t\t\t\tks.push(c);\n\t\t\t\t\tdone = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tidx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t}\n\n\t\treturn ks;\n\t}\n\n}\n", "/*jshint esversion: 6 */\n\nconst\n\tDistance = require(\"./distance.js\"),\n\tClusterInit = require(\"./kinit.js\"),\n\teudist = Distance.eudist,\n\tmandist = Distance.mandist,\n\tdist = Distance.dist,\n\tkmrand = ClusterInit.kmrand,\n\tkmpp = ClusterInit.kmpp;\n\nconst MAX = 10000;\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit) {\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\n\tvar count = [];\n\n\tif(!initial) {\n\t\tlet idxs = {};\n\t\twhile(ks.length<k) {\n\t\t\tlet idx = Math.floor(Math.random()*len);\n\t\t\tif(!idxs[idx]) {\n\t\t\t\tidxs[idx] = true;\n\t\t\t\tks.push(data[idx]);\n\t\t\t}\n\t\t}\n\t}\n\telse if(initial==\"kmrand\") {\n\t\tks = kmrand(data,k);\n\t}\n\telse if(initial==\"kmpp\") {\n\t\tks = kmpp(data,k);\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// Reset k count\n\t\tinit(k,0,count);\n\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Multidimensional or unidimensional\n\t\t\t\tvar dist = multi? eudist(data[i],ks[j]) : Math.abs(data[i]-ks[j]);\n\t\t\t\tif(dist<=min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\n\t\t\t\t}\n\n\t\t\t\t// Find if centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i];\n\t\t\t\tsum[idx] += data[i];\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\n\t\t\t}\n\t\t\t// Find if centroids have moved\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tif(old[j]!=ks[j]) {\n\t\t\t\t\tconv = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n", "'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n", "import {\n  BBox,\n  Feature,\n  FeatureCollection,\n  Geometry,\n  GeometryCollection,\n  GeometryObject,\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon,\n  Position,\n  GeoJsonProperties,\n} from \"geojson\";\n\nimport { Id } from \"./lib/geojson.js\";\nexport * from \"./lib/geojson.js\";\n\n// TurfJS Combined Types\nexport type Coord = Feature<Point> | Point | Position;\n\n// TurfJS String Types\nexport type Units =\n  | \"meters\"\n  | \"metres\"\n  | \"millimeters\"\n  | \"millimetres\"\n  | \"centimeters\"\n  | \"centimetres\"\n  | \"kilometers\"\n  | \"kilometres\"\n  | \"miles\"\n  | \"nauticalmiles\"\n  | \"inches\"\n  | \"yards\"\n  | \"feet\"\n  | \"radians\"\n  | \"degrees\";\nexport type AreaUnits =\n  | Exclude<Units, \"radians\" | \"degrees\">\n  | \"acres\"\n  | \"hectares\";\nexport type Grid = \"point\" | \"square\" | \"hex\" | \"triangle\";\nexport type Corners = \"sw\" | \"se\" | \"nw\" | \"ne\" | \"center\" | \"centroid\";\n\nexport type Lines = LineString | MultiLineString | Polygon | MultiPolygon;\nexport type AllGeoJSON =\n  | Feature\n  | FeatureCollection\n  | Geometry\n  | GeometryCollection;\n\n/**\n * @module helpers\n */\n\n/**\n * The Earth radius in kilometers. Used by Turf modules that model the Earth as a sphere. The {@link https://en.wikipedia.org/wiki/Earth_radius#Arithmetic_mean_radius mean radius} was selected because it is {@link https://rosettacode.org/wiki/Haversine_formula#:~:text=This%20value%20is%20recommended recommended } by the Haversine formula (used by turf/distance) to reduce error.\n * @memberof helpers\n * @type {number}\n */\nexport const earthRadius = 6371008.8;\n\n/**\n * Unit of measurement factors based on earthRadius.\n *\n * Keys are the name of the unit, values are the number of that unit in a single radian\n *\n * @memberof helpers\n * @type {Object}\n */\nexport const factors: Record<Units, number> = {\n  centimeters: earthRadius * 100,\n  centimetres: earthRadius * 100,\n  degrees: 360 / (2 * Math.PI),\n  feet: earthRadius * 3.28084,\n  inches: earthRadius * 39.37,\n  kilometers: earthRadius / 1000,\n  kilometres: earthRadius / 1000,\n  meters: earthRadius,\n  metres: earthRadius,\n  miles: earthRadius / 1609.344,\n  millimeters: earthRadius * 1000,\n  millimetres: earthRadius * 1000,\n  nauticalmiles: earthRadius / 1852,\n  radians: 1,\n  yards: earthRadius * 1.0936,\n};\n\n/**\n\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport const areaFactors: Record<AreaUnits, number> = {\n  acres: 0.000247105,\n  centimeters: 10000,\n  centimetres: 10000,\n  feet: 10.763910417,\n  hectares: 0.0001,\n  inches: 1550.003100006,\n  kilometers: 0.000001,\n  kilometres: 0.000001,\n  meters: 1,\n  metres: 1,\n  miles: 3.86e-7,\n  nauticalmiles: 2.9155334959812285e-7,\n  millimeters: 1000000,\n  millimetres: 1000000,\n  yards: 1.195990046,\n};\n\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature<\n  G extends GeometryObject = Geometry,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  geom: G | null,\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<G, P> {\n  const feat: any = { type: \"Feature\" };\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(\n  type:\n    | \"Point\"\n    | \"LineString\"\n    | \"Polygon\"\n    | \"MultiPoint\"\n    | \"MultiLineString\"\n    | \"MultiPolygon\",\n  coordinates: any[],\n  _options: Record<string, never> = {}\n) {\n  switch (type) {\n    case \"Point\":\n      return point(coordinates).geometry;\n    case \"LineString\":\n      return lineString(coordinates).geometry;\n    case \"Polygon\":\n      return polygon(coordinates).geometry;\n    case \"MultiPoint\":\n      return multiPoint(coordinates).geometry;\n    case \"MultiLineString\":\n      return multiLineString(coordinates).geometry;\n    case \"MultiPolygon\":\n      return multiPolygon(coordinates).geometry;\n    default:\n      throw new Error(type + \" is invalid\");\n  }\n}\n\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position,\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<Point, P> {\n  if (!coordinates) {\n    throw new Error(\"coordinates is required\");\n  }\n  if (!Array.isArray(coordinates)) {\n    throw new Error(\"coordinates must be an Array\");\n  }\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be at least 2 numbers long\");\n  }\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n    throw new Error(\"coordinates must contain numbers\");\n  }\n\n  const geom: Point = {\n    type: \"Point\",\n    coordinates,\n  };\n  return feature(geom, properties, options);\n}\n\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position[],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): FeatureCollection<Point, P> {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return point(coords, properties);\n    }),\n    options\n  );\n}\n\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position[][],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<Polygon, P> {\n  for (const ring of coordinates) {\n    if (ring.length < 4) {\n      throw new Error(\n        \"Each LinearRing of a Polygon must have 4 or more Positions.\"\n      );\n    }\n\n    if (ring[ring.length - 1].length !== ring[0].length) {\n      throw new Error(\"First and last Position are not equivalent.\");\n    }\n\n    for (let j = 0; j < ring[ring.length - 1].length; j++) {\n      // Check if first point of Polygon contains two numbers\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error(\"First and last Position are not equivalent.\");\n      }\n    }\n  }\n  const geom: Polygon = {\n    type: \"Polygon\",\n    coordinates,\n  };\n  return feature(geom, properties, options);\n}\n\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position[][][],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): FeatureCollection<Polygon, P> {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return polygon(coords, properties);\n    }),\n    options\n  );\n}\n\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position[],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<LineString, P> {\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n  const geom: LineString = {\n    type: \"LineString\",\n    coordinates,\n  };\n  return feature(geom, properties, options);\n}\n\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position[][],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): FeatureCollection<LineString, P> {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return lineString(coords, properties);\n    }),\n    options\n  );\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection<\n  G extends GeometryObject = Geometry,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  features: Array<Feature<G, P>>,\n  options: { bbox?: BBox; id?: Id } = {}\n): FeatureCollection<G, P> {\n  const fc: any = { type: \"FeatureCollection\" };\n  if (options.id) {\n    fc.id = options.id;\n  }\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n  fc.features = features;\n  return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString<\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  coordinates: Position[][],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<MultiLineString, P> {\n  const geom: MultiLineString = {\n    type: \"MultiLineString\",\n    coordinates,\n  };\n  return feature(geom, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position[],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<MultiPoint, P> {\n  const geom: MultiPoint = {\n    type: \"MultiPoint\",\n    coordinates,\n  };\n  return feature(geom, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon<P extends GeoJsonProperties = GeoJsonProperties>(\n  coordinates: Position[][][],\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<MultiPolygon, P> {\n  const geom: MultiPolygon = {\n    type: \"MultiPolygon\",\n    coordinates,\n  };\n  return feature(geom, properties, options);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection<\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  geometries: Array<\n    Point | LineString | Polygon | MultiPoint | MultiLineString | MultiPolygon\n  >,\n  properties?: P,\n  options: { bbox?: BBox; id?: Id } = {}\n): Feature<GeometryCollection, P> {\n  const geom: GeometryCollection = {\n    type: \"GeometryCollection\",\n    geometries,\n  };\n  return feature(geom, properties, options);\n}\n\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num: number, precision = 0): number {\n  if (precision && !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n  const multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(\n  radians: number,\n  units: Units = \"kilometers\"\n): number {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(\n  distance: number,\n  units: Units = \"kilometers\"\n): number {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance: number, units?: Units): number {\n  return radiansToDegrees(lengthToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing: number): number {\n  let angle = bearing % 360;\n  if (angle < 0) {\n    angle += 360;\n  }\n  return angle;\n}\n\n/**\n * Converts any azimuth angle from the north line direction (positive clockwise)\n * and returns an angle between -180 and +180 degrees (positive clockwise), 0 being the north line\n *\n * @name azimuthToBearing\n * @param {number} angle between 0 and 360 degrees\n * @returns {number} bearing between -180 and +180 degrees\n */\nexport function azimuthToBearing(angle: number): number {\n  angle = angle % 360;\n  if (angle > 0) return angle > 180 ? angle - 360 : angle;\n  return angle < -180 ? angle + 360 : angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians: number): number {\n  const degrees = radians % (2 * Math.PI);\n  return (degrees * 180) / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees: number): number {\n  const radians = degrees % 360;\n  return (radians * Math.PI) / 180;\n}\n\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(\n  length: number,\n  originalUnit: Units = \"kilometers\",\n  finalUnit: Units = \"kilometers\"\n): number {\n  if (!(length >= 0)) {\n    throw new Error(\"length must be a positive number\");\n  }\n  return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(\n  area: number,\n  originalUnit: AreaUnits = \"meters\",\n  finalUnit: AreaUnits = \"kilometers\"\n): number {\n  if (!(area >= 0)) {\n    throw new Error(\"area must be a positive number\");\n  }\n\n  const startFactor = areaFactors[originalUnit];\n  if (!startFactor) {\n    throw new Error(\"invalid original units\");\n  }\n\n  const finalFactor = areaFactors[finalUnit];\n  if (!finalFactor) {\n    throw new Error(\"invalid final units\");\n  }\n\n  return (area / startFactor) * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num: any): boolean {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false, including false for Arrays and Functions\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input: any): boolean {\n  return input !== null && typeof input === \"object\" && !Array.isArray(input);\n}\n\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws {Error} if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox: any): void {\n  if (!bbox) {\n    throw new Error(\"bbox is required\");\n  }\n  if (!Array.isArray(bbox)) {\n    throw new Error(\"bbox must be an Array\");\n  }\n  if (bbox.length !== 4 && bbox.length !== 6) {\n    throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n  }\n  bbox.forEach((num) => {\n    if (!isNumber(num)) {\n      throw new Error(\"bbox must only contain numbers\");\n    }\n  });\n}\n\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws {Error} if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id: any): void {\n  if (!id) {\n    throw new Error(\"id is required\");\n  }\n  if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n    throw new Error(\"id must be a number or a string\");\n  }\n}\n", "import {\n  Feature,\n  FeatureCollection,\n  Geometry,\n  LineString,\n  MultiPoint,\n  MultiLineString,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { isNumber } from \"@turf/helpers\";\n\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord: Feature<Point> | Point | number[]): number[] {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n\n  if (!Array.isArray(coord)) {\n    if (\n      coord.type === \"Feature\" &&\n      coord.geometry !== null &&\n      coord.geometry.type === \"Point\"\n    ) {\n      return [...coord.geometry.coordinates];\n    }\n    if (coord.type === \"Point\") {\n      return [...coord.coordinates];\n    }\n  }\n  if (\n    Array.isArray(coord) &&\n    coord.length >= 2 &&\n    !Array.isArray(coord[0]) &&\n    !Array.isArray(coord[1])\n  ) {\n    return [...coord];\n  }\n\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords<\n  G extends\n    | Point\n    | LineString\n    | Polygon\n    | MultiPoint\n    | MultiLineString\n    | MultiPolygon,\n>(coords: any[] | Feature<G> | G): any[] {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n\n  // Feature\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    // Geometry\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n\n  throw new Error(\n    \"coords must be GeoJSON Feature, Geometry Object or an Array\"\n  );\n}\n\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates: any[]): boolean {\n  if (\n    coordinates.length > 1 &&\n    isNumber(coordinates[0]) &&\n    isNumber(coordinates[1])\n  ) {\n    return true;\n  }\n\n  if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n    return containsNumber(coordinates[0]);\n  }\n  throw new Error(\"coordinates must only contain numbers\");\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value: any, type: string, name: string): void {\n  if (!type || !name) {\n    throw new Error(\"type and name required\");\n  }\n\n  if (!value || value.type !== type) {\n    throw new Error(\n      \"Invalid input to \" +\n        name +\n        \": must be a \" +\n        type +\n        \", given \" +\n        value.type\n    );\n  }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature: Feature<any>, type: string, name: string): void {\n  if (!feature) {\n    throw new Error(\"No feature passed\");\n  }\n  if (!name) {\n    throw new Error(\".featureOf() requires a name\");\n  }\n  if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n    throw new Error(\n      \"Invalid input to \" + name + \", Feature with geometry required\"\n    );\n  }\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error(\n      \"Invalid input to \" +\n        name +\n        \": must be a \" +\n        type +\n        \", given \" +\n        feature.geometry.type\n    );\n  }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(\n  featureCollection: FeatureCollection<any>,\n  type: string,\n  name: string\n) {\n  if (!featureCollection) {\n    throw new Error(\"No featureCollection passed\");\n  }\n  if (!name) {\n    throw new Error(\".collectionOf() requires a name\");\n  }\n  if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n    throw new Error(\n      \"Invalid input to \" + name + \", FeatureCollection required\"\n    );\n  }\n  for (const feature of featureCollection.features) {\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n      throw new Error(\n        \"Invalid input to \" + name + \", Feature with geometry required\"\n      );\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error(\n        \"Invalid input to \" +\n          name +\n          \": must be a \" +\n          type +\n          \", given \" +\n          feature.geometry.type\n      );\n    }\n  }\n}\n\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom<G extends Geometry>(geojson: Feature<G> | G): G {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\n\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(\n  geojson: Feature<any> | FeatureCollection<any> | Geometry,\n  _name?: string\n): string {\n  if (geojson.type === \"FeatureCollection\") {\n    return \"FeatureCollection\";\n  }\n  if (geojson.type === \"GeometryCollection\") {\n    return \"GeometryCollection\";\n  }\n  if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n    return geojson.geometry.type;\n  }\n  return geojson.type;\n}\n\nexport {\n  getCoord,\n  getCoords,\n  containsNumber,\n  geojsonType,\n  featureOf,\n  collectionOf,\n  getGeom,\n  getType,\n};\n// No default export!\n", "import { Coord, degreesToRadians, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @name bearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\nfunction bearing(\n  start: Coord,\n  end: Coord,\n  options: {\n    final?: boolean;\n  } = {}\n): number {\n  // Reverse calculation\n  if (options.final === true) {\n    return calculateFinalBearing(start, end);\n  }\n\n  const coordinates1 = getCoord(start);\n  const coordinates2 = getCoord(end);\n\n  const lon1 = degreesToRadians(coordinates1[0]);\n  const lon2 = degreesToRadians(coordinates2[0]);\n  const lat1 = degreesToRadians(coordinates1[1]);\n  const lat2 = degreesToRadians(coordinates2[1]);\n  const a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  const b =\n    Math.cos(lat1) * Math.sin(lat2) -\n    Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n\n  return radiansToDegrees(Math.atan2(a, b));\n}\n\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\nfunction calculateFinalBearing(start: Coord, end: Coord) {\n  // Swap start & end\n  let bear = bearing(end, start);\n  bear = (bear + 180) % 360;\n  return bear;\n}\n\nexport { bearing };\nexport default bearing;\n", "// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\nimport { Feature, Point, GeoJsonProperties } from \"geojson\";\nimport {\n  Coord,\n  degreesToRadians,\n  lengthToRadians,\n  point,\n  radiansToDegrees,\n  Units,\n} from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in\n * degrees, radians, miles, or kilometers; and bearing in degrees.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the origin point\n * @param {number} bearing ranging from -180 to 180\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] Translate properties to Point\n * @returns {Feature<Point>} destination point\n * @example\n * var point = turf.point([-75.343, 39.984]);\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.destination(point, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [point, destination]\n * destination.properties['marker-color'] = '#f00';\n * point.properties['marker-color'] = '#0f0';\n */\nfunction destination<P extends GeoJsonProperties = GeoJsonProperties>(\n  origin: Coord,\n  distance: number,\n  bearing: number,\n  options: {\n    units?: Units;\n    properties?: P;\n  } = {}\n): Feature<Point, P> {\n  // Handle input\n  const coordinates1 = getCoord(origin);\n  const longitude1 = degreesToRadians(coordinates1[0]);\n  const latitude1 = degreesToRadians(coordinates1[1]);\n  const bearingRad = degreesToRadians(bearing);\n  const radians = lengthToRadians(distance, options.units);\n\n  // Main\n  const latitude2 = Math.asin(\n    Math.sin(latitude1) * Math.cos(radians) +\n      Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad)\n  );\n  const longitude2 =\n    longitude1 +\n    Math.atan2(\n      Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1),\n      Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2)\n    );\n  const lng = radiansToDegrees(longitude2);\n  const lat = radiansToDegrees(latitude2);\n\n  return point([lng, lat], options.properties);\n}\n\nexport { destination };\nexport default destination;\n", "import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians, Coord, Units } from \"@turf/helpers\";\n\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Calculates the distance between two {@link Coord|coordinates} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin coordinate\n * @param {Coord} to destination coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two coordinates\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(\n  from: Coord,\n  to: Coord,\n  options: {\n    units?: Units;\n  } = {}\n) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n\n  var a =\n    Math.pow(Math.sin(dLat / 2), 2) +\n    Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    options.units\n  );\n}\n\nexport { distance };\nexport default distance;\n", "import { Feature, LineString, Point } from \"geojson\";\nimport { bearing } from \"@turf/bearing\";\nimport { destination } from \"@turf/destination\";\nimport { distance as measureDistance } from \"@turf/distance\";\nimport { point, Units } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\n * var options = {units: 'miles'};\n *\n * var along = turf.along(line, 200, options);\n *\n * //addToMap\n * var addToMap = [along, line]\n */\nfunction along(\n  line: Feature<LineString> | LineString,\n  distance: number,\n  options: { units?: Units } = {}\n): Feature<Point> {\n  // Get Coords\n  const geom = getGeom(line);\n  const coords = geom.coordinates;\n  let travelled = 0;\n  for (let i = 0; i < coords.length; i++) {\n    if (distance >= travelled && i === coords.length - 1) {\n      break;\n    } else if (travelled >= distance) {\n      const overshot = distance - travelled;\n      if (!overshot) {\n        return point(coords[i]);\n      } else {\n        const direction = bearing(coords[i], coords[i - 1]) - 180;\n        const interpolated = destination(\n          coords[i],\n          overshot,\n          direction,\n          options\n        );\n        return interpolated;\n      }\n    } else {\n      travelled += measureDistance(coords[i], coords[i + 1], options);\n    }\n  }\n  return point(coords[coords.length - 1]);\n}\n\nexport { along };\nexport default along;\n", "// https://en.wikipedia.org/wiki/Rhumb_line\nimport { Coord, degreesToRadians, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n/**\n * Takes two {@link Point|points} and finds the bearing angle between them along a Rhumb line\n * i.e. the angle measured in degrees start the north line (0 degrees)\n *\n * @name rhumbBearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984], {\"marker-color\": \"#F00\"});\n * var point2 = turf.point([-75.534, 39.123], {\"marker-color\": \"#00F\"});\n *\n * var bearing = turf.rhumbBearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2];\n * point1.properties.bearing = bearing;\n * point2.properties.bearing = bearing;\n */\nfunction rhumbBearing(\n  start: Coord,\n  end: Coord,\n  options: { final?: boolean } = {}\n): number {\n  let bear360;\n  if (options.final) {\n    bear360 = calculateRhumbBearing(getCoord(end), getCoord(start));\n  } else {\n    bear360 = calculateRhumbBearing(getCoord(start), getCoord(end));\n  }\n\n  const bear180 = bear360 > 180 ? -(360 - bear360) : bear360;\n\n  return bear180;\n}\n\n/**\n * Returns the bearing from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} from - origin point.\n * @param   {Array<number>} to - destination point.\n * @returns {number} Bearing in degrees from north.\n * @example\n * var p1 = new LatLon(51.127, 1.338);\n * var p2 = new LatLon(50.964, 1.853);\n * var d = p1.rhumbBearingTo(p2); // 116.7 m\n */\nfunction calculateRhumbBearing(from: number[], to: number[]) {\n  // φ => phi\n  // Δλ => deltaLambda\n  // Δψ => deltaPsi\n  // θ => theta\n  const phi1 = degreesToRadians(from[1]);\n  const phi2 = degreesToRadians(to[1]);\n  let deltaLambda = degreesToRadians(to[0] - from[0]);\n  // if deltaLambdaon over 180° take shorter rhumb line across the anti-meridian:\n  if (deltaLambda > Math.PI) {\n    deltaLambda -= 2 * Math.PI;\n  }\n  if (deltaLambda < -Math.PI) {\n    deltaLambda += 2 * Math.PI;\n  }\n\n  const deltaPsi = Math.log(\n    Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4)\n  );\n\n  const theta = Math.atan2(deltaLambda, deltaPsi);\n\n  return (radiansToDegrees(theta) + 360) % 360;\n}\n\nexport { rhumbBearing };\nexport default rhumbBearing;\n", "import { bearing } from \"@turf/bearing\";\nimport { bearingToAzimuth, Coord, isObject } from \"@turf/helpers\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\n\n/**\n * Finds the angle formed by two adjacent segments defined by 3 points. The result will be the (positive clockwise)\n * angle with origin on the `startPoint-midPoint` segment, or its explementary angle if required.\n *\n * @name angle\n * @param {Coord} startPoint Start Point Coordinates\n * @param {Coord} midPoint Mid Point Coordinates\n * @param {Coord} endPoint End Point Coordinates\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.explementary=false] Returns the explementary angle instead (360 - angle)\n * @param {boolean} [options.mercator=false] if calculations should be performed over Mercator or WGS84 projection\n * @returns {number} Angle between the provided points, or its explementary.\n * @example\n * turf.angle([5, 5], [5, 6], [3, 4]);\n * //=45\n */\nfunction angle(\n  startPoint: Coord,\n  midPoint: Coord,\n  endPoint: Coord,\n  options: {\n    explementary?: boolean;\n    mercator?: boolean;\n  } = {}\n): number {\n  // Optional Parameters\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n\n  // Validation\n  if (!startPoint) {\n    throw new Error(\"startPoint is required\");\n  }\n  if (!midPoint) {\n    throw new Error(\"midPoint is required\");\n  }\n  if (!endPoint) {\n    throw new Error(\"endPoint is required\");\n  }\n\n  // Rename to shorter variables\n  const A = startPoint;\n  const O = midPoint;\n  const B = endPoint;\n\n  // Main\n  const azimuthAO = bearingToAzimuth(\n    options.mercator !== true ? bearing(A, O) : rhumbBearing(A, O)\n  );\n  const azimuthBO = bearingToAzimuth(\n    options.mercator !== true ? bearing(B, O) : rhumbBearing(B, O)\n  );\n  const angleAO = Math.abs(azimuthAO - azimuthBO);\n\n  // Explementary angle\n  if (options.explementary === true) {\n    return 360 - angleAO;\n  }\n  return angleAO;\n}\n\nexport { angle };\nexport default angle;\n", "import { feature, point, lineString, isObject } from \"@turf/helpers\";\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n        ? geojson.geometry\n        : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n        ? geojson.geometry\n        : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n        ? geojson.properties\n        : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n        ? geojson.bbox\n        : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n        ? geojson.id\n        : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport {\n  coordReduce,\n  coordEach,\n  propEach,\n  propReduce,\n  featureReduce,\n  featureEach,\n  coordAll,\n  geomReduce,\n  geomEach,\n  flattenReduce,\n  flattenEach,\n  segmentReduce,\n  segmentEach,\n  lineReduce,\n  lineEach,\n  findSegment,\n  findPoint,\n};\n", "import { Feature, FeatureCollection, Geometry } from \"geojson\";\nimport { earthRadius } from \"@turf/helpers\";\nimport { geomReduce } from \"@turf/meta\";\n\n/**\n * Calculates the geodesic area in square meters of one or more polygons.\n *\n * @name area\n * @param {GeoJSON} geojson input polygon(s) as {@link Geometry}, {@link Feature}, or {@link FeatureCollection}\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson: Feature<any> | FeatureCollection<any> | Geometry) {\n  return geomReduce(\n    geojson,\n    (value, geom) => {\n      return value + calculateArea(geom);\n    },\n    0\n  );\n}\n\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom: Geometry): number {\n  let total = 0;\n  let i;\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonArea(geom.coordinates);\n    case \"MultiPolygon\":\n      for (i = 0; i < geom.coordinates.length; i++) {\n        total += polygonArea(geom.coordinates[i]);\n      }\n      return total;\n    case \"Point\":\n    case \"MultiPoint\":\n    case \"LineString\":\n    case \"MultiLineString\":\n      return 0;\n  }\n  return 0;\n}\n\nfunction polygonArea(coords: any) {\n  let total = 0;\n  if (coords && coords.length > 0) {\n    total += Math.abs(ringArea(coords[0]));\n    for (let i = 1; i < coords.length; i++) {\n      total -= Math.abs(ringArea(coords[i]));\n    }\n  }\n  return total;\n}\n\n/**\n * @private\n * A constant factor used to compute the area of a polygon.\n * It's derived from the square of the Earth's radius divided by 2.\n *\n * @type {number}\n */\nconst FACTOR = (earthRadius * earthRadius) / 2;\n\n/**\n * @private\n * A constant used for converting degrees to radians.\n * Represents the ratio of PI to 180.\n *\n * @type {number}\n */\nconst PI_OVER_180 = Math.PI / 180;\n\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords: number[][]): number {\n  const coordsLength = coords.length - 1;\n\n  if (coordsLength <= 2) return 0;\n  let total = 0;\n\n  let i = 0;\n  while (i < coordsLength) {\n    const lower = coords[i];\n    const middle = coords[i + 1 === coordsLength ? 0 : i + 1];\n    const upper =\n      coords[i + 2 >= coordsLength ? (i + 2) % coordsLength : i + 2];\n\n    const lowerX = lower[0] * PI_OVER_180;\n    const middleY = middle[1] * PI_OVER_180;\n    const upperX = upper[0] * PI_OVER_180;\n\n    total += (upperX - lowerX) * Math.sin(middleY);\n\n    i++;\n  }\n\n  return total * FACTOR;\n}\n\nexport { area };\nexport default area;\n", "import { BBox } from \"geojson\";\nimport { AllGeoJSON } from \"@turf/helpers\";\nimport { coordEach } from \"@turf/meta\";\n\n/**\n * Calculates the bounding box for any GeoJSON object, including FeatureCollection.\n * Uses geojson.bbox if available and options.recompute is not set.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.recompute] Whether to ignore an existing bbox property on geojson\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(\n  geojson: AllGeoJSON,\n  options: {\n    recompute?: boolean;\n  } = {}\n): BBox {\n  if (geojson.bbox != null && true !== options.recompute) {\n    return geojson.bbox;\n  }\n  const result: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n  coordEach(geojson, (coord) => {\n    if (result[0] > coord[0]) {\n      result[0] = coord[0];\n    }\n    if (result[1] > coord[1]) {\n      result[1] = coord[1];\n    }\n    if (result[2] < coord[0]) {\n      result[2] = coord[0];\n    }\n    if (result[3] < coord[1]) {\n      result[3] = coord[1];\n    }\n  });\n  return result;\n}\n\nexport { bbox };\nexport default bbox;\n", "import {\n  BBox,\n  Feature,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  GeoJsonProperties,\n  Polygon,\n} from \"geojson\";\n\nimport {\n  lineString,\n  multiLineString,\n  multiPolygon,\n  polygon,\n} from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nimport { lineclip, polygonclip } from \"./lib/lineclip.js\";\n\n/**\n * Takes a {@link Feature} and a bbox and clips the feature to the bbox using\n * [lineclip](https://github.com/mapbox/lineclip).\n * May result in degenerate edges when clipping Polygons.\n *\n * @name bboxClip\n * @param {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature feature to clip to the bbox\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @returns {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} clipped Feature\n * @example\n * var bbox = [0, 0, 10, 10];\n * var poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);\n *\n * var clipped = turf.bboxClip(poly, bbox);\n *\n * //addToMap\n * var addToMap = [bbox, poly, clipped]\n */\nfunction bboxClip<\n  G extends Polygon | MultiPolygon | LineString | MultiLineString,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(feature: Feature<G, P> | G, bbox: BBox) {\n  const geom = getGeom(feature);\n  const type = geom.type;\n  const properties = feature.type === \"Feature\" ? feature.properties : {};\n  let coords: any[] = geom.coordinates;\n\n  switch (type) {\n    case \"LineString\":\n    case \"MultiLineString\": {\n      const lines: any[] = [];\n      if (type === \"LineString\") {\n        coords = [coords];\n      }\n      coords.forEach((line) => {\n        lineclip(line, bbox, lines);\n      });\n      if (lines.length === 1) {\n        return lineString(lines[0], properties);\n      }\n      return multiLineString(lines, properties);\n    }\n    case \"Polygon\":\n      return polygon(clipPolygon(coords, bbox), properties);\n    case \"MultiPolygon\":\n      return multiPolygon(\n        coords.map((poly) => {\n          return clipPolygon(poly, bbox);\n        }),\n        properties\n      );\n    default:\n      throw new Error(\"geometry \" + type + \" not supported\");\n  }\n}\n\nfunction clipPolygon(rings: number[][][], bbox: BBox) {\n  const outRings = [];\n  for (const ring of rings) {\n    const clipped = polygonclip(ring, bbox);\n    if (clipped.length > 0) {\n      if (\n        clipped[0][0] !== clipped[clipped.length - 1][0] ||\n        clipped[0][1] !== clipped[clipped.length - 1][1]\n      ) {\n        clipped.push(clipped[0]);\n      }\n      if (clipped.length >= 4) {\n        outRings.push(clipped);\n      }\n    }\n  }\n  return outRings;\n}\n\nexport { bboxClip };\nexport default bboxClip;\n", "// Cohen-Sutherland line clipping algorithm, adapted to efficiently\n// handle polylines rather than just segments\nimport { BBox } from \"geojson\";\n\nexport function lineclip(\n  points: number[][],\n  bbox: BBox,\n  result?: number[][][]\n): number[][][] {\n  var len = points.length,\n    codeA = bitCode(points[0], bbox),\n    part = [] as number[][],\n    i,\n    codeB,\n    lastCode;\n  let a: number[];\n  let b: number[];\n\n  if (!result) result = [];\n\n  for (i = 1; i < len; i++) {\n    a = points[i - 1];\n    b = points[i];\n    codeB = lastCode = bitCode(b, bbox);\n\n    while (true) {\n      if (!(codeA | codeB)) {\n        // accept\n        part.push(a);\n\n        if (codeB !== lastCode) {\n          // segment went outside\n          part.push(b);\n\n          if (i < len - 1) {\n            // start a new line\n            result.push(part);\n            part = [];\n          }\n        } else if (i === len - 1) {\n          part.push(b);\n        }\n        break;\n      } else if (codeA & codeB) {\n        // trivial reject\n        break;\n      } else if (codeA) {\n        // a outside, intersect with clip edge\n        a = intersect(a, b, codeA, bbox)!;\n        codeA = bitCode(a, bbox);\n      } else {\n        // b outside\n        b = intersect(a, b, codeB, bbox)!;\n        codeB = bitCode(b, bbox);\n      }\n    }\n\n    codeA = lastCode;\n  }\n\n  if (part.length) result.push(part);\n\n  return result;\n}\n\n// Sutherland-Hodgeman polygon clipping algorithm\n\nexport function polygonclip(points: number[][], bbox: BBox): number[][] {\n  var result: number[][], edge, prev, prevInside, i, p, inside;\n\n  // clip against each side of the clip rectangle\n  for (edge = 1; edge <= 8; edge *= 2) {\n    result = [];\n    prev = points[points.length - 1];\n    prevInside = !(bitCode(prev, bbox) & edge);\n\n    for (i = 0; i < points.length; i++) {\n      p = points[i];\n      inside = !(bitCode(p, bbox) & edge);\n\n      // if segment goes through the clip window, add an intersection\n      if (inside !== prevInside) result.push(intersect(prev, p, edge, bbox)!);\n\n      if (inside) result.push(p); // add a point if it's inside\n\n      prev = p;\n      prevInside = inside;\n    }\n\n    points = result;\n\n    if (!points.length) break;\n  }\n\n  return result!;\n}\n\n// intersect a segment against one of the 4 lines that make up the bbox\n\nfunction intersect(\n  a: number[],\n  b: number[],\n  edge: number,\n  bbox: BBox\n): number[] | null {\n  return edge & 8\n    ? [a[0] + ((b[0] - a[0]) * (bbox[3] - a[1])) / (b[1] - a[1]), bbox[3]] // top\n    : edge & 4\n      ? [a[0] + ((b[0] - a[0]) * (bbox[1] - a[1])) / (b[1] - a[1]), bbox[1]] // bottom\n      : edge & 2\n        ? [bbox[2], a[1] + ((b[1] - a[1]) * (bbox[2] - a[0])) / (b[0] - a[0])] // right\n        : edge & 1\n          ? [bbox[0], a[1] + ((b[1] - a[1]) * (bbox[0] - a[0])) / (b[0] - a[0])] // left\n          : null;\n}\n\n// bit code reflects the point position relative to the bbox:\n\n//         left  mid  right\n//    top  1001  1000  1010\n//    mid  0001  0000  0010\n// bottom  0101  0100  0110\n\nfunction bitCode(p: number[], bbox: BBox) {\n  var code = 0;\n\n  if (p[0] < bbox[0]) code |= 1;\n  // left\n  else if (p[0] > bbox[2]) code |= 2; // right\n\n  if (p[1] < bbox[1]) code |= 4;\n  // bottom\n  else if (p[1] > bbox[3]) code |= 8; // top\n\n  return code;\n}\n", "import { BBox, Feature, Polygon, GeoJsonProperties } from \"geojson\";\nimport { polygon, Id } from \"@turf/helpers\";\n\n/**\n * Takes a bbox and returns an equivalent {@link Polygon|polygon}.\n *\n * @name bboxPolygon\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @param {Object} [options={}] Optional parameters\n * @param {Properties} [options.properties={}] Translate properties to Polygon\n * @param {string|number} [options.id={}] Translate Id to Polygon\n * @returns {Feature<Polygon>} a Polygon representation of the bounding box\n * @example\n * var bbox = [0, 0, 10, 10];\n *\n * var poly = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [poly]\n */\nfunction bboxPolygon<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  options: {\n    properties?: P;\n    id?: Id;\n  } = {}\n): Feature<Polygon, P> {\n  // Convert BBox positions to Numbers\n  // No performance loss for including Number()\n  // https://github.com/Turfjs/turf/issues/1119\n  const west = Number(bbox[0]);\n  const south = Number(bbox[1]);\n  const east = Number(bbox[2]);\n  const north = Number(bbox[3]);\n\n  if (bbox.length === 6) {\n    throw new Error(\n      \"@turf/bbox-polygon does not support BBox with 6 positions\"\n    );\n  }\n\n  const lowLeft = [west, south];\n  const topLeft = [west, north];\n  const topRight = [east, north];\n  const lowRight = [east, south];\n\n  return polygon(\n    [[lowLeft, lowRight, topRight, topLeft, lowLeft]],\n    options.properties,\n    { bbox, id: options.id }\n  );\n}\n\nexport { bboxPolygon };\nexport default bboxPolygon;\n", "import { Feature, LineString, GeoJsonProperties } from \"geojson\";\nimport { lineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nimport { Spline } from \"./lib/spline.js\";\n\n/**\n * Takes a {@link LineString|line} and returns a curved version\n * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\n * algorithm.\n *\n * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n *\n * @name bezierSpline\n * @param {Feature<LineString>} line input LineString\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate properties to output\n * @param {number} [options.resolution=10000] time in milliseconds between points\n * @param {number} [options.sharpness=0.85] a measure of how curvy the path should be between splines\n * @returns {Feature<LineString>} curved line\n * @example\n * var line = turf.lineString([\n *   [-76.091308, 18.427501],\n *   [-76.695556, 18.729501],\n *   [-76.552734, 19.40443],\n *   [-74.61914, 19.134789],\n *   [-73.652343, 20.07657],\n *   [-73.157958, 20.210656]\n * ]);\n *\n * var curved = turf.bezierSpline(line);\n *\n * //addToMap\n * var addToMap = [line, curved]\n * curved.properties = { stroke: '#0F0' };\n */\nfunction bezierSpline<P extends GeoJsonProperties = GeoJsonProperties>(\n  line: Feature<LineString> | LineString,\n  options: {\n    properties?: P;\n    resolution?: number;\n    sharpness?: number;\n  } = {}\n): Feature<LineString, P> {\n  // Optional params\n  const resolution = options.resolution || 10000;\n  const sharpness = options.sharpness || 0.85;\n\n  const coords: [number, number][] = [];\n  const points = getGeom(line).coordinates.map((pt) => {\n    return { x: pt[0], y: pt[1] };\n  });\n  const spline = new Spline({\n    duration: resolution,\n    points,\n    sharpness,\n  });\n\n  const pushCoord = (time: number) => {\n    var pos = spline.pos(time);\n    if (Math.floor(time / 100) % 2 === 0) {\n      coords.push([pos.x, pos.y]);\n    }\n  };\n\n  for (var i = 0; i < spline.duration; i += 10) {\n    pushCoord(i);\n  }\n  pushCoord(spline.duration);\n\n  return lineString(coords, options.properties);\n}\n\nexport { bezierSpline };\nexport default bezierSpline;\n", "interface Point {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * BezierSpline\n * https://github.com/leszekr/bezier-spline-js\n *\n * @private\n * @copyright\n * Copyright (c) 2013 Leszek Rybicki\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nclass Spline {\n  public duration: number;\n  public points: Point[];\n  public sharpness: number;\n  public centers: Point[];\n  public controls: Array<[Point, Point]>;\n  public stepLength: number;\n  public length: number;\n  public delay: number;\n  public steps: number[];\n\n  constructor(options?: any) {\n    this.points = options.points || [];\n    this.duration = options.duration || 10000;\n    this.sharpness = options.sharpness || 0.85;\n    this.centers = [];\n    this.controls = [];\n    this.stepLength = options.stepLength || 60;\n    this.length = this.points.length;\n    this.delay = 0;\n\n    // this is to ensure compatibility with the 2d version\n    for (let i = 0; i < this.length; i++) {\n      this.points[i].z = this.points[i].z || 0;\n    }\n    for (let i = 0; i < this.length - 1; i++) {\n      const p1 = this.points[i];\n      const p2 = this.points[i + 1];\n      this.centers.push({\n        x: (p1.x + p2.x) / 2,\n        y: (p1.y + p2.y) / 2,\n        z: (p1.z + p2.z) / 2,\n      });\n    }\n    this.controls.push([this.points[0], this.points[0]]);\n    for (let i = 0; i < this.centers.length - 1; i++) {\n      const dx =\n        this.points[i + 1].x - (this.centers[i].x + this.centers[i + 1].x) / 2;\n      const dy =\n        this.points[i + 1].y - (this.centers[i].y + this.centers[i + 1].y) / 2;\n      const dz =\n        this.points[i + 1].z - (this.centers[i].y + this.centers[i + 1].z) / 2;\n      this.controls.push([\n        {\n          x:\n            (1.0 - this.sharpness) * this.points[i + 1].x +\n            this.sharpness * (this.centers[i].x + dx),\n          y:\n            (1.0 - this.sharpness) * this.points[i + 1].y +\n            this.sharpness * (this.centers[i].y + dy),\n          z:\n            (1.0 - this.sharpness) * this.points[i + 1].z +\n            this.sharpness * (this.centers[i].z + dz),\n        },\n        {\n          x:\n            (1.0 - this.sharpness) * this.points[i + 1].x +\n            this.sharpness * (this.centers[i + 1].x + dx),\n          y:\n            (1.0 - this.sharpness) * this.points[i + 1].y +\n            this.sharpness * (this.centers[i + 1].y + dy),\n          z:\n            (1.0 - this.sharpness) * this.points[i + 1].z +\n            this.sharpness * (this.centers[i + 1].z + dz),\n        },\n      ]);\n    }\n    this.controls.push([\n      this.points[this.length - 1],\n      this.points[this.length - 1],\n    ]);\n    this.steps = this.cacheSteps(this.stepLength);\n    return this;\n  }\n  /**\n   * Caches an array of equidistant (more or less) points on the curve.\n   */\n  public cacheSteps(mindist: number) {\n    const steps = [];\n    let laststep = this.pos(0);\n    steps.push(0);\n    for (let t = 0; t < this.duration; t += 10) {\n      const step = this.pos(t);\n      const dist = Math.sqrt(\n        (step.x - laststep.x) * (step.x - laststep.x) +\n          (step.y - laststep.y) * (step.y - laststep.y) +\n          (step.z - laststep.z) * (step.z - laststep.z)\n      );\n      if (dist > mindist) {\n        steps.push(t);\n        laststep = step;\n      }\n    }\n    return steps;\n  }\n\n  /**\n   * returns angle and speed in the given point in the curve\n   */\n  public vector(t: number) {\n    const p1 = this.pos(t + 10);\n    const p2 = this.pos(t - 10);\n    return {\n      angle: (180 * Math.atan2(p1.y - p2.y, p1.x - p2.x)) / 3.14,\n      speed: Math.sqrt(\n        (p2.x - p1.x) * (p2.x - p1.x) +\n          (p2.y - p1.y) * (p2.y - p1.y) +\n          (p2.z - p1.z) * (p2.z - p1.z)\n      ),\n    };\n  }\n\n  /**\n   * Gets the position of the point, given time.\n   *\n   * WARNING: The speed is not constant. The time it takes between control points is constant.\n   *\n   * For constant speed, use Spline.steps[i];\n   */\n  public pos(time: number) {\n    let t = time - this.delay;\n    if (t < 0) {\n      t = 0;\n    }\n    if (t > this.duration) {\n      t = this.duration - 1;\n    }\n    // t = t-this.delay;\n    const t2 = t / this.duration;\n    if (t2 >= 1) {\n      return this.points[this.length - 1];\n    }\n\n    const n = Math.floor((this.points.length - 1) * t2);\n    const t1 = (this.length - 1) * t2 - n;\n    return bezier(\n      t1,\n      this.points[n],\n      this.controls[n][1],\n      this.controls[n + 1][0],\n      this.points[n + 1]\n    );\n  }\n}\n\nfunction bezier(t: number, p1: Point, c1: Point, c2: Point, p2: Point) {\n  const b = B(t);\n  const pos = {\n    x: p2.x * b[0] + c2.x * b[1] + c1.x * b[2] + p1.x * b[3],\n    y: p2.y * b[0] + c2.y * b[1] + c1.y * b[2] + p1.y * b[3],\n    z: p2.z * b[0] + c2.z * b[1] + c1.z * b[2] + p1.z * b[3],\n  };\n  return pos;\n}\nfunction B(t: number) {\n  const t2 = t * t;\n  const t3 = t2 * t;\n  return [\n    t3,\n    3 * t2 * (1 - t),\n    3 * t * (1 - t) * (1 - t),\n    (1 - t) * (1 - t) * (1 - t),\n  ];\n}\n\nexport { Spline, Point };\nexport default Spline;\n", "import { Feature, LineString, Position } from \"geojson\";\nimport { getCoords } from \"@turf/invariant\";\n\n/**\n * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.\n *\n * @name booleanClockwise\n * @param {Feature<LineString>|LineString|Array<Array<number>>} line to be evaluated\n * @returns {boolean} true/false\n * @example\n * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\n * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n *\n * turf.booleanClockwise(clockwiseRing)\n * //=true\n * turf.booleanClockwise(counterClockwiseRing)\n * //=false\n */\nfunction booleanClockwise(\n  line: Feature<LineString> | LineString | Position[]\n): boolean {\n  const ring = getCoords(line);\n  let sum = 0;\n  let i = 1;\n  let prev;\n  let cur;\n\n  while (i < ring.length) {\n    prev = cur || ring[0];\n    cur = ring[i];\n    sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);\n    i++;\n  }\n  return sum > 0;\n}\n\nexport { booleanClockwise };\nexport default booleanClockwise;\n", "import { Feature, Polygon } from \"geojson\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Takes a polygon and return true or false as to whether it is concave or not.\n *\n * @name booleanConcave\n * @param {Feature<Polygon>} polygon to be evaluated\n * @returns {boolean} true/false\n * @example\n * var convexPolygon = turf.polygon([[[0,0],[0,1],[1,1],[1,0],[0,0]]]);\n *\n * turf.booleanConcave(convexPolygon)\n * //=false\n */\nfunction booleanConcave(polygon: Feature<Polygon> | Polygon) {\n  // Taken from https://stackoverflow.com/a/1881201 & https://stackoverflow.com/a/25304159\n  const coords = getGeom(polygon).coordinates;\n  if (coords[0].length <= 4) {\n    return false;\n  }\n\n  let sign = false;\n  const n = coords[0].length - 1;\n  for (let i = 0; i < n; i++) {\n    const dx1 = coords[0][(i + 2) % n][0] - coords[0][(i + 1) % n][0];\n    const dy1 = coords[0][(i + 2) % n][1] - coords[0][(i + 1) % n][1];\n    const dx2 = coords[0][i][0] - coords[0][(i + 1) % n][0];\n    const dy2 = coords[0][i][1] - coords[0][(i + 1) % n][1];\n    const zcrossproduct = dx1 * dy2 - dy1 * dx2;\n    if (i === 0) {\n      sign = zcrossproduct > 0;\n    } else if (sign !== zcrossproduct > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport { booleanConcave };\nexport default booleanConcave;\n", "function pointInPolygon(p, polygon) {\n    var i = 0;\n    var ii = 0;\n    var k = 0;\n    var f = 0;\n    var u1 = 0;\n    var v1 = 0;\n    var u2 = 0;\n    var v2 = 0;\n    var currentP = null;\n    var nextP = null;\n\n    var x = p[0];\n    var y = p[1];\n\n    var numContours = polygon.length;\n    for (i; i < numContours; i++) {\n        ii = 0;\n        var contourLen = polygon[i].length - 1;\n        var contour = polygon[i];\n\n        currentP = contour[0];\n        if (currentP[0] !== contour[contourLen][0] &&\n            currentP[1] !== contour[contourLen][1]) {\n            throw new Error('First and last coordinates in a ring must be the same')\n        }\n\n        u1 = currentP[0] - x;\n        v1 = currentP[1] - y;\n\n        for (ii; ii < contourLen; ii++) {\n            nextP = contour[ii + 1];\n\n            v2 = nextP[1] - y;\n\n            if ((v1 < 0 && v2 < 0) || (v1 > 0 && v2 > 0)) {\n                currentP = nextP;\n                v1 = v2;\n                u1 = currentP[0] - x;\n                continue\n            }\n\n            u2 = nextP[0] - p[0];\n\n            if (v2 > 0 && v1 <= 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f > 0) { k = k + 1; }\n                else if (f === 0) { return 0 }\n            } else if (v1 > 0 && v2 <= 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f < 0) { k = k + 1; }\n                else if (f === 0) { return 0 }\n            } else if (v2 === 0 && v1 < 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f === 0) { return 0 }\n            } else if (v1 === 0 && v2 < 0) {\n                f = u1 * v2 - u2 * v1;\n                if (f === 0) { return 0 }\n            } else if (v1 === 0 && v2 === 0) {\n                if (u2 <= 0 && u1 >= 0) {\n                    return 0\n                } else if (u1 <= 0 && u2 >= 0) {\n                    return 0\n                }\n            }\n            currentP = nextP;\n            v1 = v2;\n            u1 = u2;\n        }\n    }\n\n    if (k % 2 === 0) { return false }\n    return true\n}\n\nexport default pointInPolygon;\n", "import pip from \"point-in-polygon-hao\";\nimport {\n  BBox,\n  Feature,\n  MultiPolygon,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { Coord } from \"@turf/helpers\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\n\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  point: Coord,\n  polygon: Feature<G, P> | G,\n  options: {\n    ignoreBoundary?: boolean;\n  } = {}\n) {\n  // validation\n  if (!point) {\n    throw new Error(\"point is required\");\n  }\n  if (!polygon) {\n    throw new Error(\"polygon is required\");\n  }\n\n  const pt = getCoord(point);\n  const geom = getGeom(polygon);\n  const type = geom.type;\n  const bbox = polygon.bbox;\n  let polys: any[] = geom.coordinates;\n\n  // Quick elimination if point is not inside bbox\n  if (bbox && inBBox(pt, bbox) === false) {\n    return false;\n  }\n\n  if (type === \"Polygon\") {\n    polys = [polys];\n  }\n  let result = false;\n  for (var i = 0; i < polys.length; ++i) {\n    const polyResult = pip(pt, polys[i]);\n    if (polyResult === 0) return options.ignoreBoundary ? false : true;\n    else if (polyResult) result = true;\n  }\n\n  return result;\n}\n\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt: number[], bbox: BBox) {\n  return (\n    bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]\n  );\n}\n\nexport { booleanPointInPolygon };\nexport default booleanPointInPolygon;\n", "import { Feature, LineString } from \"geojson\";\nimport { Coord } from \"@turf/helpers\";\nimport { getCoord, getCoords } from \"@turf/invariant\";\n\n/**\n * Returns true if a point is on a line. Accepts a optional parameter to ignore the\n * start and end vertices of the linestring.\n *\n * @name booleanPointOnLine\n * @param {Coord} pt GeoJSON Point\n * @param {Feature<LineString>} line GeoJSON LineString\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreEndVertices=false] whether to ignore the start and end vertices.\n * @param {number} [options.epsilon] Fractional number to compare with the cross product result. Useful for dealing with floating points such as lng/lat points\n * @returns {boolean} true/false\n * @example\n * var pt = turf.point([0, 0]);\n * var line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);\n * var isPointOnLine = turf.booleanPointOnLine(pt, line);\n * //=true\n */\nfunction booleanPointOnLine(\n  pt: Coord,\n  line: Feature<LineString> | LineString,\n  options: {\n    ignoreEndVertices?: boolean;\n    epsilon?: number;\n  } = {}\n): boolean {\n  // Normalize inputs\n  const ptCoords = getCoord(pt);\n  const lineCoords = getCoords(line);\n\n  // Main\n  for (let i = 0; i < lineCoords.length - 1; i++) {\n    let ignoreBoundary: boolean | string = false;\n    if (options.ignoreEndVertices) {\n      if (i === 0) {\n        ignoreBoundary = \"start\";\n      }\n      if (i === lineCoords.length - 2) {\n        ignoreBoundary = \"end\";\n      }\n      if (i === 0 && i + 1 === lineCoords.length - 1) {\n        ignoreBoundary = \"both\";\n      }\n    }\n    if (\n      isPointOnLineSegment(\n        lineCoords[i],\n        lineCoords[i + 1],\n        ptCoords,\n        ignoreBoundary,\n        typeof options.epsilon === \"undefined\" ? null : options.epsilon\n      )\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// See http://stackoverflow.com/a/4833823/1979085\n// See https://stackoverflow.com/a/328122/1048847\n/**\n * @private\n * @param {Position} lineSegmentStart coord pair of start of line\n * @param {Position} lineSegmentEnd coord pair of end of line\n * @param {Position} pt coord pair of point to check\n * @param {boolean|string} excludeBoundary whether the point is allowed to fall on the line ends.\n * @param {number} epsilon Fractional number to compare with the cross product result. Useful for dealing with floating points such as lng/lat points\n * If true which end to ignore.\n * @returns {boolean} true/false\n */\nfunction isPointOnLineSegment(\n  lineSegmentStart: number[],\n  lineSegmentEnd: number[],\n  pt: number[],\n  excludeBoundary: string | boolean,\n  epsilon: number | null\n): boolean {\n  const x = pt[0];\n  const y = pt[1];\n  const x1 = lineSegmentStart[0];\n  const y1 = lineSegmentStart[1];\n  const x2 = lineSegmentEnd[0];\n  const y2 = lineSegmentEnd[1];\n  const dxc = pt[0] - x1;\n  const dyc = pt[1] - y1;\n  const dxl = x2 - x1;\n  const dyl = y2 - y1;\n  const cross = dxc * dyl - dyc * dxl;\n  if (epsilon !== null) {\n    if (Math.abs(cross) > epsilon) {\n      return false;\n    }\n  } else if (cross !== 0) {\n    return false;\n  }\n  if (!excludeBoundary) {\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n      return dxl > 0 ? x1 <= x && x <= x2 : x2 <= x && x <= x1;\n    }\n    return dyl > 0 ? y1 <= y && y <= y2 : y2 <= y && y <= y1;\n  } else if (excludeBoundary === \"start\") {\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n      return dxl > 0 ? x1 < x && x <= x2 : x2 <= x && x < x1;\n    }\n    return dyl > 0 ? y1 < y && y <= y2 : y2 <= y && y < y1;\n  } else if (excludeBoundary === \"end\") {\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n      return dxl > 0 ? x1 <= x && x < x2 : x2 < x && x <= x1;\n    }\n    return dyl > 0 ? y1 <= y && y < y2 : y2 < y && y <= y1;\n  } else if (excludeBoundary === \"both\") {\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n      return dxl > 0 ? x1 < x && x < x2 : x2 < x && x < x1;\n    }\n    return dyl > 0 ? y1 < y && y < y2 : y2 < y && y < y1;\n  }\n  return false;\n}\n\nexport { booleanPointOnLine };\nexport default booleanPointOnLine;\n", "import {\n  BBox,\n  Feature,\n  Geometry,\n  LineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { bbox as calcBbox } from \"@turf/bbox\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { booleanPointOnLine as isPointOnLine } from \"@turf/boolean-point-on-line\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Boolean-contains returns True if the second geometry is completely contained by the first geometry.\n * The interiors of both geometries must intersect and, the interior and boundary of the secondary (geometry b)\n * must not intersect the exterior of the primary (geometry a).\n * Boolean-contains returns the exact opposite result of the `@turf/boolean-within`.\n *\n * @name booleanContains\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n * var point = turf.point([1, 2]);\n *\n * turf.booleanContains(line, point);\n * //=true\n */\nfunction booleanContains(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry\n) {\n  const geom1 = getGeom(feature1);\n  const geom2 = getGeom(feature2);\n  const type1 = geom1.type;\n  const type2 = geom2.type;\n  const coords1 = geom1.coordinates;\n  const coords2 = geom2.coordinates;\n\n  switch (type1) {\n    case \"Point\":\n      switch (type2) {\n        case \"Point\":\n          return compareCoords(coords1, coords2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"Point\":\n          return isPointInMultiPoint(geom1, geom2);\n        case \"MultiPoint\":\n          return isMultiPointInMultiPoint(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"LineString\":\n      switch (type2) {\n        case \"Point\":\n          return isPointOnLine(geom2, geom1, { ignoreEndVertices: true });\n        case \"LineString\":\n          return isLineOnLine(geom1, geom2);\n        case \"MultiPoint\":\n          return isMultiPointOnLine(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"Polygon\":\n      switch (type2) {\n        case \"Point\":\n          return booleanPointInPolygon(geom2, geom1, { ignoreBoundary: true });\n        case \"LineString\":\n          return isLineInPoly(geom1, geom2);\n        case \"Polygon\":\n          return isPolyInPoly(geom1, geom2);\n        case \"MultiPoint\":\n          return isMultiPointInPoly(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPolygon\":\n      switch (type2) {\n        case \"Polygon\":\n          return isPolygonInMultiPolygon(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\n\nfunction isPolygonInMultiPolygon(multiPolygon: MultiPolygon, polygon: Polygon) {\n  return multiPolygon.coordinates.some((coords) =>\n    isPolyInPoly({ type: \"Polygon\", coordinates: coords }, polygon)\n  );\n}\n\nfunction isPointInMultiPoint(multiPoint: MultiPoint, pt: Point) {\n  let i;\n  let output = false;\n  for (i = 0; i < multiPoint.coordinates.length; i++) {\n    if (compareCoords(multiPoint.coordinates[i], pt.coordinates)) {\n      output = true;\n      break;\n    }\n  }\n  return output;\n}\n\nfunction isMultiPointInMultiPoint(\n  multiPoint1: MultiPoint,\n  multiPoint2: MultiPoint\n) {\n  for (const coord2 of multiPoint2.coordinates) {\n    let matchFound = false;\n    for (const coord1 of multiPoint1.coordinates) {\n      if (compareCoords(coord2, coord1)) {\n        matchFound = true;\n        break;\n      }\n    }\n    if (!matchFound) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isMultiPointOnLine(lineString: LineString, multiPoint: MultiPoint) {\n  let haveFoundInteriorPoint = false;\n  for (const coord of multiPoint.coordinates) {\n    if (isPointOnLine(coord, lineString, { ignoreEndVertices: true })) {\n      haveFoundInteriorPoint = true;\n    }\n    if (!isPointOnLine(coord, lineString)) {\n      return false;\n    }\n  }\n  if (haveFoundInteriorPoint) {\n    return true;\n  }\n  return false;\n}\n\nfunction isMultiPointInPoly(polygon: Polygon, multiPoint: MultiPoint) {\n  for (const coord of multiPoint.coordinates) {\n    if (!booleanPointInPolygon(coord, polygon, { ignoreBoundary: true })) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isLineOnLine(lineString1: LineString, lineString2: LineString) {\n  let haveFoundInteriorPoint = false;\n  for (const coords of lineString2.coordinates) {\n    if (\n      isPointOnLine({ type: \"Point\", coordinates: coords }, lineString1, {\n        ignoreEndVertices: true,\n      })\n    ) {\n      haveFoundInteriorPoint = true;\n    }\n    if (\n      !isPointOnLine({ type: \"Point\", coordinates: coords }, lineString1, {\n        ignoreEndVertices: false,\n      })\n    ) {\n      return false;\n    }\n  }\n  return haveFoundInteriorPoint;\n}\n\nfunction isLineInPoly(polygon: Polygon, linestring: LineString) {\n  let output = false;\n  let i = 0;\n\n  const polyBbox = calcBbox(polygon);\n  const lineBbox = calcBbox(linestring);\n  if (!doBBoxOverlap(polyBbox, lineBbox)) {\n    return false;\n  }\n  for (i; i < linestring.coordinates.length - 1; i++) {\n    const midPoint = getMidpoint(\n      linestring.coordinates[i],\n      linestring.coordinates[i + 1]\n    );\n    if (\n      booleanPointInPolygon({ type: \"Point\", coordinates: midPoint }, polygon, {\n        ignoreBoundary: true,\n      })\n    ) {\n      output = true;\n      break;\n    }\n  }\n  return output;\n}\n\n/**\n * Is Polygon2 in Polygon1\n * Only takes into account outer rings\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(\n  feature1: Feature<Polygon> | Polygon,\n  feature2: Feature<Polygon> | Polygon\n) {\n  // Handle Nulls\n  if (feature1.type === \"Feature\" && feature1.geometry === null) {\n    return false;\n  }\n  if (feature2.type === \"Feature\" && feature2.geometry === null) {\n    return false;\n  }\n\n  const poly1Bbox = calcBbox(feature1);\n  const poly2Bbox = calcBbox(feature2);\n  if (!doBBoxOverlap(poly1Bbox, poly2Bbox)) {\n    return false;\n  }\n\n  const coords = getGeom(feature2).coordinates;\n  for (const ring of coords) {\n    for (const coord of ring) {\n      if (!booleanPointInPolygon(coord, feature1)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction doBBoxOverlap(bbox1: BBox, bbox2: BBox) {\n  if (bbox1[0] > bbox2[0]) {\n    return false;\n  }\n  if (bbox1[2] < bbox2[2]) {\n    return false;\n  }\n  if (bbox1[1] > bbox2[1]) {\n    return false;\n  }\n  if (bbox1[3] < bbox2[3]) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1: number[], pair2: number[]) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n\nfunction getMidpoint(pair1: number[], pair2: number[]) {\n  return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];\n}\n\nexport {\n  booleanContains,\n  isPolygonInMultiPolygon,\n  isPointInMultiPoint,\n  isMultiPointInMultiPoint,\n  isMultiPointOnLine,\n  isMultiPointInPoly,\n  isLineOnLine,\n  isLineInPoly,\n  isPolyInPoly,\n  doBBoxOverlap,\n  compareCoords,\n  getMidpoint,\n};\n\nexport default booleanContains;\n", "class TinyQueue {\n    constructor(data = [], compare = defaultCompare) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let left = (pos << 1) + 1;\n            let best = data[left];\n            const right = left + 1;\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nfunction checkWhichEventIsLeft (e1, e2) {\n    if (e1.p.x > e2.p.x) return 1\n    if (e1.p.x < e2.p.x) return -1\n\n    if (e1.p.y !== e2.p.y) return e1.p.y > e2.p.y ? 1 : -1\n    return 1\n}\n\nfunction checkWhichSegmentHasRightEndpointFirst (seg1, seg2) {\n    if (seg1.rightSweepEvent.p.x > seg2.rightSweepEvent.p.x) return 1\n    if (seg1.rightSweepEvent.p.x < seg2.rightSweepEvent.p.x) return -1\n\n    if (seg1.rightSweepEvent.p.y !== seg2.rightSweepEvent.p.y) return seg1.rightSweepEvent.p.y < seg2.rightSweepEvent.p.y ? 1 : -1\n    return 1\n}\n\nclass Event {\n\n    constructor (p, featureId, ringId, eventId) {\n        this.p = {\n            x: p[0],\n            y: p[1]\n        };\n        this.featureId = featureId;\n        this.ringId = ringId;\n        this.eventId = eventId;\n\n        this.otherEvent = null;\n        this.isLeftEndpoint = null;\n    }\n\n    isSamePoint (eventToCheck) {\n        return this.p.x === eventToCheck.p.x && this.p.y === eventToCheck.p.y\n    }\n}\n\nfunction fillEventQueue (geojson, eventQueue) {\n    if (geojson.type === 'FeatureCollection') {\n        const features = geojson.features;\n        for (let i = 0; i < features.length; i++) {\n            processFeature(features[i], eventQueue);\n        }\n    } else {\n        processFeature(geojson, eventQueue);\n    }\n}\n\nlet featureId = 0;\nlet ringId = 0;\nlet eventId = 0;\nfunction processFeature (featureOrGeometry, eventQueue) {\n    const geom = featureOrGeometry.type === 'Feature' ? featureOrGeometry.geometry : featureOrGeometry;\n    let coords = geom.coordinates;\n    // standardise the input\n    if (geom.type === 'Polygon' || geom.type === 'MultiLineString') coords = [coords];\n    if (geom.type === 'LineString') coords = [[coords]];\n\n    for (let i = 0; i < coords.length; i++) {\n        for (let ii = 0; ii < coords[i].length; ii++) {\n            let currentP = coords[i][ii][0];\n            let nextP = null;\n            ringId = ringId + 1;\n            for (let iii = 0; iii < coords[i][ii].length - 1; iii++) {\n                nextP = coords[i][ii][iii + 1];\n\n                const e1 = new Event(currentP, featureId, ringId, eventId);\n                const e2 = new Event(nextP, featureId, ringId, eventId + 1);\n\n                e1.otherEvent = e2;\n                e2.otherEvent = e1;\n\n                if (checkWhichEventIsLeft(e1, e2) > 0) {\n                    e2.isLeftEndpoint = true;\n                    e1.isLeftEndpoint = false;\n                } else {\n                    e1.isLeftEndpoint = true;\n                    e2.isLeftEndpoint = false;\n                }\n                eventQueue.push(e1);\n                eventQueue.push(e2);\n\n                currentP = nextP;\n                eventId = eventId + 1;\n            }\n        }\n    }\n    featureId = featureId + 1;\n}\n\nclass Segment {\n\n    constructor (event) {\n        this.leftSweepEvent = event;\n        this.rightSweepEvent = event.otherEvent;\n    }\n}\n\nfunction testSegmentIntersect (seg1, seg2) {\n    if (seg1 === null || seg2 === null) return false\n\n    if (seg1.leftSweepEvent.ringId === seg2.leftSweepEvent.ringId &&\n        (seg1.rightSweepEvent.isSamePoint(seg2.leftSweepEvent) ||\n        seg1.rightSweepEvent.isSamePoint(seg2.leftSweepEvent) ||\n        seg1.rightSweepEvent.isSamePoint(seg2.rightSweepEvent) ||\n        seg1.leftSweepEvent.isSamePoint(seg2.leftSweepEvent) ||\n        seg1.leftSweepEvent.isSamePoint(seg2.rightSweepEvent))) return false\n\n    const x1 = seg1.leftSweepEvent.p.x;\n    const y1 = seg1.leftSweepEvent.p.y;\n    const x2 = seg1.rightSweepEvent.p.x;\n    const y2 = seg1.rightSweepEvent.p.y;\n    const x3 = seg2.leftSweepEvent.p.x;\n    const y3 = seg2.leftSweepEvent.p.y;\n    const x4 = seg2.rightSweepEvent.p.x;\n    const y4 = seg2.rightSweepEvent.p.y;\n\n    const denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));\n    const numeA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));\n    const numeB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));\n\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) return false\n        return false\n    }\n\n    const uA = numeA / denom;\n    const uB = numeB / denom;\n\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        const x = x1 + (uA * (x2 - x1));\n        const y = y1 + (uA * (y2 - y1));\n        return [x, y]\n    }\n    return false\n}\n\n// import {debugEventAndSegments, debugRemovingSegment} from './debug'\n\nfunction runCheck (eventQueue, ignoreSelfIntersections) {\n    ignoreSelfIntersections = ignoreSelfIntersections ? ignoreSelfIntersections : false;\n\n    const intersectionPoints = [];\n    const outQueue = new TinyQueue([], checkWhichSegmentHasRightEndpointFirst);\n\n    while (eventQueue.length) {\n        const event = eventQueue.pop();\n        if (event.isLeftEndpoint) {\n            // debugEventAndSegments(event.p, outQueue.data)\n            const segment = new Segment(event);\n            for (let i = 0; i < outQueue.data.length; i++) {\n                const otherSeg = outQueue.data[i];\n                if (ignoreSelfIntersections) {\n                    if (otherSeg.leftSweepEvent.featureId === event.featureId) continue\n                }\n                const intersection = testSegmentIntersect(segment, otherSeg);\n                if (intersection !== false) intersectionPoints.push(intersection);\n            }\n            outQueue.push(segment);\n        } else if (event.isLeftEndpoint === false) {\n            outQueue.pop();\n            // const seg = outQueue.pop()\n            // debugRemovingSegment(event.p, seg)\n        }\n    }\n    return intersectionPoints\n}\n\nfunction sweeplineIntersections (geojson, ignoreSelfIntersections) {\n    const eventQueue = new TinyQueue([], checkWhichEventIsLeft);\n    fillEventQueue(geojson, eventQueue);\n    return runCheck(eventQueue, ignoreSelfIntersections)\n}\n\nexport default sweeplineIntersections;\n", "import { feature, featureCollection, point } from \"@turf/helpers\";\nimport {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport type { Intersection } from \"sweepline-intersections\";\nimport { sweeplineIntersections as findIntersections } from \"./lib/sweepline-intersections-export.js\";\n\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.removeDuplicates=true] remove duplicate intersections\n * @param {boolean} [options.ignoreSelfIntersections=false] ignores self-intersections on input features\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect<\n  G1 extends LineString | MultiLineString | Polygon | MultiPolygon,\n  G2 extends LineString | MultiLineString | Polygon | MultiPolygon,\n>(\n  line1: FeatureCollection<G1> | Feature<G1> | G1,\n  line2: FeatureCollection<G2> | Feature<G2> | G2,\n  options: {\n    removeDuplicates?: boolean;\n    ignoreSelfIntersections?: boolean;\n  } = {}\n): FeatureCollection<Point> {\n  const { removeDuplicates = true, ignoreSelfIntersections = false } = options;\n  let features: Feature<G1 | G2>[] = [];\n  if (line1.type === \"FeatureCollection\")\n    features = features.concat(line1.features);\n  else if (line1.type === \"Feature\") features.push(line1);\n  else if (\n    line1.type === \"LineString\" ||\n    line1.type === \"Polygon\" ||\n    line1.type === \"MultiLineString\" ||\n    line1.type === \"MultiPolygon\"\n  ) {\n    features.push(feature(line1));\n  }\n\n  if (line2.type === \"FeatureCollection\")\n    features = features.concat(line2.features);\n  else if (line2.type === \"Feature\") features.push(line2);\n  else if (\n    line2.type === \"LineString\" ||\n    line2.type === \"Polygon\" ||\n    line2.type === \"MultiLineString\" ||\n    line2.type === \"MultiPolygon\"\n  ) {\n    features.push(feature(line2));\n  }\n\n  const intersections = findIntersections(\n    featureCollection(features),\n    ignoreSelfIntersections\n  );\n\n  let results: Intersection[] = [];\n  if (removeDuplicates) {\n    const unique: Record<string, boolean> = {};\n    intersections.forEach((intersection) => {\n      const key = intersection.join(\",\");\n      if (!unique[key]) {\n        unique[key] = true;\n        results.push(intersection);\n      }\n    });\n  } else {\n    results = intersections;\n  }\n  return featureCollection(results.map((r) => point(r)));\n}\n\nexport { lineIntersect };\nexport default lineIntersect;\n", "// Get around problems with moduleResolution node16 and some older libraries.\n// Manifests as \"This expression is not callable ... has no call signatures\"\n// https://stackoverflow.com/a/74709714\n\nimport lib from \"sweepline-intersections\";\n\nexport const sweeplineIntersections = lib as unknown as typeof lib.default;\n", "import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nfunction polygonToLine<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  poly: Feature<G, P> | G,\n  options: { properties?: any } = {}\n):\n  | Feature<LineString | MultiLineString, P>\n  | FeatureCollection<LineString | MultiLineString, P> {\n  const geom: any = getGeom(poly);\n  if (!options.properties && poly.type === \"Feature\") {\n    options.properties = poly.properties;\n  }\n  switch (geom.type) {\n    case \"Polygon\":\n      return singlePolygonToLine(geom, options);\n    case \"MultiPolygon\":\n      return multiPolygonToLine(geom, options);\n    default:\n      throw new Error(\"invalid poly\");\n  }\n}\n\n/**\n * @private\n */\nfunction singlePolygonToLine<\n  G extends Polygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  poly: Feature<G, P> | G,\n  options: { properties?: any } = {}\n): Feature<LineString | MultiLineString, P> {\n  const geom = getGeom(poly);\n  const coords: any[] = geom.coordinates;\n  const properties: any = options.properties\n    ? options.properties\n    : poly.type === \"Feature\"\n      ? poly.properties\n      : {};\n\n  return coordsToLine(coords, properties);\n}\n\n/**\n * @private\n */\nfunction multiPolygonToLine<\n  G extends MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  multiPoly: Feature<G, P> | G,\n  options: { properties?: P } = {}\n): FeatureCollection<LineString | MultiLineString, P> {\n  const geom = getGeom(multiPoly);\n  const coords: any[] = geom.coordinates;\n  const properties: any = options.properties\n    ? options.properties\n    : multiPoly.type === \"Feature\"\n      ? multiPoly.properties\n      : {};\n\n  const lines: Array<Feature<LineString | MultiLineString, P>> = [];\n  coords.forEach((coord) => {\n    lines.push(coordsToLine(coord, properties));\n  });\n  return featureCollection(lines);\n}\n\n/**\n * @private\n */\nfunction coordsToLine<P extends GeoJsonProperties = GeoJsonProperties>(\n  coords: number[][][],\n  properties: P\n): Feature<LineString | MultiLineString, P> {\n  if (coords.length > 1) {\n    return multiLineString(coords, properties);\n  }\n  return lineString(coords[0], properties);\n}\n\nexport { polygonToLine, coordsToLine, multiPolygonToLine, singlePolygonToLine };\nexport default polygonToLine;\n", "import { Feature, Geometry, Polygon, LineString, MultiPoint } from \"geojson\";\nimport { lineIntersect } from \"@turf/line-intersect\";\nimport { polygonToLine } from \"@turf/polygon-to-line\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { getGeom } from \"@turf/invariant\";\nimport { point } from \"@turf/helpers\";\n\n/**\n * Boolean-Crosses returns True if the intersection results in a geometry whose dimension is one less than\n * the maximum dimension of the two source geometries and the intersection set is interior to\n * both source geometries.\n *\n * Boolean-Crosses returns t (TRUE) for only multipoint/polygon, multipoint/linestring, linestring/linestring, linestring/polygon, and linestring/multipolygon comparisons.\n * Other comparisons are not supported as they are outside the OpenGIS Simple Features spec and may give unexpected results.\n *\n * @name booleanCrosses\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line1 = turf.lineString([[-2, 2], [4, 2]]);\n * var line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * var cross = turf.booleanCrosses(line1, line2);\n * //=true\n */\nfunction booleanCrosses(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry\n): boolean {\n  var geom1 = getGeom(feature1);\n  var geom2 = getGeom(feature2);\n  var type1 = geom1.type;\n  var type2 = geom2.type;\n\n  switch (type1) {\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"LineString\":\n          return doMultiPointAndLineStringCross(geom1, geom2);\n        case \"Polygon\":\n          return doesMultiPointCrossPoly(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"LineString\":\n      switch (type2) {\n        case \"MultiPoint\": // An inverse operation\n          return doMultiPointAndLineStringCross(geom2, geom1);\n        case \"LineString\":\n          return doLineStringsCross(geom1, geom2);\n        case \"Polygon\":\n          return doLineStringAndPolygonCross(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"Polygon\":\n      switch (type2) {\n        case \"MultiPoint\": // An inverse operation\n          return doesMultiPointCrossPoly(geom2, geom1);\n        case \"LineString\": // An inverse operation\n          return doLineStringAndPolygonCross(geom2, geom1);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\n\nfunction doMultiPointAndLineStringCross(\n  multiPoint: MultiPoint,\n  lineString: LineString\n) {\n  var foundIntPoint = false;\n  var foundExtPoint = false;\n  var pointLength = multiPoint.coordinates.length;\n  var i = 0;\n  while (i < pointLength && !foundIntPoint && !foundExtPoint) {\n    for (var i2 = 0; i2 < lineString.coordinates.length - 1; i2++) {\n      var incEndVertices = true;\n      if (i2 === 0 || i2 === lineString.coordinates.length - 2) {\n        incEndVertices = false;\n      }\n      if (\n        isPointOnLineSegment(\n          lineString.coordinates[i2],\n          lineString.coordinates[i2 + 1],\n          multiPoint.coordinates[i],\n          incEndVertices\n        )\n      ) {\n        foundIntPoint = true;\n      } else {\n        foundExtPoint = true;\n      }\n    }\n    i++;\n  }\n  return foundIntPoint && foundExtPoint;\n}\n\nfunction doLineStringsCross(lineString1: LineString, lineString2: LineString) {\n  var doLinesIntersect = lineIntersect(lineString1, lineString2);\n  if (doLinesIntersect.features.length > 0) {\n    for (var i = 0; i < lineString1.coordinates.length - 1; i++) {\n      for (var i2 = 0; i2 < lineString2.coordinates.length - 1; i2++) {\n        var incEndVertices = true;\n        if (i2 === 0 || i2 === lineString2.coordinates.length - 2) {\n          incEndVertices = false;\n        }\n        if (\n          isPointOnLineSegment(\n            lineString1.coordinates[i],\n            lineString1.coordinates[i + 1],\n            lineString2.coordinates[i2],\n            incEndVertices\n          )\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction doLineStringAndPolygonCross(lineString: LineString, polygon: Polygon) {\n  const line: any = polygonToLine(polygon);\n  const doLinesIntersect = lineIntersect(lineString, line);\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n  return false;\n}\n\nfunction doesMultiPointCrossPoly(multiPoint: MultiPoint, polygon: Polygon) {\n  var foundIntPoint = false;\n  var foundExtPoint = false;\n  var pointLength = multiPoint.coordinates.length;\n  for (let i = 0; i < pointLength && (!foundIntPoint || !foundExtPoint); i++) {\n    if (booleanPointInPolygon(point(multiPoint.coordinates[i]), polygon)) {\n      foundIntPoint = true;\n    } else {\n      foundExtPoint = true;\n    }\n  }\n\n  return foundExtPoint && foundIntPoint;\n}\n\n/**\n * Is a point on a line segment\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {number[]} lineSegmentStart coord pair of start of line\n * @param {number[]} lineSegmentEnd coord pair of end of line\n * @param {number[]} pt coord pair of point to check\n * @param {boolean} incEnd whether the point is allowed to fall on the line ends\n * @returns {boolean} true/false\n */\nfunction isPointOnLineSegment(\n  lineSegmentStart: number[],\n  lineSegmentEnd: number[],\n  pt: number[],\n  incEnd: boolean\n) {\n  var dxc = pt[0] - lineSegmentStart[0];\n  var dyc = pt[1] - lineSegmentStart[1];\n  var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n  var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n  var cross = dxc * dyl - dyc * dxl;\n  if (cross !== 0) {\n    return false;\n  }\n  if (incEnd) {\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n      return dxl > 0\n        ? lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0]\n        : lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n    }\n    return dyl > 0\n      ? lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1]\n      : lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n  } else {\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n      return dxl > 0\n        ? lineSegmentStart[0] < pt[0] && pt[0] < lineSegmentEnd[0]\n        : lineSegmentEnd[0] < pt[0] && pt[0] < lineSegmentStart[0];\n    }\n    return dyl > 0\n      ? lineSegmentStart[1] < pt[1] && pt[1] < lineSegmentEnd[1]\n      : lineSegmentEnd[1] < pt[1] && pt[1] < lineSegmentStart[1];\n  }\n}\n\nexport { booleanCrosses };\nexport default booleanCrosses;\n", "import {\n  Feature,\n  Geometry,\n  LineString,\n  Point,\n  Polygon,\n  Position,\n} from \"geojson\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { lineIntersect } from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport { polygonToLine } from \"@turf/polygon-to-line\";\n\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreSelfIntersections=false] ignores self-intersections on input features\n * @returns {boolean} true if the intersection is an empty set, false otherwise\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry,\n  options: {\n    ignoreSelfIntersections?: boolean;\n  } = {}\n): boolean {\n  const ignoreSelfIntersections: boolean =\n    options.ignoreSelfIntersections ?? false;\n\n  let bool = true;\n  flattenEach(feature1, (flatten1) => {\n    flattenEach(feature2, (flatten2) => {\n      if (bool === false) {\n        return false;\n      }\n      bool = disjoint(\n        flatten1.geometry,\n        flatten2.geometry,\n        ignoreSelfIntersections\n      );\n    });\n  });\n  return bool;\n}\n\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @param {boolean} ignoreSelfIntersections ignore self-intersections on input features\n * @returns {boolean} true if disjoint, false otherwise\n */\nfunction disjoint(geom1: any, geom2: any, ignoreSelfIntersections: boolean) {\n  switch (geom1.type) {\n    case \"Point\":\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      switch (geom2.type) {\n        case \"Point\":\n          return !compareCoords(geom1.coordinates, geom2.coordinates);\n        case \"LineString\":\n          return !isPointOnLine(geom2, geom1);\n        case \"Polygon\":\n          return !booleanPointInPolygon(geom1, geom2);\n      }\n      /* istanbul ignore next */\n      break;\n    case \"LineString\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !isPointOnLine(geom1, geom2);\n        case \"LineString\":\n          return !isLineOnLine(geom1, geom2, ignoreSelfIntersections);\n        case \"Polygon\":\n          return !isLineInPoly(geom2, geom1, ignoreSelfIntersections);\n      }\n      /* istanbul ignore next */\n      break;\n    case \"Polygon\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !booleanPointInPolygon(geom2, geom1);\n        case \"LineString\":\n          return !isLineInPoly(geom1, geom2, ignoreSelfIntersections);\n        case \"Polygon\":\n          return !isPolyInPoly(geom2, geom1, ignoreSelfIntersections);\n      }\n  }\n  return false;\n}\n\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString: LineString, pt: Point) {\n  for (let i = 0; i < lineString.coordinates.length - 1; i++) {\n    if (\n      isPointOnLineSegment(\n        lineString.coordinates[i],\n        lineString.coordinates[i + 1],\n        pt.coordinates\n      )\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isLineOnLine(\n  lineString1: LineString,\n  lineString2: LineString,\n  ignoreSelfIntersections: boolean\n) {\n  const doLinesIntersect = lineIntersect(lineString1, lineString2, {\n    ignoreSelfIntersections,\n  });\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n  return false;\n}\n\nfunction isLineInPoly(\n  polygon: Polygon,\n  lineString: LineString,\n  ignoreSelfIntersections: boolean\n) {\n  for (const coord of lineString.coordinates) {\n    if (booleanPointInPolygon(coord, polygon)) {\n      return true;\n    }\n  }\n  const doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon), {\n    ignoreSelfIntersections,\n  });\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @param {boolean} ignoreSelfIntersections ignore self-intersections on input features\n * @returns {boolean} true if geom1 is in geom2, false otherwise\n */\nfunction isPolyInPoly(\n  feature1: Polygon,\n  feature2: Polygon,\n  ignoreSelfIntersections: boolean\n) {\n  for (const coord1 of feature1.coordinates[0]) {\n    if (booleanPointInPolygon(coord1, feature2)) {\n      return true;\n    }\n  }\n  for (const coord2 of feature2.coordinates[0]) {\n    if (booleanPointInPolygon(coord2, feature1)) {\n      return true;\n    }\n  }\n  const doLinesIntersect = lineIntersect(\n    polygonToLine(feature1),\n    polygonToLine(feature2),\n    { ignoreSelfIntersections }\n  );\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n  return false;\n}\n\nfunction isPointOnLineSegment(\n  lineSegmentStart: Position,\n  lineSegmentEnd: Position,\n  pt: Position\n) {\n  const dxc = pt[0] - lineSegmentStart[0];\n  const dyc = pt[1] - lineSegmentStart[1];\n  const dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n  const dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n  const cross = dxc * dyl - dyc * dxl;\n  if (cross !== 0) {\n    return false;\n  }\n  if (Math.abs(dxl) >= Math.abs(dyl)) {\n    if (dxl > 0) {\n      return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n    } else {\n      return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n    }\n  } else if (dyl > 0) {\n    return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n  } else {\n    return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n  }\n}\n\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true if coord pairs match, false otherwise\n */\nfunction compareCoords(pair1: Position, pair2: Position) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n\nexport { booleanDisjoint };\nexport default booleanDisjoint;\n", "import {\n  Feature,\n  LineString,\n  Position,\n  GeoJSON,\n  Point,\n  Polygon,\n  GeometryCollection,\n  FeatureCollection,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  GeoJsonProperties,\n} from \"geojson\";\n\n/**\n\n * GeoJSON equality checking utility.\n * Adapted from https://github.com/geosquare/geojson-equality\n *\n * @memberof helpers\n * @type {Class}\n */\nclass GeojsonEquality {\n  private precision: number;\n  private direction = false;\n  private compareProperties = true;\n\n  constructor(opts?: {\n    precision?: number;\n    direction?: boolean;\n    compareProperties?: boolean;\n  }) {\n    this.precision = 10 ** -(opts?.precision ?? 17);\n    this.direction = opts?.direction ?? false;\n    this.compareProperties = opts?.compareProperties ?? true;\n  }\n\n  compare(g1: GeoJSON, g2: GeoJSON): boolean {\n    if (g1.type !== g2.type) {\n      return false;\n    }\n\n    if (!sameLength(g1, g2)) {\n      return false;\n    }\n\n    switch (g1.type) {\n      case \"Point\":\n        return this.compareCoord(g1.coordinates, (g2 as Point).coordinates);\n      case \"LineString\":\n        return this.compareLine(g1.coordinates, (g2 as LineString).coordinates);\n      case \"Polygon\":\n        return this.comparePolygon(g1, g2 as Polygon);\n      case \"GeometryCollection\":\n        return this.compareGeometryCollection(g1, g2 as GeometryCollection);\n      case \"Feature\":\n        return this.compareFeature(g1, g2 as Feature);\n      case \"FeatureCollection\":\n        return this.compareFeatureCollection(g1, g2 as FeatureCollection);\n      default:\n        if (g1.type.startsWith(\"Multi\")) {\n          const g1s = explode(g1);\n          const g2s = explode(\n            g2 as MultiLineString | MultiPoint | MultiPolygon\n          );\n          return g1s.every((g1part) =>\n            g2s.some((g2part) => this.compare(g1part as any, g2part as any))\n          );\n        }\n    }\n    return false;\n  }\n\n  private compareCoord(c1: Position, c2: Position) {\n    return (\n      c1.length === c2.length &&\n      c1.every((c, i) => Math.abs(c - c2[i]) < this.precision)\n    );\n  }\n\n  private compareLine(\n    path1: Position[],\n    path2: Position[],\n    ind = 0,\n    isPoly = false\n  ): boolean {\n    if (!sameLength(path1, path2)) {\n      return false;\n    }\n    const p1 = path1;\n    let p2 = path2;\n    if (isPoly && !this.compareCoord(p1[0], p2[0])) {\n      // fix start index of both to same point\n      const startIndex = this.fixStartIndex(p2, p1);\n      if (!startIndex) {\n        return false;\n      } else {\n        p2 = startIndex;\n      }\n    }\n    // for linestring ind =0 and for polygon ind =1\n    const sameDirection = this.compareCoord(p1[ind], p2[ind]);\n    if (this.direction || sameDirection) {\n      return this.comparePath(p1, p2);\n    } else {\n      if (this.compareCoord(p1[ind], p2[p2.length - (1 + ind)])) {\n        return this.comparePath(p1.slice().reverse(), p2);\n      }\n      return false;\n    }\n  }\n\n  private fixStartIndex(sourcePath: Position[], targetPath: Position[]) {\n    //make sourcePath first point same as of targetPath\n    let correctPath,\n      ind = -1;\n    for (let i = 0; i < sourcePath.length; i++) {\n      if (this.compareCoord(sourcePath[i], targetPath[0])) {\n        ind = i;\n        break;\n      }\n    }\n    if (ind >= 0) {\n      correctPath = ([] as Position[]).concat(\n        sourcePath.slice(ind, sourcePath.length),\n        sourcePath.slice(1, ind + 1)\n      );\n    }\n    return correctPath;\n  }\n\n  private comparePath(p1: Position[], p2: Position[]) {\n    return p1.every((c, i) => this.compareCoord(c, p2[i]));\n  }\n\n  private comparePolygon(g1: Polygon, g2: Polygon) {\n    if (this.compareLine(g1.coordinates[0], g2.coordinates[0], 1, true)) {\n      const holes1 = g1.coordinates.slice(1, g1.coordinates.length);\n      const holes2 = g2.coordinates.slice(1, g2.coordinates.length);\n      return holes1.every((h1) =>\n        holes2.some((h2) => this.compareLine(h1, h2, 1, true))\n      );\n    }\n    return false;\n  }\n\n  private compareGeometryCollection(\n    g1: GeometryCollection,\n    g2: GeometryCollection\n  ) {\n    return (\n      sameLength(g1.geometries, g2.geometries) &&\n      this.compareBBox(g1, g2) &&\n      g1.geometries.every((g, i) => this.compare(g, g2.geometries[i]))\n    );\n  }\n\n  private compareFeature(g1: Feature, g2: Feature) {\n    return (\n      g1.id === g2.id &&\n      (this.compareProperties ? equal(g1.properties, g2.properties) : true) &&\n      this.compareBBox(g1, g2) &&\n      this.compare(g1.geometry, g2.geometry)\n    );\n  }\n\n  private compareFeatureCollection(\n    g1: FeatureCollection,\n    g2: FeatureCollection\n  ) {\n    return (\n      sameLength(g1.features, g2.features) &&\n      this.compareBBox(g1, g2) &&\n      g1.features.every((f, i) => this.compare(f, g2.features[i]))\n    );\n  }\n\n  private compareBBox(g1: GeoJSON, g2: GeoJSON): boolean {\n    return (\n      Boolean(!g1.bbox && !g2.bbox) ||\n      (g1.bbox && g2.bbox ? this.compareCoord(g1.bbox, g2.bbox) : false)\n    );\n  }\n}\n\nfunction sameLength(g1: any, g2: any) {\n  return g1.coordinates\n    ? g1.coordinates.length === g2.coordinates.length\n    : g1.length === g2.length;\n}\n\nfunction explode(g: MultiLineString | MultiPoint | MultiPolygon) {\n  return g.coordinates.map((part) => ({\n    type: g.type.replace(\"Multi\", \"\"),\n    coordinates: part,\n  }));\n}\n\nfunction geojsonEquality(\n  g1: GeoJSON,\n  g2: GeoJSON,\n  opts?: {\n    precision?: number;\n    direction?: boolean;\n    compareProperties?: boolean;\n  }\n): boolean {\n  const eq = new GeojsonEquality(opts);\n\n  return eq.compare(g1, g2);\n}\n\n// Adapted from https://medium.com/syncfusion/5-different-ways-to-deep-compare-javascript-objects-6708a0da9f05\nfunction equal(object1: GeoJsonProperties, object2: GeoJsonProperties) {\n  if (object1 === null && object2 === null) {\n    return true;\n  }\n\n  if (object1 === null || object2 === null) {\n    return false;\n  }\n\n  const objKeys1 = Object.keys(object1);\n  const objKeys2 = Object.keys(object2);\n\n  if (objKeys1.length !== objKeys2.length) return false;\n\n  for (var key of objKeys1) {\n    const value1 = object1[key];\n    const value2 = object2[key];\n\n    const isObjects = isObject(value1) && isObject(value2);\n\n    if (\n      (isObjects && !equal(value1, value2)) ||\n      (!isObjects && value1 !== value2)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst isObject = (object: any) => {\n  return object != null && typeof object === \"object\";\n};\n\nexport { GeojsonEquality, geojsonEquality };\nexport default GeojsonEquality;\n", "import { Position } from \"geojson\";\nimport { feature } from \"@turf/helpers\";\nimport { getCoords, getType } from \"@turf/invariant\";\n\n// To-Do => Improve Typescript GeoJSON handling\n\n/**\n * Removes redundant coordinates from any GeoJSON Geometry.\n *\n * @name cleanCoords\n * @param {Geometry|Feature} geojson Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated\n * @returns {Geometry|Feature} the cleaned input Feature/Geometry\n * @example\n * var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\n * var multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n *\n * turf.cleanCoords(line).geometry.coordinates;\n * //= [[0, 0], [0, 10]]\n *\n * turf.cleanCoords(multiPoint).geometry.coordinates;\n * //= [[0, 0], [2, 2]]\n */\nfunction cleanCoords(\n  geojson: any,\n  options: {\n    mutate?: boolean;\n  } = {}\n) {\n  // Backwards compatible with v4.0\n  var mutate = typeof options === \"object\" ? options.mutate : options;\n  if (!geojson) throw new Error(\"geojson is required\");\n  var type = getType(geojson);\n\n  // Store new \"clean\" points in this Array\n  var newCoords = [];\n\n  switch (type) {\n    case \"LineString\":\n      newCoords = cleanLine(geojson, type);\n      break;\n    case \"MultiLineString\":\n    case \"Polygon\":\n      getCoords(geojson).forEach(function (line) {\n        newCoords.push(cleanLine(line, type));\n      });\n      break;\n    case \"MultiPolygon\":\n      getCoords(geojson).forEach(function (polygons: any) {\n        var polyPoints: Position[] = [];\n        polygons.forEach(function (ring: Position[]) {\n          polyPoints.push(cleanLine(ring, type));\n        });\n        newCoords.push(polyPoints);\n      });\n      break;\n    case \"Point\":\n      return geojson;\n    case \"MultiPoint\":\n      var existing: Record<string, true> = {};\n      getCoords(geojson).forEach(function (coord: any) {\n        var key = coord.join(\"-\");\n        if (!Object.prototype.hasOwnProperty.call(existing, key)) {\n          newCoords.push(coord);\n          existing[key] = true;\n        }\n      });\n      break;\n    default:\n      throw new Error(type + \" geometry not supported\");\n  }\n\n  // Support input mutation\n  if (geojson.coordinates) {\n    if (mutate === true) {\n      geojson.coordinates = newCoords;\n      return geojson;\n    }\n    return { type: type, coordinates: newCoords };\n  } else {\n    if (mutate === true) {\n      geojson.geometry.coordinates = newCoords;\n      return geojson;\n    }\n    return feature({ type: type, coordinates: newCoords }, geojson.properties, {\n      bbox: geojson.bbox,\n      id: geojson.id,\n    });\n  }\n}\n\n/**\n * Clean Coords\n *\n * @private\n * @param {Array<number>|LineString} line Line\n * @param {string} type Type of geometry\n * @returns {Array<number>} Cleaned coordinates\n */\nfunction cleanLine(line: Position[], type: string) {\n  var points = getCoords(line);\n  // handle \"clean\" segment\n  if (points.length === 2 && !equals(points[0], points[1])) return points;\n\n  var newPoints = [];\n  var secondToLast = points.length - 1;\n  var newPointsLength = newPoints.length;\n\n  newPoints.push(points[0]);\n  for (var i = 1; i < secondToLast; i++) {\n    var prevAddedPoint = newPoints[newPoints.length - 1];\n    if (\n      points[i][0] === prevAddedPoint[0] &&\n      points[i][1] === prevAddedPoint[1]\n    )\n      continue;\n    else {\n      newPoints.push(points[i]);\n      newPointsLength = newPoints.length;\n      if (newPointsLength > 2) {\n        if (\n          isPointOnLineSegment(\n            newPoints[newPointsLength - 3],\n            newPoints[newPointsLength - 1],\n            newPoints[newPointsLength - 2]\n          )\n        )\n          newPoints.splice(newPoints.length - 2, 1);\n      }\n    }\n  }\n  newPoints.push(points[points.length - 1]);\n  newPointsLength = newPoints.length;\n\n  // (Multi)Polygons must have at least 4 points, but a closed LineString with only 3 points is acceptable\n  if (\n    (type === \"Polygon\" || type === \"MultiPolygon\") &&\n    equals(points[0], points[points.length - 1]) &&\n    newPointsLength < 4\n  ) {\n    throw new Error(\"invalid polygon\");\n  }\n\n  if (type === \"LineString\" && newPointsLength < 3) {\n    return newPoints;\n  }\n\n  if (\n    isPointOnLineSegment(\n      newPoints[newPointsLength - 3],\n      newPoints[newPointsLength - 1],\n      newPoints[newPointsLength - 2]\n    )\n  )\n    newPoints.splice(newPoints.length - 2, 1);\n\n  return newPoints;\n}\n\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Position} pt1 point\n * @param {Position} pt2 point\n * @returns {boolean} true if they are equals\n */\nfunction equals(pt1: Position, pt2: Position) {\n  return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n\n/**\n * Returns if `point` is on the segment between `start` and `end`.\n * Borrowed from `@turf/boolean-point-on-line` to speed up the evaluation (instead of using the module as dependency)\n *\n * @private\n * @param {Position} start coord pair of start of line\n * @param {Position} end coord pair of end of line\n * @param {Position} point coord pair of point to check\n * @returns {boolean} true/false\n */\nfunction isPointOnLineSegment(start: Position, end: Position, point: Position) {\n  var x = point[0],\n    y = point[1];\n  var startX = start[0],\n    startY = start[1];\n  var endX = end[0],\n    endY = end[1];\n\n  var dxc = x - startX;\n  var dyc = y - startY;\n  var dxl = endX - startX;\n  var dyl = endY - startY;\n  var cross = dxc * dyl - dyc * dxl;\n\n  if (cross !== 0) return false;\n  else if (Math.abs(dxl) >= Math.abs(dyl))\n    return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;\n  else return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;\n}\n\nexport { cleanCoords };\nexport default cleanCoords;\n", "import { Feature, Geometry } from \"geojson\";\nimport { geojsonEquality } from \"geojson-equality-ts\";\nimport { cleanCoords } from \"@turf/clean-coords\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Determine whether two geometries of the same type have identical X,Y coordinate values.\n * See http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm\n *\n * @name booleanEqual\n * @param {Geometry|Feature} feature1 GeoJSON input\n * @param {Geometry|Feature} feature2 GeoJSON input\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] decimal precision to use when comparing coordinates\n * @returns {boolean} true if the objects are equal, false otherwise\n * @example\n * var pt1 = turf.point([0, 0]);\n * var pt2 = turf.point([0, 0]);\n * var pt3 = turf.point([1, 1]);\n *\n * turf.booleanEqual(pt1, pt2);\n * //= true\n * turf.booleanEqual(pt2, pt3);\n * //= false\n */\nfunction booleanEqual(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry,\n  options: {\n    precision?: number;\n  } = {}\n): boolean {\n  let precision = options.precision;\n\n  precision =\n    precision === undefined || precision === null || isNaN(precision)\n      ? 6\n      : precision;\n\n  if (typeof precision !== \"number\" || !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n\n  const type1 = getGeom(feature1).type;\n  const type2 = getGeom(feature2).type;\n  if (type1 !== type2) return false;\n\n  return geojsonEquality(cleanCoords(feature1), cleanCoords(feature2), {\n    precision,\n  });\n}\n\nexport { booleanEqual };\nexport default booleanEqual;\n", "import { Feature, Geometry } from \"geojson\";\nimport { booleanDisjoint } from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n\n/**\n * Boolean-intersects returns (TRUE) if the intersection of the two geometries is NOT an empty set.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreSelfIntersections=false] ignores self-intersections on input features\n * @returns {boolean} true if geometries intersect, false otherwise\n * @example\n * var point1 = turf.point([2, 2]);\n * var point2 = turf.point([1, 2]);\n * var line = turf.lineString([[1, 1], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point1);\n * //=false\n *\n * turf.booleanIntersects(line, point2);\n * //=true\n *\n * //addToMap\n * var addToMap = [point1, point2, line];\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n */\nfunction booleanIntersects(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry,\n  options: {\n    ignoreSelfIntersections?: boolean;\n  } = {}\n) {\n  const ignoreSelfIntersections: boolean =\n    options.ignoreSelfIntersections ?? false;\n\n  let bool = false;\n  flattenEach(feature1, (flatten1) => {\n    flattenEach(feature2, (flatten2) => {\n      if (bool === true) {\n        return true;\n      }\n      bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry, {\n        ignoreSelfIntersections,\n      });\n    });\n  });\n  return bool;\n}\n\nexport { booleanIntersects };\nexport default booleanIntersects;\n", "\nexport default function quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n", "import quickselect from 'quickselect';\n\nexport default class RBush {\n    constructor(maxEntries = 9) {\n        // max entries in a node is 9 by default; min node fill is 40% for best performance\n        this._maxEntries = Math.max(4, maxEntries);\n        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n        this.clear();\n    }\n\n    all() {\n        return this._all(this.data, []);\n    }\n\n    search(bbox) {\n        let node = this.data;\n        const result = [];\n\n        if (!intersects(bbox, node)) return result;\n\n        const toBBox = this.toBBox;\n        const nodesToSearch = [];\n\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    }\n\n    collides(bbox) {\n        let node = this.data;\n\n        if (!intersects(bbox, node)) return false;\n\n        const nodesToSearch = [];\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? this.toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    }\n\n    load(data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (let i = 0; i < data.length; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        let node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                const tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    }\n\n    insert(item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    }\n\n    clear() {\n        this.data = createNode([]);\n        return this;\n    }\n\n    remove(item, equalsFn) {\n        if (!item) return this;\n\n        let node = this.data;\n        const bbox = this.toBBox(item);\n        const path = [];\n        const indexes = [];\n        let i, parent, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                const index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    }\n\n    toBBox(item) { return item; }\n\n    compareMinX(a, b) { return a.minX - b.minX; }\n    compareMinY(a, b) { return a.minY - b.minY; }\n\n    toJSON() { return this.data; }\n\n    fromJSON(data) {\n        this.data = data;\n        return this;\n    }\n\n    _all(node, result) {\n        const nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push(...node.children);\n            else nodesToSearch.push(...node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    }\n\n    _build(items, left, right, height) {\n\n        const N = right - left + 1;\n        let M = this._maxEntries;\n        let node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        const N2 = Math.ceil(N / M);\n        const N1 = N2 * Math.ceil(Math.sqrt(M));\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (let i = left; i <= right; i += N1) {\n\n            const right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (let j = i; j <= right2; j += N2) {\n\n                const right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    }\n\n    _chooseSubtree(bbox, node, level, path) {\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            let minArea = Infinity;\n            let minEnlargement = Infinity;\n            let targetNode;\n\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const area = bboxArea(child);\n                const enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    }\n\n    _insert(item, level, isNode) {\n        const bbox = isNode ? item : this.toBBox(item);\n        const insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    }\n\n    // split overflowed node into two\n    _split(insertPath, level) {\n        const node = insertPath[level];\n        const M = node.children.length;\n        const m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        const splitIndex = this._chooseSplitIndex(node, m, M);\n\n        const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    }\n\n    _splitRoot(node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    }\n\n    _chooseSplitIndex(node, m, M) {\n        let index;\n        let minOverlap = Infinity;\n        let minArea = Infinity;\n\n        for (let i = m; i <= M - m; i++) {\n            const bbox1 = distBBox(node, 0, i, this.toBBox);\n            const bbox2 = distBBox(node, i, M, this.toBBox);\n\n            const overlap = intersectionArea(bbox1, bbox2);\n            const area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index || M - m;\n    }\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis(node, m, M) {\n        const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n        const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n        const xMargin = this._allDistMargin(node, m, M, compareMinX);\n        const yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    }\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin(node, m, M, compare) {\n        node.children.sort(compare);\n\n        const toBBox = this.toBBox;\n        const leftBBox = distBBox(node, 0, m, toBBox);\n        const rightBBox = distBBox(node, M - m, M, toBBox);\n        let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n\n        for (let i = m; i < M - m; i++) {\n            const child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (let i = M - m - 1; i >= m; i--) {\n            const child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    }\n\n    _adjustParentBBoxes(bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (let i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    }\n\n    _condense(path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (let i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    }\n}\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (let i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (let i = k; i < p; i++) {\n        const child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    const minX = Math.max(a.minX, b.minX);\n    const minY = Math.max(a.minY, b.minY);\n    const maxX = Math.min(a.maxX, b.maxX);\n    const maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    const stack = [left, right];\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        const mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n", "import rbush from \"rbush\";\nimport { featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\n\n/**\n * @module rbush\n */\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n  var tree = new rbush(maxEntries);\n\n  /**\n   * [insert](https://github.com/mourner/rbush#data-format)\n   *\n   * @memberof rbush\n   * @param {Feature} feature insert single GeoJSON Feature\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   * tree.insert(poly)\n   */\n  tree.insert = function (feature) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.insert.call(this, feature);\n  };\n\n  /**\n   * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n   *\n   * @memberof rbush\n   * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var polys = turf.polygons([\n   *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n   *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n   * ]);\n   * tree.load(polys);\n   */\n  tree.load = function (features) {\n    var load = [];\n    // Load an Array of Features\n    if (Array.isArray(features)) {\n      features.forEach(function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    } else {\n      // Load a FeatureCollection\n      featureEach(features, function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    }\n    return rbush.prototype.load.call(this, load);\n  };\n\n  /**\n   * [remove](https://github.com/mourner/rbush#removing-data)\n   *\n   * @memberof rbush\n   * @param {Feature} feature remove single GeoJSON Feature\n   * @param {Function} equals Pass a custom equals function to compare by value for removal.\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.remove(poly);\n   */\n  tree.remove = function (feature, equals) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.remove.call(this, feature, equals);\n  };\n\n  /**\n   * [clear](https://github.com/mourner/rbush#removing-data)\n   *\n   * @memberof rbush\n   * @returns {RBush} GeoJSON Rbush\n   * @example\n   * tree.clear()\n   */\n  tree.clear = function () {\n    return rbush.prototype.clear.call(this);\n  };\n\n  /**\n   * [search](https://github.com/mourner/rbush#search)\n   *\n   * @memberof rbush\n   * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n   * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.search(poly);\n   */\n  tree.search = function (geojson) {\n    var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n    return featureCollection(features);\n  };\n\n  /**\n   * [collides](https://github.com/mourner/rbush#collisions)\n   *\n   * @memberof rbush\n   * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n   * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.collides(poly);\n   */\n  tree.collides = function (geojson) {\n    return rbush.prototype.collides.call(this, this.toBBox(geojson));\n  };\n\n  /**\n   * [all](https://github.com/mourner/rbush#search)\n   *\n   * @memberof rbush\n   * @returns {FeatureCollection} all the features in RBush\n   * @example\n   * tree.all()\n   */\n  tree.all = function () {\n    var features = rbush.prototype.all.call(this);\n    return featureCollection(features);\n  };\n\n  /**\n   * [toJSON](https://github.com/mourner/rbush#export-and-import)\n   *\n   * @memberof rbush\n   * @returns {any} export data as JSON object\n   * @example\n   * var exported = tree.toJSON()\n   */\n  tree.toJSON = function () {\n    return rbush.prototype.toJSON.call(this);\n  };\n\n  /**\n   * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n   *\n   * @memberof rbush\n   * @param {any} json import previously exported data\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var exported = {\n   *   \"children\": [\n   *     {\n   *       \"type\": \"Feature\",\n   *       \"geometry\": {\n   *         \"type\": \"Point\",\n   *         \"coordinates\": [110, 50]\n   *       },\n   *       \"properties\": {},\n   *       \"bbox\": [110, 50, 110, 50]\n   *     }\n   *   ],\n   *   \"height\": 1,\n   *   \"leaf\": true,\n   *   \"minX\": 110,\n   *   \"minY\": 50,\n   *   \"maxX\": 110,\n   *   \"maxY\": 50\n   * }\n   * tree.fromJSON(exported)\n   */\n  tree.fromJSON = function (json) {\n    return rbush.prototype.fromJSON.call(this, json);\n  };\n\n  /**\n   * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n   *\n   * @memberof rbush\n   * @private\n   * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n   * @returns {Object} converted to {minX, minY, maxX, maxY}\n   */\n  tree.toBBox = function (geojson) {\n    var bbox;\n    if (geojson.bbox) bbox = geojson.bbox;\n    else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n    else if (Array.isArray(geojson) && geojson.length === 6)\n      bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n    else if (geojson.type === \"Feature\") bbox = turfBBox(geojson);\n    else if (geojson.type === \"FeatureCollection\") bbox = turfBBox(geojson);\n    else throw new Error(\"invalid geojson\");\n\n    return {\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3],\n    };\n  };\n  return tree;\n}\n\nexport { geojsonRbush };\nexport default geojsonRbush;\n", "import {\n  BBox,\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Polygon,\n} from \"geojson\";\nimport { featureCollection, lineString } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment<\n  G extends LineString | MultiLineString | Polygon | MultiPolygon,\n>(\n  geojson: Feature<G> | FeatureCollection<G> | G\n): FeatureCollection<LineString> {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n\n  const results: Array<Feature<LineString>> = [];\n  flattenEach(geojson, (feature: Feature<any>) => {\n    lineSegmentFeature(feature, results);\n  });\n  return featureCollection(results);\n}\n\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(\n  geojson: Feature<LineString | Polygon>,\n  results: Array<Feature<LineString>>\n) {\n  let coords: number[][][] = [];\n  const geometry = geojson.geometry;\n  if (geometry !== null) {\n    switch (geometry.type) {\n      case \"Polygon\":\n        coords = getCoords(geometry);\n        break;\n      case \"LineString\":\n        coords = [getCoords(geometry)];\n    }\n    coords.forEach((coord) => {\n      const segments = createSegments(coord, geojson.properties);\n      segments.forEach((segment) => {\n        segment.id = results.length;\n        results.push(segment);\n      });\n    });\n  }\n}\n\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords: number[][], properties: any) {\n  const segments: Array<Feature<LineString>> = [];\n  coords.reduce((previousCoords, currentCoords) => {\n    const segment = lineString([previousCoords, currentCoords], properties);\n    segment.bbox = bbox(previousCoords, currentCoords);\n    segments.push(segment);\n    return currentCoords;\n  });\n  return segments;\n}\n\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1: number[], coords2: number[]): BBox {\n  const x1 = coords1[0];\n  const y1 = coords1[1];\n  const x2 = coords2[0];\n  const y2 = coords2[1];\n  const west = x1 < x2 ? x1 : x2;\n  const south = y1 < y2 ? y1 : y2;\n  const east = x1 > x2 ? x1 : x2;\n  const north = y1 > y2 ? y1 : y2;\n  return [west, south, east, north];\n}\n\nexport { lineSegment };\nexport default lineSegment;\n", "import { Feature, Point, LineString, MultiLineString } from \"geojson\";\nimport { bearing } from \"@turf/bearing\";\nimport { distance } from \"@turf/distance\";\nimport { destination } from \"@turf/destination\";\nimport { lineIntersect as lineIntersects } from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport { point, lineString, Coord, Units } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\n\n/**\n * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.\n *\n * @name nearestPointOnLine\n * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to\n * @param {Geometry|Feature<Point>|number[]} pt point to snap from\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain four values: `index`: closest point was found on nth line part, `multiFeatureIndex`: closest point was found on the nth line of the `MultiLineString`, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.\n * @example\n * var line = turf.lineString([\n *     [-77.031669, 38.878605],\n *     [-77.029609, 38.881946],\n *     [-77.020339, 38.884084],\n *     [-77.025661, 38.885821],\n *     [-77.021884, 38.889563],\n *     [-77.019824, 38.892368]\n * ]);\n * var pt = turf.point([-77.037076, 38.884017]);\n *\n * var snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line, pt, snapped];\n * snapped.properties['marker-color'] = '#00f';\n */\nfunction nearestPointOnLine<G extends LineString | MultiLineString>(\n  lines: Feature<G> | G,\n  pt: Coord,\n  options: { units?: Units } = {}\n): Feature<\n  Point,\n  {\n    dist: number;\n    index: number;\n    multiFeatureIndex: number;\n    location: number;\n    [key: string]: any;\n  }\n> {\n  if (!lines || !pt) {\n    throw new Error(\"lines and pt are required arguments\");\n  }\n\n  let closestPt: Feature<\n    Point,\n    { dist: number; index: number; multiFeatureIndex: number; location: number }\n  > = point([Infinity, Infinity], {\n    dist: Infinity,\n    index: -1,\n    multiFeatureIndex: -1,\n    location: -1,\n  });\n\n  let length = 0.0;\n  flattenEach(\n    lines,\n    function (line: any, _featureIndex: number, multiFeatureIndex: number) {\n      const coords: any = getCoords(line);\n\n      for (let i = 0; i < coords.length - 1; i++) {\n        //start\n        const start: Feature<Point, { dist: number }> = point(coords[i]);\n        start.properties.dist = distance(pt, start, options);\n        //stop\n        const stop: Feature<Point, { dist: number }> = point(coords[i + 1]);\n        stop.properties.dist = distance(pt, stop, options);\n        // sectionLength\n        const sectionLength = distance(start, stop, options);\n        //perpendicular\n        const heightDistance = Math.max(\n          start.properties.dist,\n          stop.properties.dist\n        );\n        const direction = bearing(start, stop);\n        const perpendicularPt1 = destination(\n          pt,\n          heightDistance,\n          direction + 90,\n          options\n        );\n        const perpendicularPt2 = destination(\n          pt,\n          heightDistance,\n          direction - 90,\n          options\n        );\n        const intersect = lineIntersects(\n          lineString([\n            perpendicularPt1.geometry.coordinates,\n            perpendicularPt2.geometry.coordinates,\n          ]),\n          lineString([start.geometry.coordinates, stop.geometry.coordinates])\n        );\n        let intersectPt:\n          | Feature<\n              Point,\n              { dist: number; multiFeatureIndex: number; location: number }\n            >\n          | undefined;\n\n        if (intersect.features.length > 0 && intersect.features[0]) {\n          intersectPt = {\n            ...intersect.features[0],\n            properties: {\n              dist: distance(pt, intersect.features[0], options),\n              multiFeatureIndex: multiFeatureIndex,\n              location:\n                length + distance(start, intersect.features[0], options),\n            },\n          };\n        }\n\n        if (start.properties.dist < closestPt.properties.dist) {\n          closestPt = {\n            ...start,\n            properties: {\n              ...start.properties,\n              index: i,\n              multiFeatureIndex: multiFeatureIndex,\n              location: length,\n            },\n          };\n        }\n\n        if (stop.properties.dist < closestPt.properties.dist) {\n          closestPt = {\n            ...stop,\n            properties: {\n              ...stop.properties,\n              index: i + 1,\n              multiFeatureIndex: multiFeatureIndex,\n              location: length + sectionLength,\n            },\n          };\n        }\n\n        if (\n          intersectPt &&\n          intersectPt.properties.dist < closestPt.properties.dist\n        ) {\n          closestPt = {\n            ...intersectPt,\n            properties: { ...intersectPt.properties, index: i },\n          };\n        }\n        // update length\n        length += sectionLength;\n      }\n    }\n  );\n\n  return closestPt;\n}\n\nexport { nearestPointOnLine };\nexport default nearestPointOnLine;\n", "import { geojsonRbush as rbush } from \"@turf/geojson-rbush\";\nimport { lineSegment } from \"@turf/line-segment\";\nimport { nearestPointOnLine } from \"@turf/nearest-point-on-line\";\nimport { booleanPointOnLine } from \"@turf/boolean-point-on-line\";\nimport { getCoords } from \"@turf/invariant\";\nimport { featureEach, segmentEach } from \"@turf/meta\";\nimport {\n  FeatureCollection,\n  Feature,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { featureCollection, isObject } from \"@turf/helpers\";\nimport equal from \"fast-deep-equal\";\n\n/**\n * Takes any LineString or Polygon and returns the overlapping lines between both features.\n *\n * @name lineOverlap\n * @param {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line1 any LineString or Polygon\n * @param {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line2 any LineString or Polygon\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.tolerance=0] Tolerance distance to match overlapping line segments (in kilometers)\n * @returns {FeatureCollection<LineString>} lines(s) that are overlapping between both features\n * @example\n * var line1 = turf.lineString([[115, -35], [125, -30], [135, -30], [145, -35]]);\n * var line2 = turf.lineString([[115, -25], [125, -30], [135, -30], [145, -25]]);\n *\n * var overlapping = turf.lineOverlap(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, overlapping]\n */\nfunction lineOverlap<\n  G1 extends LineString | MultiLineString | Polygon | MultiPolygon,\n  G2 extends LineString | MultiLineString | Polygon | MultiPolygon,\n>(\n  line1: Feature<G1> | G1,\n  line2: Feature<G2> | G2,\n  options: { tolerance?: number } = {}\n): FeatureCollection<LineString> {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var tolerance = options.tolerance || 0;\n\n  // Containers\n  var features: Feature<LineString, GeoJsonProperties>[] = [];\n\n  // Create Spatial Index\n  var tree = rbush<LineString>();\n\n  // To-Do -- HACK way to support typescript\n  const line: any = lineSegment(line1);\n  tree.load(line);\n  var overlapSegment: Feature<LineString> | undefined;\n  let additionalSegments: Feature<LineString>[] = [];\n\n  // Line Intersection\n\n  // Iterate over line segments\n  segmentEach(line2, function (segment) {\n    var doesOverlaps = false;\n\n    if (!segment) {\n      return;\n    }\n\n    // Iterate over each segments which falls within the same bounds\n    featureEach(tree.search(segment), function (match) {\n      if (doesOverlaps === false) {\n        var coordsSegment = getCoords(segment).sort();\n        var coordsMatch: any = getCoords(match).sort();\n\n        // Segment overlaps feature\n        if (equal(coordsSegment, coordsMatch)) {\n          doesOverlaps = true;\n          // Overlaps already exists - only append last coordinate of segment\n          if (overlapSegment) {\n            overlapSegment =\n              concatSegment(overlapSegment, segment) || overlapSegment;\n          } else overlapSegment = segment;\n          // Match segments which don't share nodes (Issue #901)\n        } else if (\n          tolerance === 0\n            ? booleanPointOnLine(coordsSegment[0], match) &&\n              booleanPointOnLine(coordsSegment[1], match)\n            : nearestPointOnLine(match, coordsSegment[0]).properties.dist! <=\n                tolerance &&\n              nearestPointOnLine(match, coordsSegment[1]).properties.dist! <=\n                tolerance\n        ) {\n          doesOverlaps = true;\n          if (overlapSegment) {\n            overlapSegment =\n              concatSegment(overlapSegment, segment) || overlapSegment;\n          } else overlapSegment = segment;\n        } else if (\n          tolerance === 0\n            ? booleanPointOnLine(coordsMatch[0], segment) &&\n              booleanPointOnLine(coordsMatch[1], segment)\n            : nearestPointOnLine(segment, coordsMatch[0]).properties.dist! <=\n                tolerance &&\n              nearestPointOnLine(segment, coordsMatch[1]).properties.dist! <=\n                tolerance\n        ) {\n          // Do not define (doesOverlap = true) since more matches can occur within the same segment\n          // doesOverlaps = true;\n          if (overlapSegment) {\n            const combinedSegment = concatSegment(overlapSegment, match);\n            if (combinedSegment) {\n              overlapSegment = combinedSegment;\n            } else {\n              additionalSegments.push(match);\n            }\n          } else overlapSegment = match;\n        }\n      }\n    });\n\n    // Segment doesn't overlap - add overlaps to results & reset\n    if (doesOverlaps === false && overlapSegment) {\n      features.push(overlapSegment);\n      if (additionalSegments.length) {\n        features = features.concat(additionalSegments);\n        additionalSegments = [];\n      }\n      overlapSegment = undefined;\n    }\n  });\n  // Add last segment if exists\n  if (overlapSegment) features.push(overlapSegment);\n\n  return featureCollection(features);\n}\n\n/**\n * Concat Segment\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {Feature<LineString>} segment 2-vertex LineString\n * @returns {Feature<LineString>} concat linestring\n */\nfunction concatSegment(\n  line: Feature<LineString>,\n  segment: Feature<LineString>\n) {\n  var coords = getCoords(segment);\n  var lineCoords = getCoords(line);\n  var start = lineCoords[0];\n  var end = lineCoords[lineCoords.length - 1];\n  var geom = line.geometry.coordinates;\n\n  if (equal(coords[0], start)) geom.unshift(coords[1]);\n  else if (equal(coords[0], end)) geom.push(coords[1]);\n  else if (equal(coords[1], start)) geom.unshift(coords[0]);\n  else if (equal(coords[1], end)) geom.push(coords[0]);\n  else return; // If the overlap leaves the segment unchanged, return undefined so that this can be identified.\n\n  // Otherwise return the mutated line.\n  return line;\n}\n\nexport { lineOverlap };\nexport default lineOverlap;\n", "import { Feature, Geometry, MultiPoint } from \"geojson\";\nimport { segmentEach } from \"@turf/meta\";\nimport { getGeom } from \"@turf/invariant\";\nimport { lineOverlap } from \"@turf/line-overlap\";\nimport { lineIntersect } from \"@turf/line-intersect\";\nimport { geojsonEquality } from \"geojson-equality-ts\";\n\n/**\n * Compares two geometries of the same dimension and returns true if their intersection set results in a geometry\n * different from both but of the same dimension. It applies to Polygon/Polygon, LineString/LineString,\n * Multipoint/Multipoint, MultiLineString/MultiLineString and MultiPolygon/MultiPolygon.\n *\n * In other words, it returns true if the two geometries overlap, provided that neither completely contains the other.\n *\n * @name booleanOverlap\n * @param  {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature1 input\n * @param  {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature2 input\n * @returns {boolean} true/false\n * @example\n * var poly1 = turf.polygon([[[0,0],[0,5],[5,5],[5,0],[0,0]]]);\n * var poly2 = turf.polygon([[[1,1],[1,6],[6,6],[6,1],[1,1]]]);\n * var poly3 = turf.polygon([[[10,10],[10,15],[15,15],[15,10],[10,10]]]);\n *\n * turf.booleanOverlap(poly1, poly2)\n * //=true\n * turf.booleanOverlap(poly2, poly3)\n * //=false\n */\nfunction booleanOverlap(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry\n): boolean {\n  const geom1 = getGeom(feature1);\n  const geom2 = getGeom(feature2);\n  const type1 = geom1.type;\n  const type2 = geom2.type;\n\n  if (\n    (type1 === \"MultiPoint\" && type2 !== \"MultiPoint\") ||\n    ((type1 === \"LineString\" || type1 === \"MultiLineString\") &&\n      type2 !== \"LineString\" &&\n      type2 !== \"MultiLineString\") ||\n    ((type1 === \"Polygon\" || type1 === \"MultiPolygon\") &&\n      type2 !== \"Polygon\" &&\n      type2 !== \"MultiPolygon\")\n  ) {\n    throw new Error(\"features must be of the same type\");\n  }\n  if (type1 === \"Point\") throw new Error(\"Point geometry not supported\");\n\n  // features must be not equal\n  if (geojsonEquality(feature1 as any, feature2 as any, { precision: 6 }))\n    return false;\n\n  let overlap = 0;\n\n  switch (type1) {\n    case \"MultiPoint\":\n      for (var i = 0; i < (geom1 as MultiPoint).coordinates.length; i++) {\n        for (var j = 0; j < (geom2 as MultiPoint).coordinates.length; j++) {\n          var coord1 = geom1.coordinates[i];\n          var coord2 = geom2.coordinates[j];\n          if (coord1[0] === coord2[0] && coord1[1] === coord2[1]) {\n            return true;\n          }\n        }\n      }\n      return false;\n\n    case \"LineString\":\n    case \"MultiLineString\":\n      segmentEach(feature1, (segment1) => {\n        segmentEach(feature2, (segment2) => {\n          if (lineOverlap(segment1!, segment2!).features.length) overlap++;\n        });\n      });\n      break;\n\n    case \"Polygon\":\n    case \"MultiPolygon\":\n      segmentEach(feature1, (segment1) => {\n        segmentEach(feature2, (segment2) => {\n          if (lineIntersect(segment1!, segment2!).features.length) overlap++;\n        });\n      });\n      break;\n  }\n\n  return overlap > 0;\n}\n\nexport { booleanOverlap };\nexport default booleanOverlap;\n", "import { Feature, Geometry, LineString, Position } from \"geojson\";\nimport { cleanCoords } from \"@turf/clean-coords\";\nimport { lineSegment } from \"@turf/line-segment\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { bearingToAzimuth } from \"@turf/helpers\";\n\n/**\n * Boolean-Parallel returns True if each segment of `line1` is parallel to the correspondent segment of `line2`\n *\n * @name booleanParallel\n * @param {Geometry|Feature<LineString>} line1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<LineString>} line2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false if the lines are parallel\n * @example\n * var line1 = turf.lineString([[0, 0], [0, 1]]);\n * var line2 = turf.lineString([[1, 0], [1, 1]]);\n *\n * turf.booleanParallel(line1, line2);\n * //=true\n */\nfunction booleanParallel(\n  line1: Feature<LineString> | LineString,\n  line2: Feature<LineString> | LineString\n): boolean {\n  // validation\n  if (!line1) throw new Error(\"line1 is required\");\n  if (!line2) throw new Error(\"line2 is required\");\n  var type1 = getType(line1, \"line1\");\n  if (type1 !== \"LineString\") throw new Error(\"line1 must be a LineString\");\n  var type2 = getType(line2, \"line2\");\n  if (type2 !== \"LineString\") throw new Error(\"line2 must be a LineString\");\n\n  var segments1 = lineSegment(cleanCoords(line1)).features;\n  var segments2 = lineSegment(cleanCoords(line2)).features;\n\n  for (var i = 0; i < segments1.length; i++) {\n    var segment1 = segments1[i].geometry.coordinates;\n    if (!segments2[i]) break;\n    var segment2 = segments2[i].geometry.coordinates;\n    if (!isParallel(segment1, segment2)) return false;\n  }\n  return true;\n}\n\n/**\n * Compares slopes and return result\n *\n * @private\n * @param {Geometry|Feature<LineString>} segment1 Geometry or Feature\n * @param {Geometry|Feature<LineString>} segment2 Geometry or Feature\n * @returns {boolean} if slopes are equal\n */\nfunction isParallel(segment1: Position[], segment2: Position[]) {\n  var slope1 = bearingToAzimuth(rhumbBearing(segment1[0], segment1[1]));\n  var slope2 = bearingToAzimuth(rhumbBearing(segment2[0], segment2[1]));\n  return slope1 === slope2 || (slope2 - slope1) % 180 === 0;\n}\n\n/**\n * Returns Feature's type\n *\n * @private\n * @param {Geometry|Feature<any>} geojson Geometry or Feature\n * @param {string} name of the variable\n * @returns {string} Feature's type\n */\nfunction getType(geojson: Geometry | Feature<any>, name: string) {\n  if ((geojson as Feature).geometry && (geojson as Feature).geometry.type)\n    return (geojson as Feature).geometry.type;\n  if (geojson.type) return geojson.type; // if GeoJSON geometry\n  throw new Error(\"Invalid GeoJSON object for \" + name);\n}\n\nexport { booleanParallel };\nexport default booleanParallel;\n", "import { Feature, Geometry, LineString, Point } from \"geojson\";\nimport { booleanPointOnLine } from \"@turf/boolean-point-on-line\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Boolean-touches true if none of the points common to both geometries\n * intersect the interiors of both geometries.\n * @name booleanTouches\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n * var point = turf.point([1, 1]);\n *\n * turf.booleanTouches(point, line);\n * //=true\n */\nfunction booleanTouches(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry\n): boolean {\n  var geom1 = getGeom(feature1);\n  var geom2 = getGeom(feature2);\n  var type1 = geom1.type;\n  var type2 = geom2.type;\n\n  switch (type1) {\n    case \"Point\":\n      switch (type2) {\n        case \"LineString\":\n          return isPointOnLineEnd(geom1, geom2);\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n            if (\n              isPointOnLineEnd(geom1, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii],\n              })\n            )\n              foundTouchingPoint = true;\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (\n              booleanPointOnLine(geom1, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPolygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (\n                booleanPointOnLine(geom1, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[i][ii],\n                })\n              )\n                return true;\n            }\n          }\n          return false;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                isPointOnLineEnd(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  geom2\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointOnLine(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreEndVertices: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  isPointOnLineEnd(\n                    { type: \"Point\", coordinates: geom1.coordinates[i] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[ii] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[ii] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i] },\n                    {\n                      type: \"LineString\",\n                      coordinates: geom2.coordinates[ii][0],\n                    }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"Polygon\", coordinates: geom2.coordinates[ii] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"LineString\":\n      switch (type2) {\n        case \"Point\":\n          return isPointOnLineEnd(geom2, geom1);\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                isPointOnLineEnd(\n                  { type: \"Point\", coordinates: geom2.coordinates[i] },\n                  geom1\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointOnLine(\n                { type: \"Point\", coordinates: geom2.coordinates[i] },\n                geom1,\n                { ignoreEndVertices: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          if (\n            isPointOnLineEnd(\n              { type: \"Point\", coordinates: geom1.coordinates[0] },\n              geom2\n            )\n          )\n            endMatch = true;\n          if (\n            isPointOnLineEnd(\n              {\n                type: \"Point\",\n                coordinates: geom1.coordinates[geom1.coordinates.length - 1],\n              },\n              geom2\n            )\n          )\n            endMatch = true;\n          if (endMatch === false) return false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              booleanPointOnLine(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreEndVertices: true }\n              )\n            )\n              return false;\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (\n              isPointOnLineEnd(\n                { type: \"Point\", coordinates: geom1.coordinates[0] },\n                { type: \"LineString\", coordinates: geom2.coordinates[i] }\n              )\n            )\n              endMatch = true;\n            if (\n              isPointOnLineEnd(\n                {\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[geom1.coordinates.length - 1],\n                },\n                { type: \"LineString\", coordinates: geom2.coordinates[i] }\n              )\n            )\n              endMatch = true;\n            for (var ii = 0; ii < geom1.coordinates[i].length; ii++) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[ii] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[i] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i] },\n                    {\n                      type: \"LineString\",\n                      coordinates: geom2.coordinates[ii][0],\n                    }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiLineString\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              isPointOnLineEnd(geom2, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  isPointOnLineEnd(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[ii] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[ii] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              isPointOnLineEnd(\n                { type: \"Point\", coordinates: geom1.coordinates[i][0] },\n                geom2\n              )\n            )\n              endMatch = true;\n            if (\n              isPointOnLineEnd(\n                {\n                  type: \"Point\",\n                  coordinates:\n                    geom1.coordinates[i][geom1.coordinates[i].length - 1],\n                },\n                geom2\n              )\n            )\n              endMatch = true;\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[i] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (\n                isPointOnLineEnd(\n                  { type: \"Point\", coordinates: geom1.coordinates[i][0] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[ii] }\n                )\n              )\n                endMatch = true;\n              if (\n                isPointOnLineEnd(\n                  {\n                    type: \"Point\",\n                    coordinates:\n                      geom1.coordinates[i][geom1.coordinates[i].length - 1],\n                  },\n                  { type: \"LineString\", coordinates: geom2.coordinates[ii] }\n                )\n              )\n                endMatch = true;\n              for (var iii = 0; iii < geom1.coordinates[i].length; iii++) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i][iii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[ii] },\n                    { ignoreEndVertices: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i][ii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[i][ii] },\n                  geom2,\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (\n                    booleanPointOnLine(\n                      {\n                        type: \"Point\",\n                        coordinates: geom1.coordinates[ii][iii],\n                      },\n                      {\n                        type: \"LineString\",\n                        coordinates: geom2.coordinates[0][i],\n                      }\n                    )\n                  )\n                    foundTouchingPoint = true;\n                }\n                if (\n                  booleanPointInPolygon(\n                    { type: \"Point\", coordinates: geom1.coordinates[ii][iii] },\n                    { type: \"Polygon\", coordinates: [geom2.coordinates[0][i]] },\n                    { ignoreBoundary: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"Polygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              booleanPointOnLine(geom2, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom2.coordinates[i] },\n                geom1,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom2.coordinates[i] },\n                geom1,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom2.coordinates[i][ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[0] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom2.coordinates[i][ii] },\n                  geom1,\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[0][i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[0][i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[0][ii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[0][i] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[0][ii] },\n                  { type: \"Polygon\", coordinates: geom2.coordinates[0][i] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPolygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (\n              booleanPointOnLine(geom2, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[0][i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[0][i] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"Polygon\", coordinates: geom1.coordinates[0][i] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[0][i] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"Polygon\", coordinates: geom1.coordinates[0][i] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom2.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (\n                    booleanPointOnLine(\n                      {\n                        type: \"Point\",\n                        coordinates: geom2.coordinates[ii][iii],\n                      },\n                      {\n                        type: \"LineString\",\n                        coordinates: geom1.coordinates[i][0],\n                      }\n                    )\n                  )\n                    foundTouchingPoint = true;\n                }\n                if (\n                  booleanPointInPolygon(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii][iii] },\n                    { type: \"Polygon\", coordinates: [geom1.coordinates[i][0]] },\n                    { ignoreBoundary: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0][i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[0][i][ii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[0][i][ii] },\n                  geom2,\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[0].length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[0].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (\n                    booleanPointOnLine(\n                      {\n                        type: \"Point\",\n                        coordinates: geom1.coordinates[0][i][iii],\n                      },\n                      {\n                        type: \"LineString\",\n                        coordinates: geom2.coordinates[0][ii],\n                      }\n                    )\n                  )\n                    foundTouchingPoint = true;\n                }\n                if (\n                  booleanPointInPolygon(\n                    {\n                      type: \"Point\",\n                      coordinates: geom1.coordinates[0][i][iii],\n                    },\n                    { type: \"Polygon\", coordinates: geom2.coordinates[0][ii] },\n                    { ignoreBoundary: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\n\nfunction isPointOnLineEnd(point: Point, line: LineString) {\n  if (compareCoords(line.coordinates[0], point.coordinates)) return true;\n  if (\n    compareCoords(\n      line.coordinates[line.coordinates.length - 1],\n      point.coordinates\n    )\n  )\n    return true;\n  return false;\n}\n\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1: number[], pair2: number[]) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n\nexport { booleanTouches };\nexport default booleanTouches;\n", "import { Feature, Geometry, Position } from \"geojson\";\nimport { getGeom } from \"@turf/invariant\";\nimport { polygon, lineString } from \"@turf/helpers\";\nimport { booleanDisjoint } from \"@turf/boolean-disjoint\";\nimport { booleanCrosses } from \"@turf/boolean-crosses\";\nimport { lineIntersect } from \"@turf/line-intersect\";\nimport { booleanPointOnLine as isPointOnLine } from \"@turf/boolean-point-on-line\";\n\n/**\n * booleanValid checks if the geometry is a valid according to the OGC Simple Feature Specification.\n *\n * @name booleanValid\n * @param {Geometry|Feature<any>} feature GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanValid(line); // => true\n * turf.booleanValid({foo: \"bar\"}); // => false\n */\nfunction booleanValid(feature: Feature<any> | Geometry) {\n  // Automatic False\n  if (!feature.type) return false;\n\n  // Parse GeoJSON\n  const geom = getGeom(feature);\n  const type = geom.type;\n  const coords = geom.coordinates;\n\n  switch (type) {\n    case \"Point\":\n      return coords.length > 1;\n    case \"MultiPoint\":\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"LineString\":\n      if (coords.length < 2) return false;\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"MultiLineString\":\n      if (coords.length < 2) return false;\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"Polygon\":\n      for (var i = 0; i < geom.coordinates.length; i++) {\n        if (coords[i].length < 4) return false;\n        if (!checkRingsClose(coords[i])) return false;\n        if (checkRingsForSpikesPunctures(coords[i])) return false;\n        if (i > 0) {\n          if (\n            lineIntersect(polygon([coords[0]]), polygon([coords[i]])).features\n              .length > 1\n          )\n            return false;\n        }\n      }\n      return true;\n    case \"MultiPolygon\":\n      for (var i = 0; i < geom.coordinates.length; i++) {\n        var poly: any = geom.coordinates[i];\n\n        for (var ii = 0; ii < poly.length; ii++) {\n          if (poly[ii].length < 4) return false;\n          if (!checkRingsClose(poly[ii])) return false;\n          if (checkRingsForSpikesPunctures(poly[ii])) return false;\n          if (ii === 0) {\n            if (!checkPolygonAgainstOthers(poly, geom.coordinates, i))\n              return false;\n          }\n          if (ii > 0) {\n            if (\n              lineIntersect(polygon([poly[0]]), polygon([poly[ii]])).features\n                .length > 1\n            )\n              return false;\n          }\n        }\n      }\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction checkRingsClose(geom: Position[]) {\n  return (\n    geom[0][0] === geom[geom.length - 1][0] &&\n    geom[0][1] === geom[geom.length - 1][1]\n  );\n}\n\nfunction checkRingsForSpikesPunctures(geom: Position[]) {\n  for (var i = 0; i < geom.length - 1; i++) {\n    var point = geom[i];\n    for (var ii = i + 1; ii < geom.length - 2; ii++) {\n      var seg = [geom[ii], geom[ii + 1]];\n      if (isPointOnLine(point, lineString(seg))) return true;\n    }\n  }\n  return false;\n}\n\nfunction checkPolygonAgainstOthers(\n  poly: Position[][],\n  geom: Position[][][],\n  index: number\n) {\n  var polyToCheck = polygon(poly);\n  for (var i = index + 1; i < geom.length; i++) {\n    if (!booleanDisjoint(polyToCheck, polygon(geom[i]))) {\n      if (booleanCrosses(polyToCheck, lineString(geom[i][0]))) return false;\n    }\n  }\n  return true;\n}\n\nexport { booleanValid };\nexport default booleanValid;\n", "import {\n  BBox,\n  Feature,\n  Geometry,\n  LineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { bbox as calcBbox } from \"@turf/bbox\";\nimport { booleanPointOnLine } from \"@turf/boolean-point-on-line\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Boolean-within returns true if the first geometry is completely within the second geometry.\n * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\n * must not intersect the exterior of the secondary (geometry b).\n * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.\n *\n * @name booleanWithin\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n * var point = turf.point([1, 2]);\n *\n * turf.booleanWithin(point, line);\n * //=true\n */\nfunction booleanWithin(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry\n): boolean {\n  var geom1 = getGeom(feature1);\n  var geom2 = getGeom(feature2);\n  var type1 = geom1.type;\n  var type2 = geom2.type;\n\n  switch (type1) {\n    case \"Point\":\n      switch (type2) {\n        case \"MultiPoint\":\n          return isPointInMultiPoint(geom1, geom2);\n        case \"LineString\":\n          return booleanPointOnLine(geom1, geom2, { ignoreEndVertices: true });\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return booleanPointInPolygon(geom1, geom2, { ignoreBoundary: true });\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"MultiPoint\":\n          return isMultiPointInMultiPoint(geom1, geom2);\n        case \"LineString\":\n          return isMultiPointOnLine(geom1, geom2);\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return isMultiPointInPoly(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"LineString\":\n      switch (type2) {\n        case \"LineString\":\n          return isLineOnLine(geom1, geom2);\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return isLineInPoly(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"Polygon\":\n      switch (type2) {\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return isPolyInPoly(geom1, geom2);\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\n\nfunction isPointInMultiPoint(point: Point, multiPoint: MultiPoint) {\n  var i;\n  var output = false;\n  for (i = 0; i < multiPoint.coordinates.length; i++) {\n    if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {\n      output = true;\n      break;\n    }\n  }\n  return output;\n}\n\nfunction isMultiPointInMultiPoint(\n  multiPoint1: MultiPoint,\n  multiPoint2: MultiPoint\n) {\n  for (var i = 0; i < multiPoint1.coordinates.length; i++) {\n    var anyMatch = false;\n    for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {\n      if (\n        compareCoords(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])\n      ) {\n        anyMatch = true;\n      }\n    }\n    if (!anyMatch) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isMultiPointOnLine(multiPoint: MultiPoint, lineString: LineString) {\n  var foundInsidePoint = false;\n\n  for (var i = 0; i < multiPoint.coordinates.length; i++) {\n    if (!booleanPointOnLine(multiPoint.coordinates[i], lineString)) {\n      return false;\n    }\n    if (!foundInsidePoint) {\n      foundInsidePoint = booleanPointOnLine(\n        multiPoint.coordinates[i],\n        lineString,\n        { ignoreEndVertices: true }\n      );\n    }\n  }\n  return foundInsidePoint;\n}\n\nfunction isMultiPointInPoly(multiPoint: MultiPoint, polygon: Polygon) {\n  var output = true;\n  var oneInside = false;\n  var isInside = false;\n  for (var i = 0; i < multiPoint.coordinates.length; i++) {\n    isInside = booleanPointInPolygon(multiPoint.coordinates[i], polygon);\n    if (!isInside) {\n      output = false;\n      break;\n    }\n    if (!oneInside) {\n      isInside = booleanPointInPolygon(multiPoint.coordinates[i], polygon, {\n        ignoreBoundary: true,\n      });\n    }\n  }\n  return output && isInside;\n}\n\nfunction isLineOnLine(lineString1: LineString, lineString2: LineString) {\n  for (var i = 0; i < lineString1.coordinates.length; i++) {\n    if (!booleanPointOnLine(lineString1.coordinates[i], lineString2)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isLineInPoly(linestring: LineString, polygon: Polygon) {\n  var polyBbox = calcBbox(polygon);\n  var lineBbox = calcBbox(linestring);\n  if (!doBBoxOverlap(polyBbox, lineBbox)) {\n    return false;\n  }\n  var foundInsidePoint = false;\n\n  for (var i = 0; i < linestring.coordinates.length; i++) {\n    if (!booleanPointInPolygon(linestring.coordinates[i], polygon)) {\n      return false;\n    }\n    if (!foundInsidePoint) {\n      foundInsidePoint = booleanPointInPolygon(\n        linestring.coordinates[i],\n        polygon,\n        { ignoreBoundary: true }\n      );\n    }\n    if (!foundInsidePoint && i < linestring.coordinates.length - 1) {\n      var midpoint = getMidpoint(\n        linestring.coordinates[i],\n        linestring.coordinates[i + 1]\n      );\n      foundInsidePoint = booleanPointInPolygon(midpoint, polygon, {\n        ignoreBoundary: true,\n      });\n    }\n  }\n  return foundInsidePoint;\n}\n\n/**\n * Is Polygon2 in Polygon1\n * Only takes into account outer rings\n *\n * @private\n * @param {Polygon} geometry1\n * @param {Polygon|MultiPolygon} geometry2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(geometry1: Polygon, geometry2: Polygon | MultiPolygon) {\n  var poly1Bbox = calcBbox(geometry1);\n  var poly2Bbox = calcBbox(geometry2);\n  if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {\n    return false;\n  }\n  for (var i = 0; i < geometry1.coordinates[0].length; i++) {\n    if (!booleanPointInPolygon(geometry1.coordinates[0][i], geometry2)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction doBBoxOverlap(bbox1: BBox, bbox2: BBox) {\n  if (bbox1[0] > bbox2[0]) return false;\n  if (bbox1[2] < bbox2[2]) return false;\n  if (bbox1[1] > bbox2[1]) return false;\n  if (bbox1[3] < bbox2[3]) return false;\n  return true;\n}\n\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1: number[], pair2: number[]) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n\n/**\n * getMidpoint\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {Position} midpoint of pair1 and pair2\n */\nfunction getMidpoint(pair1: number[], pair2: number[]) {\n  return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];\n}\n\nexport { booleanWithin };\nexport default booleanWithin;\n", "import { BBox, Feature, GeoJsonProperties, Point } from \"geojson\";\nimport { bbox } from \"@turf/bbox\";\nimport { point, Id, AllGeoJSON } from \"@turf/helpers\";\n\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.\n *\n * @name center\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\n * @returns {Feature<Point>} a Point feature at the absolute center point of all input features\n * @example\n * var features = turf.points([\n *   [-97.522259, 35.4691],\n *   [-97.502754, 35.463455],\n *   [-97.508269, 35.463245]\n * ]);\n *\n * var center = turf.center(features);\n *\n * //addToMap\n * var addToMap = [features, center]\n * center.properties['marker-size'] = 'large';\n * center.properties['marker-color'] = '#000';\n */\nfunction center<P extends GeoJsonProperties = GeoJsonProperties>(\n  geojson: AllGeoJSON,\n  options: { properties?: P; bbox?: BBox; id?: Id } = {}\n): Feature<Point, P> {\n  const ext = bbox(geojson);\n  const x = (ext[0] + ext[2]) / 2;\n  const y = (ext[1] + ext[3]) / 2;\n  return point([x, y], options.properties, options);\n}\n\nexport { center };\nexport default center;\n", "import { center } from \"@turf/center\";\nimport jsts from \"@turf/jsts\";\nimport { geomEach, featureEach } from \"@turf/meta\";\nimport { geoAzimuthalEquidistant } from \"d3-geo\";\nimport {\n  feature,\n  featureCollection,\n  radiansToLength,\n  lengthToRadians,\n  earthRadius,\n} from \"@turf/helpers\";\n\nconst { BufferOp, GeoJSONReader, GeoJSONWriter } = jsts;\n\n/**\n * Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.\n *\n * When using a negative radius, the resulting geometry may be invalid if\n * it's too small compared to the radius magnitude. If the input is a\n * FeatureCollection, only valid members will be returned in the output\n * FeatureCollection - i.e., the output collection may have fewer members than\n * the input, or even be empty.\n *\n * @name buffer\n * @param {FeatureCollection|Geometry|Feature<any>} geojson input to be buffered\n * @param {number} radius distance to draw the buffer (negative values are allowed)\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=\"kilometers\"] any of the options supported by turf units\n * @param {number} [options.steps=8] number of steps\n * @returns {FeatureCollection|Feature<Polygon|MultiPolygon>|undefined} buffered features\n * @example\n * var point = turf.point([-90.548630, 14.616599]);\n * var buffered = turf.buffer(point, 500, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [point, buffered]\n */\nfunction buffer(geojson, radius, options) {\n  // Optional params\n  options = options || {};\n\n  // use user supplied options or default values\n  var units = options.units || \"kilometers\";\n  var steps = options.steps || 8;\n\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (typeof options !== \"object\") throw new Error(\"options must be an object\");\n  if (typeof steps !== \"number\") throw new Error(\"steps must be an number\");\n\n  // Allow negative buffers (\"erosion\") or zero-sized buffers (\"repair geometry\")\n  if (radius === undefined) throw new Error(\"radius is required\");\n  if (steps <= 0) throw new Error(\"steps must be greater than 0\");\n\n  var results = [];\n  switch (geojson.type) {\n    case \"GeometryCollection\":\n      geomEach(geojson, function (geometry) {\n        var buffered = bufferFeature(geometry, radius, units, steps);\n        if (buffered) results.push(buffered);\n      });\n      return featureCollection(results);\n    case \"FeatureCollection\":\n      featureEach(geojson, function (feature) {\n        var multiBuffered = bufferFeature(feature, radius, units, steps);\n        if (multiBuffered) {\n          featureEach(multiBuffered, function (buffered) {\n            if (buffered) results.push(buffered);\n          });\n        }\n      });\n      return featureCollection(results);\n  }\n  return bufferFeature(geojson, radius, units, steps);\n}\n\n/**\n * Buffer single Feature/Geometry\n *\n * @private\n * @param {Feature<any>} geojson input to be buffered\n * @param {number} radius distance to draw the buffer\n * @param {string} [units='kilometers'] any of the options supported by turf units\n * @param {number} [steps=8] number of steps\n * @returns {Feature<Polygon|MultiPolygon>} buffered feature\n */\nfunction bufferFeature(geojson, radius, units, steps) {\n  var properties = geojson.properties || {};\n  var geometry = geojson.type === \"Feature\" ? geojson.geometry : geojson;\n\n  // Geometry Types faster than jsts\n  if (geometry.type === \"GeometryCollection\") {\n    var results = [];\n    geomEach(geojson, function (geometry) {\n      var buffered = bufferFeature(geometry, radius, units, steps);\n      if (buffered) results.push(buffered);\n    });\n    return featureCollection(results);\n  }\n\n  // Project GeoJSON to Azimuthal Equidistant projection (convert to Meters)\n  var projection = defineProjection(geometry);\n  var projected = {\n    type: geometry.type,\n    coordinates: projectCoords(geometry.coordinates, projection),\n  };\n\n  // JSTS buffer operation\n  var reader = new GeoJSONReader();\n  var geom = reader.read(projected);\n  var distance = radiansToLength(lengthToRadians(radius, units), \"meters\");\n  var buffered = BufferOp.bufferOp(geom, distance, steps);\n  var writer = new GeoJSONWriter();\n  buffered = writer.write(buffered);\n\n  // Detect if empty geometries\n  if (coordsIsNaN(buffered.coordinates)) return undefined;\n\n  // Unproject coordinates (convert to Degrees)\n  var result = {\n    type: buffered.type,\n    coordinates: unprojectCoords(buffered.coordinates, projection),\n  };\n\n  return feature(result, properties);\n}\n\n/**\n * Coordinates isNaN\n *\n * @private\n * @param {Array<any>} coords GeoJSON Coordinates\n * @returns {boolean} if NaN exists\n */\nfunction coordsIsNaN(coords) {\n  if (Array.isArray(coords[0])) return coordsIsNaN(coords[0]);\n  return isNaN(coords[0]);\n}\n\n/**\n * Project coordinates to projection\n *\n * @private\n * @param {Array<any>} coords to project\n * @param {GeoProjection} proj D3 Geo Projection\n * @returns {Array<any>} projected coordinates\n */\nfunction projectCoords(coords, proj) {\n  if (typeof coords[0] !== \"object\") return proj(coords);\n  return coords.map(function (coord) {\n    return projectCoords(coord, proj);\n  });\n}\n\n/**\n * Un-Project coordinates to projection\n *\n * @private\n * @param {Array<any>} coords to un-project\n * @param {GeoProjection} proj D3 Geo Projection\n * @returns {Array<any>} un-projected coordinates\n */\nfunction unprojectCoords(coords, proj) {\n  if (typeof coords[0] !== \"object\") return proj.invert(coords);\n  return coords.map(function (coord) {\n    return unprojectCoords(coord, proj);\n  });\n}\n\n/**\n * Define Azimuthal Equidistant projection\n *\n * @private\n * @param {Geometry|Feature<any>} geojson Base projection on center of GeoJSON\n * @returns {GeoProjection} D3 Geo Azimuthal Equidistant Projection\n */\nfunction defineProjection(geojson) {\n  var coords = center(geojson).geometry.coordinates;\n  var rotation = [-coords[0], -coords[1]];\n  return geoAzimuthalEquidistant().rotate(rotation).scale(earthRadius);\n}\n\nexport { buffer };\nexport default buffer;\n", "// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n", "export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n", "export default function noop() {}\n", "function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n", "import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n", "import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n", "import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n", "export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n", "import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n", "import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n", "import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n", "export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n", "import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n", "import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n", "export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n", "import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n", "import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipPolygon from \"./polygon\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport function clipExtent(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n", "import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n", "import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n", "export default function(x) {\n  return x;\n}\n", "import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n", "import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n", "import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n", "import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n", "export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n", "import clipBuffer from \"./buffer\";\nimport clipPolygon from \"./polygon\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(rotate, sink) {\n    var line = clipLine(sink),\n        rotatedStart = rotate.invert(start[0], start[1]),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, rotatedStart);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      var point = rotate(lambda, phi);\n      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      var point = rotate(lambda, phi);\n      line.point(point[0], point[1]);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      var point = rotate(lambda, phi);\n      ringSink.point(point[0], point[1]);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n", "import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n", "import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius, delta) {\n  var cr = cos(radius),\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n", "export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n", "import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nexport function fitExtent(projection, extent, object) {\n  var w = extent[1][0] - extent[0][0],\n      h = extent[1][1] - extent[0][1],\n      clip = projection.clipExtent && projection.clipExtent();\n\n  projection\n      .scale(150)\n      .translate([0, 0]);\n\n  if (clip != null) projection.clipExtent(null);\n\n  geoStream(object, projection.stream(boundsStream));\n\n  var b = boundsStream.result(),\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\n  if (clip != null) projection.clipExtent(clip);\n\n  return projection\n      .scale(k * 150)\n      .translate([x, y]);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n", "import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n", "import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n", "import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n", "import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n", "import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n", "import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n", "import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n", "import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n", "import projection from \"./index\";\nimport {abs, epsilon} from \"../math\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n", "import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n", "import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n", "import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n", "import { BBox, Feature, Point, GeoJsonProperties } from \"geojson\";\nimport { geomEach, coordEach } from \"@turf/meta\";\nimport { isNumber, point, Id } from \"@turf/helpers\";\n\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the mean center. Can be weighted.\n *\n * @name centerMean\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\n * @param {string} [options.weight] the property name used to weight the center\n * @returns {Feature<Point>} a Point feature at the mean center point of all input features\n * @example\n * var features = turf.featureCollection([\n *   turf.point([-97.522259, 35.4691], {value: 10}),\n *   turf.point([-97.502754, 35.463455], {value: 3}),\n *   turf.point([-97.508269, 35.463245], {value: 5})\n * ]);\n *\n * var options = {weight: \"value\"}\n * var mean = turf.centerMean(features, options);\n *\n * //addToMap\n * var addToMap = [features, mean]\n * mean.properties['marker-size'] = 'large';\n * mean.properties['marker-color'] = '#000';\n */\nfunction centerMean<P extends GeoJsonProperties = GeoJsonProperties>(\n  geojson: any, // To-Do include Typescript AllGeoJSON\n  options: { properties?: P; bbox?: BBox; id?: Id; weight?: string } = {}\n): Feature<Point, P> {\n  let sumXs = 0;\n  let sumYs = 0;\n  let sumNs = 0;\n  geomEach(geojson, function (geom, featureIndex, properties) {\n    let weight = options.weight ? properties?.[options.weight] : undefined;\n    weight = weight === undefined || weight === null ? 1 : weight;\n    if (!isNumber(weight))\n      throw new Error(\n        \"weight value must be a number for feature index \" + featureIndex\n      );\n    weight = Number(weight);\n    if (weight > 0) {\n      coordEach(geom, function (coord) {\n        sumXs += coord[0] * weight;\n        sumYs += coord[1] * weight;\n        sumNs += weight;\n      });\n    }\n  });\n  return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);\n}\n\nexport { centerMean };\nexport default centerMean;\n", "import { Feature, GeoJsonProperties, Point } from \"geojson\";\nimport { point, AllGeoJSON } from \"@turf/helpers\";\nimport { coordEach } from \"@turf/meta\";\n\n/**\n * Computes the centroid as the mean of all vertices within the object.\n *\n * @name centroid\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties\n * @returns {Feature<Point>} the centroid of the input object\n * @example\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n *\n * var centroid = turf.centroid(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, centroid]\n */\nfunction centroid<P extends GeoJsonProperties = GeoJsonProperties>(\n  geojson: AllGeoJSON,\n  options: {\n    properties?: P;\n  } = {}\n): Feature<Point, P> {\n  let xSum = 0;\n  let ySum = 0;\n  let len = 0;\n  coordEach(\n    geojson,\n    function (coord) {\n      xSum += coord[0];\n      ySum += coord[1];\n      len++;\n    },\n    true\n  );\n  return point([xSum / len, ySum / len], options.properties);\n}\n\nexport { centroid };\nexport default centroid;\n", "import { FeatureCollection, Feature, Point, Position } from \"geojson\";\nimport { centerMean } from \"@turf/center-mean\";\nimport { distance } from \"@turf/distance\";\nimport { centroid } from \"@turf/centroid\";\nimport { isNumber, point, isObject, featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\n\n/**\n * Takes a {@link FeatureCollection} of points and calculates the median center,\n * algorithimically. The median center is understood as the point that is\n * requires the least total travel from all other points.\n *\n * Turfjs has four different functions for calculating the center of a set of\n * data. Each is useful depending on circumstance.\n *\n * `@turf/center` finds the simple center of a dataset, by finding the\n * midpoint between the extents of the data. That is, it divides in half the\n * farthest east and farthest west point as well as the farthest north and\n * farthest south.\n *\n * `@turf/center-of-mass` imagines that the dataset is a sheet of paper.\n * The center of mass is where the sheet would balance on a fingertip.\n *\n * `@turf/center-mean` takes the averages of all the coordinates and\n * produces a value that respects that. Unlike `@turf/center`, it is\n * sensitive to clusters and outliers. It lands in the statistical middle of a\n * dataset, not the geographical. It can also be weighted, meaning certain\n * points are more important than others.\n *\n * `@turf/center-median` takes the mean center and tries to find, iteratively,\n * a new point that requires the least amount of travel from all the points in\n * the dataset. It is not as sensitive to outliers as `@turf/center-mean`, but it is\n * attracted to clustered data. It, too, can be weighted.\n *\n * **Bibliography**\n *\n * Harold W. Kuhn and Robert E. Kuenne, “An Efficient Algorithm for the\n * Numerical Solution of the Generalized Weber Problem in Spatial\n * Economics,” _Journal of Regional Science_ 4, no. 2 (1962): 21–33,\n * doi:{@link https://doi.org/10.1111/j.1467-9787.1962.tb00902.x}.\n *\n * James E. Burt, Gerald M. Barber, and David L. Rigby, _Elementary\n * Statistics for Geographers_, 3rd ed., New York: The Guilford\n * Press, 2009, 150–151.\n *\n * @name centerMedian\n * @param {FeatureCollection<any>} features Any GeoJSON Feature Collection\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.weight] the property name used to weight the center\n * @param {number} [options.tolerance=0.001] the difference in distance between candidate medians at which point the algorighim stops iterating.\n * @param {number} [options.counter=10] how many attempts to find the median, should the tolerance be insufficient.\n * @returns {Feature<Point>} The median center of the collection\n * @example\n * var points = turf.points([[0, 0], [1, 0], [0, 1], [5, 8]]);\n * var medianCenter = turf.centerMedian(points);\n *\n * //addToMap\n * var addToMap = [points, medianCenter]\n */\nfunction centerMedian(\n  features: FeatureCollection<any>,\n  options: { weight?: string; tolerance?: number; counter?: number } = {}\n): Feature<\n  Point,\n  {\n    medianCandidates: Array<Position>;\n    [key: string]: any;\n  }\n> {\n  // Optional params\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var counter = options.counter || 10;\n  if (!isNumber(counter)) throw new Error(\"counter must be a number\");\n  var weightTerm = options.weight;\n\n  // Calculate mean center:\n  var meanCenter = centerMean(features, { weight: options.weight });\n\n  // Calculate center of every feature:\n  var centroids = featureCollection<Point>([]);\n  featureEach(features, function (feature) {\n    centroids.features.push(\n      centroid(feature, {\n        properties: { weight: feature.properties?.[weightTerm!] },\n      })\n    );\n  });\n\n  const properties: MedianProperties = {\n    tolerance: options.tolerance,\n    medianCandidates: [],\n  };\n\n  return findMedian(\n    meanCenter.geometry.coordinates,\n    [0, 0],\n    centroids,\n    properties,\n    counter\n  ) as Feature<\n    Point,\n    {\n      medianCandidates: Array<Position>;\n      [key: string]: any;\n    }\n  >;\n}\n\ninterface MedianProperties {\n  tolerance?: number;\n  medianCandidates: Position[];\n}\n\n/**\n * Recursive function to find new candidate medians.\n *\n * @private\n * @param {Position} candidateMedian current candidate median\n * @param {Position} previousCandidate the previous candidate median\n * @param {FeatureCollection<Point>} centroids the collection of centroids whose median we are determining\n * @param {number} counter how many attempts to try before quitting.\n * @returns {Feature<Point>} the median center of the dataset.\n */\nfunction findMedian(\n  candidateMedian: Position,\n  previousCandidate: Position,\n  centroids: FeatureCollection<Point>,\n  properties: MedianProperties,\n  counter: number\n): Feature<Point> {\n  var tolerance = properties.tolerance || 0.001;\n  var candidateXsum = 0;\n  var candidateYsum = 0;\n  var kSum = 0;\n  var centroidCount = 0;\n  featureEach(centroids, function (theCentroid) {\n    var weightValue = theCentroid.properties?.weight;\n    var weight =\n      weightValue === undefined || weightValue === null ? 1 : weightValue;\n    weight = Number(weight);\n    if (!isNumber(weight)) throw new Error(\"weight value must be a number\");\n    if (weight > 0) {\n      centroidCount += 1;\n      var distanceFromCandidate =\n        weight * distance(theCentroid, candidateMedian);\n      if (distanceFromCandidate === 0) distanceFromCandidate = 1;\n      var k = weight / distanceFromCandidate;\n      candidateXsum += theCentroid.geometry.coordinates[0] * k;\n      candidateYsum += theCentroid.geometry.coordinates[1] * k;\n      kSum += k;\n    }\n  });\n  if (centroidCount < 1) throw new Error(\"no features to measure\");\n  var candidateX = candidateXsum / kSum;\n  var candidateY = candidateYsum / kSum;\n  if (\n    centroidCount === 1 ||\n    counter === 0 ||\n    (Math.abs(candidateX - previousCandidate[0]) < tolerance &&\n      Math.abs(candidateY - previousCandidate[1]) < tolerance)\n  ) {\n    return point([candidateX, candidateY], {\n      medianCandidates: properties.medianCandidates,\n    });\n  } else {\n    properties.medianCandidates.push([candidateX, candidateY]);\n    return findMedian(\n      [candidateX, candidateY],\n      candidateMedian,\n      centroids,\n      properties,\n      counter - 1\n    );\n  }\n}\n\nexport { centerMedian };\nexport default centerMedian;\n", "import { Feature, GeoJsonProperties, Polygon } from \"geojson\";\nimport { AllGeoJSON, polygon } from \"@turf/helpers\";\nimport { coordEach } from \"@turf/meta\";\nimport concaveman from \"concaveman\";\n\n/**\n * Takes a {@link Feature} or a {@link FeatureCollection} and returns a convex hull {@link Polygon}.\n *\n * Internally this uses\n * the [convex-hull](https://github.com/mikolalysenko/convex-hull) module that implements a\n * [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).\n *\n * @name convex\n * @param {GeoJSON} geojson input Feature or FeatureCollection\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.concavity=Infinity] 1 - thin shape. Infinity - convex hull.\n * @param {Object} [options.properties={}] Translate Properties to Feature\n * @returns {Feature<Polygon>} a convex hull\n * @example\n * var points = turf.featureCollection([\n *   turf.point([10.195312, 43.755225]),\n *   turf.point([10.404052, 43.8424511]),\n *   turf.point([10.579833, 43.659924]),\n *   turf.point([10.360107, 43.516688]),\n *   turf.point([10.14038, 43.588348]),\n *   turf.point([10.195312, 43.755225])\n * ]);\n *\n * var hull = turf.convex(points);\n *\n * //addToMap\n * var addToMap = [points, hull]\n */\nfunction convex<P extends GeoJsonProperties = GeoJsonProperties>(\n  geojson: AllGeoJSON,\n  options: {\n    concavity?: number;\n    properties?: P;\n  } = {}\n): Feature<Polygon, P> | null {\n  // Default parameters\n  options.concavity = options.concavity || Infinity;\n\n  // Container\n  const points: number[][] = [];\n\n  // Convert all points to flat 2D coordinate Array\n  coordEach(geojson, (coord) => {\n    points.push([coord[0], coord[1]]);\n  });\n  if (!points.length) {\n    return null;\n  }\n\n  const convexHull = concaveman(points, options.concavity);\n\n  // Convex hull should have at least 3 different vertices in order to create a valid polygon\n  if (convexHull.length > 3) {\n    return polygon([convexHull]);\n  }\n  return null;\n}\n\nexport { convex };\nexport default convex;\n", "import { Feature, GeoJsonProperties, Point, Position } from \"geojson\";\nimport { convex } from \"@turf/convex\";\nimport { centroid } from \"@turf/centroid\";\nimport { point } from \"@turf/helpers\";\nimport { getType, getCoord } from \"@turf/invariant\";\nimport { coordEach } from \"@turf/meta\";\n\n/**\n * Takes any {@link Feature} or a {@link FeatureCollection} and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).\n *\n * @name centerOfMass\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] Translate Properties to Feature\n * @returns {Feature<Point>} the center of mass\n * @example\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n *\n * var center = turf.centerOfMass(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, center]\n */\nfunction centerOfMass<P extends GeoJsonProperties = GeoJsonProperties>(\n  geojson: any,\n  options: {\n    properties?: P;\n  } = {}\n): Feature<Point, P> {\n  switch (getType(geojson)) {\n    case \"Point\":\n      return point(getCoord(geojson), options.properties);\n    case \"Polygon\":\n      var coords: Position[] = [];\n      coordEach(geojson, function (coord) {\n        coords.push(coord);\n      });\n\n      // First, we neutralize the feature (set it around coordinates [0,0]) to prevent rounding errors\n      // We take any point to translate all the points around 0\n      var centre = centroid(geojson, { properties: options.properties });\n      var translation = centre.geometry.coordinates;\n      var sx = 0;\n      var sy = 0;\n      var sArea = 0;\n      var i, pi, pj, xi, xj, yi, yj, a;\n\n      var neutralizedPoints = coords.map(function (point) {\n        return [point[0] - translation[0], point[1] - translation[1]];\n      });\n\n      for (i = 0; i < coords.length - 1; i++) {\n        // pi is the current point\n        pi = neutralizedPoints[i];\n        xi = pi[0];\n        yi = pi[1];\n\n        // pj is the next point (pi+1)\n        pj = neutralizedPoints[i + 1];\n        xj = pj[0];\n        yj = pj[1];\n\n        // a is the common factor to compute the signed area and the final coordinates\n        a = xi * yj - xj * yi;\n\n        // sArea is the sum used to compute the signed area\n        sArea += a;\n\n        // sx and sy are the sums used to compute the final coordinates\n        sx += (xi + xj) * a;\n        sy += (yi + yj) * a;\n      }\n\n      // Shape has no area: fallback on turf.centroid\n      if (sArea === 0) {\n        return centre;\n      } else {\n        // Compute the signed area, and factorize 1/6A\n        var area = sArea * 0.5;\n        var areaFactor = 1 / (6 * area);\n\n        // Compute the final coordinates, adding back the values that have been neutralized\n        return point(\n          [translation[0] + areaFactor * sx, translation[1] + areaFactor * sy],\n          options.properties\n        );\n      }\n    default:\n      // Not a polygon: Compute the convex hull and work with that\n      var hull = convex(geojson);\n\n      if (hull) return centerOfMass(hull, { properties: options.properties });\n      // Hull is empty: fallback on the centroid\n      else return centroid(geojson, { properties: options.properties });\n  }\n}\n\nexport { centerOfMass };\nexport default centerOfMass;\n", "import { GeoJsonProperties, Feature, Point, Polygon } from \"geojson\";\nimport { destination } from \"@turf/destination\";\nimport { polygon, Units } from \"@turf/helpers\";\n\n/**\n * Takes a {@link Point} and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.\n *\n * @name circle\n * @param {Feature<Point>|number[]} center center point\n * @param {number} radius radius of the circle\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] properties\n * @returns {Feature<Polygon>} circle polygon\n * @example\n * var center = [-75.343, 39.984];\n * var radius = 5;\n * var options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};\n * var circle = turf.circle(center, radius, options);\n *\n * //addToMap\n * var addToMap = [turf.point(center), circle]\n */\nfunction circle<P extends GeoJsonProperties = GeoJsonProperties>(\n  center: number[] | Point | Feature<Point, P>,\n  radius: number,\n  options: {\n    steps?: number;\n    units?: Units;\n    properties?: P;\n  } = {}\n): Feature<Polygon, P> {\n  // default params\n  const steps = options.steps || 64;\n  const properties: any = options.properties\n    ? options.properties\n    : !Array.isArray(center) && center.type === \"Feature\" && center.properties\n      ? center.properties\n      : {};\n\n  // main\n  const coordinates = [];\n  for (let i = 0; i < steps; i++) {\n    coordinates.push(\n      destination(center, radius, (i * -360) / steps, options).geometry\n        .coordinates\n    );\n  }\n  coordinates.push(coordinates[0]);\n\n  return polygon([coordinates], properties);\n}\n\nexport { circle };\nexport default circle;\n", "import { Feature, GeoJsonProperties } from \"geojson\";\nimport { AllGeoJSON } from \"@turf/helpers\";\n\n/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone<T extends AllGeoJSON>(geojson: T): T {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n\n  switch (geojson.type) {\n    case \"Feature\":\n      return cloneFeature(geojson);\n    case \"FeatureCollection\":\n      return cloneFeatureCollection(geojson);\n    case \"Point\":\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiPoint\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n    case \"GeometryCollection\":\n      return cloneGeometry(geojson);\n    default:\n      throw new Error(\"unknown GeoJSON type\");\n  }\n}\n\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\nfunction cloneFeature(geojson: any) {\n  const cloned: any = { type: \"Feature\" };\n  // Preserve Foreign Members\n  Object.keys(geojson).forEach((key) => {\n    switch (key) {\n      case \"type\":\n      case \"properties\":\n      case \"geometry\":\n        return;\n      default:\n        cloned[key] = geojson[key];\n    }\n  });\n  // Add properties & geometry last\n  cloned.properties = cloneProperties(geojson.properties);\n  if (geojson.geometry == null) {\n    cloned.geometry = null;\n  } else {\n    cloned.geometry = cloneGeometry(geojson.geometry);\n  }\n  return cloned;\n}\n\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\nfunction cloneProperties(properties: GeoJsonProperties) {\n  const cloned: { [key: string]: any } = {};\n  if (!properties) {\n    return cloned;\n  }\n  Object.keys(properties).forEach((key) => {\n    const value = properties[key];\n    if (typeof value === \"object\") {\n      if (value === null) {\n        // handle null\n        cloned[key] = null;\n      } else if (Array.isArray(value)) {\n        // handle Array\n        cloned[key] = value.map((item) => {\n          return item;\n        });\n      } else {\n        // handle generic Object\n        cloned[key] = cloneProperties(value);\n      }\n    } else {\n      cloned[key] = value;\n    }\n  });\n  return cloned;\n}\n\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\nfunction cloneFeatureCollection(geojson: any) {\n  const cloned: any = { type: \"FeatureCollection\" };\n\n  // Preserve Foreign Members\n  Object.keys(geojson).forEach((key) => {\n    switch (key) {\n      case \"type\":\n      case \"features\":\n        return;\n      default:\n        cloned[key] = geojson[key];\n    }\n  });\n  // Add features\n  cloned.features = geojson.features.map((feature: Feature<any>) => {\n    return cloneFeature(feature);\n  });\n  return cloned;\n}\n\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\nfunction cloneGeometry(geometry: any) {\n  const geom: any = { type: geometry.type };\n  if (geometry.bbox) {\n    geom.bbox = geometry.bbox;\n  }\n\n  if (geometry.type === \"GeometryCollection\") {\n    geom.geometries = geometry.geometries.map((g: any) => {\n      return cloneGeometry(g);\n    });\n    return geom;\n  }\n  geom.coordinates = deepSlice(geometry.coordinates);\n  return geom;\n}\n\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\nfunction deepSlice<C = any[]>(coords: C): C {\n  const cloned: any = coords;\n  if (typeof cloned[0] !== \"object\") {\n    return cloned.slice();\n  }\n  return cloned.map((coord: any) => {\n    return deepSlice(coord);\n  });\n}\n\nexport { clone, cloneProperties };\nexport default clone;\n", "import {\n  Feature,\n  FeatureCollection,\n  GeoJsonProperties,\n  GeometryObject,\n} from \"geojson\";\nimport { featureEach } from \"@turf/meta\";\nimport { featureCollection } from \"@turf/helpers\";\n\n/**\n * Get Cluster\n *\n * @name getCluster\n * @param {FeatureCollection} geojson GeoJSON Features\n * @param {*} filter Filter used on GeoJSON properties to get Cluster\n * @returns {FeatureCollection} Single Cluster filtered by GeoJSON Properties\n * @example\n * var geojson = turf.featureCollection([\n *     turf.point([0, 0], {'marker-symbol': 'circle'}),\n *     turf.point([2, 4], {'marker-symbol': 'star'}),\n *     turf.point([3, 6], {'marker-symbol': 'star'}),\n *     turf.point([5, 1], {'marker-symbol': 'square'}),\n *     turf.point([4, 2], {'marker-symbol': 'circle'})\n * ]);\n *\n * // Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\n * var clustered = turf.clustersKmeans(geojson);\n *\n * // Retrieve first cluster (0)\n * var cluster = turf.getCluster(clustered, {cluster: 0});\n * //= cluster\n *\n * // Retrieve cluster based on custom properties\n * turf.getCluster(clustered, {'marker-symbol': 'circle'}).length;\n * //= 2\n * turf.getCluster(clustered, {'marker-symbol': 'square'}).length;\n * //= 1\n */\nfunction getCluster<\n  G extends GeometryObject,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(geojson: FeatureCollection<G, P>, filter: any): FeatureCollection<G, P> {\n  // Validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (geojson.type !== \"FeatureCollection\")\n    throw new Error(\"geojson must be a FeatureCollection\");\n  if (filter === undefined || filter === null)\n    throw new Error(\"filter is required\");\n\n  // Filter Features\n  var features: Feature<G, P>[] = [];\n  featureEach<G, P>(geojson, function (feature) {\n    if (applyFilter(feature.properties, filter)) features.push(feature);\n  });\n  return featureCollection(features);\n}\n\n/**\n * Callback for clusterEach\n *\n * @callback clusterEachCallback\n * @param {FeatureCollection} [cluster] The current cluster being processed.\n * @param {*} [clusterValue] Value used to create cluster being processed.\n * @param {number} [currentIndex] The index of the current element being processed in the array.Starts at index 0\n * @returns {void}\n */\n\n/**\n * clusterEach\n *\n * @name clusterEach\n * @param {FeatureCollection} geojson GeoJSON Features\n * @param {string|number} property GeoJSON property key/value used to create clusters\n * @param {Function} callback a method that takes (cluster, clusterValue, currentIndex)\n * @returns {void}\n * @example\n * var geojson = turf.featureCollection([\n *     turf.point([0, 0]),\n *     turf.point([2, 4]),\n *     turf.point([3, 6]),\n *     turf.point([5, 1]),\n *     turf.point([4, 2])\n * ]);\n *\n * // Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\n * var clustered = turf.clustersKmeans(geojson);\n *\n * // Iterate over each cluster\n * turf.clusterEach(clustered, 'cluster', function (cluster, clusterValue, currentIndex) {\n *     //= cluster\n *     //= clusterValue\n *     //= currentIndex\n * })\n *\n * // Calculate the total number of clusters\n * var total = 0\n * turf.clusterEach(clustered, 'cluster', function () {\n *     total++;\n * });\n *\n * // Create an Array of all the values retrieved from the 'cluster' property\n * var values = []\n * turf.clusterEach(clustered, 'cluster', function (cluster, clusterValue) {\n *     values.push(clusterValue);\n * });\n */\nfunction clusterEach<\n  G extends GeometryObject,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  geojson: FeatureCollection<G, P>,\n  property: number | string,\n  callback: (\n    cluster: FeatureCollection<G, P>,\n    clusterValue?: any,\n    currentIndex?: number\n  ) => void\n): void {\n  // Validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (geojson.type !== \"FeatureCollection\")\n    throw new Error(\"geojson must be a FeatureCollection\");\n  if (property === undefined || property === null)\n    throw new Error(\"property is required\");\n\n  // Create clusters based on property values\n  var bins = createBins(geojson, property);\n  var values = Object.keys(bins);\n  for (var index = 0; index < values.length; index++) {\n    var value = values[index];\n    var bin = bins[value];\n    var features = [];\n    for (var i = 0; i < bin.length; i++) {\n      features.push(geojson.features[bin[i]]);\n    }\n    callback(featureCollection(features), value, index);\n  }\n}\n\n/**\n * Callback for clusterReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback clusterReduceCallback\n * @param {*} [previousValue] The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {FeatureCollection} [cluster] The current cluster being processed.\n * @param {*} [clusterValue] Value used to create cluster being processed.\n * @param {number} [currentIndex] The index of the current element being processed in the\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Reduce clusters in GeoJSON Features, similar to Array.reduce()\n *\n * @name clusterReduce\n * @param {FeatureCollection} geojson GeoJSON Features\n * @param {string|number} property GeoJSON property key/value used to create clusters\n * @param {Function} callback a method that takes (previousValue, cluster, clusterValue, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var geojson = turf.featureCollection([\n *     turf.point([0, 0]),\n *     turf.point([2, 4]),\n *     turf.point([3, 6]),\n *     turf.point([5, 1]),\n *     turf.point([4, 2])\n * ]);\n *\n * // Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\n * var clustered = turf.clustersKmeans(geojson);\n *\n * // Iterate over each cluster and perform a calculation\n * var initialValue = 0\n * turf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue, currentIndex) {\n *     //=previousValue\n *     //=cluster\n *     //=clusterValue\n *     //=currentIndex\n *     return previousValue++;\n * }, initialValue);\n *\n * // Calculate the total number of clusters\n * var total = turf.clusterReduce(clustered, 'cluster', function (previousValue) {\n *     return previousValue++;\n * }, 0);\n *\n * // Create an Array of all the values retrieved from the 'cluster' property\n * var values = turf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue) {\n *     return previousValue.concat(clusterValue);\n * }, []);\n */\nfunction clusterReduce<\n  G extends GeometryObject,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  geojson: FeatureCollection<G, P>,\n  property: number | string,\n  callback: (\n    previousValue: any | undefined,\n    cluster: FeatureCollection<G, P>,\n    clusterValue?: any,\n    currentIndex?: number\n  ) => void,\n  initialValue?: any\n): void {\n  var previousValue = initialValue;\n  clusterEach(\n    geojson,\n    property,\n    function (cluster, clusterValue, currentIndex) {\n      if (currentIndex === 0 && initialValue === undefined)\n        previousValue = cluster;\n      else\n        previousValue = callback(\n          previousValue,\n          cluster,\n          clusterValue,\n          currentIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Create Bins\n *\n * @private\n * @param {FeatureCollection} geojson GeoJSON Features\n * @param {string|number} property Property values are used to create bins\n * @returns {Object} bins with Feature IDs\n * @example\n * var geojson = turf.featureCollection([\n *     turf.point([0, 0], {cluster: 0, foo: 'null'}),\n *     turf.point([2, 4], {cluster: 1, foo: 'bar'}),\n *     turf.point([5, 1], {0: 'foo'}),\n *     turf.point([3, 6], {cluster: 1}),\n * ]);\n * createBins(geojson, 'cluster');\n * //= { '0': [ 0 ], '1': [ 1, 3 ] }\n */\nfunction createBins(\n  geojson: FeatureCollection<any>,\n  property: string | number\n) {\n  var bins: Record<string, number[]> = {};\n\n  featureEach(geojson, function (feature, i) {\n    var properties = feature.properties || {};\n    if (Object.prototype.hasOwnProperty.call(properties, String(property))) {\n      var value = properties[property];\n      if (Object.prototype.hasOwnProperty.call(bins, value))\n        bins[value].push(i);\n      else bins[value] = [i];\n    }\n  });\n  return bins;\n}\n\n/**\n * Apply Filter\n *\n * @private\n * @param {*} properties Properties\n * @param {*} filter Filter\n * @returns {boolean} applied Filter to properties\n */\nfunction applyFilter(properties: any, filter: any) {\n  if (properties === undefined) return false;\n  var filterType = typeof filter;\n\n  // String & Number\n  if (filterType === \"number\" || filterType === \"string\")\n    return Object.prototype.hasOwnProperty.call(properties, filter);\n  // Array\n  else if (Array.isArray(filter)) {\n    for (var i = 0; i < filter.length; i++) {\n      if (!applyFilter(properties, filter[i])) return false;\n    }\n    return true;\n    // Object\n  } else {\n    return propertiesContainsFilter(properties, filter);\n  }\n}\n\n/**\n * Properties contains filter (does not apply deepEqual operations)\n *\n * @private\n * @param {*} properties Properties\n * @param {Object} filter Filter\n * @returns {boolean} does filter equal Properties\n * @example\n * propertiesContainsFilter({foo: 'bar', cluster: 0}, {cluster: 0})\n * //= true\n * propertiesContainsFilter({foo: 'bar', cluster: 0}, {cluster: 1})\n * //= false\n */\nfunction propertiesContainsFilter(properties: any, filter: any): boolean {\n  var keys = Object.keys(filter);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (properties[key] !== filter[key]) return false;\n  }\n  return true;\n}\n\n/**\n * Filter Properties\n *\n * @private\n * @param {*} properties Properties\n * @param {Array<string>} keys Used to filter Properties\n * @returns {*} filtered Properties\n * @example\n * filterProperties({foo: 'bar', cluster: 0}, ['cluster'])\n * //= {cluster: 0}\n */\nfunction filterProperties(\n  properties: Record<string, any>,\n  keys: string[]\n): any {\n  if (!keys) return {};\n  if (!keys.length) return {};\n\n  var newProperties: Record<string, any> = {};\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (Object.prototype.hasOwnProperty.call(properties, key))\n      newProperties[key] = properties[key];\n  }\n  return newProperties;\n}\n\nexport {\n  getCluster,\n  clusterEach,\n  clusterReduce,\n  createBins,\n  applyFilter,\n  propertiesContainsFilter,\n  filterProperties,\n};\n// No default export!\n", "import { GeoJsonProperties, FeatureCollection, Point } from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { distance } from \"@turf/distance\";\nimport { degreesToRadians, lengthToDegrees, Units } from \"@turf/helpers\";\nimport { rbush as RBush } from \"./lib/rbush-export.js\";\n\ntype Dbscan = \"core\" | \"edge\" | \"noise\";\ntype DbscanProps = GeoJsonProperties & {\n  dbscan?: Dbscan;\n  cluster?: number;\n};\n\n// Structure of a point in the spatial index\ntype IndexedPoint = {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n  index: number;\n};\n\n/**\n * Takes a set of {@link Point|points} and partition them into clusters according to {@link DBSCAN's|https://en.wikipedia.org/wiki/DBSCAN} data clustering algorithm.\n *\n * @name clustersDbscan\n * @param {FeatureCollection<Point>} points to be clustered\n * @param {number} maxDistance Maximum Distance between any point of the cluster to generate the clusters (kilometers by default, see options)\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=\"kilometers\"] in which `maxDistance` is expressed, can be degrees, radians, miles, or kilometers\n * @param {boolean} [options.mutate=false] Allows GeoJSON input to be mutated\n * @param {number} [options.minPoints=3] Minimum number of points to generate a single cluster,\n * points which do not meet this requirement will be classified as an 'edge' or 'noise'.\n * @returns {FeatureCollection<Point>} Clustered Points with an additional two properties associated to each Feature:\n * - {number} cluster - the associated clusterId\n * - {string} dbscan - type of point it has been classified as ('core'|'edge'|'noise')\n * @example\n * // create random points with random z-values in their properties\n * var points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\n * var maxDistance = 100;\n * var clustered = turf.clustersDbscan(points, maxDistance);\n *\n * //addToMap\n * var addToMap = [clustered];\n */\nfunction clustersDbscan(\n  points: FeatureCollection<Point>,\n  maxDistance: number,\n  options: {\n    units?: Units;\n    minPoints?: number;\n    mutate?: boolean;\n  } = {}\n): FeatureCollection<Point, DbscanProps> {\n  // Input validation being handled by Typescript\n  // collectionOf(points, 'Point', 'points must consist of a FeatureCollection of only Points');\n  // if (maxDistance === null || maxDistance === undefined) throw new Error('maxDistance is required');\n  // if (!(Math.sign(maxDistance) > 0)) throw new Error('maxDistance is invalid');\n  // if (!(minPoints === undefined || minPoints === null || Math.sign(minPoints) > 0)) throw new Error('options.minPoints is invalid');\n\n  // Clone points to prevent any mutations\n  if (options.mutate !== true) points = clone(points);\n\n  // Defaults\n  const minPoints = options.minPoints || 3;\n\n  // Calculate the distance in degrees for region queries\n  const latDistanceInDegrees = lengthToDegrees(maxDistance, options.units);\n\n  // Create a spatial index\n  var tree = new RBush(points.features.length);\n\n  // Keeps track of whether a point has been visited or not.\n  var visited = points.features.map((_) => false);\n\n  // Keeps track of whether a point is assigned to a cluster or not.\n  var assigned = points.features.map((_) => false);\n\n  // Keeps track of whether a point is noise|edge or not.\n  var isnoise = points.features.map((_) => false);\n\n  // Keeps track of the clusterId for each point\n  var clusterIds: number[] = points.features.map((_) => -1);\n\n  // Index each point for spatial queries\n  tree.load(\n    points.features.map((point, index) => {\n      var [x, y] = point.geometry.coordinates;\n      return {\n        minX: x,\n        minY: y,\n        maxX: x,\n        maxY: y,\n        index: index,\n      } as IndexedPoint;\n    })\n  );\n\n  // Function to find neighbors of a point within a given distance\n  const regionQuery = (index: number): IndexedPoint[] => {\n    const point = points.features[index];\n    const [x, y] = point.geometry.coordinates;\n\n    const minY = Math.max(y - latDistanceInDegrees, -90.0);\n    const maxY = Math.min(y + latDistanceInDegrees, 90.0);\n\n    const lonDistanceInDegrees = (function () {\n      // Handle the case where the bounding box crosses the poles\n      if (minY < 0 && maxY > 0) {\n        return latDistanceInDegrees;\n      }\n      if (Math.abs(minY) < Math.abs(maxY)) {\n        return latDistanceInDegrees / Math.cos(degreesToRadians(maxY));\n      } else {\n        return latDistanceInDegrees / Math.cos(degreesToRadians(minY));\n      }\n    })();\n\n    const minX = Math.max(x - lonDistanceInDegrees, -360.0);\n    const maxX = Math.min(x + lonDistanceInDegrees, 360.0);\n\n    // Calculate the bounding box for the region query\n    const bbox = { minX, minY, maxX, maxY };\n    return (tree.search(bbox) as ReadonlyArray<IndexedPoint>).filter(\n      (neighbor) => {\n        const neighborIndex = neighbor.index;\n        const neighborPoint = points.features[neighborIndex];\n        const distanceInKm = distance(point, neighborPoint, {\n          units: \"kilometers\",\n        });\n        return distanceInKm <= maxDistance;\n      }\n    );\n  };\n\n  // Function to expand a cluster\n  const expandCluster = (clusteredId: number, neighbors: IndexedPoint[]) => {\n    for (var i = 0; i < neighbors.length; i++) {\n      var neighbor = neighbors[i];\n      const neighborIndex = neighbor.index;\n      if (!visited[neighborIndex]) {\n        visited[neighborIndex] = true;\n        const nextNeighbors = regionQuery(neighborIndex);\n        if (nextNeighbors.length >= minPoints) {\n          neighbors.push(...nextNeighbors);\n        }\n      }\n      if (!assigned[neighborIndex]) {\n        assigned[neighborIndex] = true;\n        clusterIds[neighborIndex] = clusteredId;\n      }\n    }\n  };\n\n  // Main DBSCAN clustering algorithm\n  var nextClusteredId = 0;\n  points.features.forEach((_, index) => {\n    if (visited[index]) return;\n    const neighbors = regionQuery(index);\n    if (neighbors.length >= minPoints) {\n      const clusteredId = nextClusteredId;\n      nextClusteredId++;\n      visited[index] = true;\n      expandCluster(clusteredId, neighbors);\n    } else {\n      isnoise[index] = true;\n    }\n  });\n\n  // Assign DBSCAN properties to each point\n  points.features.forEach((_, index) => {\n    var clusterPoint = points.features[index];\n    if (!clusterPoint.properties) {\n      clusterPoint.properties = {};\n    }\n\n    if (clusterIds[index] >= 0) {\n      clusterPoint.properties.dbscan = isnoise[index] ? \"edge\" : \"core\";\n      clusterPoint.properties.cluster = clusterIds[index];\n    } else {\n      clusterPoint.properties.dbscan = \"noise\";\n    }\n  });\n\n  return points as FeatureCollection<Point, DbscanProps>;\n}\n\nexport { Dbscan, DbscanProps, clustersDbscan };\nexport default clustersDbscan;\n", "// Get around problems with moduleResolution node16 and some older libraries.\n// Manifests as \"This expression is not callable ... has no call signatures\"\n// https://stackoverflow.com/a/74709714\n\nimport lib from \"rbush\";\n\nexport const rbush = lib as unknown as typeof lib.default;\n", "import { FeatureCollection, Point, GeoJsonProperties } from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { coordAll, featureEach } from \"@turf/meta\";\nimport skmeans from \"skmeans\";\n\ntype KmeansProps = GeoJsonProperties & {\n  cluster?: number;\n  centroid?: [number, number];\n};\n\n/**\n * Takes a set of {@link Point|points} and partition them into clusters using the k-mean .\n * It uses the [k-means algorithm](https://en.wikipedia.org/wiki/K-means_clustering)\n *\n * @name clustersKmeans\n * @param {FeatureCollection<Point>} points to be clustered\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.numberOfClusters=Math.sqrt(numberOfPoints/2)] numberOfClusters that will be generated\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {FeatureCollection<Point>} Clustered Points with an additional two properties associated to each Feature:\n * - {number} cluster - the associated clusterId\n * - {[number, number]} centroid - Centroid of the cluster [Longitude, Latitude]\n * @example\n * // create random points with random z-values in their properties\n * var points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\n * var options = {numberOfClusters: 7};\n * var clustered = turf.clustersKmeans(points, options);\n *\n * //addToMap\n * var addToMap = [clustered];\n */\nfunction clustersKmeans(\n  points: FeatureCollection<Point>,\n  options: {\n    numberOfClusters?: number;\n    mutate?: boolean;\n  } = {}\n): FeatureCollection<Point, KmeansProps> {\n  // Default Params\n  var count = points.features.length;\n  options.numberOfClusters =\n    options.numberOfClusters || Math.round(Math.sqrt(count / 2));\n\n  // numberOfClusters can't be greater than the number of points\n  // fallbacks to count\n  if (options.numberOfClusters > count) options.numberOfClusters = count;\n\n  // Clone points to prevent any mutations (enabled by default)\n  if (options.mutate !== true) points = clone(points);\n\n  // collect points coordinates\n  var data = coordAll(points);\n\n  // create seed to avoid skmeans to drift\n  var initialCentroids = data.slice(0, options.numberOfClusters);\n\n  // create skmeans clusters\n  var skmeansResult = skmeans(data, options.numberOfClusters, initialCentroids);\n\n  // store centroids {clusterId: [number, number]}\n  var centroids: Record<string, number[]> = {};\n  (skmeansResult.centroids as number[][]).forEach(function (\n    coord: number[],\n    idx: number\n  ) {\n    centroids[idx] = coord;\n  });\n\n  // add associated cluster number\n  featureEach(points, function (point, index) {\n    var clusterId = skmeansResult.idxs[index];\n    point.properties!.cluster = clusterId;\n    point.properties!.centroid = centroids[clusterId];\n  });\n\n  return points as FeatureCollection<Point, KmeansProps>;\n}\n\nexport { clustersKmeans, KmeansProps };\nexport default clustersKmeans;\n", "import { FeatureCollection, Polygon, Point } from \"geojson\";\nimport { bbox as turfbbox } from \"@turf/bbox\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { rbush } from \"./lib/rbush-export.js\";\n\ninterface Entry {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n  property: any;\n}\n\n/**\n * Merges a specified property from a FeatureCollection of points into a\n * FeatureCollection of polygons. Given an `inProperty` on points and an `outProperty`\n * for polygons, this finds every point that lies within each polygon, collects the\n * `inProperty` values from those points, and adds them as an array to `outProperty`\n * on the polygon.\n *\n * @name collect\n * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate\n * @param {FeatureCollection<Point>} points points to be aggregated\n * @param {string} inProperty property to be nested from\n * @param {string} outProperty property to be nested into\n * @returns {FeatureCollection<Polygon>} polygons with properties listed based on `outField`\n * @example\n * var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\n * var poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\n * var polyFC = turf.featureCollection([poly1, poly2]);\n * var pt1 = turf.point([5,5], {population: 200});\n * var pt2 = turf.point([1,3], {population: 600});\n * var pt3 = turf.point([14,2], {population: 100});\n * var pt4 = turf.point([13,1], {population: 200});\n * var pt5 = turf.point([19,7], {population: 300});\n * var pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\n * var collected = turf.collect(polyFC, pointFC, 'population', 'values');\n * var values = collected.features[0].properties.values\n * //=values => [200, 600]\n *\n * //addToMap\n * var addToMap = [pointFC, collected]\n */\nfunction collect(\n  polygons: FeatureCollection<Polygon>,\n  points: FeatureCollection<Point>,\n  inProperty: string,\n  outProperty: string\n): FeatureCollection<Polygon> {\n  var rtree = new rbush<Entry>(6);\n\n  var treeItems = points.features.map(function (item) {\n    return {\n      minX: item.geometry.coordinates[0],\n      minY: item.geometry.coordinates[1],\n      maxX: item.geometry.coordinates[0],\n      maxY: item.geometry.coordinates[1],\n      property: item.properties?.[inProperty],\n    };\n  });\n\n  rtree.load(treeItems);\n  polygons.features.forEach(function (poly) {\n    if (!poly.properties) {\n      poly.properties = {};\n    }\n    var bbox = turfbbox(poly);\n    var potentialPoints = rtree.search({\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3],\n    });\n    var values: any[] = [];\n    potentialPoints.forEach(function (pt) {\n      if (booleanPointInPolygon([pt.minX, pt.minY], poly)) {\n        values.push(pt.property);\n      }\n    });\n\n    poly.properties[outProperty] = values;\n  });\n\n  return polygons;\n}\n\nexport { collect };\nexport default collect;\n", "// Get around problems with moduleResolution node16 and some older libraries.\n// Manifests as \"This expression is not callable ... has no call signatures\"\n// https://stackoverflow.com/a/74709714\n\nimport lib from \"rbush\";\n\nexport const rbush = lib as unknown as typeof lib.default;\n", "import {\n  GeoJsonProperties,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { feature, featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\n\n/**\n * Combines a {@link FeatureCollection} of {@link Point}, {@link LineString}, or {@link Polygon} features\n * into {@link MultiPoint}, {@link MultiLineString}, or {@link MultiPolygon} features.\n *\n * @name combine\n * @param {FeatureCollection<Point|LineString|Polygon>} fc a FeatureCollection of any type\n * @returns {FeatureCollection<MultiPoint|MultiLineString|MultiPolygon>} a FeatureCollection of corresponding type to input\n * @example\n * var fc = turf.featureCollection([\n *   turf.point([19.026432, 47.49134]),\n *   turf.point([19.074497, 47.509548])\n * ]);\n *\n * var combined = turf.combine(fc);\n *\n * //addToMap\n * var addToMap = [combined]\n */\nfunction combine(\n  fc: FeatureCollection<\n    Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon\n  >\n) {\n  var groups = {\n    MultiPoint: {\n      coordinates: [] as number[][],\n      properties: [] as GeoJsonProperties[],\n    },\n    MultiLineString: {\n      coordinates: [] as number[][][],\n      properties: [] as GeoJsonProperties[],\n    },\n    MultiPolygon: {\n      coordinates: [] as number[][][][],\n      properties: [] as GeoJsonProperties[],\n    },\n  };\n\n  featureEach(fc, (feature) => {\n    switch (feature.geometry?.type) {\n      case \"Point\":\n        groups.MultiPoint.coordinates.push(feature.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature.properties);\n        break;\n      case \"MultiPoint\":\n        groups.MultiPoint.coordinates.push(...feature.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature.properties);\n        break;\n      case \"LineString\":\n        groups.MultiLineString.coordinates.push(feature.geometry.coordinates);\n        groups.MultiLineString.properties.push(feature.properties);\n        break;\n      case \"MultiLineString\":\n        groups.MultiLineString.coordinates.push(\n          ...feature.geometry.coordinates\n        );\n        groups.MultiLineString.properties.push(feature.properties);\n        break;\n      case \"Polygon\":\n        groups.MultiPolygon.coordinates.push(feature.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature.properties);\n        break;\n      case \"MultiPolygon\":\n        groups.MultiPolygon.coordinates.push(...feature.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature.properties);\n        break;\n      default:\n        break;\n    }\n  });\n\n  return featureCollection(\n    (Object.keys(groups) as (keyof typeof groups)[])\n      .filter(function (key) {\n        return groups[key].coordinates.length;\n      })\n      .sort()\n      .map(function (key) {\n        var geometry = { type: key, coordinates: groups[key].coordinates } as\n          | MultiPoint\n          | MultiLineString\n          | MultiPolygon;\n        var properties = { collectedProperties: groups[key].properties };\n        return feature(geometry, properties);\n      })\n  );\n}\n\nexport { combine };\nexport default combine;\n", "// http://en.wikipedia.org/wiki/Delaunay_triangulation\n// https://github.com/ironwallaby/delaunay\nimport { FeatureCollection, Point, Polygon } from \"geojson\";\nimport { featureCollection, polygon } from \"@turf/helpers\";\n\ninterface Pt {\n  x: number;\n  y: number;\n  z?: number;\n  __sentinel?: boolean;\n}\ninterface Vertice {\n  x: number;\n  y: number;\n}\n\n/**\n * Takes a set of {@link Point|points} and creates a\n * [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * If an optional z-value property is provided then it is added as properties called `a`, `b`,\n * and `c` representing its value at each of the points that represent the corners of the\n * triangle.\n *\n * @name tin\n * @param {FeatureCollection<Point>} points input points\n * @param {String} [z] name of the property from which to pull z values\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @returns {FeatureCollection<Polygon>} TIN output\n * @example\n * // generate some random point data\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z');\n *\n * //addToMap\n * var addToMap = [tin, points]\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   properties.fill = '#' + properties.a + properties.b + properties.c;\n * }\n */\nfunction tin(\n  points: FeatureCollection<Point, any>,\n  z?: string\n): FeatureCollection<Polygon> {\n  // break down points\n  let isPointZ = false;\n  return featureCollection(\n    triangulate(\n      points.features.map((p) => {\n        const point: Pt = {\n          x: p.geometry.coordinates[0],\n          y: p.geometry.coordinates[1],\n        };\n        if (z) {\n          point.z = p.properties[z];\n        } else if (p.geometry.coordinates.length === 3) {\n          isPointZ = true;\n          point.z = p.geometry.coordinates[2];\n        }\n        return point;\n      })\n    ).map((triangle: any) => {\n      const a = [triangle.a.x, triangle.a.y];\n      const b = [triangle.b.x, triangle.b.y];\n      const c = [triangle.c.x, triangle.c.y];\n      let properties = {};\n\n      // Add z coordinates to triangle points if user passed\n      // them in that way otherwise add it as a property.\n      if (isPointZ) {\n        a.push(triangle.a.z);\n        b.push(triangle.b.z);\n        c.push(triangle.c.z);\n      } else {\n        properties = {\n          a: triangle.a.z,\n          b: triangle.b.z,\n          c: triangle.c.z,\n        };\n      }\n\n      return polygon([[a, b, c, a]], properties);\n    })\n  );\n}\n\nclass Triangle {\n  public a: Pt;\n  public b: Pt;\n  public c: Pt;\n  public x: number;\n  public y: number;\n  public r: number;\n\n  constructor(a: Pt, b: Pt, c: Pt) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n\n    const A = b.x - a.x;\n    const B = b.y - a.y;\n    const C = c.x - a.x;\n    const D = c.y - a.y;\n    const E = A * (a.x + b.x) + B * (a.y + b.y);\n    const F = C * (a.x + c.x) + D * (a.y + c.y);\n    const G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n    let dx;\n    let dy;\n\n    // If the points of the triangle are collinear, then just find the\n    // extremes and use the midpoint as the center of the circumcircle.\n    this.x = (D * E - B * F) / G;\n    this.y = (A * F - C * E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n}\n\nfunction byX(a: Pt, b: Pt) {\n  return b.x - a.x;\n}\n\nfunction dedup(edges: number[]) {\n  let j = edges.length;\n  let a;\n  let b;\n  let i;\n  let m;\n  let n;\n\n  outer: while (j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n    while (i) {\n      n = edges[--i];\n      m = edges[--i];\n      if ((a === m && b === n) || (a === n && b === m)) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer;\n      }\n    }\n  }\n}\n\nfunction triangulate(vertices: Vertice[]) {\n  // Bail if there aren't enough vertices to form any triangles.\n  if (vertices.length < 3) {\n    return [];\n  }\n\n  // Ensure the vertex array is in order of descending X coordinate\n  // (which is needed to ensure a subquadratic runtime), and then find\n  // the bounding box around the points.\n  vertices.sort(byX);\n\n  let i = vertices.length - 1;\n  const xmin = vertices[i].x;\n  const xmax = vertices[0].x;\n  let ymin = vertices[i].y;\n  let ymax = ymin;\n  const epsilon = 1e-12;\n\n  let a;\n  let b;\n  let c;\n  let A;\n  let B;\n  let G;\n\n  while (i--) {\n    if (vertices[i].y < ymin) {\n      ymin = vertices[i].y;\n    }\n    if (vertices[i].y > ymax) {\n      ymax = vertices[i].y;\n    }\n  }\n\n  // Find a supertriangle, which is a triangle that surrounds all the\n  // vertices. This is used like something of a sentinel value to remove\n  // cases in the main algorithm, and is removed before we return any\n  // results.\n\n  // Once found, put it in the \"open\" list. (The \"open\" list is for\n  // triangles who may still need to be considered; the \"closed\" list is\n  // for triangles which do not.)\n  let dx = xmax - xmin;\n  let dy = ymax - ymin;\n  const dmax = dx > dy ? dx : dy;\n  const xmid = (xmax + xmin) * 0.5;\n  const ymid = (ymax + ymin) * 0.5;\n  const open = [\n    new Triangle(\n      {\n        __sentinel: true,\n        x: xmid - 20 * dmax,\n        y: ymid - dmax,\n      },\n      {\n        __sentinel: true,\n        x: xmid,\n        y: ymid + 20 * dmax,\n      },\n      {\n        __sentinel: true,\n        x: xmid + 20 * dmax,\n        y: ymid - dmax,\n      }\n    ),\n  ];\n  const closed = [];\n  const edges: any = [];\n  let j;\n\n  // Incrementally add each vertex to the mesh.\n  i = vertices.length;\n  while (i--) {\n    // For each open triangle, check to see if the current point is\n    // inside it's circumcircle. If it is, remove the triangle and add\n    // it's edges to an edge list.\n    edges.length = 0;\n    j = open.length;\n    while (j--) {\n      // If this point is to the right of this triangle's circumcircle,\n      // then this triangle should never get checked again. Remove it\n      // from the open list, add it to the closed list, and skip.\n      dx = vertices[i].x - open[j].x;\n      if (dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue;\n      }\n\n      // If not, skip this triangle.\n      dy = vertices[i].y - open[j].y;\n      if (dx * dx + dy * dy > open[j].r) {\n        continue;\n      }\n\n      // Remove the triangle and add it's edges to the edge list.\n      edges.push(\n        open[j].a,\n        open[j].b,\n        open[j].b,\n        open[j].c,\n        open[j].c,\n        open[j].a\n      );\n      open.splice(j, 1);\n    }\n\n    // Remove any doubled edges.\n    dedup(edges);\n\n    // Add a new triangle for each edge.\n    j = edges.length;\n    while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      c = vertices[i];\n      // Avoid adding colinear triangles (which have error-prone\n      // circumcircles)\n      A = b.x - a.x;\n      B = b.y - a.y;\n      G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n      if (Math.abs(G) > epsilon) {\n        open.push(new Triangle(a, b, c));\n      }\n    }\n  }\n\n  // Copy any remaining open triangles to the closed list, and then\n  // remove any triangles that share a vertex with the supertriangle.\n  Array.prototype.push.apply(closed, open);\n\n  i = closed.length;\n  while (i--) {\n    if (\n      closed[i].a.__sentinel ||\n      closed[i].b.__sentinel ||\n      closed[i].c.__sentinel\n    ) {\n      closed.splice(i, 1);\n    }\n  }\n\n  return closed;\n}\n\nexport { Pt, Vertice, tin };\nexport default tin;\n", "export default function(x) {\n  return x;\n}\n", "import identity from \"./identity.js\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n", "export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n", "import reverse from \"./reverse.js\";\nimport transform from \"./transform.js\";\n\nexport default function(topology, o) {\n  if (typeof o === \"string\") o = topology.objects[o];\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nfunction feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n", "export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n", "import {object} from \"./feature.js\";\nimport stitch from \"./stitch.js\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    }).filter(function(arcs) {\n      return arcs.length > 0;\n    })\n  };\n}\n", "export var hasOwnProperty = Object.prototype.hasOwnProperty;\n", "import {hasOwnProperty} from \"./object.js\";\n\n// Computes the bounding box of the specified hash of GeoJSON objects.\nexport default function(objects) {\n  var x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  function boundGeometry(geometry) {\n    if (geometry != null && hasOwnProperty.call(boundGeometryType, geometry.type)) boundGeometryType[geometry.type](geometry);\n  }\n\n  var boundGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(boundGeometry); },\n    Point: function(o) { boundPoint(o.coordinates); },\n    MultiPoint: function(o) { o.coordinates.forEach(boundPoint); },\n    LineString: function(o) { boundLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs.forEach(boundLine); },\n    Polygon: function(o) { o.arcs.forEach(boundLine); },\n    MultiPolygon: function(o) { o.arcs.forEach(boundMultiLine); }\n  };\n\n  function boundPoint(coordinates) {\n    var x = coordinates[0],\n        y = coordinates[1];\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  function boundLine(coordinates) {\n    coordinates.forEach(boundPoint);\n  }\n\n  function boundMultiLine(coordinates) {\n    coordinates.forEach(boundLine);\n  }\n\n  for (var key in objects) {\n    boundGeometry(objects[key]);\n  }\n\n  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;\n}\n", "export default function(size, hash, equal, type, empty) {\n  if (arguments.length === 3) {\n    type = Array;\n    empty = null;\n  }\n\n  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    store[i] = empty;\n  }\n\n  function add(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) throw new Error(\"full hashset\");\n      match = store[index = (index + 1) & mask];\n    }\n    store[index] = value;\n    return true;\n  }\n\n  function has(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) break;\n      match = store[index = (index + 1) & mask];\n    }\n    return false;\n  }\n\n  function values() {\n    var values = [];\n    for (var i = 0, n = store.length; i < n; ++i) {\n      var match = store[i];\n      if (match != empty) values.push(match);\n    }\n    return values;\n  }\n\n  return {\n    add: add,\n    has: has,\n    values: values\n  };\n}\n", "export default function(size, hash, equal, keyType, keyEmpty, valueType) {\n  if (arguments.length === 3) {\n    keyType = valueType = Array;\n    keyEmpty = null;\n  }\n\n  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      valstore = new valueType(size),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    keystore[i] = keyEmpty;\n  }\n\n  function set(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index] = value;\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function maybeSet(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function get(key, missingValue) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) break;\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    return missingValue;\n  }\n\n  function keys() {\n    var keys = [];\n    for (var i = 0, n = keystore.length; i < n; ++i) {\n      var matchKey = keystore[i];\n      if (matchKey != keyEmpty) keys.push(matchKey);\n    }\n    return keys;\n  }\n\n  return {\n    set: set,\n    maybeSet: maybeSet, // set if unset\n    get: get,\n    keys: keys\n  };\n}\n", "export default function(pointA, pointB) {\n  return pointA[0] === pointB[0] && pointA[1] === pointB[1];\n}\n", "// TODO if quantized, use simpler Int32 hashing?\n\nvar buffer = new ArrayBuffer(16),\n    floats = new Float64Array(buffer),\n    uints = new Uint32Array(buffer);\n\nexport default function(point) {\n  floats[0] = point[0];\n  floats[1] = point[1];\n  var hash = uints[0] ^ uints[1];\n  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];\n  return hash & 0x7fffffff;\n}\n", "import hashset from \"./hash/hashset.js\";\nimport hashmap from \"./hash/hashmap.js\";\nimport equalPoint from \"./hash/point-equal.js\";\nimport hashPoint from \"./hash/point-hash.js\";\n\n// Given an extracted (pre-)topology, identifies all of the junctions. These are\n// the points at which arcs (lines or rings) will need to be cut so that each\n// arc is represented uniquely.\n//\n// A junction is a point where at least one arc deviates from another arc going\n// through the same point. For example, consider the point B. If there is a arc\n// through ABC and another arc through CBA, then B is not a junction because in\n// both cases the adjacent point pairs are {A,C}. However, if there is an\n// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.\n//\n// For a closed ring ABCA, the first point A’s adjacent points are the second\n// and last point {B,C}. For a line, the first and last point are always\n// considered junctions, even if the line is closed; this ensures that a closed\n// line is never rotated.\nexport default function(topology) {\n  var coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      indexes = index(),\n      visitedByIndex = new Int32Array(coordinates.length),\n      leftByIndex = new Int32Array(coordinates.length),\n      rightByIndex = new Int32Array(coordinates.length),\n      junctionByIndex = new Int8Array(coordinates.length),\n      junctionCount = 0, // upper bound on number of junctions\n      i, n,\n      previousIndex,\n      currentIndex,\n      nextIndex;\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;\n  }\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineStart = line[0],\n        lineEnd = line[1];\n    currentIndex = indexes[lineStart];\n    nextIndex = indexes[++lineStart];\n    ++junctionCount, junctionByIndex[currentIndex] = 1; // start\n    while (++lineStart <= lineEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);\n    }\n    ++junctionCount, junctionByIndex[nextIndex] = 1; // end\n  }\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = -1;\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0] + 1,\n        ringEnd = ring[1];\n    previousIndex = indexes[ringEnd - 1];\n    currentIndex = indexes[ringStart - 1];\n    nextIndex = indexes[ringStart];\n    sequence(i, previousIndex, currentIndex, nextIndex);\n    while (++ringStart <= ringEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);\n    }\n  }\n\n  function sequence(i, previousIndex, currentIndex, nextIndex) {\n    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection\n    visitedByIndex[currentIndex] = i;\n    var leftIndex = leftByIndex[currentIndex];\n    if (leftIndex >= 0) {\n      var rightIndex = rightByIndex[currentIndex];\n      if ((leftIndex !== previousIndex || rightIndex !== nextIndex)\n        && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {\n        ++junctionCount, junctionByIndex[currentIndex] = 1;\n      }\n    } else {\n      leftByIndex[currentIndex] = previousIndex;\n      rightByIndex[currentIndex] = nextIndex;\n    }\n  }\n\n  function index() {\n    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),\n        indexes = new Int32Array(coordinates.length);\n\n    for (var i = 0, n = coordinates.length; i < n; ++i) {\n      indexes[i] = indexByPoint.maybeSet(i, i);\n    }\n\n    return indexes;\n  }\n\n  function hashIndex(i) {\n    return hashPoint(coordinates[i]);\n  }\n\n  function equalIndex(i, j) {\n    return equalPoint(coordinates[i], coordinates[j]);\n  }\n\n  visitedByIndex = leftByIndex = rightByIndex = null;\n\n  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint), j;\n\n  // Convert back to a standard hashset by point for caller convenience.\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    if (junctionByIndex[j = indexes[i]]) {\n      junctionByPoint.add(coordinates[j]);\n    }\n  }\n\n  return junctionByPoint;\n}\n", "import join from \"./join.js\";\n\n// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared\n// point sequences are identified. The topology can then be subsequently deduped\n// to remove exact duplicate arcs.\nexport default function(topology) {\n  var junctions = join(topology),\n      coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      next,\n      i, n;\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineMid = line[0],\n        lineEnd = line[1];\n    while (++lineMid < lineEnd) {\n      if (junctions.has(coordinates[lineMid])) {\n        next = {0: lineMid, 1: line[1]};\n        line[1] = lineMid;\n        line = line.next = next;\n      }\n    }\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0],\n        ringMid = ringStart,\n        ringEnd = ring[1],\n        ringFixed = junctions.has(coordinates[ringStart]);\n    while (++ringMid < ringEnd) {\n      if (junctions.has(coordinates[ringMid])) {\n        if (ringFixed) {\n          next = {0: ringMid, 1: ring[1]};\n          ring[1] = ringMid;\n          ring = ring.next = next;\n        } else { // For the first junction, we can rotate rather than cut.\n          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);\n          coordinates[ringEnd] = coordinates[ringStart];\n          ringFixed = true;\n          ringMid = ringStart; // restart; we may have skipped junctions\n        }\n      }\n    }\n  }\n\n  return topology;\n}\n\nfunction rotateArray(array, start, end, offset) {\n  reverse(array, start, end);\n  reverse(array, start, start + offset);\n  reverse(array, start + offset, end);\n}\n\nfunction reverse(array, start, end) {\n  for (var mid = start + ((end-- - start) >> 1), t; start < mid; ++start, --end) {\n    t = array[start], array[start] = array[end], array[end] = t;\n  }\n}\n", "import hashmap from \"./hash/hashmap.js\";\nimport equalPoint from \"./hash/point-equal.js\";\nimport hashPoint from \"./hash/point-hash.js\";\n\n// Given a cut topology, combines duplicate arcs.\nexport default function(topology) {\n  var coordinates = topology.coordinates,\n      lines = topology.lines, line,\n      rings = topology.rings, ring,\n      arcCount = lines.length + rings.length,\n      i, n;\n\n  delete topology.lines;\n  delete topology.rings;\n\n  // Count the number of (non-unique) arcs to initialize the hashmap safely.\n  for (i = 0, n = lines.length; i < n; ++i) {\n    line = lines[i]; while (line = line.next) ++arcCount;\n  }\n  for (i = 0, n = rings.length; i < n; ++i) {\n    ring = rings[i]; while (ring = ring.next) ++arcCount;\n  }\n\n  var arcsByEnd = hashmap(arcCount * 2 * 1.4, hashPoint, equalPoint),\n      arcs = topology.arcs = [];\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    line = lines[i];\n    do {\n      dedupLine(line);\n    } while (line = line.next);\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    ring = rings[i];\n    if (ring.next) { // arc is no longer closed\n      do {\n        dedupLine(ring);\n      } while (ring = ring.next);\n    } else {\n      dedupRing(ring);\n    }\n  }\n\n  function dedupLine(arc) {\n    var startPoint,\n        endPoint,\n        startArcs, startArc,\n        endArcs, endArc,\n        i, n;\n\n    // Does this arc match an existing arc in order?\n    if (startArcs = arcsByEnd.get(startPoint = coordinates[arc[0]])) {\n      for (i = 0, n = startArcs.length; i < n; ++i) {\n        startArc = startArcs[i];\n        if (equalLine(startArc, arc)) {\n          arc[0] = startArc[0];\n          arc[1] = startArc[1];\n          return;\n        }\n      }\n    }\n\n    // Does this arc match an existing arc in reverse order?\n    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[1]])) {\n      for (i = 0, n = endArcs.length; i < n; ++i) {\n        endArc = endArcs[i];\n        if (reverseEqualLine(endArc, arc)) {\n          arc[1] = endArc[0];\n          arc[0] = endArc[1];\n          return;\n        }\n      }\n    }\n\n    if (startArcs) startArcs.push(arc); else arcsByEnd.set(startPoint, [arc]);\n    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);\n    arcs.push(arc);\n  }\n\n  function dedupRing(arc) {\n    var endPoint,\n        endArcs,\n        endArc,\n        i, n;\n\n    // Does this arc match an existing line in order, or reverse order?\n    // Rings are closed, so their start point and end point is the same.\n    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0]])) {\n      for (i = 0, n = endArcs.length; i < n; ++i) {\n        endArc = endArcs[i];\n        if (equalRing(endArc, arc)) {\n          arc[0] = endArc[0];\n          arc[1] = endArc[1];\n          return;\n        }\n        if (reverseEqualRing(endArc, arc)) {\n          arc[0] = endArc[1];\n          arc[1] = endArc[0];\n          return;\n        }\n      }\n    }\n\n    // Otherwise, does this arc match an existing ring in order, or reverse order?\n    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0] + findMinimumOffset(arc)])) {\n      for (i = 0, n = endArcs.length; i < n; ++i) {\n        endArc = endArcs[i];\n        if (equalRing(endArc, arc)) {\n          arc[0] = endArc[0];\n          arc[1] = endArc[1];\n          return;\n        }\n        if (reverseEqualRing(endArc, arc)) {\n          arc[0] = endArc[1];\n          arc[1] = endArc[0];\n          return;\n        }\n      }\n    }\n\n    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);\n    arcs.push(arc);\n  }\n\n  function equalLine(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1];\n    if (ia - ja !== ib - jb) return false;\n    for (; ia <= ja; ++ia, ++ib) if (!equalPoint(coordinates[ia], coordinates[ib])) return false;\n    return true;\n  }\n\n  function reverseEqualLine(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1];\n    if (ia - ja !== ib - jb) return false;\n    for (; ia <= ja; ++ia, --jb) if (!equalPoint(coordinates[ia], coordinates[jb])) return false;\n    return true;\n  }\n\n  function equalRing(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1],\n        n = ja - ia;\n    if (n !== jb - ib) return false;\n    var ka = findMinimumOffset(arcA),\n        kb = findMinimumOffset(arcB);\n    for (var i = 0; i < n; ++i) {\n      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[ib + (i + kb) % n])) return false;\n    }\n    return true;\n  }\n\n  function reverseEqualRing(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1],\n        n = ja - ia;\n    if (n !== jb - ib) return false;\n    var ka = findMinimumOffset(arcA),\n        kb = n - findMinimumOffset(arcB);\n    for (var i = 0; i < n; ++i) {\n      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[jb - (i + kb) % n])) return false;\n    }\n    return true;\n  }\n\n  // Rings are rotated to a consistent, but arbitrary, start point.\n  // This is necessary to detect when a ring and a rotated copy are dupes.\n  function findMinimumOffset(arc) {\n    var start = arc[0],\n        end = arc[1],\n        mid = start,\n        minimum = mid,\n        minimumPoint = coordinates[mid];\n    while (++mid < end) {\n      var point = coordinates[mid];\n      if (point[0] < minimumPoint[0] || point[0] === minimumPoint[0] && point[1] < minimumPoint[1]) {\n        minimum = mid;\n        minimumPoint = point;\n      }\n    }\n    return minimum - start;\n  }\n\n  return topology;\n}\n", "// Given an array of arcs in absolute (but already quantized!) coordinates,\n// converts to fixed-point delta encoding.\n// This is a destructive operation that modifies the given arcs!\nexport default function(arcs) {\n  var i = -1,\n      n = arcs.length;\n\n  while (++i < n) {\n    var arc = arcs[i],\n        j = 0,\n        k = 1,\n        m = arc.length,\n        point = arc[0],\n        x0 = point[0],\n        y0 = point[1],\n        x1,\n        y1;\n\n    while (++j < m) {\n      point = arc[j], x1 = point[0], y1 = point[1];\n      if (x1 !== x0 || y1 !== y0) arc[k++] = [x1 - x0, y1 - y0], x0 = x1, y0 = y1;\n    }\n\n    if (k === 1) arc[k++] = [0, 0]; // Each arc must be an array of two or more positions.\n\n    arc.length = k;\n  }\n\n  return arcs;\n}\n", "import {hasOwnProperty} from \"./object.js\";\n\n// Extracts the lines and rings from the specified hash of geometry objects.\n//\n// Returns an object with three properties:\n//\n// * coordinates - shared buffer of [x, y] coordinates\n// * lines - lines extracted from the hash, of the form [start, end]\n// * rings - rings extracted from the hash, of the form [start, end]\n//\n// For each ring or line, start and end represent inclusive indexes into the\n// coordinates buffer. For rings (and closed lines), coordinates[start] equals\n// coordinates[end].\n//\n// For each line or polygon geometry in the input hash, including nested\n// geometries as in geometry collections, the `coordinates` array is replaced\n// with an equivalent `arcs` array that, for each line (for line string\n// geometries) or ring (for polygon geometries), points to one of the above\n// lines or rings.\nexport default function(objects) {\n  var index = -1,\n      lines = [],\n      rings = [],\n      coordinates = [];\n\n  function extractGeometry(geometry) {\n    if (geometry && hasOwnProperty.call(extractGeometryType, geometry.type)) extractGeometryType[geometry.type](geometry);\n  }\n\n  var extractGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(extractGeometry); },\n    LineString: function(o) { o.arcs = extractLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs = o.arcs.map(extractLine); },\n    Polygon: function(o) { o.arcs = o.arcs.map(extractRing); },\n    MultiPolygon: function(o) { o.arcs = o.arcs.map(extractMultiRing); }\n  };\n\n  function extractLine(line) {\n    for (var i = 0, n = line.length; i < n; ++i) coordinates[++index] = line[i];\n    var arc = {0: index - n + 1, 1: index};\n    lines.push(arc);\n    return arc;\n  }\n\n  function extractRing(ring) {\n    for (var i = 0, n = ring.length; i < n; ++i) coordinates[++index] = ring[i];\n    var arc = {0: index - n + 1, 1: index};\n    rings.push(arc);\n    return arc;\n  }\n\n  function extractMultiRing(rings) {\n    return rings.map(extractRing);\n  }\n\n  for (var key in objects) {\n    extractGeometry(objects[key]);\n  }\n\n  return {\n    type: \"Topology\",\n    coordinates: coordinates,\n    lines: lines,\n    rings: rings,\n    objects: objects\n  };\n}\n", "// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.\n// Any null input geometry objects are represented as {type: null} in the output.\n// Any feature.{id,properties,bbox} are transferred to the output geometry object.\n// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!\nexport default function(inputs) {\n  var outputs = {}, key;\n  for (key in inputs) outputs[key] = geomifyObject(inputs[key]);\n  return outputs;\n}\n\nfunction geomifyObject(input) {\n  return input == null ? {type: null}\n      : (input.type === \"FeatureCollection\" ? geomifyFeatureCollection\n      : input.type === \"Feature\" ? geomifyFeature\n      : geomifyGeometry)(input);\n}\n\nfunction geomifyFeatureCollection(input) {\n  var output = {type: \"GeometryCollection\", geometries: input.features.map(geomifyFeature)};\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nfunction geomifyFeature(input) {\n  var output = geomifyGeometry(input.geometry), key; // eslint-disable-line no-unused-vars\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  for (key in input.properties) { output.properties = input.properties; break; }\n  return output;\n}\n\nfunction geomifyGeometry(input) {\n  if (input == null) return {type: null};\n  var output = input.type === \"GeometryCollection\" ? {type: \"GeometryCollection\", geometries: input.geometries.map(geomifyGeometry)}\n      : input.type === \"Point\" || input.type === \"MultiPoint\" ? {type: input.type, coordinates: input.coordinates}\n      : {type: input.type, arcs: input.coordinates}; // TODO Check for unknown types?\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n", "import {hasOwnProperty} from \"./object.js\";\n\nexport default function(objects, bbox, n) {\n  var x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3],\n      kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,\n      ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;\n\n  function quantizePoint(input) {\n    return [Math.round((input[0] - x0) * kx), Math.round((input[1] - y0) * ky)];\n  }\n\n  function quantizePoints(input, m) {\n    var i = -1,\n        j = 0,\n        n = input.length,\n        output = new Array(n), // pessimistic\n        pi,\n        px,\n        py,\n        x,\n        y;\n\n    while (++i < n) {\n      pi = input[i];\n      x = Math.round((pi[0] - x0) * kx);\n      y = Math.round((pi[1] - y0) * ky);\n      if (x !== px || y !== py) output[j++] = [px = x, py = y]; // non-coincident points\n    }\n\n    output.length = j;\n    while (j < m) j = output.push([output[0][0], output[0][1]]);\n    return output;\n  }\n\n  function quantizeLine(input) {\n    return quantizePoints(input, 2);\n  }\n\n  function quantizeRing(input) {\n    return quantizePoints(input, 4);\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizeRing);\n  }\n\n  function quantizeGeometry(o) {\n    if (o != null && hasOwnProperty.call(quantizeGeometryType, o.type)) quantizeGeometryType[o.type](o);\n  }\n\n  var quantizeGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(quantizeGeometry); },\n    Point: function(o) { o.coordinates = quantizePoint(o.coordinates); },\n    MultiPoint: function(o) { o.coordinates = o.coordinates.map(quantizePoint); },\n    LineString: function(o) { o.arcs = quantizeLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs = o.arcs.map(quantizeLine); },\n    Polygon: function(o) { o.arcs = quantizePolygon(o.arcs); },\n    MultiPolygon: function(o) { o.arcs = o.arcs.map(quantizePolygon); }\n  };\n\n  for (var key in objects) {\n    quantizeGeometry(objects[key]);\n  }\n\n  return {\n    scale: [1 / kx, 1 / ky],\n    translate: [x0, y0]\n  };\n}\n", "import bounds from \"./bounds.js\";\nimport cut from \"./cut.js\";\nimport dedup from \"./dedup.js\";\nimport delta from \"./delta.js\";\nimport extract from \"./extract.js\";\nimport geometry from \"./geometry.js\";\nimport hashmap from \"./hash/hashmap.js\";\nimport {hasOwnProperty} from \"./object.js\";\nimport prequantize from \"./prequantize.js\";\n\n// Constructs the TopoJSON Topology for the specified hash of features.\n// Each object in the specified hash must be a GeoJSON object,\n// meaning FeatureCollection, a Feature or a geometry object.\nexport default function(objects, quantization) {\n  var bbox = bounds(objects = geometry(objects)),\n      transform = quantization > 0 && bbox && prequantize(objects, bbox, quantization),\n      topology = dedup(cut(extract(objects))),\n      coordinates = topology.coordinates,\n      indexByArc = hashmap(topology.arcs.length * 1.4, hashArc, equalArc);\n\n  objects = topology.objects; // for garbage collection\n  topology.bbox = bbox;\n  topology.arcs = topology.arcs.map(function(arc, i) {\n    indexByArc.set(arc, i);\n    return coordinates.slice(arc[0], arc[1] + 1);\n  });\n\n  delete topology.coordinates;\n  coordinates = null;\n\n  function indexGeometry(geometry) {\n    if (geometry && hasOwnProperty.call(indexGeometryType, geometry.type)) indexGeometryType[geometry.type](geometry);\n  }\n\n  var indexGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(indexGeometry); },\n    LineString: function(o) { o.arcs = indexArcs(o.arcs); },\n    MultiLineString: function(o) { o.arcs = o.arcs.map(indexArcs); },\n    Polygon: function(o) { o.arcs = o.arcs.map(indexArcs); },\n    MultiPolygon: function(o) { o.arcs = o.arcs.map(indexMultiArcs); }\n  };\n\n  function indexArcs(arc) {\n    var indexes = [];\n    do {\n      var index = indexByArc.get(arc);\n      indexes.push(arc[0] < arc[1] ? index : ~index);\n    } while (arc = arc.next);\n    return indexes;\n  }\n\n  function indexMultiArcs(arcs) {\n    return arcs.map(indexArcs);\n  }\n\n  for (var key in objects) {\n    indexGeometry(objects[key]);\n  }\n\n  if (transform) {\n    topology.transform = transform;\n    topology.arcs = delta(topology.arcs);\n  }\n\n  return topology;\n}\n\nfunction hashArc(arc) {\n  var i = arc[0], j = arc[1], t;\n  if (j < i) t = i, i = j, j = t;\n  return i + 31 * j;\n}\n\nfunction equalArc(arcA, arcB) {\n  var ia = arcA[0], ja = arcA[1],\n      ib = arcB[0], jb = arcB[1], t;\n  if (ja < ia) t = ia, ia = ja, ja = t;\n  if (jb < ib) t = ib, ib = jb, jb = t;\n  return ia === ib && ja === jb;\n}\n", "import { distance } from \"@turf/distance\";\nimport { feature, featureCollection } from \"@turf/helpers\";\nimport {\n  Feature,\n  FeatureCollection,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { Units } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nimport { tin } from \"@turf/tin\";\nimport { dissolve } from \"./lib/turf-dissolve.js\";\n\n/**\n * Takes a set of {@link Point|points} and returns a concave hull Polygon or MultiPolygon.\n * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.\n *\n * @name concave\n * @param {FeatureCollection<Point>} points input points\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.maxEdge=Infinity] the length (in 'units') of an edge necessary for part of the\n * hull to become concave.\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<(Polygon|MultiPolygon)>|null} a concave hull (null value is returned if unable to compute hull)\n * @example\n * var points = turf.featureCollection([\n *   turf.point([-63.601226, 44.642643]),\n *   turf.point([-63.591442, 44.651436]),\n *   turf.point([-63.580799, 44.648749]),\n *   turf.point([-63.573589, 44.641788]),\n *   turf.point([-63.587665, 44.64533]),\n *   turf.point([-63.595218, 44.64765])\n * ]);\n * var options = {units: 'miles', maxEdge: 1};\n *\n * var hull = turf.concave(points, options);\n *\n * //addToMap\n * var addToMap = [points, hull]\n */\nfunction concave(\n  points: FeatureCollection<Point>,\n  options: { maxEdge?: number; units?: Units } = {}\n): Feature<Polygon | MultiPolygon> | null {\n  const maxEdge = options.maxEdge || Infinity;\n\n  const cleaned = removeDuplicates(points);\n\n  const tinPolys = tin(cleaned);\n  // calculate length of all edges and area of all triangles\n  // and remove triangles that fail the max length test\n  tinPolys.features = tinPolys.features.filter((triangle) => {\n    const pt1 = triangle.geometry.coordinates[0][0];\n    const pt2 = triangle.geometry.coordinates[0][1];\n    const pt3 = triangle.geometry.coordinates[0][2];\n    const dist1 = distance(pt1, pt2, options);\n    const dist2 = distance(pt2, pt3, options);\n    const dist3 = distance(pt1, pt3, options);\n    return dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge;\n  });\n\n  if (tinPolys.features.length < 1) {\n    return null;\n  }\n\n  // merge the adjacent triangles\n  const dissolved: any = dissolve(tinPolys);\n\n  // geojson-dissolve always returns a MultiPolygon\n  if (dissolved.coordinates.length === 1) {\n    dissolved.coordinates = dissolved.coordinates[0];\n    dissolved.type = \"Polygon\";\n  }\n  return feature(dissolved);\n}\n\n/**\n * Removes duplicated points in a collection returning a new collection\n *\n * @private\n * @param {FeatureCollection<Point>} points to be cleaned\n * @returns {FeatureCollection<Point>} cleaned set of points\n */\nfunction removeDuplicates(\n  points: FeatureCollection<Point>\n): FeatureCollection<Point> {\n  const cleaned: Array<Feature<Point>> = [];\n  const existing: { [key: string]: boolean } = {};\n\n  featureEach(points, (pt) => {\n    if (!pt.geometry) {\n      return;\n    }\n    const key = pt.geometry.coordinates.join(\"-\");\n    if (!Object.prototype.hasOwnProperty.call(existing, key)) {\n      cleaned.push(pt);\n      existing[key] = true;\n    }\n  });\n  return featureCollection(cleaned);\n}\n\nexport { concave };\nexport default concave;\n", "import {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Polygon,\n} from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { isObject } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport { lineDissolve } from \"./turf-line-dissolve.js\";\nimport { polygonDissolve } from \"./turf-polygon-dissolve.js\";\n\n/**\n * Transform function: attempts to dissolve geojson objects where possible\n * [GeoJSON] -> GeoJSON geometry\n *\n * @private\n * @param {FeatureCollection<LineString|MultiLineString|Polygon|MultiPolygon>} geojson Features to dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<MultiLineString|MultiPolygon>} Dissolved Features\n */\nfunction dissolve(\n  geojson: FeatureCollection<\n    LineString | MultiLineString | Polygon | MultiPolygon\n  >,\n  options: {\n    mutate?: boolean;\n  } = {}\n): Feature<LineString | MultiLineString | Polygon | MultiPolygon> | null {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n  const mutate = options.mutate;\n\n  // Validation\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  }\n\n  // Clone geojson to avoid side effects\n  // Topojson modifies in place, so we need to deep clone first\n  if (mutate === false || mutate === undefined) {\n    geojson = clone(geojson);\n  }\n\n  // Assert homogenity\n  const type = getHomogenousType(geojson);\n  if (!type) {\n    throw new Error(\"geojson must be homogenous\");\n  }\n\n  // Data => Typescript hack\n  const data: any = geojson;\n\n  switch (type) {\n    case \"LineString\":\n      return lineDissolve(data, options);\n    case \"Polygon\":\n      return polygonDissolve(data, options);\n    default:\n      throw new Error(type + \" is not supported\");\n  }\n}\n\n/**\n * Checks if GeoJSON is Homogenous\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON\n * @returns {string|null} Homogenous type or null if multiple types\n */\nfunction getHomogenousType(geojson: any) {\n  const types: { [key: string]: boolean } = {};\n  flattenEach(geojson, (feature) => {\n    types[feature.geometry.type] = true;\n  });\n  const keys = Object.keys(types);\n  if (keys.length === 1) {\n    return keys[0];\n  }\n  return null;\n}\n\nexport { dissolve };\nexport default dissolve;\n", "import {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n} from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { isObject, lineString, multiLineString } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { lineReduce } from \"@turf/meta\";\n\n/**\n * Merges all connected (non-forking, non-junctioning) line strings into single lineStrings.\n * [LineString] -> LineString|MultiLineString\n *\n * @param {FeatureCollection<LineString|MultiLineString>} geojson Lines to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<LineString|MultiLineString>} Dissolved lines\n */\nfunction lineDissolve(\n  geojson: FeatureCollection<LineString | MultiLineString>,\n  options: { mutate?: boolean } = {}\n): Feature<LineString | MultiLineString> | null {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n  const mutate = options.mutate;\n\n  // Validation\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  }\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) {\n    geojson = clone(geojson);\n  }\n\n  const result: any[] = [];\n  const lastLine = lineReduce(\n    geojson,\n    (previousLine: any, currentLine: any) => {\n      // Attempt to merge this LineString with the other LineStrings, updating\n      // the reference as it is merged with others and grows.\n      const merged = mergeLineStrings(previousLine, currentLine);\n\n      // Accumulate the merged LineString\n      if (merged) {\n        return merged;\n        // Put the unmerged LineString back into the list\n      } else {\n        result.push(previousLine);\n        return currentLine;\n      }\n    }\n  );\n  // Append the last line\n  if (lastLine) {\n    result.push(lastLine);\n  }\n\n  // Return null if no lines were dissolved\n  if (!result.length) {\n    return null;\n    // Return LineString if only 1 line was dissolved\n  } else if (result.length === 1) {\n    return result[0];\n    // Return MultiLineString if multiple lines were dissolved with gaps\n  } else {\n    return multiLineString(\n      result.map((line) => {\n        return line.coordinates;\n      })\n    );\n  }\n}\n\n// [Number, Number] -> String\nfunction coordId(coord: number[]) {\n  return coord[0].toString() + \",\" + coord[1].toString();\n}\n\n/**\n * LineString, LineString -> LineString\n *\n * @private\n * @param {Feature<LineString>} a line1\n * @param {Feature<LineString>} b line2\n * @returns {Feature<LineString>|null} Merged LineString\n */\nfunction mergeLineStrings(a: Feature<LineString>, b: Feature<LineString>) {\n  const coords1 = a.geometry.coordinates;\n  const coords2 = b.geometry.coordinates;\n\n  const s1 = coordId(coords1[0]);\n  const e1 = coordId(coords1[coords1.length - 1]);\n  const s2 = coordId(coords2[0]);\n  const e2 = coordId(coords2[coords2.length - 1]);\n\n  // TODO: handle case where more than one of these is true!\n  let coords;\n  if (s1 === e2) {\n    coords = coords2.concat(coords1.slice(1));\n  } else if (s2 === e1) {\n    coords = coords1.concat(coords2.slice(1));\n  } else if (s1 === s2) {\n    coords = coords1.slice(1).reverse().concat(coords2);\n  } else if (e1 === e2) {\n    coords = coords1.concat(coords2.reverse().slice(1));\n  } else {\n    return null;\n  }\n\n  return lineString(coords);\n}\n\nexport { lineDissolve };\nexport default lineDissolve;\n", "import { Feature, FeatureCollection, MultiPolygon, Polygon } from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { geometryCollection } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport { merge } from \"topojson-client\";\nimport { topology } from \"topojson-server\";\n\n/**\n * Dissolves all overlapping (Multi)Polygon\n *\n * @param {FeatureCollection<Polygon|MultiPolygon>} geojson Polygons to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<Polygon|MultiPolygon>} Dissolved Polygons\n */\nfunction polygonDissolve(\n  geojson: FeatureCollection<Polygon | MultiPolygon>,\n  options: { mutate?: boolean } = {}\n): Feature<Polygon | MultiPolygon> | null {\n  // Validation\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  }\n\n  // Clone geojson to avoid side effects\n  // Topojson modifies in place, so we need to deep clone first\n  if (options.mutate === false || options.mutate === undefined) {\n    geojson = clone(geojson);\n  }\n\n  const geoms: any[] = [];\n  flattenEach(geojson, (feature) => {\n    geoms.push(feature.geometry);\n  });\n  const topo: any = topology({ geoms: geometryCollection(geoms).geometry });\n  const merged: any = merge(topo, topo.objects.geoms.geometries);\n  return merged;\n}\n\nexport { polygonDissolve };\nexport default polygonDissolve;\n", "/**\n * splaytree v3.1.2\n * Fast Splay tree for Node and browser\n *\n * @author Alexander Milevski <info@w8r.name>\n * @license MIT\n * @preserve\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar Node = /** @class */ (function () {\r\n    function Node(key, data) {\r\n        this.next = null;\r\n        this.key = key;\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n    return Node;\r\n}());\n\n/* follows \"An implementation of top-down splaying\"\r\n * by D. Sleator <sleator@cs.cmu.edu> March 1992\r\n */\r\nfunction DEFAULT_COMPARE(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n/**\r\n * Simple top down splay, not requiring i to be in the tree t.\r\n */\r\nfunction splay(i, t, comparator) {\r\n    var N = new Node(null, null);\r\n    var l = N;\r\n    var r = N;\r\n    while (true) {\r\n        var cmp = comparator(i, t.key);\r\n        //if (i < t.key) {\r\n        if (cmp < 0) {\r\n            if (t.left === null)\r\n                break;\r\n            //if (i < t.left.key) {\r\n            if (comparator(i, t.left.key) < 0) {\r\n                var y = t.left; /* rotate right */\r\n                t.left = y.right;\r\n                y.right = t;\r\n                t = y;\r\n                if (t.left === null)\r\n                    break;\r\n            }\r\n            r.left = t; /* link right */\r\n            r = t;\r\n            t = t.left;\r\n            //} else if (i > t.key) {\r\n        }\r\n        else if (cmp > 0) {\r\n            if (t.right === null)\r\n                break;\r\n            //if (i > t.right.key) {\r\n            if (comparator(i, t.right.key) > 0) {\r\n                var y = t.right; /* rotate left */\r\n                t.right = y.left;\r\n                y.left = t;\r\n                t = y;\r\n                if (t.right === null)\r\n                    break;\r\n            }\r\n            l.right = t; /* link left */\r\n            l = t;\r\n            t = t.right;\r\n        }\r\n        else\r\n            break;\r\n    }\r\n    /* assemble */\r\n    l.right = t.left;\r\n    r.left = t.right;\r\n    t.left = N.right;\r\n    t.right = N.left;\r\n    return t;\r\n}\r\nfunction insert(i, data, t, comparator) {\r\n    var node = new Node(i, data);\r\n    if (t === null) {\r\n        node.left = node.right = null;\r\n        return node;\r\n    }\r\n    t = splay(i, t, comparator);\r\n    var cmp = comparator(i, t.key);\r\n    if (cmp < 0) {\r\n        node.left = t.left;\r\n        node.right = t;\r\n        t.left = null;\r\n    }\r\n    else if (cmp >= 0) {\r\n        node.right = t.right;\r\n        node.left = t;\r\n        t.right = null;\r\n    }\r\n    return node;\r\n}\r\nfunction split(key, v, comparator) {\r\n    var left = null;\r\n    var right = null;\r\n    if (v) {\r\n        v = splay(key, v, comparator);\r\n        var cmp = comparator(v.key, key);\r\n        if (cmp === 0) {\r\n            left = v.left;\r\n            right = v.right;\r\n        }\r\n        else if (cmp < 0) {\r\n            right = v.right;\r\n            v.right = null;\r\n            left = v;\r\n        }\r\n        else {\r\n            left = v.left;\r\n            v.left = null;\r\n            right = v;\r\n        }\r\n    }\r\n    return { left: left, right: right };\r\n}\r\nfunction merge(left, right, comparator) {\r\n    if (right === null)\r\n        return left;\r\n    if (left === null)\r\n        return right;\r\n    right = splay(left.key, right, comparator);\r\n    right.left = left;\r\n    return right;\r\n}\r\n/**\r\n * Prints level of the tree\r\n */\r\nfunction printRow(root, prefix, isTail, out, printNode) {\r\n    if (root) {\r\n        out(\"\" + prefix + (isTail ? '└── ' : '├── ') + printNode(root) + \"\\n\");\r\n        var indent = prefix + (isTail ? '    ' : '│   ');\r\n        if (root.left)\r\n            printRow(root.left, indent, false, out, printNode);\r\n        if (root.right)\r\n            printRow(root.right, indent, true, out, printNode);\r\n    }\r\n}\r\nvar Tree = /** @class */ (function () {\r\n    function Tree(comparator) {\r\n        if (comparator === void 0) { comparator = DEFAULT_COMPARE; }\r\n        this._root = null;\r\n        this._size = 0;\r\n        this._comparator = comparator;\r\n    }\r\n    /**\r\n     * Inserts a key, allows duplicates\r\n     */\r\n    Tree.prototype.insert = function (key, data) {\r\n        this._size++;\r\n        return this._root = insert(key, data, this._root, this._comparator);\r\n    };\r\n    /**\r\n     * Adds a key, if it is not present in the tree\r\n     */\r\n    Tree.prototype.add = function (key, data) {\r\n        var node = new Node(key, data);\r\n        if (this._root === null) {\r\n            node.left = node.right = null;\r\n            this._size++;\r\n            this._root = node;\r\n        }\r\n        var comparator = this._comparator;\r\n        var t = splay(key, this._root, comparator);\r\n        var cmp = comparator(key, t.key);\r\n        if (cmp === 0)\r\n            this._root = t;\r\n        else {\r\n            if (cmp < 0) {\r\n                node.left = t.left;\r\n                node.right = t;\r\n                t.left = null;\r\n            }\r\n            else if (cmp > 0) {\r\n                node.right = t.right;\r\n                node.left = t;\r\n                t.right = null;\r\n            }\r\n            this._size++;\r\n            this._root = node;\r\n        }\r\n        return this._root;\r\n    };\r\n    /**\r\n     * @param  {Key} key\r\n     * @return {Node|null}\r\n     */\r\n    Tree.prototype.remove = function (key) {\r\n        this._root = this._remove(key, this._root, this._comparator);\r\n    };\r\n    /**\r\n     * Deletes i from the tree if it's there\r\n     */\r\n    Tree.prototype._remove = function (i, t, comparator) {\r\n        var x;\r\n        if (t === null)\r\n            return null;\r\n        t = splay(i, t, comparator);\r\n        var cmp = comparator(i, t.key);\r\n        if (cmp === 0) { /* found it */\r\n            if (t.left === null) {\r\n                x = t.right;\r\n            }\r\n            else {\r\n                x = splay(i, t.left, comparator);\r\n                x.right = t.right;\r\n            }\r\n            this._size--;\r\n            return x;\r\n        }\r\n        return t; /* It wasn't there */\r\n    };\r\n    /**\r\n     * Removes and returns the node with smallest key\r\n     */\r\n    Tree.prototype.pop = function () {\r\n        var node = this._root;\r\n        if (node) {\r\n            while (node.left)\r\n                node = node.left;\r\n            this._root = splay(node.key, this._root, this._comparator);\r\n            this._root = this._remove(node.key, this._root, this._comparator);\r\n            return { key: node.key, data: node.data };\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Find without splaying\r\n     */\r\n    Tree.prototype.findStatic = function (key) {\r\n        var current = this._root;\r\n        var compare = this._comparator;\r\n        while (current) {\r\n            var cmp = compare(key, current.key);\r\n            if (cmp === 0)\r\n                return current;\r\n            else if (cmp < 0)\r\n                current = current.left;\r\n            else\r\n                current = current.right;\r\n        }\r\n        return null;\r\n    };\r\n    Tree.prototype.find = function (key) {\r\n        if (this._root) {\r\n            this._root = splay(key, this._root, this._comparator);\r\n            if (this._comparator(key, this._root.key) !== 0)\r\n                return null;\r\n        }\r\n        return this._root;\r\n    };\r\n    Tree.prototype.contains = function (key) {\r\n        var current = this._root;\r\n        var compare = this._comparator;\r\n        while (current) {\r\n            var cmp = compare(key, current.key);\r\n            if (cmp === 0)\r\n                return true;\r\n            else if (cmp < 0)\r\n                current = current.left;\r\n            else\r\n                current = current.right;\r\n        }\r\n        return false;\r\n    };\r\n    Tree.prototype.forEach = function (visitor, ctx) {\r\n        var current = this._root;\r\n        var Q = []; /* Initialize stack s */\r\n        var done = false;\r\n        while (!done) {\r\n            if (current !== null) {\r\n                Q.push(current);\r\n                current = current.left;\r\n            }\r\n            else {\r\n                if (Q.length !== 0) {\r\n                    current = Q.pop();\r\n                    visitor.call(ctx, current);\r\n                    current = current.right;\r\n                }\r\n                else\r\n                    done = true;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Walk key range from `low` to `high`. Stops if `fn` returns a value.\r\n     */\r\n    Tree.prototype.range = function (low, high, fn, ctx) {\r\n        var Q = [];\r\n        var compare = this._comparator;\r\n        var node = this._root;\r\n        var cmp;\r\n        while (Q.length !== 0 || node) {\r\n            if (node) {\r\n                Q.push(node);\r\n                node = node.left;\r\n            }\r\n            else {\r\n                node = Q.pop();\r\n                cmp = compare(node.key, high);\r\n                if (cmp > 0) {\r\n                    break;\r\n                }\r\n                else if (compare(node.key, low) >= 0) {\r\n                    if (fn.call(ctx, node))\r\n                        return this; // stop if smth is returned\r\n                }\r\n                node = node.right;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns array of keys\r\n     */\r\n    Tree.prototype.keys = function () {\r\n        var keys = [];\r\n        this.forEach(function (_a) {\r\n            var key = _a.key;\r\n            return keys.push(key);\r\n        });\r\n        return keys;\r\n    };\r\n    /**\r\n     * Returns array of all the data in the nodes\r\n     */\r\n    Tree.prototype.values = function () {\r\n        var values = [];\r\n        this.forEach(function (_a) {\r\n            var data = _a.data;\r\n            return values.push(data);\r\n        });\r\n        return values;\r\n    };\r\n    Tree.prototype.min = function () {\r\n        if (this._root)\r\n            return this.minNode(this._root).key;\r\n        return null;\r\n    };\r\n    Tree.prototype.max = function () {\r\n        if (this._root)\r\n            return this.maxNode(this._root).key;\r\n        return null;\r\n    };\r\n    Tree.prototype.minNode = function (t) {\r\n        if (t === void 0) { t = this._root; }\r\n        if (t)\r\n            while (t.left)\r\n                t = t.left;\r\n        return t;\r\n    };\r\n    Tree.prototype.maxNode = function (t) {\r\n        if (t === void 0) { t = this._root; }\r\n        if (t)\r\n            while (t.right)\r\n                t = t.right;\r\n        return t;\r\n    };\r\n    /**\r\n     * Returns node at given index\r\n     */\r\n    Tree.prototype.at = function (index) {\r\n        var current = this._root;\r\n        var done = false;\r\n        var i = 0;\r\n        var Q = [];\r\n        while (!done) {\r\n            if (current) {\r\n                Q.push(current);\r\n                current = current.left;\r\n            }\r\n            else {\r\n                if (Q.length > 0) {\r\n                    current = Q.pop();\r\n                    if (i === index)\r\n                        return current;\r\n                    i++;\r\n                    current = current.right;\r\n                }\r\n                else\r\n                    done = true;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Tree.prototype.next = function (d) {\r\n        var root = this._root;\r\n        var successor = null;\r\n        if (d.right) {\r\n            successor = d.right;\r\n            while (successor.left)\r\n                successor = successor.left;\r\n            return successor;\r\n        }\r\n        var comparator = this._comparator;\r\n        while (root) {\r\n            var cmp = comparator(d.key, root.key);\r\n            if (cmp === 0)\r\n                break;\r\n            else if (cmp < 0) {\r\n                successor = root;\r\n                root = root.left;\r\n            }\r\n            else\r\n                root = root.right;\r\n        }\r\n        return successor;\r\n    };\r\n    Tree.prototype.prev = function (d) {\r\n        var root = this._root;\r\n        var predecessor = null;\r\n        if (d.left !== null) {\r\n            predecessor = d.left;\r\n            while (predecessor.right)\r\n                predecessor = predecessor.right;\r\n            return predecessor;\r\n        }\r\n        var comparator = this._comparator;\r\n        while (root) {\r\n            var cmp = comparator(d.key, root.key);\r\n            if (cmp === 0)\r\n                break;\r\n            else if (cmp < 0)\r\n                root = root.left;\r\n            else {\r\n                predecessor = root;\r\n                root = root.right;\r\n            }\r\n        }\r\n        return predecessor;\r\n    };\r\n    Tree.prototype.clear = function () {\r\n        this._root = null;\r\n        this._size = 0;\r\n        return this;\r\n    };\r\n    Tree.prototype.toList = function () {\r\n        return toList(this._root);\r\n    };\r\n    /**\r\n     * Bulk-load items. Both array have to be same size\r\n     */\r\n    Tree.prototype.load = function (keys, values, presort) {\r\n        if (values === void 0) { values = []; }\r\n        if (presort === void 0) { presort = false; }\r\n        var size = keys.length;\r\n        var comparator = this._comparator;\r\n        // sort if needed\r\n        if (presort)\r\n            sort(keys, values, 0, size - 1, comparator);\r\n        if (this._root === null) { // empty tree\r\n            this._root = loadRecursive(keys, values, 0, size);\r\n            this._size = size;\r\n        }\r\n        else { // that re-builds the whole tree from two in-order traversals\r\n            var mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\r\n            size = this._size + size;\r\n            this._root = sortedListToBST({ head: mergedList }, 0, size);\r\n        }\r\n        return this;\r\n    };\r\n    Tree.prototype.isEmpty = function () { return this._root === null; };\r\n    Object.defineProperty(Tree.prototype, \"size\", {\r\n        get: function () { return this._size; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tree.prototype, \"root\", {\r\n        get: function () { return this._root; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Tree.prototype.toString = function (printNode) {\r\n        if (printNode === void 0) { printNode = function (n) { return String(n.key); }; }\r\n        var out = [];\r\n        printRow(this._root, '', true, function (v) { return out.push(v); }, printNode);\r\n        return out.join('');\r\n    };\r\n    Tree.prototype.update = function (key, newKey, newData) {\r\n        var comparator = this._comparator;\r\n        var _a = split(key, this._root, comparator), left = _a.left, right = _a.right;\r\n        if (comparator(key, newKey) < 0) {\r\n            right = insert(newKey, newData, right, comparator);\r\n        }\r\n        else {\r\n            left = insert(newKey, newData, left, comparator);\r\n        }\r\n        this._root = merge(left, right, comparator);\r\n    };\r\n    Tree.prototype.split = function (key) {\r\n        return split(key, this._root, this._comparator);\r\n    };\r\n    Tree.prototype[Symbol.iterator] = function () {\r\n        var current, Q, done;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    current = this._root;\r\n                    Q = [];\r\n                    done = false;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!!done) return [3 /*break*/, 6];\r\n                    if (!(current !== null)) return [3 /*break*/, 2];\r\n                    Q.push(current);\r\n                    current = current.left;\r\n                    return [3 /*break*/, 5];\r\n                case 2:\r\n                    if (!(Q.length !== 0)) return [3 /*break*/, 4];\r\n                    current = Q.pop();\r\n                    return [4 /*yield*/, current];\r\n                case 3:\r\n                    _a.sent();\r\n                    current = current.right;\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    done = true;\r\n                    _a.label = 5;\r\n                case 5: return [3 /*break*/, 1];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    return Tree;\r\n}());\r\nfunction loadRecursive(keys, values, start, end) {\r\n    var size = end - start;\r\n    if (size > 0) {\r\n        var middle = start + Math.floor(size / 2);\r\n        var key = keys[middle];\r\n        var data = values[middle];\r\n        var node = new Node(key, data);\r\n        node.left = loadRecursive(keys, values, start, middle);\r\n        node.right = loadRecursive(keys, values, middle + 1, end);\r\n        return node;\r\n    }\r\n    return null;\r\n}\r\nfunction createList(keys, values) {\r\n    var head = new Node(null, null);\r\n    var p = head;\r\n    for (var i = 0; i < keys.length; i++) {\r\n        p = p.next = new Node(keys[i], values[i]);\r\n    }\r\n    p.next = null;\r\n    return head.next;\r\n}\r\nfunction toList(root) {\r\n    var current = root;\r\n    var Q = [];\r\n    var done = false;\r\n    var head = new Node(null, null);\r\n    var p = head;\r\n    while (!done) {\r\n        if (current) {\r\n            Q.push(current);\r\n            current = current.left;\r\n        }\r\n        else {\r\n            if (Q.length > 0) {\r\n                current = p = p.next = Q.pop();\r\n                current = current.right;\r\n            }\r\n            else\r\n                done = true;\r\n        }\r\n    }\r\n    p.next = null; // that'll work even if the tree was empty\r\n    return head.next;\r\n}\r\nfunction sortedListToBST(list, start, end) {\r\n    var size = end - start;\r\n    if (size > 0) {\r\n        var middle = start + Math.floor(size / 2);\r\n        var left = sortedListToBST(list, start, middle);\r\n        var root = list.head;\r\n        root.left = left;\r\n        list.head = list.head.next;\r\n        root.right = sortedListToBST(list, middle + 1, end);\r\n        return root;\r\n    }\r\n    return null;\r\n}\r\nfunction mergeLists(l1, l2, compare) {\r\n    var head = new Node(null, null); // dummy\r\n    var p = head;\r\n    var p1 = l1;\r\n    var p2 = l2;\r\n    while (p1 !== null && p2 !== null) {\r\n        if (compare(p1.key, p2.key) < 0) {\r\n            p.next = p1;\r\n            p1 = p1.next;\r\n        }\r\n        else {\r\n            p.next = p2;\r\n            p2 = p2.next;\r\n        }\r\n        p = p.next;\r\n    }\r\n    if (p1 !== null) {\r\n        p.next = p1;\r\n    }\r\n    else if (p2 !== null) {\r\n        p.next = p2;\r\n    }\r\n    return head.next;\r\n}\r\nfunction sort(keys, values, left, right, compare) {\r\n    if (left >= right)\r\n        return;\r\n    var pivot = keys[(left + right) >> 1];\r\n    var i = left - 1;\r\n    var j = right + 1;\r\n    while (true) {\r\n        do\r\n            i++;\r\n        while (compare(keys[i], pivot) < 0);\r\n        do\r\n            j--;\r\n        while (compare(keys[j], pivot) > 0);\r\n        if (i >= j)\r\n            break;\r\n        var tmp = keys[i];\r\n        keys[i] = keys[j];\r\n        keys[j] = tmp;\r\n        tmp = values[i];\r\n        values[i] = values[j];\r\n        values[j] = tmp;\r\n    }\r\n    sort(keys, values, left, j, compare);\r\n    sort(keys, values, j + 1, right, compare);\r\n}\n\nexport default Tree;\n//# sourceMappingURL=splay.esm.js.map\n", "export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum, scale} from './util.js';\n\nconst o3derrboundA = (7 + 56 * epsilon) * epsilon;\nconst o3derrboundB = (3 + 28 * epsilon) * epsilon;\nconst o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst at_b = vec(4);\nconst at_c = vec(4);\nconst bt_c = vec(4);\nconst bt_a = vec(4);\nconst ct_a = vec(4);\nconst ct_b = vec(4);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abt = vec(8);\nconst u = vec(4);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _16 = vec(8);\nconst _12 = vec(12);\n\nlet fin = vec(192);\nlet fin2 = vec(192);\n\nfunction finadd(finlen, alen, a) {\n    finlen = sum(finlen, fin, alen, a, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction tailinit(xtail, ytail, ax, ay, bx, by, a, b) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;\n    if (xtail === 0) {\n        if (ytail === 0) {\n            a[0] = 0;\n            b[0] = 0;\n            return 1;\n        } else {\n            negate = -ytail;\n            s1 = negate * ax;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        }\n    } else {\n        if (ytail === 0) {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            negate = -xtail;\n            s1 = negate * by;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        } else {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = ytail * ax;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            a[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            a[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            a[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            a[3] = u3;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = xtail * by;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            b[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            b[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            b[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            b[3] = u3;\n            return 4;\n        }\n    }\n}\n\nfunction tailadd(finlen, a, b, k, z) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;\n    s1 = a * b;\n    c = splitter * a;\n    ahi = c - (c - a);\n    alo = a - ahi;\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    c = splitter * k;\n    bhi = c - (c - k);\n    blo = k - bhi;\n    _i = s0 * k;\n    c = splitter * s0;\n    ahi = c - (c - s0);\n    alo = s0 - ahi;\n    u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n    _j = s1 * k;\n    c = splitter * s1;\n    ahi = c - (c - s1);\n    alo = s1 - ahi;\n    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n    _k = _i + _0;\n    bvirt = _k - _i;\n    u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n    u3 = _j + _k;\n    u[2] = _k - (u3 - _j);\n    u[3] = u3;\n    finlen = finadd(finlen, 4, u);\n    if (z !== 0) {\n        c = splitter * z;\n        bhi = c - (c - z);\n        blo = z - bhi;\n        _i = s0 * z;\n        c = splitter * s0;\n        ahi = c - (c - s0);\n        alo = s0 - ahi;\n        u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n        _j = s1 * z;\n        c = splitter * s1;\n        ahi = c - (c - s1);\n        alo = s1 - ahi;\n        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n        _k = _i + _0;\n        bvirt = _k - _i;\n        u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n        u3 = _j + _k;\n        u[2] = _k - (u3 - _j);\n        u[3] = u3;\n        finlen = finadd(finlen, 4, u);\n    }\n    return finlen;\n}\n\nfunction orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail;\n    let adytail, bdytail, cdytail;\n    let adztail, bdztail, cdztail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            scale(4, bc, adz, _8), _8,\n            scale(4, ca, bdz, _8b), _8b, _16), _16,\n        scale(4, ab, cdz, _8), _8, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = o3derrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    bvirt = az - adz;\n    adztail = az - (adz + bvirt) + (bvirt - dz);\n    bvirt = bz - bdz;\n    bdztail = bz - (bdz + bvirt) + (bvirt - dz);\n    bvirt = cz - cdz;\n    cdztail = cz - (cdz + bvirt) + (bvirt - dz);\n\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 &&\n        adytail === 0 && bdytail === 0 && cdytail === 0 &&\n        adztail === 0 && bdztail === 0 && cdztail === 0) {\n        return det;\n    }\n\n    errbound = o3derrboundC * permanent + resulterrbound * Math.abs(det);\n    det +=\n        adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) +\n        bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) +\n        cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    const at_len = tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, at_b, at_c);\n    const bt_len = tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, bt_c, bt_a);\n    const ct_len = tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, ct_a, ct_b);\n\n    const bctlen = sum(bt_len, bt_c, ct_len, ct_b, bct);\n    finlen = finadd(finlen, scale(bctlen, bct, adz, _16), _16);\n\n    const catlen = sum(ct_len, ct_a, at_len, at_c, cat);\n    finlen = finadd(finlen, scale(catlen, cat, bdz, _16), _16);\n\n    const abtlen = sum(at_len, at_b, bt_len, bt_a, abt);\n    finlen = finadd(finlen, scale(abtlen, abt, cdz, _16), _16);\n\n    if (adztail !== 0) {\n        finlen = finadd(finlen, scale(4, bc, adztail, _12), _12);\n        finlen = finadd(finlen, scale(bctlen, bct, adztail, _16), _16);\n    }\n    if (bdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ca, bdztail, _12), _12);\n        finlen = finadd(finlen, scale(catlen, cat, bdztail, _16), _16);\n    }\n    if (cdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ab, cdztail, _12), _12);\n        finlen = finadd(finlen, scale(abtlen, abt, cdztail, _16), _16);\n    }\n\n    if (adxtail !== 0) {\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, adxtail, bdytail, cdz, cdztail);\n        }\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, -adxtail, cdytail, bdz, bdztail);\n        }\n    }\n    if (bdxtail !== 0) {\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, bdxtail, cdytail, adz, adztail);\n        }\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, -bdxtail, adytail, cdz, cdztail);\n        }\n    }\n    if (cdxtail !== 0) {\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, cdxtail, adytail, bdz, bdztail);\n        }\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, -cdxtail, bdytail, adz, adztail);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function orient3d(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n\n    const det =\n        adz * (bdxcdy - cdxbdy) +\n        bdz * (cdxady - adxcdy) +\n        cdz * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);\n\n    const errbound = o3derrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n\n    return orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);\n}\n\nexport function orient3dfast(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    return adx * (bdy * cdz - bdz * cdy) +\n        bdx * (cdy * adz - cdz * ady) +\n        cdx * (ady * bdz - adz * bdy);\n}\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale} from './util.js';\n\nconst iccerrboundA = (10 + 96 * epsilon) * epsilon;\nconst iccerrboundB = (4 + 48 * epsilon) * epsilon;\nconst iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst aa = vec(4);\nconst bb = vec(4);\nconst cc = vec(4);\nconst u = vec(4);\nconst v = vec(4);\nconst axtbc = vec(8);\nconst aytbc = vec(8);\nconst bxtca = vec(8);\nconst bytca = vec(8);\nconst cxtab = vec(8);\nconst cytab = vec(8);\nconst abt = vec(8);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abtt = vec(4);\nconst bctt = vec(4);\nconst catt = vec(4);\n\nconst _8 = vec(8);\nconst _16 = vec(16);\nconst _16b = vec(16);\nconst _16c = vec(16);\nconst _32 = vec(32);\nconst _32b = vec(32);\nconst _48 = vec(48);\nconst _64 = vec(64);\n\nlet fin = vec(1152);\nlet fin2 = vec(1152);\n\nfunction finadd(finlen, a, alen) {\n    finlen = sum(finlen, fin, a, alen, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;\n    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;\n    let abtlen, bctlen, catlen;\n    let abttlen, bcttlen, cattlen;\n    let n1, n0;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            sum(\n                scale(scale(4, bc, adx, _8), _8, adx, _16), _16,\n                scale(scale(4, bc, ady, _8), _8, ady, _16b), _16b, _32), _32,\n            sum(\n                scale(scale(4, ca, bdx, _8), _8, bdx, _16), _16,\n                scale(scale(4, ca, bdy, _8), _8, bdy, _16b), _16b, _32b), _32b, _64), _64,\n        sum(\n            scale(scale(4, ab, cdx, _8), _8, cdx, _16), _16,\n            scale(scale(4, ab, cdy, _8), _8, cdy, _16b), _16b, _32), _32, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = iccerrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) {\n        return det;\n    }\n\n    errbound = iccerrboundC * permanent + resulterrbound * Math.abs(det);\n    det += ((adx * adx + ady * ady) * ((bdx * cdytail + cdy * bdxtail) - (bdy * cdxtail + cdx * bdytail)) +\n        2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx)) +\n        ((bdx * bdx + bdy * bdy) * ((cdx * adytail + ady * cdxtail) - (cdy * adxtail + adx * cdytail)) +\n        2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) +\n        ((cdx * cdx + cdy * cdy) * ((adx * bdytail + bdy * adxtail) - (ady * bdxtail + bdx * adytail)) +\n        2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n        s1 = adx * adx;\n        c = splitter * adx;\n        ahi = c - (c - adx);\n        alo = adx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = ady * ady;\n        c = splitter * ady;\n        ahi = c - (c - ady);\n        alo = ady - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        aa[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        aa[3] = u3;\n    }\n    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n        s1 = bdx * bdx;\n        c = splitter * bdx;\n        ahi = c - (c - bdx);\n        alo = bdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = bdy * bdy;\n        c = splitter * bdy;\n        ahi = c - (c - bdy);\n        alo = bdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        bb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        bb[3] = u3;\n    }\n    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n        s1 = cdx * cdx;\n        c = splitter * cdx;\n        ahi = c - (c - cdx);\n        alo = cdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = cdy * cdy;\n        c = splitter * cdy;\n        ahi = c - (c - cdy);\n        alo = cdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        cc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        cc[3] = u3;\n    }\n\n    if (adxtail !== 0) {\n        axtbclen = scale(4, bc, adxtail, axtbc);\n        finlen = finadd(finlen, sum_three(\n            scale(axtbclen, axtbc, 2 * adx, _16), _16,\n            scale(scale(4, cc, adxtail, _8), _8, bdy, _16b), _16b,\n            scale(scale(4, bb, adxtail, _8), _8, -cdy, _16c), _16c, _32, _48), _48);\n    }\n    if (adytail !== 0) {\n        aytbclen = scale(4, bc, adytail, aytbc);\n        finlen = finadd(finlen, sum_three(\n            scale(aytbclen, aytbc, 2 * ady, _16), _16,\n            scale(scale(4, bb, adytail, _8), _8, cdx, _16b), _16b,\n            scale(scale(4, cc, adytail, _8), _8, -bdx, _16c), _16c, _32, _48), _48);\n    }\n    if (bdxtail !== 0) {\n        bxtcalen = scale(4, ca, bdxtail, bxtca);\n        finlen = finadd(finlen, sum_three(\n            scale(bxtcalen, bxtca, 2 * bdx, _16), _16,\n            scale(scale(4, aa, bdxtail, _8), _8, cdy, _16b), _16b,\n            scale(scale(4, cc, bdxtail, _8), _8, -ady, _16c), _16c, _32, _48), _48);\n    }\n    if (bdytail !== 0) {\n        bytcalen = scale(4, ca, bdytail, bytca);\n        finlen = finadd(finlen, sum_three(\n            scale(bytcalen, bytca, 2 * bdy, _16), _16,\n            scale(scale(4, cc, bdytail, _8), _8, adx, _16b), _16b,\n            scale(scale(4, aa, bdytail, _8), _8, -cdx, _16c), _16c, _32, _48), _48);\n    }\n    if (cdxtail !== 0) {\n        cxtablen = scale(4, ab, cdxtail, cxtab);\n        finlen = finadd(finlen, sum_three(\n            scale(cxtablen, cxtab, 2 * cdx, _16), _16,\n            scale(scale(4, bb, cdxtail, _8), _8, ady, _16b), _16b,\n            scale(scale(4, aa, cdxtail, _8), _8, -bdy, _16c), _16c, _32, _48), _48);\n    }\n    if (cdytail !== 0) {\n        cytablen = scale(4, ab, cdytail, cytab);\n        finlen = finadd(finlen, sum_three(\n            scale(cytablen, cytab, 2 * cdy, _16), _16,\n            scale(scale(4, aa, cdytail, _8), _8, bdx, _16b), _16b,\n            scale(scale(4, bb, cdytail, _8), _8, -adx, _16c), _16c, _32, _48), _48);\n    }\n\n    if (adxtail !== 0 || adytail !== 0) {\n        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n            s1 = bdxtail * cdy;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdy;\n            bhi = c - (c - cdy);\n            blo = cdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * cdytail;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            s1 = cdxtail * -bdy;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * -bdy;\n            bhi = c - (c - -bdy);\n            blo = -bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * -bdytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * -bdytail;\n            bhi = c - (c - -bdytail);\n            blo = -bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            bctlen = sum(4, u, 4, v, bct);\n            s1 = bdxtail * cdytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdxtail * bdytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            bctt[3] = u3;\n            bcttlen = 4;\n        } else {\n            bct[0] = 0;\n            bctlen = 1;\n            bctt[0] = 0;\n            bcttlen = 1;\n        }\n        if (adxtail !== 0) {\n            const len = scale(bctlen, bct, adxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(axtbclen, axtbc, adxtail, _16), _16,\n                scale(len, _16c, 2 * adx, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * adx, _16), _16,\n                scale(len2, _8, adxtail, _16b), _16b,\n                scale(len, _16c, adxtail, _32), _32, _32b, _64), _64);\n\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, adxtail, _8), _8, bdytail, _16), _16);\n            }\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, -adxtail, _8), _8, cdytail, _16), _16);\n            }\n        }\n        if (adytail !== 0) {\n            const len = scale(bctlen, bct, adytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(aytbclen, aytbc, adytail, _16), _16,\n                scale(len, _16c, 2 * ady, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * ady, _16), _16,\n                scale(len2, _8, adytail, _16b), _16b,\n                scale(len, _16c, adytail, _32), _32, _32b, _64), _64);\n        }\n    }\n    if (bdxtail !== 0 || bdytail !== 0) {\n        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n            s1 = cdxtail * ady;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * ady;\n            bhi = c - (c - ady);\n            blo = ady - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * adytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -cdy;\n            n0 = -cdytail;\n            s1 = adxtail * n1;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * n0;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            catlen = sum(4, u, 4, v, cat);\n            s1 = cdxtail * adytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adxtail * cdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            catt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            catt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            catt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            catt[3] = u3;\n            cattlen = 4;\n        } else {\n            cat[0] = 0;\n            catlen = 1;\n            catt[0] = 0;\n            cattlen = 1;\n        }\n        if (bdxtail !== 0) {\n            const len = scale(catlen, cat, bdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bxtcalen, bxtca, bdxtail, _16), _16,\n                scale(len, _16c, 2 * bdx, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdx, _16), _16,\n                scale(len2, _8, bdxtail, _16b), _16b,\n                scale(len, _16c, bdxtail, _32), _32, _32b, _64), _64);\n\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, bdxtail, _8), _8, cdytail, _16), _16);\n            }\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, -bdxtail, _8), _8, adytail, _16), _16);\n            }\n        }\n        if (bdytail !== 0) {\n            const len = scale(catlen, cat, bdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bytcalen, bytca, bdytail, _16), _16,\n                scale(len, _16c, 2 * bdy, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdy, _16), _16,\n                scale(len2, _8, bdytail, _16b), _16b,\n                scale(len, _16c, bdytail, _32), _32,  _32b, _64), _64);\n        }\n    }\n    if (cdxtail !== 0 || cdytail !== 0) {\n        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n            s1 = adxtail * bdy;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdy;\n            bhi = c - (c - bdy);\n            blo = bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * bdytail;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -ady;\n            n0 = -adytail;\n            s1 = bdxtail * n1;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * n0;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            abtlen = sum(4, u, 4, v, abt);\n            s1 = adxtail * bdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdxtail * adytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            abtt[3] = u3;\n            abttlen = 4;\n        } else {\n            abt[0] = 0;\n            abtlen = 1;\n            abtt[0] = 0;\n            abttlen = 1;\n        }\n        if (cdxtail !== 0) {\n            const len = scale(abtlen, abt, cdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cxtablen, cxtab, cdxtail, _16), _16,\n                scale(len, _16c, 2 * cdx, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdx, _16), _16,\n                scale(len2, _8, cdxtail, _16b), _16b,\n                scale(len, _16c, cdxtail, _32), _32, _32b, _64), _64);\n\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, cdxtail, _8), _8, adytail, _16), _16);\n            }\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, -cdxtail, _8), _8, bdytail, _16), _16);\n            }\n        }\n        if (cdytail !== 0) {\n            const len = scale(abtlen, abt, cdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cytablen, cytab, cdytail, _16), _16,\n                scale(len, _16c, 2 * cdy, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdy, _16), _16,\n                scale(len2, _8, cdytail, _16b), _16b,\n                scale(len, _16c, cdytail, _32), _32, _32b, _64), _64);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function incircle(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n    const alift = adx * adx + ady * ady;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n    const blift = bdx * bdx + bdy * bdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n    const clift = cdx * cdx + cdy * cdy;\n\n    const det =\n        alift * (bdxcdy - cdxbdy) +\n        blift * (cdxady - adxcdy) +\n        clift * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * blift +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;\n\n    const errbound = iccerrboundA * permanent;\n\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);\n}\n\nexport function incirclefast(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const ady = ay - dy;\n    const bdx = bx - dx;\n    const bdy = by - dy;\n    const cdx = cx - dx;\n    const cdy = cy - dy;\n\n    const abdet = adx * bdy - bdx * ady;\n    const bcdet = bdx * cdy - cdx * bdy;\n    const cadet = cdx * ady - adx * cdy;\n    const alift = adx * adx + ady * ady;\n    const blift = bdx * bdx + bdy * bdy;\n    const clift = cdx * cdx + cdy * cdy;\n\n    return alift * bcdet + blift * cadet + clift * abdet;\n}\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale, negate} from './util.js';\n\nconst isperrboundA = (16 + 224 * epsilon) * epsilon;\nconst isperrboundB = (5 + 72 * epsilon) * epsilon;\nconst isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;\n\nconst ab = vec(4);\nconst bc = vec(4);\nconst cd = vec(4);\nconst de = vec(4);\nconst ea = vec(4);\nconst ac = vec(4);\nconst bd = vec(4);\nconst ce = vec(4);\nconst da = vec(4);\nconst eb = vec(4);\n\nconst abc = vec(24);\nconst bcd = vec(24);\nconst cde = vec(24);\nconst dea = vec(24);\nconst eab = vec(24);\nconst abd = vec(24);\nconst bce = vec(24);\nconst cda = vec(24);\nconst deb = vec(24);\nconst eac = vec(24);\n\nconst adet = vec(1152);\nconst bdet = vec(1152);\nconst cdet = vec(1152);\nconst ddet = vec(1152);\nconst edet = vec(1152);\nconst abdet = vec(2304);\nconst cddet = vec(2304);\nconst cdedet = vec(3456);\nconst deter = vec(5760);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _8c = vec(8);\nconst _16 = vec(16);\nconst _24 = vec(24);\nconst _48 = vec(48);\nconst _48b = vec(48);\nconst _96 = vec(96);\nconst _192 = vec(192);\nconst _384x = vec(384);\nconst _384y = vec(384);\nconst _384z = vec(384);\nconst _768 = vec(768);\n\nfunction sum_three_scale(a, b, c, az, bz, cz, out) {\n    return sum_three(\n        scale(4, a, az, _8), _8,\n        scale(4, b, bz, _8b), _8b,\n        scale(4, c, cz, _8c), _8c, _16, out);\n}\n\nfunction liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {\n    const len = sum(\n        sum(alen, a, blen, b, _48), _48,\n        negate(sum(clen, c, dlen, d, _48b), _48b), _48b, _96);\n\n    return sum_three(\n        scale(scale(len, _96, x, _192), _192, x, _384x), _384x,\n        scale(scale(len, _96, y, _192), _192, y, _384y), _384y,\n        scale(scale(len, _96, z, _192), _192, z, _384z), _384z, _768, out);\n}\n\nfunction insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    s1 = ax * by;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ay;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n    s1 = bx * cy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * by;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cx * dy;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * cy;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    cd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    cd[3] = u3;\n    s1 = dx * ey;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * dy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    de[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    de[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    de[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    de[3] = u3;\n    s1 = ex * ay;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * ey;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ea[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ea[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ea[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ea[3] = u3;\n    s1 = ax * cy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * ay;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ac[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ac[3] = u3;\n    s1 = bx * dy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * by;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bd[3] = u3;\n    s1 = cx * ey;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * cy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ce[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ce[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ce[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ce[3] = u3;\n    s1 = dx * ay;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * dy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    da[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    da[3] = u3;\n    s1 = ex * by;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ey;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    eb[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    eb[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    eb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    eb[3] = u3;\n\n    const abclen = sum_three_scale(ab, bc, ac, cz, az, -bz, abc);\n    const bcdlen = sum_three_scale(bc, cd, bd, dz, bz, -cz, bcd);\n    const cdelen = sum_three_scale(cd, de, ce, ez, cz, -dz, cde);\n    const dealen = sum_three_scale(de, ea, da, az, dz, -ez, dea);\n    const eablen = sum_three_scale(ea, ab, eb, bz, ez, -az, eab);\n    const abdlen = sum_three_scale(ab, bd, da, dz, az, bz, abd);\n    const bcelen = sum_three_scale(bc, ce, eb, ez, bz, cz, bce);\n    const cdalen = sum_three_scale(cd, da, ac, az, cz, dz, cda);\n    const deblen = sum_three_scale(de, eb, bd, bz, dz, ez, deb);\n    const eaclen = sum_three_scale(ea, ac, ce, cz, ez, az, eac);\n\n    const deterlen = sum_three(\n        liftexact(cdelen, cde, bcelen, bce, deblen, deb, bcdlen, bcd, ax, ay, az, adet), adet,\n        liftexact(dealen, dea, cdalen, cda, eaclen, eac, cdelen, cde, bx, by, bz, bdet), bdet,\n        sum_three(\n            liftexact(eablen, eab, deblen, deb, abdlen, abd, dealen, dea, cx, cy, cz, cdet), cdet,\n            liftexact(abclen, abc, eaclen, eac, bcelen, bce, eablen, eab, dx, dy, dz, ddet), ddet,\n            liftexact(bcdlen, bcd, abdlen, abd, cdalen, cda, abclen, abc, ex, ey, ez, edet), edet, cddet, cdedet), cdedet, abdet, deter);\n\n    return deter[deterlen - 1];\n}\n\nconst xdet = vec(96);\nconst ydet = vec(96);\nconst zdet = vec(96);\nconst fin = vec(1152);\n\nfunction liftadapt(a, b, c, az, bz, cz, x, y, z, out) {\n    const len = sum_three_scale(a, b, c, az, bz, cz, _24);\n    return sum_three(\n        scale(scale(len, _24, x, _48), _48, x, xdet), xdet,\n        scale(scale(len, _24, y, _48), _48, y, ydet), ydet,\n        scale(scale(len, _24, z, _48), _48, z, zdet), zdet, _192, out);\n}\n\nfunction insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {\n    let ab3, bc3, cd3, da3, ac3, bd3;\n\n    let aextail, bextail, cextail, dextail;\n    let aeytail, beytail, ceytail, deytail;\n    let aeztail, beztail, ceztail, deztail;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;\n\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    s1 = aex * bey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bex * aey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ab3 = _j + _i;\n    bvirt = ab3 - _j;\n    ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);\n    ab[3] = ab3;\n    s1 = bex * cey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * bey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bc3 = _j + _i;\n    bvirt = bc3 - _j;\n    bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);\n    bc[3] = bc3;\n    s1 = cex * dey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * cey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    cd3 = _j + _i;\n    bvirt = cd3 - _j;\n    cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);\n    cd[3] = cd3;\n    s1 = dex * aey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = aex * dey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    da3 = _j + _i;\n    bvirt = da3 - _j;\n    da[2] = _j - (da3 - bvirt) + (_i - bvirt);\n    da[3] = da3;\n    s1 = aex * cey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * aey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ac3 = _j + _i;\n    bvirt = ac3 - _j;\n    ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);\n    ac[3] = ac3;\n    s1 = bex * dey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * bey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bd3 = _j + _i;\n    bvirt = bd3 - _j;\n    bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);\n    bd[3] = bd3;\n\n    const finlen = sum(\n        sum(\n            negate(liftadapt(bc, cd, bd, dez, bez, -cez, aex, aey, aez, adet), adet), adet,\n            liftadapt(cd, da, ac, aez, cez, dez, bex, bey, bez, bdet), bdet, abdet), abdet,\n        sum(\n            negate(liftadapt(da, ab, bd, bez, dez, aez, cex, cey, cez, cdet), cdet), cdet,\n            liftadapt(ab, bc, ac, cez, aez, -bez, dex, dey, dez, ddet), ddet, cddet), cddet, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = isperrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - aex;\n    aextail = ax - (aex + bvirt) + (bvirt - ex);\n    bvirt = ay - aey;\n    aeytail = ay - (aey + bvirt) + (bvirt - ey);\n    bvirt = az - aez;\n    aeztail = az - (aez + bvirt) + (bvirt - ez);\n    bvirt = bx - bex;\n    bextail = bx - (bex + bvirt) + (bvirt - ex);\n    bvirt = by - bey;\n    beytail = by - (bey + bvirt) + (bvirt - ey);\n    bvirt = bz - bez;\n    beztail = bz - (bez + bvirt) + (bvirt - ez);\n    bvirt = cx - cex;\n    cextail = cx - (cex + bvirt) + (bvirt - ex);\n    bvirt = cy - cey;\n    ceytail = cy - (cey + bvirt) + (bvirt - ey);\n    bvirt = cz - cez;\n    ceztail = cz - (cez + bvirt) + (bvirt - ez);\n    bvirt = dx - dex;\n    dextail = dx - (dex + bvirt) + (bvirt - ex);\n    bvirt = dy - dey;\n    deytail = dy - (dey + bvirt) + (bvirt - ey);\n    bvirt = dz - dez;\n    deztail = dz - (dez + bvirt) + (bvirt - ez);\n    if (aextail === 0 && aeytail === 0 && aeztail === 0 &&\n        bextail === 0 && beytail === 0 && beztail === 0 &&\n        cextail === 0 && ceytail === 0 && ceztail === 0 &&\n        dextail === 0 && deytail === 0 && deztail === 0) {\n        return det;\n    }\n\n    errbound = isperrboundC * permanent + resulterrbound * Math.abs(det);\n\n    const abeps = (aex * beytail + bey * aextail) - (aey * bextail + bex * aeytail);\n    const bceps = (bex * ceytail + cey * bextail) - (bey * cextail + cex * beytail);\n    const cdeps = (cex * deytail + dey * cextail) - (cey * dextail + dex * ceytail);\n    const daeps = (dex * aeytail + aey * dextail) - (dey * aextail + aex * deytail);\n    const aceps = (aex * ceytail + cey * aextail) - (aey * cextail + cex * aeytail);\n    const bdeps = (bex * deytail + dey * bextail) - (bey * dextail + dex * beytail);\n    det +=\n        (((bex * bex + bey * bey + bez * bez) * ((cez * daeps + dez * aceps + aez * cdeps) +\n        (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) *\n        ((aez * bceps - bez * aceps + cez * abeps) + (aeztail * bc3 - beztail * ac3 + ceztail * ab3))) -\n        ((aex * aex + aey * aey + aez * aez) * ((bez * cdeps - cez * bdeps + dez * bceps) +\n        (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) *\n        ((dez * abeps + aez * bdeps + bez * daeps) + (deztail * ab3 + aeztail * bd3 + beztail * da3)))) +\n        2 * (((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) +\n        (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3)) -\n        ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) +\n        (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    return insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);\n}\n\nexport function insphere(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    const aexbey = aex * bey;\n    const bexaey = bex * aey;\n    const ab = aexbey - bexaey;\n    const bexcey = bex * cey;\n    const cexbey = cex * bey;\n    const bc = bexcey - cexbey;\n    const cexdey = cex * dey;\n    const dexcey = dex * cey;\n    const cd = cexdey - dexcey;\n    const dexaey = dex * aey;\n    const aexdey = aex * dey;\n    const da = dexaey - aexdey;\n    const aexcey = aex * cey;\n    const cexaey = cex * aey;\n    const ac = aexcey - cexaey;\n    const bexdey = bex * dey;\n    const dexbey = dex * bey;\n    const bd = bexdey - dexbey;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    const det =\n        (clift * (dez * ab + aez * bd + bez * da) - dlift * (aez * bc - bez * ac + cez * ab)) +\n        (alift * (bez * cd - cez * bd + dez * bc) - blift * (cez * da + dez * ac + aez * cd));\n\n    const aezplus = Math.abs(aez);\n    const bezplus = Math.abs(bez);\n    const cezplus = Math.abs(cez);\n    const dezplus = Math.abs(dez);\n    const aexbeyplus = Math.abs(aexbey) + Math.abs(bexaey);\n    const bexceyplus = Math.abs(bexcey) + Math.abs(cexbey);\n    const cexdeyplus = Math.abs(cexdey) + Math.abs(dexcey);\n    const dexaeyplus = Math.abs(dexaey) + Math.abs(aexdey);\n    const aexceyplus = Math.abs(aexcey) + Math.abs(cexaey);\n    const bexdeyplus = Math.abs(bexdey) + Math.abs(dexbey);\n    const permanent =\n        (cexdeyplus * bezplus + bexdeyplus * cezplus + bexceyplus * dezplus) * alift +\n        (dexaeyplus * cezplus + aexceyplus * dezplus + cexdeyplus * aezplus) * blift +\n        (aexbeyplus * dezplus + bexdeyplus * aezplus + dexaeyplus * bezplus) * clift +\n        (bexceyplus * aezplus + aexceyplus * bezplus + aexbeyplus * cezplus) * dlift;\n\n    const errbound = isperrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return -insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);\n}\n\nexport function inspherefast(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {\n    const aex = pax - pex;\n    const bex = pbx - pex;\n    const cex = pcx - pex;\n    const dex = pdx - pex;\n    const aey = pay - pey;\n    const bey = pby - pey;\n    const cey = pcy - pey;\n    const dey = pdy - pey;\n    const aez = paz - pez;\n    const bez = pbz - pez;\n    const cez = pcz - pez;\n    const dez = pdz - pez;\n\n    const ab = aex * bey - bex * aey;\n    const bc = bex * cey - cex * bey;\n    const cd = cex * dey - dex * cey;\n    const da = dex * aey - aex * dey;\n    const ac = aex * cey - cex * aey;\n    const bd = bex * dey - dex * bey;\n\n    const abc = aez * bc - bez * ac + cez * ab;\n    const bcd = bez * cd - cez * bd + dez * bc;\n    const cda = cez * da + dez * ac + aez * cd;\n    const dab = dez * ab + aez * bd + bez * da;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    return (clift * dab - dlift * abc) + (alift * bcd - blift * cda);\n}\n", "import SplayTree from 'splaytree';\nimport { orient2d } from 'robust-predicates';\n\n/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nconst isInBbox = (bbox, point) => {\n  return bbox.ll.x <= point.x && point.x <= bbox.ur.x && bbox.ll.y <= point.y && point.y <= bbox.ur.y;\n};\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nconst getBboxOverlap = (b1, b2) => {\n  // check if the bboxes overlap at all\n  if (b2.ur.x < b1.ll.x || b1.ur.x < b2.ll.x || b2.ur.y < b1.ll.y || b1.ur.y < b2.ll.y) return null;\n\n  // find the middle two X values\n  const lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x;\n  const upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x;\n\n  // find the middle two Y values\n  const lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y;\n  const upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y;\n\n  // put those middle values together to get the overlap\n  return {\n    ll: {\n      x: lowerX,\n      y: lowerY\n    },\n    ur: {\n      x: upperX,\n      y: upperY\n    }\n  };\n};\n\n/* Javascript doesn't do integer math. Everything is\n * floating point with percision Number.EPSILON.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n */\n\nlet epsilon = Number.EPSILON;\n\n// IE Polyfill\nif (epsilon === undefined) epsilon = Math.pow(2, -52);\nconst EPSILON_SQ = epsilon * epsilon;\n\n/* FLP comparator */\nconst cmp = (a, b) => {\n  // check if they're both 0\n  if (-epsilon < a && a < epsilon) {\n    if (-epsilon < b && b < epsilon) {\n      return 0;\n    }\n  }\n\n  // check if they're flp equal\n  const ab = a - b;\n  if (ab * ab < EPSILON_SQ * a * b) {\n    return 0;\n  }\n\n  // normal comparison\n  return a < b ? -1 : 1;\n};\n\n/**\n * This class rounds incoming values sufficiently so that\n * floating points problems are, for the most part, avoided.\n *\n * Incoming points are have their x & y values tested against\n * all previously seen x & y values. If either is 'too close'\n * to a previously seen value, it's value is 'snapped' to the\n * previously seen value.\n *\n * All points should be rounded by this class before being\n * stored in any data structures in the rest of this algorithm.\n */\n\nclass PtRounder {\n  constructor() {\n    this.reset();\n  }\n  reset() {\n    this.xRounder = new CoordRounder();\n    this.yRounder = new CoordRounder();\n  }\n  round(x, y) {\n    return {\n      x: this.xRounder.round(x),\n      y: this.yRounder.round(y)\n    };\n  }\n}\nclass CoordRounder {\n  constructor() {\n    this.tree = new SplayTree();\n    // preseed with 0 so we don't end up with values < Number.EPSILON\n    this.round(0);\n  }\n\n  // Note: this can rounds input values backwards or forwards.\n  //       You might ask, why not restrict this to just rounding\n  //       forwards? Wouldn't that allow left endpoints to always\n  //       remain left endpoints during splitting (never change to\n  //       right). No - it wouldn't, because we snap intersections\n  //       to endpoints (to establish independence from the segment\n  //       angle for t-intersections).\n  round(coord) {\n    const node = this.tree.add(coord);\n    const prevNode = this.tree.prev(node);\n    if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {\n      this.tree.remove(coord);\n      return prevNode.key;\n    }\n    const nextNode = this.tree.next(node);\n    if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {\n      this.tree.remove(coord);\n      return nextNode.key;\n    }\n    return coord;\n  }\n}\n\n// singleton available by import\nconst rounder = new PtRounder();\n\n/* Cross Product of two vectors with first point at origin */\nconst crossProduct = (a, b) => a.x * b.y - a.y * b.x;\n\n/* Dot Product of two vectors with first point at origin */\nconst dotProduct = (a, b) => a.x * b.x + a.y * b.y;\n\n/* Comparator for two vectors with same starting point */\nconst compareVectorAngles = (basePt, endPt1, endPt2) => {\n  const res = orient2d(basePt.x, basePt.y, endPt1.x, endPt1.y, endPt2.x, endPt2.y);\n  if (res > 0) return -1;\n  if (res < 0) return 1;\n  return 0;\n};\nconst length = v => Math.sqrt(dotProduct(v, v));\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nconst sineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = {\n    x: pBase.x - pShared.x,\n    y: pBase.y - pShared.y\n  };\n  const vAngle = {\n    x: pAngle.x - pShared.x,\n    y: pAngle.y - pShared.y\n  };\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n};\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nconst cosineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = {\n    x: pBase.x - pShared.x,\n    y: pBase.y - pShared.y\n  };\n  const vAngle = {\n    x: pAngle.x - pShared.x,\n    y: pAngle.y - pShared.y\n  };\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n};\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nconst horizontalIntersection = (pt, v, y) => {\n  if (v.y === 0) return null;\n  return {\n    x: pt.x + v.x / v.y * (y - pt.y),\n    y: y\n  };\n};\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nconst verticalIntersection = (pt, v, x) => {\n  if (v.x === 0) return null;\n  return {\n    x: x,\n    y: pt.y + v.y / v.x * (x - pt.x)\n  };\n};\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nconst intersection$1 = (pt1, v1, pt2, v2) => {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x);\n  if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x);\n  if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y);\n  if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y);\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  const kross = crossProduct(v1, v2);\n  if (kross == 0) return null;\n  const ve = {\n    x: pt2.x - pt1.x,\n    y: pt2.y - pt1.y\n  };\n  const d1 = crossProduct(ve, v1) / kross;\n  const d2 = crossProduct(ve, v2) / kross;\n\n  // take the average of the two calculations to minimize rounding error\n  const x1 = pt1.x + d2 * v1.x,\n    x2 = pt2.x + d1 * v2.x;\n  const y1 = pt1.y + d2 * v1.y,\n    y2 = pt2.y + d1 * v2.y;\n  const x = (x1 + x2) / 2;\n  const y = (y1 + y2) / 2;\n  return {\n    x: x,\n    y: y\n  };\n};\n\nclass SweepEvent {\n  // for ordering sweep events in the sweep event queue\n  static compare(a, b) {\n    // favor event with a point that the sweep line hits first\n    const ptCmp = SweepEvent.comparePoints(a.point, b.point);\n    if (ptCmp !== 0) return ptCmp;\n\n    // the points are the same, so link them if needed\n    if (a.point !== b.point) a.link(b);\n\n    // favor right events over left\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1;\n\n    // we have two matching left or right endpoints\n    // ordering of this case is the same as for their segments\n    return Segment.compare(a.segment, b.segment);\n  }\n\n  // for ordering points in sweep line order\n  static comparePoints(aPt, bPt) {\n    if (aPt.x < bPt.x) return -1;\n    if (aPt.x > bPt.x) return 1;\n    if (aPt.y < bPt.y) return -1;\n    if (aPt.y > bPt.y) return 1;\n    return 0;\n  }\n\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor(point, isLeft) {\n    if (point.events === undefined) point.events = [this];else point.events.push(this);\n    this.point = point;\n    this.isLeft = isLeft;\n    // this.segment, this.otherSE set by factory\n  }\n  link(other) {\n    if (other.point === this.point) {\n      throw new Error(\"Tried to link already linked events\");\n    }\n    const otherEvents = other.point.events;\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i];\n      this.point.events.push(evt);\n      evt.point = this.point;\n    }\n    this.checkForConsuming();\n  }\n\n  /* Do a pass over our linked events and check to see if any pair\n   * of segments match, and should be consumed. */\n  checkForConsuming() {\n    // FIXME: The loops in this method run O(n^2) => no good.\n    //        Maintain little ordered sweep event trees?\n    //        Can we maintaining an ordering that avoids the need\n    //        for the re-sorting with getLeftmostComparator in geom-out?\n\n    // Compare each pair of events to see if other events also match\n    const numEvents = this.point.events.length;\n    for (let i = 0; i < numEvents; i++) {\n      const evt1 = this.point.events[i];\n      if (evt1.segment.consumedBy !== undefined) continue;\n      for (let j = i + 1; j < numEvents; j++) {\n        const evt2 = this.point.events[j];\n        if (evt2.consumedBy !== undefined) continue;\n        if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue;\n        evt1.segment.consume(evt2.segment);\n      }\n    }\n  }\n  getAvailableLinkedEvents() {\n    // point.events is always of length 2 or greater\n    const events = [];\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i];\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt);\n      }\n    }\n    return events;\n  }\n\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator(baseEvent) {\n    const cache = new Map();\n    const fillCache = linkedEvent => {\n      const nextEvent = linkedEvent.otherSE;\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point)\n      });\n    };\n    return (a, b) => {\n      if (!cache.has(a)) fillCache(a);\n      if (!cache.has(b)) fillCache(b);\n      const {\n        sine: asine,\n        cosine: acosine\n      } = cache.get(a);\n      const {\n        sine: bsine,\n        cosine: bcosine\n      } = cache.get(b);\n\n      // both on or above x-axis\n      if (asine >= 0 && bsine >= 0) {\n        if (acosine < bcosine) return 1;\n        if (acosine > bcosine) return -1;\n        return 0;\n      }\n\n      // both below x-axis\n      if (asine < 0 && bsine < 0) {\n        if (acosine < bcosine) return -1;\n        if (acosine > bcosine) return 1;\n        return 0;\n      }\n\n      // one above x-axis, one below\n      if (bsine < asine) return -1;\n      if (bsine > asine) return 1;\n      return 0;\n    };\n  }\n}\n\n// Give segments unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet segmentId = 0;\nclass Segment {\n  /* This compare() function is for ordering segments in the sweep\n   * line tree, and does so according to the following criteria:\n   *\n   * Consider the vertical line that lies an infinestimal step to the\n   * right of the right-more of the two left endpoints of the input\n   * segments. Imagine slowly moving a point up from negative infinity\n   * in the increasing y direction. Which of the two segments will that\n   * point intersect first? That segment comes 'before' the other one.\n   *\n   * If neither segment would be intersected by such a line, (if one\n   * or more of the segments are vertical) then the line to be considered\n   * is directly on the right-more of the two left inputs.\n   */\n  static compare(a, b) {\n    const alx = a.leftSE.point.x;\n    const blx = b.leftSE.point.x;\n    const arx = a.rightSE.point.x;\n    const brx = b.rightSE.point.x;\n\n    // check if they're even in the same vertical plane\n    if (brx < alx) return 1;\n    if (arx < blx) return -1;\n    const aly = a.leftSE.point.y;\n    const bly = b.leftSE.point.y;\n    const ary = a.rightSE.point.y;\n    const bry = b.rightSE.point.y;\n\n    // is left endpoint of segment B the right-more?\n    if (alx < blx) {\n      // are the two segments in the same horizontal plane?\n      if (bly < aly && bly < ary) return 1;\n      if (bly > aly && bly > ary) return -1;\n\n      // is the B left endpoint colinear to segment A?\n      const aCmpBLeft = a.comparePoint(b.leftSE.point);\n      if (aCmpBLeft < 0) return 1;\n      if (aCmpBLeft > 0) return -1;\n\n      // is the A right endpoint colinear to segment B ?\n      const bCmpARight = b.comparePoint(a.rightSE.point);\n      if (bCmpARight !== 0) return bCmpARight;\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return -1;\n    }\n\n    // is left endpoint of segment A the right-more?\n    if (alx > blx) {\n      if (aly < bly && aly < bry) return -1;\n      if (aly > bly && aly > bry) return 1;\n\n      // is the A left endpoint colinear to segment B?\n      const bCmpALeft = b.comparePoint(a.leftSE.point);\n      if (bCmpALeft !== 0) return bCmpALeft;\n\n      // is the B right endpoint colinear to segment A?\n      const aCmpBRight = a.comparePoint(b.rightSE.point);\n      if (aCmpBRight < 0) return 1;\n      if (aCmpBRight > 0) return -1;\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return 1;\n    }\n\n    // if we get here, the two left endpoints are in the same\n    // vertical plane, ie alx === blx\n\n    // consider the lower left-endpoint to come first\n    if (aly < bly) return -1;\n    if (aly > bly) return 1;\n\n    // left endpoints are identical\n    // check for colinearity by using the left-more right endpoint\n\n    // is the A right endpoint more left-more?\n    if (arx < brx) {\n      const bCmpARight = b.comparePoint(a.rightSE.point);\n      if (bCmpARight !== 0) return bCmpARight;\n    }\n\n    // is the B right endpoint more left-more?\n    if (arx > brx) {\n      const aCmpBRight = a.comparePoint(b.rightSE.point);\n      if (aCmpBRight < 0) return 1;\n      if (aCmpBRight > 0) return -1;\n    }\n    if (arx !== brx) {\n      // are these two [almost] vertical segments with opposite orientation?\n      // if so, the one with the lower right endpoint comes first\n      const ay = ary - aly;\n      const ax = arx - alx;\n      const by = bry - bly;\n      const bx = brx - blx;\n      if (ay > ax && by < bx) return 1;\n      if (ay < ax && by > bx) return -1;\n    }\n\n    // we have colinear segments with matching orientation\n    // consider the one with more left-more right endpoint to be first\n    if (arx > brx) return 1;\n    if (arx < brx) return -1;\n\n    // if we get here, two two right endpoints are in the same\n    // vertical plane, ie arx === brx\n\n    // consider the lower right-endpoint to come first\n    if (ary < bry) return -1;\n    if (ary > bry) return 1;\n\n    // right endpoints identical as well, so the segments are idential\n    // fall back on creation order as consistent tie-breaker\n    if (a.id < b.id) return -1;\n    if (a.id > b.id) return 1;\n\n    // identical segment, ie a === b\n    return 0;\n  }\n\n  /* Warning: a reference to ringWindings input will be stored,\n   *  and possibly will be later modified */\n  constructor(leftSE, rightSE, rings, windings) {\n    this.id = ++segmentId;\n    this.leftSE = leftSE;\n    leftSE.segment = this;\n    leftSE.otherSE = rightSE;\n    this.rightSE = rightSE;\n    rightSE.segment = this;\n    rightSE.otherSE = leftSE;\n    this.rings = rings;\n    this.windings = windings;\n    // left unset for performance, set later in algorithm\n    // this.ringOut, this.consumedBy, this.prev\n  }\n  static fromRing(pt1, pt2, ring) {\n    let leftPt, rightPt, winding;\n\n    // ordering the two points according to sweep line ordering\n    const cmpPts = SweepEvent.comparePoints(pt1, pt2);\n    if (cmpPts < 0) {\n      leftPt = pt1;\n      rightPt = pt2;\n      winding = 1;\n    } else if (cmpPts > 0) {\n      leftPt = pt2;\n      rightPt = pt1;\n      winding = -1;\n    } else throw new Error(`Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`);\n    const leftSE = new SweepEvent(leftPt, true);\n    const rightSE = new SweepEvent(rightPt, false);\n    return new Segment(leftSE, rightSE, [ring], [winding]);\n  }\n\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE(newRightSE) {\n    this.rightSE = newRightSE;\n    this.rightSE.segment = this;\n    this.rightSE.otherSE = this.leftSE;\n    this.leftSE.otherSE = this.rightSE;\n  }\n  bbox() {\n    const y1 = this.leftSE.point.y;\n    const y2 = this.rightSE.point.y;\n    return {\n      ll: {\n        x: this.leftSE.point.x,\n        y: y1 < y2 ? y1 : y2\n      },\n      ur: {\n        x: this.rightSE.point.x,\n        y: y1 > y2 ? y1 : y2\n      }\n    };\n  }\n\n  /* A vector from the left point to the right */\n  vector() {\n    return {\n      x: this.rightSE.point.x - this.leftSE.point.x,\n      y: this.rightSE.point.y - this.leftSE.point.y\n    };\n  }\n  isAnEndpoint(pt) {\n    return pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y || pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y;\n  }\n\n  /* Compare this segment with a point.\n   *\n   * A point P is considered to be colinear to a segment if there\n   * exists a distance D such that if we travel along the segment\n   * from one * endpoint towards the other a distance D, we find\n   * ourselves at point P.\n   *\n   * Return value indicates:\n   *\n   *   1: point lies above the segment (to the left of vertical)\n   *   0: point is colinear to segment\n   *  -1: point lies below the segment (to the right of vertical)\n   */\n  comparePoint(point) {\n    if (this.isAnEndpoint(point)) return 0;\n    const lPt = this.leftSE.point;\n    const rPt = this.rightSE.point;\n    const v = this.vector();\n\n    // Exactly vertical segments.\n    if (lPt.x === rPt.x) {\n      if (point.x === lPt.x) return 0;\n      return point.x < lPt.x ? 1 : -1;\n    }\n\n    // Nearly vertical segments with an intersection.\n    // Check to see where a point on the line with matching Y coordinate is.\n    const yDist = (point.y - lPt.y) / v.y;\n    const xFromYDist = lPt.x + yDist * v.x;\n    if (point.x === xFromYDist) return 0;\n\n    // General case.\n    // Check to see where a point on the line with matching X coordinate is.\n    const xDist = (point.x - lPt.x) / v.x;\n    const yFromXDist = lPt.y + xDist * v.y;\n    if (point.y === yFromXDist) return 0;\n    return point.y < yFromXDist ? -1 : 1;\n  }\n\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection(other) {\n    // If bboxes don't overlap, there can't be any intersections\n    const tBbox = this.bbox();\n    const oBbox = other.bbox();\n    const bboxOverlap = getBboxOverlap(tBbox, oBbox);\n    if (bboxOverlap === null) return null;\n\n    // We first check to see if the endpoints can be considered intersections.\n    // This will 'snap' intersections to endpoints if possible, and will\n    // handle cases of colinearity.\n\n    const tlp = this.leftSE.point;\n    const trp = this.rightSE.point;\n    const olp = other.leftSE.point;\n    const orp = other.rightSE.point;\n\n    // does each endpoint touch the other segment?\n    // note that we restrict the 'touching' definition to only allow segments\n    // to touch endpoints that lie forward from where we are in the sweep line pass\n    const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0;\n    const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0;\n    const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0;\n    const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0;\n\n    // do left endpoints match?\n    if (touchesThisLSE && touchesOtherLSE) {\n      // these two cases are for colinear segments with matching left\n      // endpoints, and one segment being longer than the other\n      if (touchesThisRSE && !touchesOtherRSE) return trp;\n      if (!touchesThisRSE && touchesOtherRSE) return orp;\n      // either the two segments match exactly (two trival intersections)\n      // or just on their left endpoint (one trivial intersection\n      return null;\n    }\n\n    // does this left endpoint matches (other doesn't)\n    if (touchesThisLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesOtherRSE) {\n        if (tlp.x === orp.x && tlp.y === orp.y) return null;\n      }\n      // t-intersection on left endpoint\n      return tlp;\n    }\n\n    // does other left endpoint matches (this doesn't)\n    if (touchesOtherLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesThisRSE) {\n        if (trp.x === olp.x && trp.y === olp.y) return null;\n      }\n      // t-intersection on left endpoint\n      return olp;\n    }\n\n    // trivial intersection on right endpoints\n    if (touchesThisRSE && touchesOtherRSE) return null;\n\n    // t-intersections on just one right endpoint\n    if (touchesThisRSE) return trp;\n    if (touchesOtherRSE) return orp;\n\n    // None of our endpoints intersect. Look for a general intersection between\n    // infinite lines laid over the segments\n    const pt = intersection$1(tlp, this.vector(), olp, other.vector());\n\n    // are the segments parrallel? Note that if they were colinear with overlap,\n    // they would have an endpoint intersection and that case was already handled above\n    if (pt === null) return null;\n\n    // is the intersection found between the lines not on the segments?\n    if (!isInBbox(bboxOverlap, pt)) return null;\n\n    // round the the computed point if needed\n    return rounder.round(pt.x, pt.y);\n  }\n\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split(point) {\n    const newEvents = [];\n    const alreadyLinked = point.events !== undefined;\n    const newLeftSE = new SweepEvent(point, true);\n    const newRightSE = new SweepEvent(point, false);\n    const oldRightSE = this.rightSE;\n    this.replaceRightSE(newRightSE);\n    newEvents.push(newRightSE);\n    newEvents.push(newLeftSE);\n    const newSeg = new Segment(newLeftSE, oldRightSE, this.rings.slice(), this.windings.slice());\n\n    // when splitting a nearly vertical downward-facing segment,\n    // sometimes one of the resulting new segments is vertical, in which\n    // case its left and right events may need to be swapped\n    if (SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0) {\n      newSeg.swapEvents();\n    }\n    if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {\n      this.swapEvents();\n    }\n\n    // in the point we just used to create new sweep events with was already\n    // linked to other events, we need to check if either of the affected\n    // segments should be consumed\n    if (alreadyLinked) {\n      newLeftSE.checkForConsuming();\n      newRightSE.checkForConsuming();\n    }\n    return newEvents;\n  }\n\n  /* Swap which event is left and right */\n  swapEvents() {\n    const tmpEvt = this.rightSE;\n    this.rightSE = this.leftSE;\n    this.leftSE = tmpEvt;\n    this.leftSE.isLeft = true;\n    this.rightSE.isLeft = false;\n    for (let i = 0, iMax = this.windings.length; i < iMax; i++) {\n      this.windings[i] *= -1;\n    }\n  }\n\n  /* Consume another segment. We take their rings under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume(other) {\n    let consumer = this;\n    let consumee = other;\n    while (consumer.consumedBy) consumer = consumer.consumedBy;\n    while (consumee.consumedBy) consumee = consumee.consumedBy;\n    const cmp = Segment.compare(consumer, consumee);\n    if (cmp === 0) return; // already consumed\n    // the winner of the consumption is the earlier segment\n    // according to sweep line ordering\n    if (cmp > 0) {\n      const tmp = consumer;\n      consumer = consumee;\n      consumee = tmp;\n    }\n\n    // make sure a segment doesn't consume it's prev\n    if (consumer.prev === consumee) {\n      const tmp = consumer;\n      consumer = consumee;\n      consumee = tmp;\n    }\n    for (let i = 0, iMax = consumee.rings.length; i < iMax; i++) {\n      const ring = consumee.rings[i];\n      const winding = consumee.windings[i];\n      const index = consumer.rings.indexOf(ring);\n      if (index === -1) {\n        consumer.rings.push(ring);\n        consumer.windings.push(winding);\n      } else consumer.windings[index] += winding;\n    }\n    consumee.rings = null;\n    consumee.windings = null;\n    consumee.consumedBy = consumer;\n\n    // mark sweep events consumed as to maintain ordering in sweep event queue\n    consumee.leftSE.consumedBy = consumer.leftSE;\n    consumee.rightSE.consumedBy = consumer.rightSE;\n  }\n\n  /* The first segment previous segment chain that is in the result */\n  prevInResult() {\n    if (this._prevInResult !== undefined) return this._prevInResult;\n    if (!this.prev) this._prevInResult = null;else if (this.prev.isInResult()) this._prevInResult = this.prev;else this._prevInResult = this.prev.prevInResult();\n    return this._prevInResult;\n  }\n  beforeState() {\n    if (this._beforeState !== undefined) return this._beforeState;\n    if (!this.prev) this._beforeState = {\n      rings: [],\n      windings: [],\n      multiPolys: []\n    };else {\n      const seg = this.prev.consumedBy || this.prev;\n      this._beforeState = seg.afterState();\n    }\n    return this._beforeState;\n  }\n  afterState() {\n    if (this._afterState !== undefined) return this._afterState;\n    const beforeState = this.beforeState();\n    this._afterState = {\n      rings: beforeState.rings.slice(0),\n      windings: beforeState.windings.slice(0),\n      multiPolys: []\n    };\n    const ringsAfter = this._afterState.rings;\n    const windingsAfter = this._afterState.windings;\n    const mpsAfter = this._afterState.multiPolys;\n\n    // calculate ringsAfter, windingsAfter\n    for (let i = 0, iMax = this.rings.length; i < iMax; i++) {\n      const ring = this.rings[i];\n      const winding = this.windings[i];\n      const index = ringsAfter.indexOf(ring);\n      if (index === -1) {\n        ringsAfter.push(ring);\n        windingsAfter.push(winding);\n      } else windingsAfter[index] += winding;\n    }\n\n    // calcualte polysAfter\n    const polysAfter = [];\n    const polysExclude = [];\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      if (windingsAfter[i] === 0) continue; // non-zero rule\n      const ring = ringsAfter[i];\n      const poly = ring.poly;\n      if (polysExclude.indexOf(poly) !== -1) continue;\n      if (ring.isExterior) polysAfter.push(poly);else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly);\n        const index = polysAfter.indexOf(ring.poly);\n        if (index !== -1) polysAfter.splice(index, 1);\n      }\n    }\n\n    // calculate multiPolysAfter\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly;\n      if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp);\n    }\n    return this._afterState;\n  }\n\n  /* Is this segment part of the final result? */\n  isInResult() {\n    // if we've been consumed, we're not in the result\n    if (this.consumedBy) return false;\n    if (this._isInResult !== undefined) return this._isInResult;\n    const mpsBefore = this.beforeState().multiPolys;\n    const mpsAfter = this.afterState().multiPolys;\n    switch (operation.type) {\n      case \"union\":\n        {\n          // UNION - included iff:\n          //  * On one side of us there is 0 poly interiors AND\n          //  * On the other side there is 1 or more.\n          const noBefores = mpsBefore.length === 0;\n          const noAfters = mpsAfter.length === 0;\n          this._isInResult = noBefores !== noAfters;\n          break;\n        }\n      case \"intersection\":\n        {\n          // INTERSECTION - included iff:\n          //  * on one side of us all multipolys are rep. with poly interiors AND\n          //  * on the other side of us, not all multipolys are repsented\n          //    with poly interiors\n          let least;\n          let most;\n          if (mpsBefore.length < mpsAfter.length) {\n            least = mpsBefore.length;\n            most = mpsAfter.length;\n          } else {\n            least = mpsAfter.length;\n            most = mpsBefore.length;\n          }\n          this._isInResult = most === operation.numMultiPolys && least < most;\n          break;\n        }\n      case \"xor\":\n        {\n          // XOR - included iff:\n          //  * the difference between the number of multipolys represented\n          //    with poly interiors on our two sides is an odd number\n          const diff = Math.abs(mpsBefore.length - mpsAfter.length);\n          this._isInResult = diff % 2 === 1;\n          break;\n        }\n      case \"difference\":\n        {\n          // DIFFERENCE included iff:\n          //  * on exactly one side, we have just the subject\n          const isJustSubject = mps => mps.length === 1 && mps[0].isSubject;\n          this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);\n          break;\n        }\n      default:\n        throw new Error(`Unrecognized operation type found ${operation.type}`);\n    }\n    return this._isInResult;\n  }\n}\n\nclass RingIn {\n  constructor(geomRing, poly, isExterior) {\n    if (!Array.isArray(geomRing) || geomRing.length === 0) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    this.poly = poly;\n    this.isExterior = isExterior;\n    this.segments = [];\n    if (typeof geomRing[0][0] !== \"number\" || typeof geomRing[0][1] !== \"number\") {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    const firstPoint = rounder.round(geomRing[0][0], geomRing[0][1]);\n    this.bbox = {\n      ll: {\n        x: firstPoint.x,\n        y: firstPoint.y\n      },\n      ur: {\n        x: firstPoint.x,\n        y: firstPoint.y\n      }\n    };\n    let prevPoint = firstPoint;\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      if (typeof geomRing[i][0] !== \"number\" || typeof geomRing[i][1] !== \"number\") {\n        throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n      }\n      let point = rounder.round(geomRing[i][0], geomRing[i][1]);\n      // skip repeated points\n      if (point.x === prevPoint.x && point.y === prevPoint.y) continue;\n      this.segments.push(Segment.fromRing(prevPoint, point, this));\n      if (point.x < this.bbox.ll.x) this.bbox.ll.x = point.x;\n      if (point.y < this.bbox.ll.y) this.bbox.ll.y = point.y;\n      if (point.x > this.bbox.ur.x) this.bbox.ur.x = point.x;\n      if (point.y > this.bbox.ur.y) this.bbox.ur.y = point.y;\n      prevPoint = point;\n    }\n    // add segment from last to first if last is not the same as first\n    if (firstPoint.x !== prevPoint.x || firstPoint.y !== prevPoint.y) {\n      this.segments.push(Segment.fromRing(prevPoint, firstPoint, this));\n    }\n  }\n  getSweepEvents() {\n    const sweepEvents = [];\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i];\n      sweepEvents.push(segment.leftSE);\n      sweepEvents.push(segment.rightSE);\n    }\n    return sweepEvents;\n  }\n}\nclass PolyIn {\n  constructor(geomPoly, multiPoly) {\n    if (!Array.isArray(geomPoly)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    this.exteriorRing = new RingIn(geomPoly[0], this, true);\n    // copy by value\n    this.bbox = {\n      ll: {\n        x: this.exteriorRing.bbox.ll.x,\n        y: this.exteriorRing.bbox.ll.y\n      },\n      ur: {\n        x: this.exteriorRing.bbox.ur.x,\n        y: this.exteriorRing.bbox.ur.y\n      }\n    };\n    this.interiorRings = [];\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      const ring = new RingIn(geomPoly[i], this, false);\n      if (ring.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = ring.bbox.ll.x;\n      if (ring.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = ring.bbox.ll.y;\n      if (ring.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = ring.bbox.ur.x;\n      if (ring.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = ring.bbox.ur.y;\n      this.interiorRings.push(ring);\n    }\n    this.multiPoly = multiPoly;\n  }\n  getSweepEvents() {\n    const sweepEvents = this.exteriorRing.getSweepEvents();\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents();\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j]);\n      }\n    }\n    return sweepEvents;\n  }\n}\nclass MultiPolyIn {\n  constructor(geom, isSubject) {\n    if (!Array.isArray(geom)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    try {\n      // if the input looks like a polygon, convert it to a multipolygon\n      if (typeof geom[0][0][0] === \"number\") geom = [geom];\n    } catch (ex) {\n      // The input is either malformed or has empty arrays.\n      // In either case, it will be handled later on.\n    }\n    this.polys = [];\n    this.bbox = {\n      ll: {\n        x: Number.POSITIVE_INFINITY,\n        y: Number.POSITIVE_INFINITY\n      },\n      ur: {\n        x: Number.NEGATIVE_INFINITY,\n        y: Number.NEGATIVE_INFINITY\n      }\n    };\n    for (let i = 0, iMax = geom.length; i < iMax; i++) {\n      const poly = new PolyIn(geom[i], this);\n      if (poly.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = poly.bbox.ll.x;\n      if (poly.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = poly.bbox.ll.y;\n      if (poly.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = poly.bbox.ur.x;\n      if (poly.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = poly.bbox.ur.y;\n      this.polys.push(poly);\n    }\n    this.isSubject = isSubject;\n  }\n  getSweepEvents() {\n    const sweepEvents = [];\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents();\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j]);\n      }\n    }\n    return sweepEvents;\n  }\n}\n\nclass RingOut {\n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory(allSegments) {\n    const ringsOut = [];\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i];\n      if (!segment.isInResult() || segment.ringOut) continue;\n      let prevEvent = null;\n      let event = segment.leftSE;\n      let nextEvent = segment.rightSE;\n      const events = [event];\n      const startingPoint = event.point;\n      const intersectionLEs = [];\n\n      /* Walk the chain of linked events to form a closed ring */\n      while (true) {\n        prevEvent = event;\n        event = nextEvent;\n        events.push(event);\n\n        /* Is the ring complete? */\n        if (event.point === startingPoint) break;\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents();\n\n          /* Did we hit a dead end? This shouldn't happen.\n           * Indicates some earlier part of the algorithm malfunctioned. */\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point;\n            const lastPt = events[events.length - 1].point;\n            throw new Error(`Unable to complete output ring starting at [${firstPt.x},` + ` ${firstPt.y}]. Last matching segment found ends at` + ` [${lastPt.x}, ${lastPt.y}].`);\n          }\n\n          /* Only one way to go, so cotinue on the path */\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE;\n            break;\n          }\n\n          /* We must have an intersection. Check for a completed loop */\n          let indexLE = null;\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j;\n              break;\n            }\n          }\n          /* Found a completed loop. Cut that off and make a ring */\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0];\n            const ringEvents = events.splice(intersectionLE.index);\n            ringEvents.unshift(ringEvents[0].otherSE);\n            ringsOut.push(new RingOut(ringEvents.reverse()));\n            continue;\n          }\n          /* register the intersection */\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point\n          });\n          /* Choose the left-most option to continue the walk */\n          const comparator = event.getLeftmostComparator(prevEvent);\n          nextEvent = availableLEs.sort(comparator)[0].otherSE;\n          break;\n        }\n      }\n      ringsOut.push(new RingOut(events));\n    }\n    return ringsOut;\n  }\n  constructor(events) {\n    this.events = events;\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this;\n    }\n    this.poly = null;\n  }\n  getGeom() {\n    // Remove superfluous points (ie extra points along a straight line),\n    let prevPt = this.events[0].point;\n    const points = [prevPt];\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt = this.events[i].point;\n      const nextPt = this.events[i + 1].point;\n      if (compareVectorAngles(pt, prevPt, nextPt) === 0) continue;\n      points.push(pt);\n      prevPt = pt;\n    }\n\n    // ring was all (within rounding error of angle calc) colinear points\n    if (points.length === 1) return null;\n\n    // check if the starting point is necessary\n    const pt = points[0];\n    const nextPt = points[1];\n    if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift();\n    points.push(points[0]);\n    const step = this.isExteriorRing() ? 1 : -1;\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1;\n    const iEnd = this.isExteriorRing() ? points.length : -1;\n    const orderedPoints = [];\n    for (let i = iStart; i != iEnd; i += step) orderedPoints.push([points[i].x, points[i].y]);\n    return orderedPoints;\n  }\n  isExteriorRing() {\n    if (this._isExteriorRing === undefined) {\n      const enclosing = this.enclosingRing();\n      this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;\n    }\n    return this._isExteriorRing;\n  }\n  enclosingRing() {\n    if (this._enclosingRing === undefined) {\n      this._enclosingRing = this._calcEnclosingRing();\n    }\n    return this._enclosingRing;\n  }\n\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing() {\n    // start with the ealier sweep line event so that the prevSeg\n    // chain doesn't lead us inside of a loop of ours\n    let leftMostEvt = this.events[0];\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i];\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;\n    }\n    let prevSeg = leftMostEvt.segment.prevInResult();\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n    while (true) {\n      // no segment found, thus no ring can enclose us\n      if (!prevSeg) return null;\n\n      // no segments below prev segment found, thus the ring of the prev\n      // segment must loop back around and enclose us\n      if (!prevPrevSeg) return prevSeg.ringOut;\n\n      // if the two segments are of different rings, the ring of the prev\n      // segment must either loop around us or the ring of the prev prev\n      // seg, which would make us and the ring of the prev peers\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n          return prevSeg.ringOut;\n        } else return prevSeg.ringOut.enclosingRing();\n      }\n\n      // two segments are from the same ring, so this was a penisula\n      // of that ring. iterate downward, keep searching\n      prevSeg = prevPrevSeg.prevInResult();\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n    }\n  }\n}\nclass PolyOut {\n  constructor(exteriorRing) {\n    this.exteriorRing = exteriorRing;\n    exteriorRing.poly = this;\n    this.interiorRings = [];\n  }\n  addInterior(ring) {\n    this.interiorRings.push(ring);\n    ring.poly = this;\n  }\n  getGeom() {\n    const geom = [this.exteriorRing.getGeom()];\n    // exterior ring was all (within rounding error of angle calc) colinear points\n    if (geom[0] === null) return null;\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom();\n      // interior ring was all (within rounding error of angle calc) colinear points\n      if (ringGeom === null) continue;\n      geom.push(ringGeom);\n    }\n    return geom;\n  }\n}\nclass MultiPolyOut {\n  constructor(rings) {\n    this.rings = rings;\n    this.polys = this._composePolys(rings);\n  }\n  getGeom() {\n    const geom = [];\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom();\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (polyGeom === null) continue;\n      geom.push(polyGeom);\n    }\n    return geom;\n  }\n  _composePolys(rings) {\n    const polys = [];\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i];\n      if (ring.poly) continue;\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring));else {\n        const enclosingRing = ring.enclosingRing();\n        if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing));\n        enclosingRing.poly.addInterior(ring);\n      }\n    }\n    return polys;\n  }\n}\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nclass SweepLine {\n  constructor(queue) {\n    let comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Segment.compare;\n    this.queue = queue;\n    this.tree = new SplayTree(comparator);\n    this.segments = [];\n  }\n  process(event) {\n    const segment = event.segment;\n    const newEvents = [];\n\n    // if we've already been consumed by another segment,\n    // clean up our body parts and get out\n    if (event.consumedBy) {\n      if (event.isLeft) this.queue.remove(event.otherSE);else this.tree.remove(segment);\n      return newEvents;\n    }\n    const node = event.isLeft ? this.tree.add(segment) : this.tree.find(segment);\n    if (!node) throw new Error(`Unable to find segment #${segment.id} ` + `[${segment.leftSE.point.x}, ${segment.leftSE.point.y}] -> ` + `[${segment.rightSE.point.x}, ${segment.rightSE.point.y}] ` + \"in SweepLine tree.\");\n    let prevNode = node;\n    let nextNode = node;\n    let prevSeg = undefined;\n    let nextSeg = undefined;\n\n    // skip consumed segments still in tree\n    while (prevSeg === undefined) {\n      prevNode = this.tree.prev(prevNode);\n      if (prevNode === null) prevSeg = null;else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key;\n    }\n\n    // skip consumed segments still in tree\n    while (nextSeg === undefined) {\n      nextNode = this.tree.next(nextNode);\n      if (nextNode === null) nextSeg = null;else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key;\n    }\n    if (event.isLeft) {\n      // Check for intersections against the previous segment in the sweep line\n      let prevMySplitter = null;\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment);\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter;\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n        }\n      }\n\n      // Check for intersections against the next segment in the sweep line\n      let nextMySplitter = null;\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment);\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter;\n          if (!nextSeg.isAnEndpoint(nextInter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n        }\n      }\n\n      // For simplicity, even if we find more than one intersection we only\n      // spilt on the 'earliest' (sweep-line style) of the intersections.\n      // The other intersection will be handled in a future process().\n      if (prevMySplitter !== null || nextMySplitter !== null) {\n        let mySplitter = null;\n        if (prevMySplitter === null) mySplitter = nextMySplitter;else if (nextMySplitter === null) mySplitter = prevMySplitter;else {\n          const cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);\n          mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter;\n        }\n\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        this.queue.remove(segment.rightSE);\n        newEvents.push(segment.rightSE);\n        const newEventsFromSplit = segment.split(mySplitter);\n        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n          newEvents.push(newEventsFromSplit[i]);\n        }\n      }\n      if (newEvents.length > 0) {\n        // We found some intersections, so re-do the current event to\n        // make sure sweep line ordering is totally consistent for later\n        // use with the segment 'prev' pointers\n        this.tree.remove(segment);\n        newEvents.push(event);\n      } else {\n        // done with left event\n        this.segments.push(segment);\n        segment.prev = prevSeg;\n      }\n    } else {\n      // event.isRight\n\n      // since we're about to be removed from the sweep line, check for\n      // intersections between our previous and next segments\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg);\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n        }\n      }\n      this.tree.remove(segment);\n    }\n    return newEvents;\n  }\n\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg, pt) {\n    // Rounding errors can cause changes in ordering,\n    // so remove afected segments and right sweep events before splitting\n    // removeNode() doesn't work, so have re-find the seg\n    // https://github.com/w8r/splay-tree/pull/5\n    this.tree.remove(seg);\n    const rightSE = seg.rightSE;\n    this.queue.remove(rightSE);\n    const newEvents = seg.split(pt);\n    newEvents.push(rightSE);\n    // splitting can trigger consumption\n    if (seg.consumedBy === undefined) this.tree.add(seg);\n    return newEvents;\n  }\n}\n\n// Limits on iterative processes to prevent infinite loops - usually caused by floating-point math round-off errors.\nconst POLYGON_CLIPPING_MAX_QUEUE_SIZE = typeof process !== \"undefined\" && process.env.POLYGON_CLIPPING_MAX_QUEUE_SIZE || 1000000;\nconst POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS = typeof process !== \"undefined\" && process.env.POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS || 1000000;\nclass Operation {\n  run(type, geom, moreGeoms) {\n    operation.type = type;\n    rounder.reset();\n\n    /* Convert inputs to MultiPoly objects */\n    const multipolys = [new MultiPolyIn(geom, true)];\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      multipolys.push(new MultiPolyIn(moreGeoms[i], false));\n    }\n    operation.numMultiPolys = multipolys.length;\n\n    /* BBox optimization for difference operation\n     * If the bbox of a multipolygon that's part of the clipping doesn't\n     * intersect the bbox of the subject at all, we can just drop that\n     * multiploygon. */\n    if (operation.type === \"difference\") {\n      // in place removal\n      const subject = multipolys[0];\n      let i = 1;\n      while (i < multipolys.length) {\n        if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null) i++;else multipolys.splice(i, 1);\n      }\n    }\n\n    /* BBox optimization for intersection operation\n     * If we can find any pair of multipolygons whose bbox does not overlap,\n     * then the result will be empty. */\n    if (operation.type === \"intersection\") {\n      // TODO: this is O(n^2) in number of polygons. By sorting the bboxes,\n      //       it could be optimized to O(n * ln(n))\n      for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n        const mpA = multipolys[i];\n        for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {\n          if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return [];\n        }\n      }\n    }\n\n    /* Put segment endpoints in a priority queue */\n    const queue = new SplayTree(SweepEvent.compare);\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents();\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.insert(sweepEvents[j]);\n        if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {\n          // prevents an infinite loop, an otherwise common manifestation of bugs\n          throw new Error(\"Infinite loop when putting segment endpoints in a priority queue \" + \"(queue size too big).\");\n        }\n      }\n    }\n\n    /* Pass the sweep line over those endpoints */\n    const sweepLine = new SweepLine(queue);\n    let prevQueueSize = queue.size;\n    let node = queue.pop();\n    while (node) {\n      const evt = node.key;\n      if (queue.size === prevQueueSize) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        const seg = evt.segment;\n        throw new Error(`Unable to pop() ${evt.isLeft ? \"left\" : \"right\"} SweepEvent ` + `[${evt.point.x}, ${evt.point.y}] from segment #${seg.id} ` + `[${seg.leftSE.point.x}, ${seg.leftSE.point.y}] -> ` + `[${seg.rightSE.point.x}, ${seg.rightSE.point.y}] from queue.`);\n      }\n      if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\"Infinite loop when passing sweep line over endpoints \" + \"(queue size too big).\");\n      }\n      if (sweepLine.segments.length > POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\"Infinite loop when passing sweep line over endpoints \" + \"(too many sweep line segments).\");\n      }\n      const newEvents = sweepLine.process(evt);\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        const evt = newEvents[i];\n        if (evt.consumedBy === undefined) queue.insert(evt);\n      }\n      prevQueueSize = queue.size;\n      node = queue.pop();\n    }\n\n    // free some memory we don't need anymore\n    rounder.reset();\n\n    /* Collect and compile segments we're keeping into a multipolygon */\n    const ringsOut = RingOut.factory(sweepLine.segments);\n    const result = new MultiPolyOut(ringsOut);\n    return result.getGeom();\n  }\n}\n\n// singleton available by import\nconst operation = new Operation();\n\nconst union = function (geom) {\n  for (var _len = arguments.length, moreGeoms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    moreGeoms[_key - 1] = arguments[_key];\n  }\n  return operation.run(\"union\", geom, moreGeoms);\n};\nconst intersection = function (geom) {\n  for (var _len2 = arguments.length, moreGeoms = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    moreGeoms[_key2 - 1] = arguments[_key2];\n  }\n  return operation.run(\"intersection\", geom, moreGeoms);\n};\nconst xor = function (geom) {\n  for (var _len3 = arguments.length, moreGeoms = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    moreGeoms[_key3 - 1] = arguments[_key3];\n  }\n  return operation.run(\"xor\", geom, moreGeoms);\n};\nconst difference = function (subjectGeom) {\n  for (var _len4 = arguments.length, clippingGeoms = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    clippingGeoms[_key4 - 1] = arguments[_key4];\n  }\n  return operation.run(\"difference\", subjectGeom, clippingGeoms);\n};\nvar index = {\n  union: union,\n  intersection: intersection,\n  xor: xor,\n  difference: difference\n};\n\nexport { index as default };\n", "import { Polygon, MultiPolygon, Feature, FeatureCollection } from \"geojson\";\nimport polygonClipping, { Geom } from \"polygon-clipping\";\nimport { polygon, multiPolygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\n\n/**\n * Finds the difference between multiple {@link Polygon|polygons} by clipping the subsequent polygon from the first.\n *\n * @name difference\n * @param {FeatureCollection<Polygon|MultiPolygon>} features input Polygon features\n * @returns {Feature<Polygon|MultiPolygon>|null} a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)\n * @example\n * var polygon1 = turf.polygon([[\n *   [128, -26],\n *   [141, -26],\n *   [141, -21],\n *   [128, -21],\n *   [128, -26]\n * ]], {\n *   \"fill\": \"#F00\",\n *   \"fill-opacity\": 0.1\n * });\n * var polygon2 = turf.polygon([[\n *   [126, -28],\n *   [140, -28],\n *   [140, -20],\n *   [126, -20],\n *   [126, -28]\n * ]], {\n *   \"fill\": \"#00F\",\n *   \"fill-opacity\": 0.1\n * });\n *\n * var difference = turf.difference(turf.featureCollection([polygon1, polygon2]));\n *\n * //addToMap\n * var addToMap = [polygon1, polygon2, difference];\n */\nfunction difference(\n  features: FeatureCollection<Polygon | MultiPolygon>\n): Feature<Polygon | MultiPolygon> | null {\n  const geoms: Array<Geom> = [];\n\n  geomEach(features, (geom) => {\n    geoms.push(geom.coordinates as Geom);\n  });\n\n  if (geoms.length < 2) {\n    throw new Error(\"Must have at least two features\");\n  }\n\n  const properties = features.features[0].properties || {};\n\n  const differenced = polygonClipping.difference(geoms[0], ...geoms.slice(1));\n  if (differenced.length === 0) return null;\n  if (differenced.length === 1) return polygon(differenced[0], properties);\n  return multiPolygon(differenced, properties);\n}\n\nexport { difference };\nexport default difference;\n", "import { flattenEach } from \"@turf/meta\";\nimport { featureCollection } from \"@turf/helpers\";\nimport type { AllGeoJSON } from \"@turf/helpers\";\nimport type {\n  Feature,\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  FeatureCollection,\n  Polygon,\n  MultiPolygon,\n} from \"geojson\";\n\n/**\n * Flattens any {@link GeoJSON} to a {@link FeatureCollection} inspired by [geojson-flatten](https://github.com/tmcw/geojson-flatten).\n *\n * @name flatten\n * @param {GeoJSON} geojson any valid GeoJSON Object\n * @returns {FeatureCollection<any>} all Multi-Geometries are flattened into single Features\n * @example\n * var multiGeometry = turf.multiPolygon([\n *   [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\n *   [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n *   [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\n * ]);\n *\n * var flatten = turf.flatten(multiGeometry);\n *\n * //addToMap\n * var addToMap = [flatten]\n */\nfunction flatten<T extends Point | MultiPoint>(\n  geojson: Feature<T> | FeatureCollection<T> | T\n): FeatureCollection<Point>;\n\nfunction flatten<T extends LineString | MultiLineString>(\n  geojson: Feature<T> | FeatureCollection<T> | T\n): FeatureCollection<LineString>;\n\nfunction flatten<T extends Polygon | MultiPolygon>(\n  geojson: Feature<T> | FeatureCollection<T> | T\n): FeatureCollection<Polygon>;\n\nfunction flatten(geojson: AllGeoJSON): FeatureCollection<any>;\n\nfunction flatten(geojson: AllGeoJSON): FeatureCollection {\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  var results: Feature[] = [];\n  flattenEach(geojson, function (feature) {\n    results.push(feature);\n  });\n  return featureCollection(results);\n}\n\nexport { flatten };\nexport default flatten;\n", "import { Feature, FeatureCollection, Polygon } from \"geojson\";\nimport { featureCollection, isObject, multiPolygon } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { featureEach } from \"@turf/meta\";\nimport { flatten } from \"@turf/flatten\";\nimport polygonClipping, { Geom } from \"polygon-clipping\";\n\n/**\n * Dissolves a FeatureCollection of {@link polygon} features, filtered by an optional property name:value.\n * Note that {@link mulitpolygon} features within the collection are not supported\n *\n * @name dissolve\n * @param {FeatureCollection<Polygon>} featureCollection input feature collection to be dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.propertyName] features with the same `propertyName` value will be dissolved.\n * @returns {FeatureCollection<Polygon>} a FeatureCollection containing the dissolved polygons\n * @example\n * var features = turf.featureCollection([\n *   turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {combine: 'yes'}),\n *   turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {combine: 'yes'}),\n *   turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {combine: 'no'}),\n * ]);\n *\n * var dissolved = turf.dissolve(features, {propertyName: 'combine'});\n *\n * //addToMap\n * var addToMap = [features, dissolved]\n */\nfunction dissolve(\n  fc: FeatureCollection<Polygon>,\n  options: {\n    propertyName?: string;\n  } = {}\n): FeatureCollection<Polygon> {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const { propertyName } = options;\n\n  // Input validation\n  collectionOf(fc, \"Polygon\", \"dissolve\");\n\n  // Main\n  const outFeatures = [];\n  if (!propertyName) {\n    return flatten(\n      multiPolygon(\n        polygonClipping.union.apply(\n          null,\n          // List of polygons expressed as Position[][][] a.k.a. Geom[]\n          fc.features.map(function (f) {\n            return f.geometry.coordinates;\n          }) as [Geom, ...Geom[]]\n        )\n      )\n    );\n  } else {\n    // Group polygons by the value of their property named by propertyName\n    const uniquePropertyVals: { [key: string]: Feature[] } = {};\n    featureEach(fc, function (feature) {\n      if (feature.properties) {\n        if (\n          !Object.prototype.hasOwnProperty.call(\n            uniquePropertyVals,\n            feature.properties[propertyName]\n          )\n        ) {\n          uniquePropertyVals[feature.properties[propertyName]] =\n            [] as Feature[];\n        }\n        uniquePropertyVals[feature.properties[propertyName]].push(feature);\n      }\n    });\n    const vals = Object.keys(uniquePropertyVals);\n\n    // Export each group of polygons as a separate feature.\n    for (let i = 0; i < vals.length; i++) {\n      const mp = multiPolygon(\n        polygonClipping.union.apply(\n          null,\n          // List of polygons expressed as Position[][][] a.k.a. Geom[]\n          (uniquePropertyVals[vals[i]] as Feature<Polygon>[]).map(function (f) {\n            return f.geometry.coordinates;\n          }) as [Geom, ...Geom[]]\n        )\n      );\n      if (mp && mp.properties) {\n        mp.properties[propertyName] = vals[i];\n        outFeatures.push(mp);\n      }\n    }\n  }\n\n  return flatten(featureCollection(outFeatures));\n}\n\nexport { dissolve };\nexport default dissolve;\n", "import { Feature, FeatureCollection, Point } from \"geojson\";\nimport { centroid } from \"@turf/centroid\";\nimport { getCoord } from \"@turf/invariant\";\nimport { featureEach } from \"@turf/meta\";\n\n/**\n * calcualte the Minkowski p-norm distance between two features.\n * @param feature1 point feature\n * @param feature2 point feature\n * @param p p-norm 1=<p<=infinity 1: Manhattan distance 2: Euclidean distance\n */\nfunction pNormDistance(\n  feature1: Feature<Point>,\n  feature2: Feature<Point>,\n  p = 2\n): number {\n  const coordinate1 = getCoord(feature1);\n  const coordinate2 = getCoord(feature2);\n  const xDiff = coordinate1[0] - coordinate2[0];\n  const yDiff = coordinate1[1] - coordinate2[1];\n  if (p === 1) {\n    return Math.abs(xDiff) + Math.abs(yDiff);\n  }\n  return Math.pow(Math.pow(xDiff, p) + Math.pow(yDiff, p), 1 / p);\n}\n\n/**\n *\n *\n * @name distanceWeight\n * @param {FeatureCollection<any>} fc FeatureCollection.\n * @param {Object} [options] option object.\n * @param {number} [options.threshold=10000] If the distance between neighbor and\n * target features is greater than threshold, the weight of that neighbor is 0.\n * @param {number} [options.p=2] Minkowski p-norm distance parameter.\n * 1: Manhattan distance. 2: Euclidean distance. 1=<p<=infinity.\n * @param {boolean} [options.binary=false] If true, weight=1 if d <= threshold otherwise weight=0.\n *  If false, weight=Math.pow(d, alpha).\n * @param {number} [options.alpha=-1] distance decay parameter.\n * A big value means the weight decay quickly as distance increases.\n * @param {boolean} [options.standardization=false] row standardization.\n * @returns {Array<Array<number>>} distance weight matrix.\n * @example\n *\n * var bbox = [-65, 40, -63, 42];\n * var dataset = turf.randomPoint(100, { bbox: bbox });\n * var result = turf.distanceWeight(dataset);\n */\nfunction distanceWeight(\n  fc: FeatureCollection<any>,\n  options?: {\n    threshold?: number;\n    p?: number;\n    binary?: boolean;\n    alpha?: number;\n    standardization?: boolean;\n  }\n): number[][] {\n  options = options || {};\n  const threshold = options.threshold || 10000;\n  const p = options.p || 2;\n  const binary = options.binary ?? false;\n  const alpha = options.alpha || -1;\n  const rowTransform = options.standardization ?? false;\n\n  const features: Array<Feature<Point>> = [];\n  featureEach(fc, (feature) => {\n    features.push(centroid(feature));\n  });\n\n  // computing the distance between the features\n  const weights: number[][] = [];\n  for (let i = 0; i < features.length; i++) {\n    weights[i] = [];\n  }\n\n  for (let i = 0; i < features.length; i++) {\n    for (let j = i; j < features.length; j++) {\n      if (i === j) {\n        weights[i][j] = 0;\n      }\n      const dis = pNormDistance(features[i], features[j], p);\n      weights[i][j] = dis;\n      weights[j][i] = dis;\n    }\n  }\n\n  // binary or distance decay\n  for (let i = 0; i < features.length; i++) {\n    for (let j = 0; j < features.length; j++) {\n      const dis: number = weights[i][j];\n      if (dis === 0) {\n        continue;\n      }\n      if (binary) {\n        if (dis <= threshold) {\n          weights[i][j] = 1.0;\n        } else {\n          weights[i][j] = 0.0;\n        }\n      } else {\n        if (dis <= threshold) {\n          weights[i][j] = Math.pow(dis, alpha);\n        } else {\n          weights[i][j] = 0.0;\n        }\n      }\n    }\n  }\n\n  if (rowTransform) {\n    for (let i = 0; i < features.length; i++) {\n      const rowSum = weights[i].reduce((sum: number, currentVal: number) => {\n        return sum + currentVal;\n      }, 0);\n      for (let j = 0; j < features.length; j++) {\n        weights[i][j] = weights[i][j] / rowSum;\n      }\n    }\n  }\n\n  return weights;\n}\n\nexport { pNormDistance, distanceWeight };\nexport default distanceWeight;\n", "// https://en.wikipedia.org/wiki/Rhumb_line\nimport { Feature, Point, GeoJsonProperties } from \"geojson\";\nimport {\n  convertLength,\n  Coord,\n  degreesToRadians,\n  earthRadius,\n  point,\n  Units,\n} from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n/**\n * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the\n * origin Point with the (varant) given bearing.\n *\n * @name rhumbDestination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing varant bearing angle ranging from -180 to 180 degrees from north\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] translate properties to destination point\n * @returns {Feature<Point>} Destination point.\n * @example\n * var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.rhumbDestination(pt, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [pt, destination]\n * destination.properties['marker-color'] = '#00F';\n */\nfunction rhumbDestination<P extends GeoJsonProperties = GeoJsonProperties>(\n  origin: Coord,\n  distance: number,\n  bearing: number,\n  options: {\n    units?: Units;\n    properties?: P;\n  } = {}\n): Feature<Point, P> {\n  const wasNegativeDistance = distance < 0;\n  let distanceInMeters = convertLength(\n    Math.abs(distance),\n    options.units,\n    \"meters\"\n  );\n  if (wasNegativeDistance) distanceInMeters = -Math.abs(distanceInMeters);\n  const coords = getCoord(origin);\n  const destination = calculateRhumbDestination(\n    coords,\n    distanceInMeters,\n    bearing\n  );\n\n  // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n  destination[0] +=\n    destination[0] - coords[0] > 180\n      ? -360\n      : coords[0] - destination[0] > 180\n        ? 360\n        : 0;\n  return point(destination, options.properties);\n}\n\n/**\n * Returns the destination point having travelled along a rhumb line from origin point the given\n * distance on the  given bearing.\n * Adapted from Geodesy: http://www.movable-type.co.uk/scripts/latlong.html#rhumblines\n *\n * @private\n * @param   {Array<number>} origin - point\n * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).\n * @param   {number} bearing - Bearing in degrees from north.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {Array<number>} Destination point.\n */\nfunction calculateRhumbDestination(\n  origin: number[],\n  distance: number,\n  bearing: number,\n  radius?: number\n) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n\n  radius = radius === undefined ? earthRadius : Number(radius);\n\n  const delta = distance / radius; // angular distance in radians\n  const lambda1 = (origin[0] * Math.PI) / 180; // to radians, but without normalize to 𝜋\n  const phi1 = degreesToRadians(origin[1]);\n  const theta = degreesToRadians(bearing);\n\n  const DeltaPhi = delta * Math.cos(theta);\n  let phi2 = phi1 + DeltaPhi;\n\n  // check for some daft bugger going past the pole, normalise latitude if so\n  if (Math.abs(phi2) > Math.PI / 2) {\n    phi2 = phi2 > 0 ? Math.PI - phi2 : -Math.PI - phi2;\n  }\n\n  const DeltaPsi = Math.log(\n    Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4)\n  );\n  // E-W course becomes ill-conditioned with 0/0\n  const q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n\n  const DeltaLambda = (delta * Math.sin(theta)) / q;\n  const lambda2 = lambda1 + DeltaLambda;\n\n  return [\n    (((lambda2 * 180) / Math.PI + 540) % 360) - 180,\n    (phi2 * 180) / Math.PI,\n  ]; // normalise to −180..+180°\n}\n\nexport { rhumbDestination };\nexport default rhumbDestination;\n", "// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, Coord, earthRadius, Units } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n/**\n * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,\n * miles, or kilometers.\n *\n * @name rhumbDistance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.rhumbDistance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction rhumbDistance(\n  from: Coord,\n  to: Coord,\n  options: {\n    units?: Units;\n  } = {}\n): number {\n  const origin = getCoord(from);\n  const destination = getCoord(to);\n\n  // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n  destination[0] +=\n    destination[0] - origin[0] > 180\n      ? -360\n      : origin[0] - destination[0] > 180\n        ? 360\n        : 0;\n  const distanceInMeters = calculateRhumbDistance(origin, destination);\n  const distance = convertLength(distanceInMeters, \"meters\", options.units);\n  return distance;\n}\n\n/**\n * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} origin point.\n * @param   {Array<number>} destination point.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {number} Distance in km between this point and destination point (same units as radius).\n *\n * @example\n *     var p1 = new LatLon(51.127, 1.338);\n *     var p2 = new LatLon(50.964, 1.853);\n *     var d = p1.distanceTo(p2); // 40.31 km\n */\nfunction calculateRhumbDistance(\n  origin: number[],\n  destination: number[],\n  radius?: number\n) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n\n  radius = radius === undefined ? earthRadius : Number(radius);\n  // see www.edwilliams.org/avform.htm#Rhumb\n\n  const R = radius;\n  const phi1 = (origin[1] * Math.PI) / 180;\n  const phi2 = (destination[1] * Math.PI) / 180;\n  const DeltaPhi = phi2 - phi1;\n  let DeltaLambda = (Math.abs(destination[0] - origin[0]) * Math.PI) / 180;\n  // if dLon over 180° take shorter rhumb line across the anti-meridian:\n  if (DeltaLambda > Math.PI) {\n    DeltaLambda -= 2 * Math.PI;\n  }\n\n  // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'\n  // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it\n  const DeltaPsi = Math.log(\n    Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4)\n  );\n  const q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n\n  // distance is pythagoras on 'stretched' Mercator projection\n  const delta = Math.sqrt(\n    DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda\n  ); // angular distance in radians\n  const dist = delta * R;\n\n  return dist;\n}\n\nexport { rhumbDistance };\nexport default rhumbDistance;\n", "import { GeoJSON, GeometryCollection } from \"geojson\";\nimport { centroid } from \"@turf/centroid\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { clone } from \"@turf/clone\";\nimport { coordEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { isObject, Coord } from \"@turf/helpers\";\n\n/**\n * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point.\n *\n * @name transformRotate\n * @param {GeoJSON} geojson object to be rotated\n * @param {number} angle of rotation in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the rotated GeoJSON feature\n * @example\n * const poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * const options = {pivot: [0, 25]};\n * const rotatedPoly = turf.transformRotate(poly, 10, options);\n *\n * //addToMap\n * const addToMap = [poly, rotatedPoly];\n * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformRotate<T extends GeoJSON | GeometryCollection>(\n  geojson: T,\n  angle: number,\n  options?: {\n    pivot?: Coord;\n    mutate?: boolean;\n  }\n): T {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const pivot = options.pivot;\n  const mutate = options.mutate;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === undefined || angle === null || isNaN(angle))\n    throw new Error(\"angle is required\");\n\n  // Shortcut no-rotation\n  if (angle === 0) return geojson;\n\n  // Use centroid of GeoJSON if pivot is not provided\n  const pivotCoord = pivot ?? centroid(geojson);\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  // Rotate each coordinate\n  coordEach(geojson, function (pointCoords) {\n    const initialAngle = rhumbBearing(pivotCoord, pointCoords);\n    const finalAngle = initialAngle + angle;\n    const distance = rhumbDistance(pivotCoord, pointCoords);\n    const newCoords = getCoords(\n      rhumbDestination(pivotCoord, distance, finalAngle)\n    );\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\n\nexport { transformRotate };\nexport default transformRotate;\n", "import {\n  degreesToRadians,\n  polygon,\n  isObject,\n  isNumber,\n  Coord,\n  Units,\n} from \"@turf/helpers\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { transformRotate } from \"@turf/transform-rotate\";\nimport { getCoord } from \"@turf/invariant\";\nimport { GeoJsonProperties, Feature, Polygon } from \"geojson\";\n\n/**\n * Takes a {@link Point} and calculates the ellipse polygon given two semi-axes expressed in variable units and steps for precision.\n *\n * @param {Coord} center center point\n * @param {number} xSemiAxis semi (major) axis of the ellipse along the x-axis\n * @param {number} ySemiAxis semi (minor) axis of the ellipse along the y-axis\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.angle=0] angle of rotation in decimal degrees, positive clockwise\n * @param {Coord} [options.pivot=center] point around which any rotation will be performed\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] unit of measurement for axes\n * @param {Object} [options.properties={}] properties\n * @returns {Feature<Polygon>} ellipse polygon\n * @example\n * var center = [-75, 40];\n * var xSemiAxis = 5;\n * var ySemiAxis = 2;\n * var ellipse = turf.ellipse(center, xSemiAxis, ySemiAxis);\n *\n * //addToMap\n * var addToMap = [turf.point(center), ellipse]\n */\nfunction ellipse(\n  center: Coord,\n  xSemiAxis: number,\n  ySemiAxis: number,\n  options: {\n    steps?: number;\n    units?: Units;\n    angle?: number;\n    pivot?: Coord;\n    properties?: GeoJsonProperties;\n  }\n): Feature<Polygon> {\n  // Optional params\n  options = options || {};\n  const steps = options.steps || 64;\n  const units = options.units || \"kilometers\";\n  const angle = options.angle || 0;\n  const pivot = options.pivot || center;\n  const properties = options.properties || {};\n\n  // validation\n  if (!center) throw new Error(\"center is required\");\n  if (!xSemiAxis) throw new Error(\"xSemiAxis is required\");\n  if (!ySemiAxis) throw new Error(\"ySemiAxis is required\");\n  if (!isObject(options)) throw new Error(\"options must be an object\");\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\n  if (!isNumber(angle)) throw new Error(\"angle must be a number\");\n\n  const centerCoords = getCoord(center);\n  if (units !== \"degrees\") {\n    const xDest = rhumbDestination(center, xSemiAxis, 90, { units });\n    const yDest = rhumbDestination(center, ySemiAxis, 0, { units });\n    xSemiAxis = getCoord(xDest)[0] - centerCoords[0];\n    ySemiAxis = getCoord(yDest)[1] - centerCoords[1];\n  }\n\n  const coordinates: number[][] = [];\n  for (let i = 0; i < steps; i += 1) {\n    const stepAngle = (i * -360) / steps;\n    let x =\n      (xSemiAxis * ySemiAxis) /\n      Math.sqrt(\n        Math.pow(ySemiAxis, 2) +\n          Math.pow(xSemiAxis, 2) * Math.pow(getTanDeg(stepAngle), 2)\n      );\n    let y =\n      (xSemiAxis * ySemiAxis) /\n      Math.sqrt(\n        Math.pow(xSemiAxis, 2) +\n          Math.pow(ySemiAxis, 2) / Math.pow(getTanDeg(stepAngle), 2)\n      );\n\n    if (stepAngle < -90 && stepAngle >= -270) x = -x;\n    if (stepAngle < -180 && stepAngle >= -360) y = -y;\n    if (units === \"degrees\") {\n      const angleRad = degreesToRadians(angle);\n      const newx = x * Math.cos(angleRad) + y * Math.sin(angleRad);\n      const newy = y * Math.cos(angleRad) - x * Math.sin(angleRad);\n      x = newx;\n      y = newy;\n    }\n\n    coordinates.push([x + centerCoords[0], y + centerCoords[1]]);\n  }\n  coordinates.push(coordinates[0]);\n  if (units === \"degrees\") {\n    return polygon([coordinates], properties);\n  } else {\n    return transformRotate(polygon([coordinates], properties), angle, {\n      pivot,\n    });\n  }\n}\n\n/**\n * Get Tan Degrees\n *\n * @private\n * @param {number} deg Degrees\n * @returns {number} Tan Degrees\n */\nfunction getTanDeg(deg: number) {\n  const rad = (deg * Math.PI) / 180;\n  return Math.tan(rad);\n}\n\nexport { ellipse };\nexport default ellipse;\n", "import type { Feature, Polygon } from \"geojson\";\nimport type { AllGeoJSON } from \"@turf/helpers\";\nimport { bbox } from \"@turf/bbox\";\nimport { bboxPolygon } from \"@turf/bbox-polygon\";\n\n/**\n * Takes any number of features and returns a rectangular {@link Polygon} that encompasses all vertices.\n *\n * @name envelope\n * @param {GeoJSON} geojson input features\n * @returns {Feature<Polygon>} a rectangular Polygon feature that encompasses all vertices\n * @example\n * var features = turf.featureCollection([\n *   turf.point([-75.343, 39.984], {\"name\": \"Location A\"}),\n *   turf.point([-75.833, 39.284], {\"name\": \"Location B\"}),\n *   turf.point([-75.534, 39.123], {\"name\": \"Location C\"})\n * ]);\n *\n * var enveloped = turf.envelope(features);\n *\n * //addToMap\n * var addToMap = [features, enveloped];\n */\nfunction envelope(geojson: AllGeoJSON): Feature<Polygon> {\n  return bboxPolygon(bbox(geojson));\n}\n\nexport { envelope };\nexport default envelope;\n", "import { coordEach, featureEach } from \"@turf/meta\";\nimport { point, featureCollection } from \"@turf/helpers\";\nimport type { AllGeoJSON } from \"@turf/helpers\";\nimport type { Feature, FeatureCollection, Point } from \"geojson\";\n\n/**\n * Takes a feature or set of features and returns all positions as {@link Point|points}.\n *\n * @name explode\n * @param {GeoJSON} geojson input features\n * @returns {FeatureCollection<point>} points representing the exploded input features\n * @throws {Error} if it encounters an unknown geometry type\n * @example\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n *\n * var explode = turf.explode(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, explode]\n */\nfunction explode(geojson: AllGeoJSON): FeatureCollection<Point> {\n  const points: Feature<Point>[] = [];\n  if (geojson.type === \"FeatureCollection\") {\n    featureEach(geojson, function (feature) {\n      coordEach(feature, function (coord) {\n        points.push(point(coord, feature.properties));\n      });\n    });\n  } else if (geojson.type === \"Feature\") {\n    coordEach(geojson, function (coord) {\n      points.push(point(coord, geojson.properties));\n    });\n  } else {\n    // No properties to copy.\n    coordEach(geojson, function (coord) {\n      points.push(point(coord));\n    });\n  }\n\n  return featureCollection(points);\n}\n\nexport { explode };\nexport default explode;\n", "import { coordEach } from \"@turf/meta\";\nimport { isObject, AllGeoJSON } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\n\n/**\n * Takes input features and flips all of their coordinates from `[x, y]` to `[y, x]`.\n *\n * @name flip\n * @param {GeoJSON} geojson input features\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} a feature or set of features of the same type as `input` with flipped coordinates\n * @example\n * var serbia = turf.point([20.566406, 43.421008]);\n *\n * var saudiArabia = turf.flip(serbia);\n *\n * //addToMap\n * var addToMap = [serbia, saudiArabia];\n */\nfunction flip<T extends AllGeoJSON>(\n  geojson: T,\n  options?: {\n    mutate?: boolean;\n  }\n): T {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const mutate = options.mutate ?? false;\n\n  if (!geojson) throw new Error(\"geojson is required\");\n  // ensure that we don't modify features in-place and changes to the\n  // output do not change the previous feature, including changes to nested\n  // properties.\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  coordEach(geojson, function (coord) {\n    var x = coord[0];\n    var y = coord[1];\n    coord[0] = y;\n    coord[1] = x;\n  });\n  return geojson;\n}\n\nexport { flip };\nexport default flip;\n", "import { getCoord } from \"@turf/invariant\";\nimport { GreatCircle } from \"./lib/arc.js\";\n\n/**\n * Calculate great circles routes as {@link LineString} or {@link MultiLineString}.\n * If the `start` and `end` points span the antimeridian, the resulting feature will\n * be split into a `MultiLineString`.\n *\n * @name greatCircle\n * @param {Coord} start source point feature\n * @param {Coord} end destination point feature\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] line feature properties\n * @param {number} [options.npoints=100] number of points\n * @param {number} [options.offset=10] offset controls the likelyhood that lines will\n * be split which cross the dateline. The higher the number the more likely.\n * @returns {Feature<LineString | MultiLineString>} great circle line feature\n * @example\n * var start = turf.point([-122, 48]);\n * var end = turf.point([-77, 39]);\n *\n * var greatCircle = turf.greatCircle(start, end, {properties: {name: 'Seattle to DC'}});\n *\n * //addToMap\n * var addToMap = [start, end, greatCircle]\n */\nfunction greatCircle(start, end, options) {\n  // Optional parameters\n  options = options || {};\n  if (typeof options !== \"object\") throw new Error(\"options is invalid\");\n  var properties = options.properties;\n  var npoints = options.npoints;\n  var offset = options.offset;\n\n  start = getCoord(start);\n  end = getCoord(end);\n  properties = properties || {};\n  npoints = npoints || 100;\n  offset = offset || 10;\n\n  var generator = new GreatCircle(\n    { x: start[0], y: start[1] },\n    { x: end[0], y: end[1] },\n    properties\n  );\n\n  var line = generator.Arc(npoints, { offset: offset });\n\n  return line.json();\n}\n\nexport { greatCircle };\nexport default greatCircle;\n", "/*!\n * Copyright (c) 2019, Dane Springmeyer\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in\n *       the documentation and/or other materials provided with the\n *       distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar D2R = Math.PI / 180;\nvar R2D = 180 / Math.PI;\n\nvar Coord = function (lon, lat) {\n  this.lon = lon;\n  this.lat = lat;\n  this.x = D2R * lon;\n  this.y = D2R * lat;\n};\n\nCoord.prototype.view = function () {\n  return String(this.lon).slice(0, 4) + \",\" + String(this.lat).slice(0, 4);\n};\n\nCoord.prototype.antipode = function () {\n  var anti_lat = -1 * this.lat;\n  var anti_lon = this.lon < 0 ? 180 + this.lon : (180 - this.lon) * -1;\n  return new Coord(anti_lon, anti_lat);\n};\n\nvar LineString = function () {\n  this.coords = [];\n  this.length = 0;\n};\n\nLineString.prototype.move_to = function (coord) {\n  this.length++;\n  this.coords.push(coord);\n};\n\nvar Arc = function (properties) {\n  this.properties = properties || {};\n  this.geometries = [];\n};\n\nArc.prototype.json = function () {\n  if (this.geometries.length <= 0) {\n    return {\n      geometry: { type: \"LineString\", coordinates: null },\n      type: \"Feature\",\n      properties: this.properties,\n    };\n  } else if (this.geometries.length === 1) {\n    return {\n      geometry: { type: \"LineString\", coordinates: this.geometries[0].coords },\n      type: \"Feature\",\n      properties: this.properties,\n    };\n  } else {\n    var multiline = [];\n    for (var i = 0; i < this.geometries.length; i++) {\n      multiline.push(this.geometries[i].coords);\n    }\n    return {\n      geometry: { type: \"MultiLineString\", coordinates: multiline },\n      type: \"Feature\",\n      properties: this.properties,\n    };\n  }\n};\n\n// TODO - output proper multilinestring\nArc.prototype.wkt = function () {\n  var wkt_string = \"\";\n  var wkt = \"LINESTRING(\";\n  var collect = function (c) {\n    wkt += c[0] + \" \" + c[1] + \",\";\n  };\n  for (var i = 0; i < this.geometries.length; i++) {\n    if (this.geometries[i].coords.length === 0) {\n      return \"LINESTRING(empty)\";\n    } else {\n      var coords = this.geometries[i].coords;\n      coords.forEach(collect);\n      wkt_string += wkt.substring(0, wkt.length - 1) + \")\";\n    }\n  }\n  return wkt_string;\n};\n\n/*\n * http://en.wikipedia.org/wiki/Great-circle_distance\n *\n */\nvar GreatCircle = function (start, end, properties) {\n  if (!start || start.x === undefined || start.y === undefined) {\n    throw new Error(\n      \"GreatCircle constructor expects two args: start and end objects with x and y properties\"\n    );\n  }\n  if (!end || end.x === undefined || end.y === undefined) {\n    throw new Error(\n      \"GreatCircle constructor expects two args: start and end objects with x and y properties\"\n    );\n  }\n  this.start = new Coord(start.x, start.y);\n  this.end = new Coord(end.x, end.y);\n  this.properties = properties || {};\n\n  var w = this.start.x - this.end.x;\n  var h = this.start.y - this.end.y;\n  var z =\n    Math.pow(Math.sin(h / 2.0), 2) +\n    Math.cos(this.start.y) *\n      Math.cos(this.end.y) *\n      Math.pow(Math.sin(w / 2.0), 2);\n  this.g = 2.0 * Math.asin(Math.sqrt(z));\n\n  if (this.g === Math.PI) {\n    throw new Error(\n      \"it appears \" +\n        start.view() +\n        \" and \" +\n        end.view() +\n        \" are 'antipodal', e.g diametrically opposite, thus there is no single route but rather infinite\"\n    );\n  } else if (isNaN(this.g)) {\n    throw new Error(\n      \"could not calculate great circle between \" + start + \" and \" + end\n    );\n  }\n};\n\n/*\n * http://williams.best.vwh.net/avform.htm#Intermediate\n */\nGreatCircle.prototype.interpolate = function (f) {\n  var A = Math.sin((1 - f) * this.g) / Math.sin(this.g);\n  var B = Math.sin(f * this.g) / Math.sin(this.g);\n  var x =\n    A * Math.cos(this.start.y) * Math.cos(this.start.x) +\n    B * Math.cos(this.end.y) * Math.cos(this.end.x);\n  var y =\n    A * Math.cos(this.start.y) * Math.sin(this.start.x) +\n    B * Math.cos(this.end.y) * Math.sin(this.end.x);\n  var z = A * Math.sin(this.start.y) + B * Math.sin(this.end.y);\n  var lat = R2D * Math.atan2(z, Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)));\n  var lon = R2D * Math.atan2(y, x);\n  return [lon, lat];\n};\n\n/*\n * Generate points along the great circle\n */\nGreatCircle.prototype.Arc = function (npoints, options) {\n  var first_pass = [];\n  if (!npoints || npoints <= 2) {\n    first_pass.push([this.start.lon, this.start.lat]);\n    first_pass.push([this.end.lon, this.end.lat]);\n  } else {\n    var delta = 1.0 / (npoints - 1);\n    for (var i = 0; i < npoints; ++i) {\n      var step = delta * i;\n      var pair = this.interpolate(step);\n      first_pass.push(pair);\n    }\n  }\n  /* partial port of dateline handling from:\n      gdal/ogr/ogrgeometryfactory.cpp\n\n      TODO - does not handle all wrapping scenarios yet\n    */\n  var bHasBigDiff = false;\n  var dfMaxSmallDiffLong = 0;\n  // from http://www.gdal.org/ogr2ogr.html\n  // -datelineoffset:\n  // (starting with GDAL 1.10) offset from dateline in degrees (default long. = +/- 10deg, geometries within 170deg to -170deg will be splited)\n  var dfDateLineOffset = options && options.offset ? options.offset : 10;\n  var dfLeftBorderX = 180 - dfDateLineOffset;\n  var dfRightBorderX = -180 + dfDateLineOffset;\n  var dfDiffSpace = 360 - dfDateLineOffset;\n\n  // https://github.com/OSGeo/gdal/blob/7bfb9c452a59aac958bff0c8386b891edf8154ca/gdal/ogr/ogrgeometryfactory.cpp#L2342\n  for (var j = 1; j < first_pass.length; ++j) {\n    var dfPrevX = first_pass[j - 1][0];\n    var dfX = first_pass[j][0];\n    var dfDiffLong = Math.abs(dfX - dfPrevX);\n    if (\n      dfDiffLong > dfDiffSpace &&\n      ((dfX > dfLeftBorderX && dfPrevX < dfRightBorderX) ||\n        (dfPrevX > dfLeftBorderX && dfX < dfRightBorderX))\n    ) {\n      bHasBigDiff = true;\n    } else if (dfDiffLong > dfMaxSmallDiffLong) {\n      dfMaxSmallDiffLong = dfDiffLong;\n    }\n  }\n\n  var poMulti = [];\n  if (bHasBigDiff && dfMaxSmallDiffLong < dfDateLineOffset) {\n    var poNewLS = [];\n    poMulti.push(poNewLS);\n    for (var k = 0; k < first_pass.length; ++k) {\n      var dfX0 = parseFloat(first_pass[k][0]);\n      if (k > 0 && Math.abs(dfX0 - first_pass[k - 1][0]) > dfDiffSpace) {\n        var dfX1 = parseFloat(first_pass[k - 1][0]);\n        var dfY1 = parseFloat(first_pass[k - 1][1]);\n        var dfX2 = parseFloat(first_pass[k][0]);\n        var dfY2 = parseFloat(first_pass[k][1]);\n        if (\n          dfX1 > -180 &&\n          dfX1 < dfRightBorderX &&\n          dfX2 === 180 &&\n          k + 1 < first_pass.length &&\n          first_pass[k - 1][0] > -180 &&\n          first_pass[k - 1][0] < dfRightBorderX\n        ) {\n          poNewLS.push([-180, first_pass[k][1]]);\n          k++;\n          poNewLS.push([first_pass[k][0], first_pass[k][1]]);\n          continue;\n        } else if (\n          dfX1 > dfLeftBorderX &&\n          dfX1 < 180 &&\n          dfX2 === -180 &&\n          k + 1 < first_pass.length &&\n          first_pass[k - 1][0] > dfLeftBorderX &&\n          first_pass[k - 1][0] < 180\n        ) {\n          poNewLS.push([180, first_pass[k][1]]);\n          k++;\n          poNewLS.push([first_pass[k][0], first_pass[k][1]]);\n          continue;\n        }\n\n        if (dfX1 < dfRightBorderX && dfX2 > dfLeftBorderX) {\n          // swap dfX1, dfX2\n          var tmpX = dfX1;\n          dfX1 = dfX2;\n          dfX2 = tmpX;\n          // swap dfY1, dfY2\n          var tmpY = dfY1;\n          dfY1 = dfY2;\n          dfY2 = tmpY;\n        }\n        if (dfX1 > dfLeftBorderX && dfX2 < dfRightBorderX) {\n          dfX2 += 360;\n        }\n\n        if (dfX1 <= 180 && dfX2 >= 180 && dfX1 < dfX2) {\n          var dfRatio = (180 - dfX1) / (dfX2 - dfX1);\n          var dfY = dfRatio * dfY2 + (1 - dfRatio) * dfY1;\n          poNewLS.push([\n            first_pass[k - 1][0] > dfLeftBorderX ? 180 : -180,\n            dfY,\n          ]);\n          poNewLS = [];\n          poNewLS.push([\n            first_pass[k - 1][0] > dfLeftBorderX ? -180 : 180,\n            dfY,\n          ]);\n          poMulti.push(poNewLS);\n        } else {\n          poNewLS = [];\n          poMulti.push(poNewLS);\n        }\n        poNewLS.push([dfX0, first_pass[k][1]]);\n      } else {\n        poNewLS.push([first_pass[k][0], first_pass[k][1]]);\n      }\n    }\n  } else {\n    // add normally\n    var poNewLS0 = [];\n    poMulti.push(poNewLS0);\n    for (var l = 0; l < first_pass.length; ++l) {\n      poNewLS0.push([first_pass[l][0], first_pass[l][1]]);\n    }\n  }\n\n  var arc = new Arc(this.properties);\n  for (var m = 0; m < poMulti.length; ++m) {\n    var line = new LineString();\n    arc.geometries.push(line);\n    var points = poMulti[m];\n    for (var j0 = 0; j0 < points.length; ++j0) {\n      line.move_to(points[j0]);\n    }\n  }\n  return arc;\n};\n\nexport { Coord, Arc, GreatCircle };\n\nexport default {\n  Coord,\n  Arc,\n  GreatCircle,\n};\n", "import {\n  Feature,\n  GeoJsonProperties,\n  MultiPolygon,\n  Polygon,\n  FeatureCollection,\n} from \"geojson\";\nimport { multiPolygon, polygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\nimport polygonClipping from \"polygon-clipping\";\n\n/**\n * Takes {@link Polygon|polygon} or {@link MultiPolygon|multi-polygon} geometries and\n * finds their polygonal intersection. If they don't intersect, returns null.\n *\n * @name intersect\n * @param {FeatureCollection<Polygon | MultiPolygon>} features the features to intersect\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Feature\n * @returns {Feature|null} returns a feature representing the area they share (either a {@link Polygon} or\n * {@link MultiPolygon}). If they do not share any area, returns `null`.\n * @example\n * var poly1 = turf.polygon([[\n *   [-122.801742, 45.48565],\n *   [-122.801742, 45.60491],\n *   [-122.584762, 45.60491],\n *   [-122.584762, 45.48565],\n *   [-122.801742, 45.48565]\n * ]]);\n *\n * var poly2 = turf.polygon([[\n *   [-122.520217, 45.535693],\n *   [-122.64038, 45.553967],\n *   [-122.720031, 45.526554],\n *   [-122.669906, 45.507309],\n *   [-122.723464, 45.446643],\n *   [-122.532577, 45.408574],\n *   [-122.487258, 45.477466],\n *   [-122.520217, 45.535693]\n * ]]);\n *\n * var intersection = turf.intersect(turf.featureCollection([poly1, poly2]));\n *\n * //addToMap\n * var addToMap = [poly1, poly2, intersection];\n */\nfunction intersect<P extends GeoJsonProperties = GeoJsonProperties>(\n  features: FeatureCollection<Polygon | MultiPolygon>,\n  options: {\n    properties?: P;\n  } = {}\n): Feature<Polygon | MultiPolygon, P> | null {\n  const geoms: polygonClipping.Geom[] = [];\n\n  geomEach(features, (geom) => {\n    geoms.push(geom.coordinates as polygonClipping.Geom);\n  });\n\n  if (geoms.length < 2) {\n    throw new Error(\"Must specify at least 2 geometries\");\n  }\n  const intersection = polygonClipping.intersection(\n    geoms[0],\n    ...geoms.slice(1)\n  );\n  if (intersection.length === 0) return null;\n  if (intersection.length === 1)\n    return polygon(intersection[0], options.properties);\n  return multiPolygon(intersection, options.properties);\n}\n\nexport { intersect };\nexport default intersect;\n", "import { distance } from \"@turf/distance\";\nimport { intersect } from \"@turf/intersect\";\nimport {\n  Feature,\n  FeatureCollection,\n  GeoJsonProperties,\n  Polygon,\n  BBox,\n} from \"geojson\";\nimport { polygon, featureCollection, Units } from \"@turf/helpers\";\n\n/**\n * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped\n * hexagons or triangles ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\n *\n * @name hexGrid\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the\n * radius of the circumcircle of the hexagons.\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons\n * @returns {FeatureCollection<Polygon>} a hexagonal grid\n * @example\n * var bbox = [-96,31,-84,40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var hexgrid = turf.hexGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [hexgrid];\n */\nfunction hexGrid<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  cellSide: number,\n  options: {\n    units?: Units;\n    triangles?: boolean;\n    properties?: P;\n    mask?: Feature<Polygon>;\n  } = {}\n): FeatureCollection<Polygon, P> {\n  // Issue => https://github.com/Turfjs/turf/issues/1284\n  const clonedProperties = JSON.stringify(options.properties || {});\n\n  const [west, south, east, north] = bbox;\n  const centerY = (south + north) / 2;\n  const centerX = (west + east) / 2;\n\n  // https://github.com/Turfjs/turf/issues/758\n  const xFraction =\n    (cellSide * 2) / distance([west, centerY], [east, centerY], options);\n  const cellWidth = xFraction * (east - west);\n  const yFraction =\n    (cellSide * 2) / distance([centerX, south], [centerX, north], options);\n  const cellHeight = yFraction * (north - south);\n  const radius = cellWidth / 2;\n\n  const hex_width = radius * 2;\n  const hex_height = (Math.sqrt(3) / 2) * cellHeight;\n\n  const box_width = east - west;\n  const box_height = north - south;\n\n  const x_interval = (3 / 4) * hex_width;\n  const y_interval = hex_height;\n\n  // adjust box_width so all hexagons will be inside the bbox\n  const x_span = (box_width - hex_width) / (hex_width - radius / 2);\n  const x_count = Math.floor(x_span);\n\n  const x_adjust =\n    (x_count * x_interval - radius / 2 - box_width) / 2 -\n    radius / 2 +\n    x_interval / 2;\n\n  // adjust box_height so all hexagons will be inside the bbox\n  const y_count = Math.floor((box_height - hex_height) / hex_height);\n\n  let y_adjust = (box_height - y_count * hex_height) / 2;\n\n  const hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\n  if (hasOffsetY) {\n    y_adjust -= hex_height / 4;\n  }\n\n  // Precompute cosines and sines of angles used in hexagon creation for performance gain\n  const cosines = [];\n  const sines = [];\n  for (let i = 0; i < 6; i++) {\n    const angle = ((2 * Math.PI) / 6) * i;\n    cosines.push(Math.cos(angle));\n    sines.push(Math.sin(angle));\n  }\n\n  const results = [];\n  for (let x = 0; x <= x_count; x++) {\n    for (let y = 0; y <= y_count; y++) {\n      const isOdd = x % 2 === 1;\n      if (y === 0 && isOdd) continue;\n      if (y === 0 && hasOffsetY) continue;\n\n      const center_x = x * x_interval + west - x_adjust;\n      let center_y = y * y_interval + south + y_adjust;\n\n      if (isOdd) {\n        center_y -= hex_height / 2;\n      }\n\n      if (options.triangles === true) {\n        hexTriangles(\n          [center_x, center_y],\n          cellWidth / 2,\n          cellHeight / 2,\n          JSON.parse(clonedProperties),\n          cosines,\n          sines\n        ).forEach(function (triangle) {\n          if (options.mask) {\n            if (intersect(featureCollection([options.mask, triangle])))\n              results.push(triangle);\n          } else {\n            results.push(triangle);\n          }\n        });\n      } else {\n        const hex = hexagon(\n          [center_x, center_y],\n          cellWidth / 2,\n          cellHeight / 2,\n          JSON.parse(clonedProperties),\n          cosines,\n          sines\n        );\n        if (options.mask) {\n          if (intersect(featureCollection([options.mask, hex])))\n            results.push(hex);\n        } else {\n          results.push(hex);\n        }\n      }\n    }\n  }\n\n  return featureCollection(results) as FeatureCollection<Polygon, P>;\n}\n\n/**\n * Creates hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half hexagon width\n * @param {number} ry half hexagon height\n * @param {Object} properties passed to each hexagon\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Feature<Polygon>} hexagon\n */\nfunction hexagon(\n  center: number[],\n  rx: number,\n  ry: number,\n  properties: GeoJsonProperties,\n  cosines: number[],\n  sines: number[]\n) {\n  const vertices = [];\n  for (let i = 0; i < 6; i++) {\n    const x = center[0] + rx * cosines[i];\n    const y = center[1] + ry * sines[i];\n    vertices.push([x, y]);\n  }\n  //first and last vertex must be the same\n  vertices.push(vertices[0].slice());\n  return polygon([vertices], properties);\n}\n\n/**\n * Creates triangles composing an hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half triangle width\n * @param {number} ry half triangle height\n * @param {Object} properties passed to each triangle\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Array<Feature<Polygon>>} triangles\n */\nfunction hexTriangles(\n  center: number[],\n  rx: number,\n  ry: number,\n  properties: GeoJsonProperties,\n  cosines: number[],\n  sines: number[]\n) {\n  const triangles = [];\n  for (let i = 0; i < 6; i++) {\n    const vertices = [];\n    vertices.push(center);\n    vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);\n    vertices.push([\n      center[0] + rx * cosines[(i + 1) % 6],\n      center[1] + ry * sines[(i + 1) % 6],\n    ]);\n    vertices.push(center);\n    triangles.push(polygon([vertices], properties));\n  }\n  return triangles;\n}\n\nexport { hexGrid };\nexport default hexGrid;\n", "import {\n  BBox,\n  Feature,\n  Polygon,\n  MultiPolygon,\n  FeatureCollection,\n  Point,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { booleanWithin as within } from \"@turf/boolean-within\";\nimport { distance } from \"@turf/distance\";\nimport { point, featureCollection, Units } from \"@turf/helpers\";\n\n/**\n * Creates a grid of points\n *\n * @name pointGrid\n * @param {BBox} bbox extent of grid in [minX, minY, maxX, maxY] order\n * @param {number} cellSide the distance between points\n * @param {Object} [options={}] Optional parameters\n * @param {Units} [options.units='kilometers'] the units of the cellSide value.  Supports all valid Turf {@link https://github.com/Turfjs/turf/blob/master/packages/turf-helpers/README_UNITS.md Units}\n * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Point>} grid of points\n * @example\n * var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\n * var cellSide = 3;\n * var options = {units: 'miles'};\n *\n * var grid = turf.pointGrid(extent, cellSide, options);\n *\n * //addToMap\n * var addToMap = [grid];\n */\nfunction pointGrid<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  cellSide: number,\n  options: {\n    units?: Units;\n    mask?: Feature<Polygon | MultiPolygon>;\n    properties?: P;\n  } = {}\n): FeatureCollection<Point, P> {\n  // Default parameters\n  if (options.mask && !options.units) options.units = \"kilometers\";\n\n  // Containers\n  var results = [];\n\n  // Typescript handles the Type Validation\n  // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');\n  // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');\n  // if (!bbox) throw new Error('bbox is required');\n  // if (!Array.isArray(bbox)) throw new Error('bbox must be array');\n  // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');\n  // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');\n\n  var west = bbox[0];\n  var south = bbox[1];\n  var east = bbox[2];\n  var north = bbox[3];\n\n  var xFraction = cellSide / distance([west, south], [east, south], options);\n  var cellWidth = xFraction * (east - west);\n  var yFraction = cellSide / distance([west, south], [west, north], options);\n  var cellHeight = yFraction * (north - south);\n\n  var bboxWidth = east - west;\n  var bboxHeight = north - south;\n  var columns = Math.floor(bboxWidth / cellWidth);\n  var rows = Math.floor(bboxHeight / cellHeight);\n\n  // adjust origin of the grid\n  var deltaX = (bboxWidth - columns * cellWidth) / 2;\n  var deltaY = (bboxHeight - rows * cellHeight) / 2;\n\n  var currentX = west + deltaX;\n  while (currentX <= east) {\n    var currentY = south + deltaY;\n    while (currentY <= north) {\n      var cellPt = point([currentX, currentY], options.properties);\n      if (options.mask) {\n        if (within(cellPt, options.mask)) results.push(cellPt);\n      } else {\n        results.push(cellPt);\n      }\n      currentY += cellHeight;\n    }\n    currentX += cellWidth;\n  }\n\n  return featureCollection(results);\n}\n\nexport { pointGrid };\nexport default pointGrid;\n", "import { booleanIntersects as intersect } from \"@turf/boolean-intersects\";\nimport {\n  BBox,\n  Feature,\n  FeatureCollection,\n  MultiPolygon,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport {\n  convertLength,\n  featureCollection,\n  polygon,\n  Units,\n} from \"@turf/helpers\";\n/**\n * Creates a grid of rectangular polygons with width and height consistent in degrees\n *\n * @name rectangleGrid\n * @param {BBox} bbox extent of grid in [minX, minY, maxX, maxY] order.  If the grid does not fill the bbox perfectly, it is centered.\n * @param {number} cellWidth width of each cell, in units\n * @param {number} cellHeight height of each cell, in units\n * @param {Object} [options={}] Optional parameters\n * @param {Units} [options.units='kilometers'] the units of the cell width and height value.\n * Supports all valid Turf {@link https://github.com/Turfjs/turf/blob/master/packages/turf-helpers/README_UNITS.md Units}.\n * If you are looking for rectangles with equal width and height in linear units (e.g. kilometers) this is not the module for you.\n * The cellWidth and cellHeight is converted from units provided to degrees internally, so the width and height of resulting polygons will be consistent only in degrees.\n * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon,\n * the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} a grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellWidth = 50;\n * var cellHeight = 20;\n * var options = {units: 'miles'};\n *\n * var rectangleGrid = turf.rectangleGrid(bbox, cellWidth, cellHeight, options);\n *\n * //addToMap\n * var addToMap = [rectangleGrid]\n */\nfunction rectangleGrid<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  cellWidth: number,\n  cellHeight: number,\n  options: {\n    units?: Units;\n    properties?: P;\n    mask?: Feature<Polygon | MultiPolygon> | Polygon | MultiPolygon;\n  } = {}\n): FeatureCollection<Polygon, P> {\n  // Containers\n  const results = [];\n  const west = bbox[0];\n  const south = bbox[1];\n  const east = bbox[2];\n  const north = bbox[3];\n\n  const bboxWidth = east - west;\n  const cellWidthDeg = convertLength(cellWidth, options.units, \"degrees\");\n\n  const bboxHeight = north - south;\n  const cellHeightDeg = convertLength(cellHeight, options.units, \"degrees\");\n\n  const columns = Math.floor(Math.abs(bboxWidth) / cellWidthDeg);\n  const rows = Math.floor(Math.abs(bboxHeight) / cellHeightDeg);\n\n  // if the grid does not fill the bbox perfectly, center it.\n  const deltaX = (bboxWidth - columns * cellWidthDeg) / 2;\n  const deltaY = (bboxHeight - rows * cellHeightDeg) / 2;\n\n  // iterate over columns & rows\n  let currentX = west + deltaX;\n  for (let column = 0; column < columns; column++) {\n    let currentY = south + deltaY;\n    for (let row = 0; row < rows; row++) {\n      const cellPoly = polygon(\n        [\n          [\n            [currentX, currentY],\n            [currentX, currentY + cellHeightDeg],\n            [currentX + cellWidthDeg, currentY + cellHeightDeg],\n            [currentX + cellWidthDeg, currentY],\n            [currentX, currentY],\n          ],\n        ],\n        options.properties\n      );\n      if (options.mask) {\n        if (intersect(options.mask, cellPoly)) {\n          results.push(cellPoly);\n        }\n      } else {\n        results.push(cellPoly);\n      }\n\n      currentY += cellHeightDeg;\n    }\n    currentX += cellWidthDeg;\n  }\n  return featureCollection(results);\n}\n\nexport { rectangleGrid };\nexport default rectangleGrid;\n", "import {\n  FeatureCollection,\n  Polygon,\n  BBox,\n  Feature,\n  MultiPolygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { Units } from \"@turf/helpers\";\nimport { rectangleGrid } from \"@turf/rectangle-grid\";\n\n/**\n * Creates a grid of square polygons with cell length consistent in degrees\n *\n * @name squareGrid\n * @param {BBox} bbox extent of grid in [minX, minY, maxX, maxY] order.  If the grid does not fill the bbox perfectly, it is centered.\n * @param {number} cellSide length of each cell side.\n * @param {Object} [options={}] Optional parameters\n * @param {Units} [options.units='kilometers'] the units of the cellSide value.\n * Supports all valid Turf {@link https://github.com/Turfjs/turf/blob/master/packages/turf-helpers/README_UNITS.md Units}.\n * If you are looking for squares with sides of equal lengths in linear units (e.g. kilometers) this is not the module for you.\n * The cellSide is converted from units provided to degrees internally, so the width and height of resulting polygons will be consistent only in degrees.\n * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon,\n * the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} a grid of polygons with equal width and height in degrees.\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var squareGrid = turf.squareGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [squareGrid]\n */\n\nfunction squareGrid<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  cellSide: number,\n  options: {\n    units?: Units;\n    properties?: P;\n    mask?: Feature<Polygon | MultiPolygon> | Polygon | MultiPolygon;\n  } = {}\n): FeatureCollection<Polygon, P> {\n  return rectangleGrid(bbox, cellSide, cellSide, options);\n}\n\nexport { squareGrid };\nexport default squareGrid;\n", "import {\n  BBox,\n  Feature,\n  Polygon,\n  FeatureCollection,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { distance } from \"@turf/distance\";\nimport { intersect } from \"@turf/intersect\";\nimport { polygon, featureCollection, Units } from \"@turf/helpers\";\n\n/**\n * Creates a grid of triangular polygons.\n *\n * @name triangleGrid\n * @param {BBox} bbox extent of grid in [minX, minY, maxX, maxY] order\n * @param {number} cellSide dimension of each grid cell.  Two triangles are created in each cell.\n * @param {Object} [options={}] Optional parameters\n * @param {Units} [options.units='kilometers'] used in calculating cellSide.  Supports all valid Turf {@link https://github.com/Turfjs/turf/blob/master/packages/turf-helpers/README_UNITS.md Units}\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [triangleGrid];\n */\nfunction triangleGrid<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  cellSide: number,\n  options: {\n    units?: Units;\n    properties?: P;\n    mask?: Feature<Polygon>;\n  } = {}\n): FeatureCollection<Polygon, P> {\n  // Containers\n  var results: Feature<Polygon, P>[] = [];\n\n  // Input Validation is being handled by Typescript\n\n  // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');\n  // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');\n  // if (!bbox) throw new Error('bbox is required');\n  // if (!Array.isArray(bbox)) throw new Error('bbox must be array');\n  // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');\n  // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');\n\n  // Main\n  var xFraction =\n    cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction =\n    cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n  var xi = 0;\n  var currentX = bbox[0];\n  while (currentX <= bbox[2]) {\n    var yi = 0;\n    var currentY = bbox[1];\n    while (currentY <= bbox[3]) {\n      var cellTriangle1 = null;\n      var cellTriangle2 = null;\n\n      if (xi % 2 === 0 && yi % 2 === 0) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY + cellHeight],\n            ],\n          ],\n          options.properties\n        );\n      } else if (xi % 2 === 0 && yi % 2 === 1) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n      } else if (yi % 2 === 0 && xi % 2 === 1) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n      } else if (yi % 2 === 1 && xi % 2 === 1) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY + cellHeight],\n            ],\n          ],\n          options.properties\n        );\n      }\n      if (options.mask) {\n        if (intersect(featureCollection([options.mask, cellTriangle1!])))\n          results.push(cellTriangle1!);\n        if (intersect(featureCollection([options.mask, cellTriangle2!])))\n          results.push(cellTriangle2!);\n      } else {\n        results.push(cellTriangle1!);\n        results.push(cellTriangle2!);\n      }\n\n      currentY += cellHeight;\n      yi++;\n    }\n    xi++;\n    currentX += cellWidth;\n  }\n  return featureCollection(results);\n}\n\nexport { triangleGrid };\nexport default triangleGrid;\n", "import { bbox } from \"@turf/bbox\";\nimport { hexGrid } from \"@turf/hex-grid\";\nimport { pointGrid } from \"@turf/point-grid\";\nimport { distance } from \"@turf/distance\";\nimport { centroid } from \"@turf/centroid\";\nimport { squareGrid } from \"@turf/square-grid\";\nimport { triangleGrid } from \"@turf/triangle-grid\";\nimport { clone } from \"@turf/clone\";\nimport { featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nimport { collectionOf } from \"@turf/invariant\";\n\n/**\n * Takes a set of points and estimates their 'property' values on a grid using the [Inverse Distance Weighting (IDW) method](https://en.wikipedia.org/wiki/Inverse_distance_weighting).\n *\n * @name interpolate\n * @param {FeatureCollection<Point>} points with known value\n * @param {number} cellSize the distance across each grid point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.gridType='square'] defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle')\n * @param {string} [options.property='elevation'] the property name in `points` from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists.\n * @param {string} [options.units='kilometers'] used in calculating cellSize, can be degrees, radians, miles, or kilometers\n * @param {number} [options.weight=1] exponent regulating the distance-decay weighting\n * @returns {FeatureCollection<Point|Polygon>} grid of points or polygons with interpolated 'property'\n * @example\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point\n * turf.featureEach(points, function(point) {\n *     point.properties.solRad = Math.random() * 50;\n * });\n * var options = {gridType: 'points', property: 'solRad', units: 'miles'};\n * var grid = turf.interpolate(points, 100, options);\n *\n * //addToMap\n * var addToMap = [grid];\n */\nfunction interpolate(points, cellSize, options) {\n  // Optional parameters\n  options = options || {};\n  if (typeof options !== \"object\") throw new Error(\"options is invalid\");\n  var gridType = options.gridType;\n  var property = options.property;\n  var weight = options.weight;\n\n  // validation\n  if (!points) throw new Error(\"points is required\");\n  collectionOf(points, \"Point\", \"input must contain Points\");\n  if (!cellSize) throw new Error(\"cellSize is required\");\n  if (weight !== undefined && typeof weight !== \"number\")\n    throw new Error(\"weight must be a number\");\n\n  // default values\n  property = property || \"elevation\";\n  gridType = gridType || \"square\";\n  weight = weight || 1;\n\n  var box = bbox(points);\n  var grid;\n  switch (gridType) {\n    case \"point\":\n    case \"points\":\n      grid = pointGrid(box, cellSize, options);\n      break;\n    case \"square\":\n    case \"squares\":\n      grid = squareGrid(box, cellSize, options);\n      break;\n    case \"hex\":\n    case \"hexes\":\n      grid = hexGrid(box, cellSize, options);\n      break;\n    case \"triangle\":\n    case \"triangles\":\n      grid = triangleGrid(box, cellSize, options);\n      break;\n    default:\n      throw new Error(\"invalid gridType\");\n  }\n  var results = [];\n  featureEach(grid, function (gridFeature) {\n    var zw = 0;\n    var sw = 0;\n    // calculate the distance from each input point to the grid points\n    featureEach(points, function (point) {\n      var gridPoint =\n        gridType === \"point\" ? gridFeature : centroid(gridFeature);\n      var d = distance(gridPoint, point, options);\n      var zValue;\n      // property has priority for zValue, fallbacks to 3rd coordinate from geometry\n      if (property !== undefined) zValue = point.properties[property];\n      if (zValue === undefined) zValue = point.geometry.coordinates[2];\n      if (zValue === undefined) throw new Error(\"zValue is missing\");\n      if (d === 0) zw = zValue;\n      var w = 1.0 / Math.pow(d, weight);\n      sw += w;\n      zw += w * zValue;\n    });\n    // write interpolated value for each grid point\n    var newFeature = clone(gridFeature);\n    newFeature.properties[property] = zw / sw;\n    results.push(newFeature);\n  });\n  return featureCollection(results);\n}\n\nexport { interpolate };\nexport default interpolate;\n", "/*!\n* MarchingSquaresJS\n* version 1.3.3\n* https://github.com/RaumZeit/MarchingSquares.js\n*\n* @license GNU Affero General Public License.\n* Copyright (c) 2015-2019 Ronny Lorenz <ronny@tbi.univie.ac.at>\n*/\n\n\n/*\n *  Compute the distance of a value 'v' from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear(a, b, v) {\n  if (a < b)\n    return (v - a) / (b - a);\n\n  return (a - v) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function assumes that exactly one value, 'v0' or 'v1', is actually located\n *  between 'a' and 'b', and choses the right one automagically\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_ab(a, b, v0, v1) {\n  var tmp;\n\n  if (v0 > v1) {\n    tmp = v0;\n    v0  = v1;\n    v1  = tmp;\n  }\n\n  if (a < b) {\n    if (a < v0)\n      return (v0 - a) / (b - a);\n    else\n      return (v1 - a) / (b - a);\n  } else if (a > v1) {\n    return (a - v1) / (a - b);\n  }\n\n  return (a - v0) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'a'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_a(a, b, minV, maxV) {\n  if (a < b)\n    return (minV - a) / (b - a);\n\n  return (a - maxV) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_b(a, b, minV, maxV) {\n  if (a < b)\n    return (maxV - a) / (b - a);\n\n  return (a - minV) / (a - b);\n}\n\nfunction Options() {\n  /* Settings common to all implemented algorithms */\n  this.successCallback  = null;\n  this.verbose          = false;\n  this.polygons         = false;\n  this.polygons_full    = false;\n  this.linearRing       = true;\n  this.noQuadTree       = false;\n  this.noFrame          = false;\n}\n\n\n/* Compose settings specific to IsoBands algorithm */\nfunction isoBandOptions(userSettings) {\n  var i,\n    key,\n    val,\n    bandOptions,\n    optionKeys;\n\n  bandOptions   = new Options();\n  userSettings  = userSettings ? userSettings : {};\n  optionKeys    = Object.keys(bandOptions);\n\n  for(i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if ((typeof val !== 'undefined') && (val !== null))\n      bandOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  bandOptions.polygons_full  = !bandOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  bandOptions.interpolate   = linear_ab;\n  bandOptions.interpolate_a = linear_a;\n  bandOptions.interpolate_b = linear_b;\n\n  return bandOptions;\n}\n\n\n/* Compose settings specific to IsoLines algorithm */\nfunction isoLineOptions(userSettings) {\n  var i,\n    key,\n    val,\n    lineOptions,\n    optionKeys;\n\n  lineOptions   = new Options();\n  userSettings  = userSettings ? userSettings : {};\n  optionKeys    = Object.keys(lineOptions);\n\n  for(i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if ((typeof val !== 'undefined') && (val !== null))\n      lineOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  lineOptions.polygons_full  = !lineOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  lineOptions.interpolate   = linear;\n\n  return lineOptions;\n}\n\nfunction cell2Polygons(cell, x, y, settings) {\n  var polygons = [];\n\n  cell.polygons.forEach(function(p) {\n    p.forEach(function(pp) {\n      pp[0] += x;\n      pp[1] += y;\n    });\n\n    if (settings.linearRing)\n      p.push(p[0]);\n\n    polygons.push(p);\n  });\n\n  return polygons;\n}\n\nfunction entry_coordinate(x, y, mode, path) {\n  if (mode === 0) { /* down */\n    x += 1;\n    y += path[0][1];\n  } else if (mode === 1) { /* left */\n    x += path[0][0];\n  } else if (mode === 2) { /* up */\n    y += path[0][1];\n  } else if (mode === 3) { /* right */\n    x += path[0][0];\n    y += 1;\n  }\n\n  return [ x, y ];\n}\n\n\nfunction skip_coordinate(x, y, mode) {\n  if (mode === 0) { /* down */\n    x++;\n  } else if (mode === 1) ; else if (mode === 2) { /* up */\n    y++;\n  } else if (mode === 3) { /* right */\n    x++;\n    y++;\n  }\n\n  return [ x, y ];\n}\n\n\nfunction requireFrame(data, lowerBound, upperBound) {\n  var frameRequired,\n    cols,\n    rows,\n    i,\n    j;\n\n  frameRequired = true;\n  cols          = data[0].length;\n  rows          = data.length;\n\n  for (j = 0; j < rows; j++) {\n    if ((data[j][0] < lowerBound) ||\n        (data[j][0] > upperBound) ||\n        (data[j][cols - 1] < lowerBound) ||\n        (data[j][cols - 1] > upperBound)) {\n      frameRequired = false;\n      break;\n    }\n  }\n\n  if ((frameRequired) &&\n      ((data[rows - 1][0] < lowerBound) ||\n      (data[rows - 1][0] > upperBound) ||\n      (data[rows - 1][cols - 1] < lowerBound) ||\n      (data[rows - 1][cols - 1] > upperBound))) {\n    frameRequired = false;\n  }\n\n  if (frameRequired)\n    for (i = 0; i < cols - 1; i++) {\n      if ((data[0][i] < lowerBound) ||\n          (data[0][i] > upperBound) ||\n          (data[rows - 1][i] < lowerBound) ||\n          (data[rows - 1][i] > upperBound)) {\n        frameRequired = false;\n        break;\n      }\n    }\n\n\n  return frameRequired;\n}\n\n\nfunction requireLineFrame(data, threshold) {\n  var frameRequired,\n    cols,\n    rows,\n    i,\n    j;\n\n  frameRequired = true;\n  cols          = data[0].length;\n  rows          = data.length;\n\n  for (j = 0; j < rows; j++) {\n    if ((data[j][0] >= threshold) ||\n        (data[j][cols - 1] >= threshold)) {\n      frameRequired = false;\n      break;\n    }\n  }\n\n  if ((frameRequired) &&\n      ((data[rows - 1][0] >= threshold) ||\n      (data[rows - 1][cols - 1] >= threshold))) {\n    frameRequired = false;\n  }\n\n  if (frameRequired)\n    for (i = 0; i < cols - 1; i++) {\n      if ((data[0][i] >= threshold) ||\n          (data[rows - 1][i] > threshold)) {\n        frameRequired = false;\n        break;\n      }\n    }\n\n  return frameRequired;\n}\n\n\nfunction traceBandPaths(data, cellGrid, settings) {\n  var nextedge,\n    path,\n    e,\n    ee,\n    s,\n    ve,\n    enter,\n    x,\n    y,\n    finalized,\n    origin,\n    cc,\n    dir,\n    count,\n    point,\n    found_entry;\n\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = [ ['rt', 'rb'], /* down */\n    ['br', 'bl'], /* left */\n    ['lb', 'lt'], /* up */\n    ['tl', 'tr']  /* right */\n  ];\n  var add_x         = [ 0, -1, 0, 1 ];\n  var add_y         = [ -1, 0, 1, 0 ];\n  var available_starts = [ 'bl', 'lb', 'lt', 'tl', 'tr', 'rt', 'rb', 'br' ];\n  var entry_dir     =  {\n    bl: 1, br: 1,\n    lb: 2, lt: 2,\n    tl: 3, tr: 3,\n    rt: 0, rb: 0\n  };\n\n  if (requireFrame(data, settings.minV, settings.maxV)) {\n    if (settings.linearRing)\n      polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0] ]);\n    else\n      polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0] ]);\n  }\n\n  /* finally, start tracing back first polygon(s) */\n  cellGrid.forEach(function(a, i) {\n    a.forEach(function(cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 8; e++) {\n        nextedge = available_starts[e];\n\n        if (typeof cell.edges[nextedge] !== 'object')\n          continue;\n\n        /* start a new, full path */\n        path              = [];\n        ee                = cell.edges[nextedge];\n        enter             = nextedge;\n        x                 = i;\n        y                 = j;\n        finalized         = false;\n        origin            = [ i + ee.path[0][0], j + ee.path[0][1] ];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n\n          if (typeof cc.edges[enter] !== 'object')\n            break;\n\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n\n          enter = ee.move.enter;\n          x     = x + ee.move.x;\n          y     = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if ((typeof cellGrid[x] === 'undefined') ||\n              (typeof cellGrid[x][y] === 'undefined')) {\n            dir   = 0;\n            count = 0;\n\n            if (x === cols) {\n              x--;\n              dir = 0;  /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2;  /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3;  /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1;  /* move left */\n            } else {\n              throw new Error('Left the grid somewhere in the interior!');\n            }\n\n            if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n              finalized = true;\n              enter     = nextedge;\n              break;\n            }\n\n            while (1) {\n              found_entry = false;\n\n              if (count > 4)\n                throw new Error('Direction change counter overflow! This should never happen!');\n\n              if (!((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined'))) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                for (s = 0; s < valid_entries[dir].length; s++) {\n                  ve = valid_entries[dir][s];\n                  if (typeof cc.edges[ve] === 'object') {\n                    /* found re-entry */\n                    ee = cc.edges[ve];\n                    path.push(entry_coordinate(x, y, dir, ee.path));\n                    enter = ve;\n                    found_entry = true;\n                    break;\n                  }\n                }\n              }\n\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if ((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined')) {\n                  if (((dir === 0) && (y < 0)) ||\n                      ((dir === 1) && (x < 0)) ||\n                      ((dir === 2) && (y === rows)) ||\n                      ((dir === 3) && (x === cols))) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n\n                if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n                /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter     = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if ((settings.linearRing) &&\n          ((path[path.length - 1][0] !== origin[0]) ||\n          (path[path.length - 1][1] !== origin[1])))\n          path.push(origin);\n\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\n\n\nfunction traceLinePaths(data, cellGrid, settings) {\n  var nextedge,\n    e,\n    ee,\n    cc,\n    path,\n    enter,\n    x,\n    y,\n    finalized,\n    origin,\n    point,\n    dir,\n    count,\n    found_entry,\n    ve;\n\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = [ 'right',  /* down */\n    'bottom', /* left */\n    'left',   /* up */\n    'top'     /* right */\n  ];\n  var add_x         = [ 0, -1, 0, 1 ];\n  var add_y         = [ -1, 0, 1, 0 ];\n  var entry_dir     =  {\n    bottom: 1,\n    left: 2,\n    top: 3,\n    right: 0\n  };\n\n  /* first, detect whether we need any outer frame */\n  if (!settings.noFrame)\n    if (requireLineFrame(data, settings.threshold)) {\n      if (settings.linearRing)\n        polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0] ]);\n      else\n        polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0] ]);\n    }\n\n  /* finally, start tracing back first polygon(s) */\n\n  cellGrid.forEach(function(a, i) {\n    a.forEach(function(cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 4; e++) {\n        nextedge = valid_entries[e];\n\n        if (typeof cell.edges[nextedge] !== 'object')\n          continue;\n\n        /* start a new, full path */\n        path              = [];\n        ee                = cell.edges[nextedge];\n        enter             = nextedge;\n        x                 = i;\n        y                 = j;\n        finalized         = false;\n        origin            = [ i + ee.path[0][0], j + ee.path[0][1] ];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n\n          if (typeof cc.edges[enter] !== 'object')\n            break;\n\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n\n          enter = ee.move.enter;\n          x     = x + ee.move.x;\n          y     = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if ((typeof cellGrid[x] === 'undefined') ||\n              (typeof cellGrid[x][y] === 'undefined')) {\n\n            if (!settings.linearRing)\n              break;\n\n            dir   = 0;\n            count = 0;\n\n            if (x === cols) {\n              x--;\n              dir = 0;  /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2;  /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3;  /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1;  /* move left */\n            }\n\n            if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n              finalized = true;\n              enter     = nextedge;\n              break;\n            }\n\n            while (1) {\n              found_entry = false;\n\n              if (count > 4)\n                throw new Error('Direction change counter overflow! This should never happen!');\n\n              if (!((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined'))) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                ve = valid_entries[dir];\n                if (typeof cc.edges[ve] === 'object') {\n                  /* found re-entry */\n                  ee = cc.edges[ve];\n                  path.push(entry_coordinate(x, y, dir, ee.path));\n                  enter = ve;\n                  found_entry = true;\n                  break;\n                }\n              }\n\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if ((typeof cellGrid[x] === 'undefined') ||\n                  (typeof cellGrid[x][y] === 'undefined')) {\n                  if (((dir === 0) && (y < 0)) ||\n                      ((dir === 1) && (x < 0)) ||\n                      ((dir === 2) && (y === rows)) ||\n                      ((dir === 3) && (x === cols))) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n\n                if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n                  /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter     = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if ((settings.linearRing) &&\n            ((path[path.length - 1][0] !== origin[0]) ||\n            (path[path.length - 1][1] !== origin[1])))\n          path.push(origin);\n\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\n\n/* quadTree node constructor */\nfunction TreeNode(data, x, y, dx, dy) {\n  var dx_tmp = dx,\n    dy_tmp = dy,\n    msb_x  = 0,\n    msb_y  = 0;\n\n  /* left-bottom corner of current quadrant */\n  this.x = x;\n  this.y = y;\n\n  /* minimum value in subtree under this node */\n  this.lowerBound = null;\n  /* maximum value in subtree under this node */\n  this.upperBound = null;\n\n  /*\n   *  child nodes are layed out in the following way:\n   *\n   *  (x, y + 1) ---- (x + 1, y + 1)\n   *  |             |              |\n   *  |      D      |      C       |\n   *  |             |              |\n   *  |----------------------------|\n   *  |             |              |\n   *  |      A      |      B       |\n   *  |             |              |\n   *  (x, y) ------------ (x + 1, y)\n   */\n  this.childA = null;\n  this.childB = null;\n  this.childC = null;\n  this.childD = null;\n\n  if ((dx === 1) && (dy === 1)) {\n    /* do not further subdivision */\n    this.lowerBound = Math.min(\n      data[y][x],\n      data[y][x + 1],\n      data[y + 1][x + 1],\n      data[y + 1][x]\n    );\n    this.upperBound = Math.max(\n      data[y][x],\n      data[y][x + 1],\n      data[y + 1][x + 1],\n      data[y + 1][x]\n    );\n  } else {\n    /* get most significant bit from dx */\n    if (dx > 1) {\n      while (dx_tmp !== 0) {\n        dx_tmp = dx_tmp >> 1;\n        msb_x++;\n      }\n\n      if (dx === (1 << (msb_x - 1)))\n        msb_x--;\n\n      dx_tmp = 1 << (msb_x - 1);\n    }\n\n    /* get most significant bit from dx */\n    if (dy > 1) {\n      while (dy_tmp !== 0) {\n        dy_tmp = dy_tmp >> 1;\n        msb_y++;\n      }\n\n      if (dy === (1 << (msb_y - 1)))\n        msb_y--;\n\n      dy_tmp = 1 << (msb_y - 1);\n    }\n\n    this.childA = new TreeNode(data, x, y, dx_tmp, dy_tmp);\n    this.lowerBound = this.childA.lowerBound;\n    this.upperBound = this.childA.upperBound;\n\n    if (dx - dx_tmp > 0) {\n      this.childB = new TreeNode(data, x + dx_tmp, y, dx - dx_tmp, dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childB.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childB.upperBound);\n\n      if (dy - dy_tmp > 0) {\n        this.childC = new TreeNode(data, x + dx_tmp, y + dy_tmp, dx - dx_tmp, dy - dy_tmp);\n        this.lowerBound = Math.min(this.lowerBound, this.childC.lowerBound);\n        this.upperBound = Math.max(this.upperBound, this.childC.upperBound);\n      }\n    }\n\n    if (dy - dy_tmp > 0) {\n      this.childD = new TreeNode(data, x, y + dy_tmp, dx_tmp, dy - dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childD.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childD.upperBound);\n    }\n  }\n}\n\n\n/**\n *  Retrieve a list of cells within a particular range of values by\n *  recursivly traversing the quad tree to it's leaves.\n *\n *  @param  subsumed  If 'true' include all cells that are completely\n *                    subsumed within the specified range. Otherwise,\n *                    return only cells where at least one corner is\n *                    outside the specified range.\n *\n *  @return   An array of objects 'o' where each object has exactly two\n *            properties: 'o.x' and 'o.y' denoting the left-bottom corner\n *            of the corresponding cell.\n */\nTreeNode.prototype.cellsInBand = function(lowerBound, upperBound, subsumed) {\n  var cells = [];\n\n  subsumed = (typeof subsumed === 'undefined') ? true : subsumed;\n\n  if ((this.lowerBound > upperBound) || (this.upperBound < lowerBound))\n    return cells;\n\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if ((subsumed) ||\n        (this.lowerBound <= lowerBound) ||\n        (this.upperBound >= upperBound)) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA)\n      cells = cells.concat(this.childA.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childB)\n      cells = cells.concat(this.childB.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childD)\n      cells = cells.concat(this.childD.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childC)\n      cells = cells.concat(this.childC.cellsInBand(lowerBound, upperBound, subsumed));\n  }\n\n  return cells;\n};\n\n\nTreeNode.prototype.cellsBelowThreshold = function(threshold, subsumed) {\n  var cells = [];\n\n  subsumed = (typeof subsumed === 'undefined') ? true : subsumed;\n\n  if (this.lowerBound > threshold)\n    return cells;\n\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if ((subsumed) ||\n        (this.upperBound >= threshold)) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA)\n      cells = cells.concat(this.childA.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childB)\n      cells = cells.concat(this.childB.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childD)\n      cells = cells.concat(this.childD.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childC)\n      cells = cells.concat(this.childC.cellsBelowThreshold(threshold, subsumed));\n  }\n\n  return cells;\n};\n\n\n/*\n * Given a scalar field `data` construct a QuadTree\n * to efficiently lookup those parts of the scalar\n * field where values are within a particular\n * range of [lowerbound, upperbound] limits.\n */\nfunction QuadTree(data) {\n  var i, cols;\n\n  /* do some input checking */\n  if (!data)\n    throw new Error('data is required');\n\n  if (!Array.isArray(data) ||\n      !Array.isArray(data[0]))\n    throw new Error('data must be scalar field, i.e. array of arrays');\n\n  if (data.length < 2)\n    throw new Error('data must contain at least two rows');\n\n  /* check if we've got a regular grid */\n  cols = data[0].length;\n\n  if (cols < 2)\n    throw new Error('data must contain at least two columns');\n\n  for (i = 1; i < data.length; i++) {\n    if (!Array.isArray(data[i]))\n      throw new Error('Row ' + i + ' is not an array');\n\n    if (data[i].length != cols)\n      throw new Error('unequal row lengths detected, please provide a regular grid');\n  }\n\n  /* create pre-processing object */\n  this.data = data;\n  /* root node, i.e. entry to the data */\n  this.root = new TreeNode(data, 0, 0, data[0].length - 1, data.length - 1);\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n\n/*\n * Compute the iso lines for a scalar 2D field given\n * a certain threshold by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n */\n\nfunction isoLines(input, threshold, options) {\n  var settings,\n    i,\n    j,\n    useQuadTree   = false,\n    multiLine     = false,\n    tree          = null,\n    root          = null,\n    data          = null,\n    cellGrid      = null,\n    linePolygons  = null,\n    ret           = [];\n\n  /* validation */\n  if (!input) throw new Error('data is required');\n  if (threshold === undefined || threshold === null) throw new Error('threshold is required');\n  if ((!!options) && (typeof options !== 'object')) throw new Error('options must be an object');\n\n  /* process options */\n  settings = isoLineOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input threshold(s) */\n  if (Array.isArray(threshold)) {\n    multiLine = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < threshold.length; i++)\n      if (isNaN(+threshold[i]))\n        throw new Error('threshold[' + i + '] is not a number');\n  } else {\n    if (isNaN(+threshold))\n      throw new Error('threshold must be a number or array of numbers');\n\n    threshold = [ threshold ];\n  }\n\n  /* create QuadTree root node if not already present */\n  if ((useQuadTree) && (!root)) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n\n  if (settings.verbose) {\n    if(settings.polygons)\n      console.log('MarchingSquaresJS-isoLines: returning single lines (polygons) for each grid cell');\n    else\n      console.log('MarchingSquaresJS-isoLines: returning line paths (polygons) for entire data grid');\n\n    if (multiLine)\n      console.log('MarchingSquaresJS-isoLines: multiple lines requested, returning array of line paths instead of lines for a single threshold');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all threhsold values */\n  threshold.forEach(function(t, i) {\n    linePolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.threshold = t;\n\n    if(settings.verbose)\n      console.log('MarchingSquaresJS-isoLines: computing iso lines for threshold ' + t);\n\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root\n          .cellsBelowThreshold(settings.threshold, true)\n          .forEach(function(c) {\n            linePolygons  = linePolygons.concat(\n              cell2Polygons(\n                prepareCell(data,\n                  c.x,\n                  c.y,\n                  settings),\n                c.x,\n                c.y,\n                settings\n              ));\n          });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i)\n            linePolygons  = linePolygons.concat(\n              cell2Polygons(\n                prepareCell(data,\n                  i,\n                  j,\n                  settings),\n                i,\n                j,\n                settings\n              ));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i)\n        cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root\n          .cellsBelowThreshold(settings.threshold, false)\n          .forEach(function(c) {\n            cellGrid[c.x][c.y] = prepareCell(data,\n              c.x,\n              c.y,\n              settings);\n          });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j]  = prepareCell(data,\n              i,\n              j,\n              settings);\n          }\n        }\n      }\n\n      linePolygons = traceLinePaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiLine)\n      ret.push(linePolygons);\n    else\n      ret = linePolygons;\n\n    if(typeof settings.successCallback === 'function')\n      settings.successCallback(ret, t);\n\n  });\n\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n * ################################\n * Isocontour implementation below\n * ################################\n */\n\nfunction prepareCell(grid, x, y, settings) {\n  var left,\n    right,\n    top,\n    bottom,\n    average,\n    cell;\n\n  var cval      = 0;\n  var x3        = grid[y + 1][x];\n  var x2        = grid[y + 1][x + 1];\n  var x1        = grid[y][x + 1];\n  var x0        = grid[y][x];\n  var threshold = settings.threshold;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if(isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) smaller, or (ii)\n   * greater or equal to the iso line threshold. We encode\n   * this property using 1 bit of information, where\n   *\n   * 0 ... below,\n   * 1 ... above or equal\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 is the least significant bit (0th),\n   * x1 the 2nd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= ((x3 >= threshold) ? 8 : 0);\n  cval |= ((x2 >= threshold) ? 4 : 0);\n  cval |= ((x1 >= threshold) ? 2 : 0);\n  cval |= ((x0 >= threshold) ? 1 : 0);\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /* compose the cell object */\n  cell = {\n    cval:         cval,\n    polygons:     [],\n    edges:        {},\n    x0:           x0,\n    x1:           x1,\n    x2:           x2,\n    x3:           x3\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   */\n  switch (cval) {\n  case 0:\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 15:\n    /* cell is outside (above) threshold, no polygons */\n    break;\n\n  case 14: /* 1110 */\n    left    = settings.interpolate(x0, x3, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [bottom, 0] ]);\n\n    break;\n\n  case 13: /* 1101 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [1, right], [1, 0] ]);\n\n    break;\n\n  case 11: /* 1011 */\n    right = settings.interpolate(x1, x2, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [1, right], [top, 1], [1, 1] ]);\n\n    break;\n\n  case 7: /* 0111 */\n    left  = settings.interpolate(x0, x3, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [top, 1], [0, left], [0, 1] ]);\n\n    break;\n\n  case 1: /* 0001 */\n    left    = settings.interpolate(x0, x3, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [0, left], [0, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 2: /* 0010 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, right], [bottom, 0] ]);\n\n    break;\n\n  case 4: /* 0100 */\n    right = settings.interpolate(x1, x2, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [top, 1], [1, right], [1, 0] ]);\n\n    break;\n\n  case 8: /* 1000 */\n    left  = settings.interpolate(x0, x3, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [top, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 12: /* 1100 */\n    left  = settings.interpolate(x0, x3, threshold);\n    right = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [1, right], [1, 0] ]);\n\n    break;\n\n  case 9: /* 1001 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [top, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 3: /* 0011 */\n    left  = settings.interpolate(x0, x3, threshold);\n    right = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, left], [0, 1], [1, 1], [1, right] ]);\n\n    break;\n\n  case 6: /* 0110 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [top, 1], [bottom, 0] ]);\n\n    break;\n\n  case 10: /* 1010 */\n    left    = settings.interpolate(x0, x3, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n    average = (x0 + x1 + x2 + x3) / 4;\n\n    if (settings.polygons_full) {\n      if (average < threshold) {\n        cell.edges.left = {\n          path: [ [0, left], [top, 1] ],\n          move: {\n            x:      0,\n            y:      1,\n            enter:  'bottom'\n          }\n        };\n        cell.edges.right = {\n          path: [ [1, right], [bottom, 0] ],\n          move: {\n            x:      0,\n            y:      -1,\n            enter:  'top'\n          }\n        };\n      } else {\n        cell.edges.right = {\n          path: [ [1, right], [top, 1] ],\n          move: {\n            x:      0,\n            y:      1,\n            enter:  'bottom'\n          }\n        };\n        cell.edges.left = {\n          path: [ [0, left], [bottom, 0] ],\n          move: {\n            x:      0,\n            y:      -1,\n            enter:  'top'\n          }\n        };\n      }\n    }\n\n    if (settings.polygons) {\n      if (average < threshold) {\n        cell.polygons.push([ [0, 0], [0, left], [top, 1], [1, 1], [1, right], [bottom, 0] ]);\n      } else {\n        cell.polygons.push([ [0, 0], [0, left], [bottom, 0] ]);\n        cell.polygons.push([ [top, 1], [1, 1], [1, right] ]);\n      }\n    }\n\n    break;\n\n  case 5: /* 0101 */\n    left    = settings.interpolate(x0, x3, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n    average = (x0 + x1 + x2 + x3) / 4;\n\n    if (settings.polygons_full) {\n      if (average < threshold) {\n        cell.edges.bottom = {\n          path: [ [bottom, 0], [0, left] ],\n          move: {\n            x:      -1,\n            y:      0,\n            enter:  'right'\n          }\n        };\n        cell.edges.top = {\n          path: [ [top, 1], [1, right] ],\n          move: {\n            x:      1,\n            y:      0,\n            enter:  'left'\n          }\n        };\n      } else {\n        cell.edges.top = {\n          path: [ [top, 1], [0, left] ],\n          move: {\n            x:      -1,\n            y:      0,\n            enter:  'right'\n          }\n        };\n        cell.edges.bottom = {\n          path: [ [bottom, 0], [1, right] ],\n          move: {\n            x:      1,\n            y:      0,\n            enter:  'left'\n          }\n        };\n      }\n    }\n\n    if (settings.polygons) {\n      if (average < threshold) {\n        cell.polygons.push([ [0, left], [0, 1], [top, 1], [1, right], [1, 0], [bottom, 0] ]);\n      } else {\n        cell.polygons.push([ [0, left], [0, 1], [top, 1] ]);\n        cell.polygons.push([ [bottom, 0], [1, right], [1, 0] ]);\n      }\n    }\n\n    break;\n  }\n\n  return cell;\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n\n/*\n * lookup table to generate polygon paths or edges required to\n * trace the full polygon(s)\n */\nvar shapeCoordinates = {\n  square:       function(cell, x0, x1, x2, x3, opt) {\n    if (opt.polygons)\n      cell.polygons.push([ [0,0], [0, 1], [1, 1], [1, 0] ]);\n  },\n\n  triangle_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [bottomleft, 0], [0, 0] ]);\n  },\n\n  triangle_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [1, rightbottom], [1, 0] ]);\n  },\n\n  triangle_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [1, righttop], [topright, 1], [1, 1] ]);\n  },\n\n  triangle_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1] ]);\n  },\n\n  tetragon_t:   function(cell, x0, x1, x2, x3, opt) {\n    var righttop  = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var lefttop   = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [1, 1], [1, righttop] ]);\n  },\n\n  tetragon_r:   function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  tetragon_b:   function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [1, rightbottom], [1, 0] ]);\n  },\n\n  tetragon_l:   function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [bottomleft, 0] ]);\n  },\n\n  tetragon_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [bottomright, 0] ]);\n  },\n\n  tetragon_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [1, righttop] ],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  },\n\n  tetragon_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [topleft, 1] ],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [1, rightbottom], [topleft, 1], [topright, 1], [1, righttop] ]);\n  },\n\n  tetragon_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tr = {\n        path: [ [topright, 1], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topright, 1], [0, leftbottom], [0, lefttop], [topleft, 1] ]);\n  },\n\n  tetragon_lr:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [ [0, lefttop], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [0, lefttop], [1, righttop], [1, rightbottom] ]);\n  },\n\n  tetragon_tb:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tr =  {\n        path: [ [topright, 1], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [topleft, 1], [topright, 1], [bottomright, 0] ]);\n  },\n\n  pentagon_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, rightbottom]],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  pentagon_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  pentagon_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, righttop], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [1, 1], [1, 0], [bottomright, 0] ]);\n  },\n\n  pentagon_tr_rl: function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom] ]);\n  },\n\n  pentagon_rb_bt: function(cell, x0, x1, x2, x3, opt) {\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topright, 1], [1, 1], [1, righttop], [bottomright, 0], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl_lr: function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, leftbottom], [0, lefttop], [1, rightbottom], [1, 0] ]);\n  },\n\n  pentagon_lt_tb: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl_tb: function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [ topleft, 1], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1], [bottomright, 0], [bottomleft, 0] ]);\n  },\n\n  pentagon_lt_rl: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop] ]);\n  },\n\n  pentagon_tr_bt: function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topleft, 1], [topright, 1], [1, rightbottom], [1, 0], [bottomright, 0] ]);\n  },\n\n  pentagon_rb_lr: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  hexagon_lt_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  hexagon_bl_lt:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  hexagon_bl_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, lefttop], [0, 1], [1, 1], [1, righttop], [bottomright, 0] ]);\n  },\n\n  hexagon_tr_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  hexagon_lt_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, righttop], [bottomleft, 0] ]);\n  },\n\n  hexagon_bl_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, lefttop], [0, 1], [topleft, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  heptagon_tr:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop], [bottomright, 0] ]);\n  },\n\n  heptagon_bl:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  heptagon_tl:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  },\n\n  heptagon_br:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright,0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  octagon:        function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  }\n};\n\n\n/*\n * Compute isobands(s) for a scalar 2D field given a certain\n * threshold and a bandwidth by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n * either for individual polygons within each grid cell, or the\n * outline of connected polygons.\n */\nfunction isoBands(input, minV, bandWidth, options) {\n  var i,\n    j,\n    settings,\n    useQuadTree   = false,\n    tree          = null,\n    root          = null,\n    data          = null,\n    cellGrid      = null,\n    multiBand     = false,\n    bw            = [],\n    bandPolygons  = [],\n    ret           = [];\n\n  /* basic input validation */\n  if (!input) throw new Error('data is required');\n  if (minV === undefined || minV === null) throw new Error('lowerBound is required');\n  if (bandWidth === undefined || bandWidth === null) throw new Error('bandWidth is required');\n  if ((!!options) && (typeof options !== 'object')) throw new Error('options must be an object');\n\n  settings = isoBandOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input thresholds */\n  if (Array.isArray(minV)) {\n    multiBand = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < minV.length; i++)\n      if (isNaN(+minV[i]))\n        throw new Error('lowerBound[' + i + '] is not a number');\n\n    if (Array.isArray(bandWidth)) {\n      if (minV.length !== bandWidth.length)\n        throw new Error('lowerBound and bandWidth have unequal lengths');\n\n      /* check bandwidth values */\n      for (i = 0; i < bandWidth.length; i++)\n        if (isNaN(+bandWidth[i]))\n          throw new Error('bandWidth[' + i + '] is not a number');\n    } else {\n      if (isNaN(+bandWidth))\n        throw new Error('bandWidth must be a number');\n\n      bw = [];\n      for (i = 0; i < minV.length; i++) {\n        bw.push(bandWidth);\n      }\n      bandWidth = bw;\n    }\n  } else {\n    if (isNaN(+minV))\n      throw new Error('lowerBound must be a number');\n\n    minV = [ minV ];\n\n    if (isNaN(+bandWidth))\n      throw new Error('bandWidth must be a number');\n\n    bandWidth = [ bandWidth ];\n  }\n\n  /* create QuadTree root node if not already present */\n  if ((useQuadTree) && (!root)) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n\n  if (settings.verbose) {\n    if(settings.polygons)\n      console.log('MarchingSquaresJS-isoBands: returning single polygons for each grid cell');\n    else\n      console.log('MarchingSquaresJS-isoBands: returning polygon paths for entire data grid');\n\n    if (multiBand)\n      console.log('MarchingSquaresJS-isoBands: multiple bands requested, returning array of band polygons instead of polygons for a single band');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all minV values */\n  minV.forEach(function(lowerBound, b) {\n    bandPolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.minV = lowerBound;\n    settings.maxV = lowerBound + bandWidth[b];\n\n    if(settings.verbose)\n      console.log('MarchingSquaresJS-isoBands: computing isobands for [' + lowerBound + ':' + (lowerBound + bandWidth[b]) + ']');\n\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root\n          .cellsInBand(settings.minV, settings.maxV, true)\n          .forEach(function(c) {\n            bandPolygons  = bandPolygons.concat(\n              cell2Polygons(\n                prepareCell$1(data,\n                  c.x,\n                  c.y,\n                  settings),\n                c.x,\n                c.y,\n                settings\n              ));\n          });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i)\n            bandPolygons  = bandPolygons.concat(\n              cell2Polygons(\n                prepareCell$1(data,\n                  i,\n                  j,\n                  settings),\n                i,\n                j,\n                settings\n              ));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i)\n        cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root\n          .cellsInBand(settings.minV, settings.maxV, false)\n          .forEach(function(c) {\n            cellGrid[c.x][c.y] = prepareCell$1(data,\n              c.x,\n              c.y,\n              settings);\n          });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j]  = prepareCell$1(data,\n              i,\n              j,\n              settings);\n          }\n        }\n      }\n\n      bandPolygons = traceBandPaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiBand)\n      ret.push(bandPolygons);\n    else\n      ret = bandPolygons;\n\n    if(typeof settings.successCallback === 'function')\n      settings.successCallback(ret, lowerBound, bandWidth[b]);\n  });\n\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n *  For isoBands, each square is defined by the three states\n * of its corner points. However, since computers use power-2\n * values, we use 2bits per trit, i.e.:\n *\n * 00 ... below minV\n * 01 ... between minV and maxV\n * 10 ... above maxV\n *\n * Hence we map the 4-trit configurations as follows:\n *\n * 0000 => 0\n * 0001 => 1\n * 0002 => 2\n * 0010 => 4\n * 0011 => 5\n * 0012 => 6\n * 0020 => 8\n * 0021 => 9\n * 0022 => 10\n * 0100 => 16\n * 0101 => 17\n * 0102 => 18\n * 0110 => 20\n * 0111 => 21\n * 0112 => 22\n * 0120 => 24\n * 0121 => 25\n * 0122 => 26\n * 0200 => 32\n * 0201 => 33\n * 0202 => 34\n * 0210 => 36\n * 0211 => 37\n * 0212 => 38\n * 0220 => 40\n * 0221 => 41\n * 0222 => 42\n * 1000 => 64\n * 1001 => 65\n * 1002 => 66\n * 1010 => 68\n * 1011 => 69\n * 1012 => 70\n * 1020 => 72\n * 1021 => 73\n * 1022 => 74\n * 1100 => 80\n * 1101 => 81\n * 1102 => 82\n * 1110 => 84\n * 1111 => 85\n * 1112 => 86\n * 1120 => 88\n * 1121 => 89\n * 1122 => 90\n * 1200 => 96\n * 1201 => 97\n * 1202 => 98\n * 1210 => 100\n * 1211 => 101\n * 1212 => 102\n * 1220 => 104\n * 1221 => 105\n * 1222 => 106\n * 2000 => 128\n * 2001 => 129\n * 2002 => 130\n * 2010 => 132\n * 2011 => 133\n * 2012 => 134\n * 2020 => 136\n * 2021 => 137\n * 2022 => 138\n * 2100 => 144\n * 2101 => 145\n * 2102 => 146\n * 2110 => 148\n * 2111 => 149\n * 2112 => 150\n * 2120 => 152\n * 2121 => 153\n * 2122 => 154\n * 2200 => 160\n * 2201 => 161\n * 2202 => 162\n * 2210 => 164\n * 2211 => 165\n * 2212 => 166\n * 2220 => 168\n * 2221 => 169\n * 2222 => 170\n */\n\n/*\n * ####################################\n * Some small helper functions\n * ####################################\n */\n\nfunction computeCenterAverage(bl, br, tr, tl, minV, maxV) {\n  var average = (tl + tr + br + bl) / 4;\n\n  if (average > maxV)\n    return 2; /* above isoband limits */\n\n  if (average < minV)\n    return 0; /* below isoband limits */\n\n  return 1; /* within isoband limits */\n}\n\n\nfunction prepareCell$1(grid, x, y, opt) {\n  var cell,\n    center_avg;\n\n  /*  compose the 4-trit corner representation */\n  var cval = 0;\n  var x3 = grid[y + 1][x];\n  var x2 = grid[y + 1][x + 1];\n  var x1 = grid[y][x + 1];\n  var x0 = grid[y][x];\n  var minV  = opt.minV;\n  var maxV  = opt.maxV;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if(isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) below, (ii) within,\n   * or (iii) above the values of the isoband limits. We\n   * encode this property using 2 bits of information, where\n   *\n   * 00 ... below,\n   * 01 ... within, and\n   * 10 ... above\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 are the two least significant bits (0th, 1st),\n   * x1 the 2nd and 3rd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= (x3 < minV) ? 0 : (x3 > maxV) ? 128 : 64;\n  cval |= (x2 < minV) ? 0 : (x2 > maxV) ? 32 : 16;\n  cval |= (x1 < minV) ? 0 : (x1 > maxV) ? 8 : 4;\n  cval |= (x0 < minV) ? 0 : (x0 > maxV) ? 2 : 1;\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /*\n   * cell center average trit for ambiguous cases, where\n   * 0 ... below iso band\n   * 1 ... within iso band\n   * 2 ... above isoband\n   */\n  center_avg = 0;\n\n  cell = {\n    cval:         cval,\n    polygons:     [],\n    edges:        {},\n    x0:           x0,\n    x1:           x1,\n    x2:           x2,\n    x3:           x3,\n    x:            x,\n    y:            y\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   * according to look-up table\n   */\n  switch (cval) {\n  case 85:  /* 1111 */\n    shapeCoordinates.square(cell, x0, x1, x2, x3, opt);\n    /* fall through */\n  case 0:   /* 0000 */\n    /* fall through */\n  case 170: /* 2222 */\n    break;\n\n    /* single triangle cases */\n\n  case 169: /* 2221 */\n    shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 166: /* 2212 */\n    shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 154: /* 2122 */\n    shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 106: /* 1222 */\n    shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 1: /* 0001 */\n    shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 4: /* 0010 */\n    shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 16: /* 0100 */\n    shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 64: /* 1000 */\n    shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single trapezoid cases */\n\n  case 168: /* 2220 */\n    shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 162: /* 2202 */\n    shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 138: /* 2022 */\n    shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 42: /* 0222 */\n    shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 2: /* 0002 */\n    shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 8: /* 0020 */\n    shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 32: /* 0200 */\n    shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 128: /* 2000 */\n    shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single rectangle cases */\n\n  case 5: /* 0011 */\n    shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 20: /* 0110 */\n    shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 80: /* 1100 */\n    shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 65: /* 1001 */\n    shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 165: /* 2211 */\n    shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 150: /* 2112 */\n    shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 90: /* 1122 */\n    shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 105: /* 1221 */\n    shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 160: /* 2200 */\n    shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 130: /* 2002 */\n    shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 10: /* 0022 */\n    shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 40: /* 0220 */\n    shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single pentagon cases */\n\n  case 101: /* 1211 */\n    shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 149: /* 2111 */\n    shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 86: /* 1112 */\n    shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 89: /* 1121 */\n    shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 69: /* 1011 */\n    shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 21: /* 0111 */\n    shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 84: /* 1110 */\n    shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 81: /* 1101 */\n    shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 96: /* 1200 */\n    shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 24: /* 0120 */\n    shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 6: /* 0012 */\n    shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 129: /* 2001 */\n    shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 74: /* 1022 */\n    shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 146: /* 2102 */\n    shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 164: /* 2210 */\n    shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 41: /* 0221 */\n    shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 66: /* 1002 */\n    shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 144: /* 2100 */\n    shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 36: /* 0210 */\n    shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 9: /* 0021 */\n    shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 104: /* 1220 */\n    shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 26: /* 0122 */\n    shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 134: /* 2012 */\n    shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 161: /* 2201 */\n    shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single hexagon cases */\n\n  case 37: /* 0211 */\n    shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 148: /* 2110 */\n    shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 82: /* 1102 */\n    shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 73: /* 1021 */\n    shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 133: /* 2011 */\n    shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 22: /* 0112 */\n    shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 88: /* 1120 */\n    shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 97: /* 1201 */\n    shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 145: /* 2101 */\n    shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 25: /* 0121 */\n    shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 70: /* 1012 */\n    shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 100: /* 1210 */\n    shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* 6-sided saddles */\n\n  case 17: /* 0101 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 68: /* 1010 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 153: /* 2121 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 102: /* 1212 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n\n    /* 7-sided saddles */\n\n  case 152: /* 2120 */\n\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 137: /* 2021 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 98: /* 1202 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 38: /* 0212 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 18: /* 0102 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 33: /* 0201 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 72: /* 1020 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 132: /* 2010 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n\n    /* 8-sided saddles */\n\n  case 136: /* 2020 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    if (center_avg === 0) {\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else if (center_avg === 1) {\n      shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 34: /* 0202 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    if (center_avg === 0) {\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else if (center_avg === 1) {\n      shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n  }\n\n  return cell;\n}\n\nexport { isoLines, isoLines as isoContours, isoBands, QuadTree, QuadTree as quadTree };\n", "import { bbox } from \"@turf/bbox\";\nimport { area } from \"@turf/area\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { explode } from \"@turf/explode\";\nimport { collectionOf } from \"@turf/invariant\";\nimport {\n  polygon,\n  multiPolygon,\n  featureCollection,\n  isObject,\n} from \"@turf/helpers\";\n\nimport {\n  FeatureCollection,\n  Point,\n  GeoJsonProperties,\n  MultiPolygon,\n  Position,\n  Polygon,\n  Feature,\n} from \"geojson\";\n\nimport { gridToMatrix } from \"./lib/grid-to-matrix.js\";\nimport { isoBands } from \"marchingsquares\";\n\ntype GroupRingProps = { [prop: string]: string };\ntype GroupedRings =\n  | {\n      groupedRings: Position[][][];\n    }\n  | GroupRingProps;\n\n/**\n * Takes a square or rectangular grid {@link FeatureCollection} of {@link Point} features with z-values and an array of\n * value breaks and generates filled contour isobands.\n *\n * @name isobands\n * @param {FeatureCollection<Point>} pointGrid input points - must be square or rectangular\n * @param {Array<number>} breaks where to draw contours\n * @param {Object} [options={}] options on output\n * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled\n * @param {Object} [options.commonProperties={}] GeoJSON properties passed to ALL isobands\n * @param {Array<Object>} [options.breaksProperties=[]] GeoJSON properties passed, in order, to the correspondent isoband (order defined by breaks)\n * @returns {FeatureCollection<MultiPolygon>} a FeatureCollection of {@link MultiPolygon} features representing isobands\n */\nfunction isobands(\n  pointGrid: FeatureCollection<Point>,\n  breaks: number[],\n  options?: {\n    zProperty?: string;\n    commonProperties?: GeoJsonProperties;\n    breaksProperties?: GeoJsonProperties[];\n  }\n): FeatureCollection<MultiPolygon> {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const zProperty = options.zProperty || \"elevation\";\n  const commonProperties = options.commonProperties || {};\n  const breaksProperties = options.breaksProperties || [];\n\n  // Validation\n  collectionOf(pointGrid, \"Point\", \"Input must contain Points\");\n  if (!breaks) throw new Error(\"breaks is required\");\n  if (!Array.isArray(breaks)) throw new Error(\"breaks is not an Array\");\n  if (!isObject(commonProperties))\n    throw new Error(\"commonProperties is not an Object\");\n  if (!Array.isArray(breaksProperties))\n    throw new Error(\"breaksProperties is not an Array\");\n\n  // Isoband methods\n  const matrix = gridToMatrix(pointGrid, { zProperty: zProperty, flip: true });\n  let contours = createContourLines(matrix, breaks, zProperty);\n  contours = rescaleContours(contours, matrix, pointGrid);\n\n  const multipolygons = contours.map((contour, index) => {\n    if (breaksProperties[index] && !isObject(breaksProperties[index])) {\n      throw new Error(\"Each mappedProperty is required to be an Object\");\n    }\n    // collect all properties\n    const contourProperties = {\n      ...commonProperties,\n      ...breaksProperties[index],\n    };\n\n    contourProperties[zProperty] = (contour as GroupRingProps)[zProperty];\n\n    const multiP = multiPolygon(\n      contour.groupedRings as Position[][][],\n      contourProperties\n    );\n    return multiP;\n  });\n\n  return featureCollection(multipolygons);\n}\n\n/**\n * Creates the contours lines (featuresCollection of polygon features) from the 2D data grid\n *\n * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it\n * assumes the points (x-y coordinates) are one 'unit' distance. The result of the IsoBands function needs to be\n * rescaled, with turfjs, to the original area and proportions on the map\n *\n * @private\n * @param {Array<Array<number>>} matrix Grid Data\n * @param {Array<number>} breaks Breaks\n * @param {string} [property='elevation'] Property\n * @returns {Array<any>} contours\n */\nfunction createContourLines(\n  matrix: number[][],\n  breaks: number[],\n  property: string\n): GroupedRings[] {\n  const contours: GroupedRings[] = [];\n  for (let i = 1; i < breaks.length; i++) {\n    const lowerBand = +breaks[i - 1]; // make sure the breaks value is a number\n    const upperBand = +breaks[i];\n\n    const isobandsCoords = isoBands(matrix, lowerBand, upperBand - lowerBand);\n    // as per GeoJson rules for creating a Polygon, make sure the first element\n    // in the array of LinearRings represents the exterior ring (i.e. biggest area),\n    // and any subsequent elements represent interior rings (i.e. smaller area);\n    // this avoids rendering issues of the MultiPolygons on the map\n    const nestedRings = orderByArea(isobandsCoords);\n    const groupedRings = groupNestedRings(nestedRings);\n\n    contours.push({\n      groupedRings: groupedRings as Position[][][],\n      [property]: lowerBand + \"-\" + upperBand,\n    });\n  }\n  return contours;\n}\n\n/**\n * Transform isobands of 2D grid to polygons for the map\n *\n * @private\n * @param {Array<any>} contours Contours\n * @param {Array<Array<number>>} matrix Grid Data\n * @param {Object} points Points by Latitude\n * @returns {Array<any>} contours\n */\nfunction rescaleContours(\n  contours: GroupedRings[],\n  matrix: number[][],\n  points: FeatureCollection<Point>\n): GroupedRings[] {\n  // get dimensions (on the map) of the original grid\n  const gridBbox = bbox(points); // [ minX, minY, maxX, maxY ]\n  const originalWidth = gridBbox[2] - gridBbox[0];\n  const originalHeigth = gridBbox[3] - gridBbox[1];\n\n  // get origin, which is the first point of the last row on the rectangular data on the map\n  const x0 = gridBbox[0];\n  const y0 = gridBbox[1];\n  // get number of cells per side\n  const matrixWidth = matrix[0].length - 1;\n  const matrixHeight = matrix.length - 1;\n  // calculate the scaling factor between matrix and rectangular grid on the map\n  const scaleX = originalWidth / matrixWidth;\n  const scaleY = originalHeigth / matrixHeight;\n\n  // resize and shift each point/line of the isobands\n  return contours.map(function (contour) {\n    contour.groupedRings = (contour.groupedRings as Position[][][]).map(\n      function (lineRingSet) {\n        return lineRingSet.map(function (lineRing) {\n          return lineRing.map((point: Position) => [\n            point[0] * scaleX + x0,\n            point[1] * scaleY + y0,\n          ]);\n        });\n      }\n    );\n\n    return contour;\n  });\n}\n\n/*  utility functions */\n\n/**\n * Returns an array of coordinates (of LinearRings) in descending order by area\n *\n * @private\n * @param {Array<LineString>} ringsCoords array of closed LineString\n * @returns {Array} array of the input LineString ordered by area\n */\nfunction orderByArea(ringsCoords: Position[][]): Position[][] {\n  const ringsWithArea = ringsCoords.map(function (coords) {\n    // associate each lineRing with its area\n    return { ring: coords, area: area(polygon([coords])) };\n  });\n  ringsWithArea.sort(function (a, b) {\n    // bigger --> smaller\n    return b.area - a.area;\n  });\n  // create a new array of linearRings coordinates ordered by their area\n  return ringsWithArea.map(function (x) {\n    return x.ring;\n  });\n}\n\n/**\n * Returns an array of arrays of coordinates, each representing\n * a set of (coordinates of) nested LinearRings,\n * i.e. the first ring contains all the others\n *\n * @private\n * @param {Array} orderedLinearRings array of coordinates (of LinearRings) in descending order by area\n * @returns {Array<Array>} Array of coordinates of nested LinearRings\n */\nfunction groupNestedRings(orderedLinearRings: Position[][]): Position[][][] {\n  // create a list of the (coordinates of) LinearRings\n  const lrList = orderedLinearRings.map((lr) => {\n    return { lrCoordinates: lr, grouped: false };\n  });\n  const groupedLinearRingsCoords: Position[][][] = [];\n\n  while (!allGrouped(lrList)) {\n    for (let i = 0; i < lrList.length; i++) {\n      if (!lrList[i].grouped) {\n        // create new group starting with the larger not already grouped ring\n        const group: Position[][] = [];\n        group.push(lrList[i].lrCoordinates);\n        lrList[i].grouped = true;\n        const outerMostPoly = polygon([lrList[i].lrCoordinates]);\n        // group all the rings contained by the outermost ring\n        for (let j = i + 1; j < lrList.length; j++) {\n          if (!lrList[j].grouped) {\n            const lrPoly = polygon([lrList[j].lrCoordinates]);\n            if (isInside(lrPoly, outerMostPoly)) {\n              group.push(lrList[j].lrCoordinates);\n              lrList[j].grouped = true;\n            }\n          }\n        }\n        // insert the new group\n        groupedLinearRingsCoords.push(group);\n      }\n    }\n  }\n  return groupedLinearRingsCoords;\n}\n\n/**\n * @private\n * @param {Polygon} testPolygon polygon of interest\n * @param {Polygon} targetPolygon polygon you want to compare with\n * @returns {boolean} true if test-Polygon is inside target-Polygon\n */\nfunction isInside(\n  testPolygon: Feature<Polygon>,\n  targetPolygon: Feature<Polygon>\n): boolean {\n  const points = explode(testPolygon);\n  for (let i = 0; i < points.features.length; i++) {\n    if (!booleanPointInPolygon(points.features[i], targetPolygon)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @private\n * @param {Array<Object>} list list of objects which might contain the 'group' attribute\n * @returns {boolean} true if all the objects in the list are marked as grouped\n */\nfunction allGrouped(\n  list: { grouped: boolean; lrCoordinates: Position[] }[]\n): boolean {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].grouped === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport { isobands };\nexport default isobands;\n", "import { getCoords, collectionOf } from \"@turf/invariant\";\nimport { featureEach } from \"@turf/meta\";\nimport { isObject } from \"@turf/helpers\";\n\n/**\n * Takes a {@link Point} grid and returns a correspondent matrix {Array<Array<number>>}\n * of the 'property' values\n *\n * @name gridToMatrix\n * @param {FeatureCollection<Point>} grid of points\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled\n * @param {boolean} [options.flip=false] returns the matrix upside-down\n * @param {boolean} [options.flags=false] flags, adding a `matrixPosition` array field ([row, column]) to its properties,\n * the grid points with coordinates on the matrix\n * @returns {Array<Array<number>>} matrix of property values\n * @example\n *   var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\n *   var cellSize = 3;\n *   var grid = turf.pointGrid(extent, cellSize);\n *   // add a random property to each point between 0 and 60\n *   for (var i = 0; i < grid.features.length; i++) {\n *     grid.features[i].properties.elevation = (Math.random() * 60);\n *   }\n *   gridToMatrix(grid);\n *   //= [\n *     [ 1, 13, 10,  9, 10, 13, 18],\n *     [34,  8,  5,  4,  5,  8, 13],\n *     [10,  5,  2,  1,  2,  5,  4],\n *     [ 0,  4, 56, 19,  1,  4,  9],\n *     [10,  5,  2,  1,  2,  5, 10],\n *     [57,  8,  5,  4,  5,  0, 57],\n *     [ 3, 13, 10,  9,  5, 13, 18],\n *     [18, 13, 10,  9, 78, 13, 18]\n *   ]\n */\nfunction gridToMatrix(grid, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var zProperty = options.zProperty || \"elevation\";\n  var flip = options.flip;\n  var flags = options.flags;\n\n  // validation\n  collectionOf(grid, \"Point\", \"input must contain Points\");\n\n  var pointsMatrix = sortPointsByLatLng(grid, flip);\n\n  var matrix = [];\n  // create property matrix from sorted points\n  // looping order matters here\n  for (var r = 0; r < pointsMatrix.length; r++) {\n    var pointRow = pointsMatrix[r];\n    var row = [];\n    for (var c = 0; c < pointRow.length; c++) {\n      var point = pointRow[c];\n      // Check if zProperty exist\n      if (point.properties[zProperty]) row.push(point.properties[zProperty]);\n      else row.push(0);\n      // add flags\n      if (flags === true) point.properties.matrixPosition = [r, c];\n    }\n    matrix.push(row);\n  }\n\n  return matrix;\n}\n\n/**\n * Sorts points by latitude and longitude, creating a 2-dimensional array of points\n *\n * @private\n * @param {FeatureCollection<Point>} points GeoJSON Point features\n * @param {boolean} [flip=false] returns the matrix upside-down\n * @returns {Array<Array<Point>>} points ordered by latitude and longitude\n */\nfunction sortPointsByLatLng(points, flip) {\n  var pointsByLatitude = {};\n\n  // divide points by rows with the same latitude\n  featureEach(points, function (point) {\n    var lat = getCoords(point)[1];\n    if (!pointsByLatitude[lat]) pointsByLatitude[lat] = [];\n    pointsByLatitude[lat].push(point);\n  });\n\n  // sort points (with the same latitude) by longitude\n  var orderedRowsByLatitude = Object.keys(pointsByLatitude).map(function (lat) {\n    var row = pointsByLatitude[lat];\n    var rowOrderedByLongitude = row.sort(function (a, b) {\n      return getCoords(a)[0] - getCoords(b)[0];\n    });\n    return rowOrderedByLongitude;\n  });\n\n  // sort rows (of points with the same latitude) by latitude\n  var pointMatrix = orderedRowsByLatitude.sort(function (a, b) {\n    if (flip) return getCoords(a[0])[1] - getCoords(b[0])[1];\n    else return getCoords(b[0])[1] - getCoords(a[0])[1];\n  });\n\n  return pointMatrix;\n}\n\nexport { gridToMatrix };\nexport default gridToMatrix;\n", "import { bbox } from \"@turf/bbox\";\nimport { coordEach } from \"@turf/meta\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { multiLineString, featureCollection, isObject } from \"@turf/helpers\";\n// @ts-expect-error Legacy JS library with no types defined\nimport { isoContours } from \"marchingsquares\";\nimport { gridToMatrix } from \"./lib/grid-to-matrix.js\";\nimport {\n  FeatureCollection,\n  Point,\n  MultiLineString,\n  Feature,\n  GeoJsonProperties,\n} from \"geojson\";\n\n/**\n * Takes a grid {@link FeatureCollection} of {@link Point} features with z-values and an array of\n * value breaks and generates [isolines](https://en.wikipedia.org/wiki/Contour_line).\n *\n * @name isolines\n * @param {FeatureCollection<Point>} pointGrid input points\n * @param {Array<number>} breaks values of `zProperty` where to draw isolines\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled\n * @param {Object} [options.commonProperties={}] GeoJSON properties passed to ALL isolines\n * @param {Array<Object>} [options.breaksProperties=[]] GeoJSON properties passed, in order, to the correspondent isoline;\n * the breaks array will define the order in which the isolines are created\n * @returns {FeatureCollection<MultiLineString>} a FeatureCollection of {@link MultiLineString} features representing isolines\n * @example\n * // create a grid of points with random z-values in their properties\n * var extent = [0, 30, 20, 50];\n * var cellWidth = 100;\n * var pointGrid = turf.pointGrid(extent, cellWidth, {units: 'miles'});\n *\n * for (var i = 0; i < pointGrid.features.length; i++) {\n *     pointGrid.features[i].properties.temperature = Math.random() * 10;\n * }\n * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n *\n * var lines = turf.isolines(pointGrid, breaks, {zProperty: 'temperature'});\n *\n * //addToMap\n * var addToMap = [lines];\n */\nfunction isolines(\n  pointGrid: FeatureCollection<Point>,\n  breaks: number[],\n  options?: {\n    zProperty?: string;\n    commonProperties?: GeoJsonProperties;\n    breaksProperties?: GeoJsonProperties[];\n  }\n) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const zProperty = options.zProperty || \"elevation\";\n  const commonProperties = options.commonProperties || {};\n  const breaksProperties = options.breaksProperties || [];\n\n  // Input validation\n  collectionOf(pointGrid, \"Point\", \"Input must contain Points\");\n  if (!breaks) throw new Error(\"breaks is required\");\n  if (!Array.isArray(breaks)) throw new Error(\"breaks must be an Array\");\n  if (!isObject(commonProperties))\n    throw new Error(\"commonProperties must be an Object\");\n  if (!Array.isArray(breaksProperties))\n    throw new Error(\"breaksProperties must be an Array\");\n\n  // Isoline methods\n  const matrix = gridToMatrix(pointGrid, { zProperty: zProperty, flip: true });\n  const createdIsoLines = createIsoLines(\n    matrix,\n    breaks,\n    zProperty,\n    commonProperties,\n    breaksProperties\n  );\n  const scaledIsolines = rescaleIsolines(createdIsoLines, matrix, pointGrid);\n\n  return featureCollection(scaledIsolines);\n}\n\n/**\n * Creates the isolines lines (featuresCollection of MultiLineString features) from the 2D data grid\n *\n * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it\n * assumes the points (x-y coordinates) are one 'unit' distance. The result of the isolines function needs to be\n * rescaled, with turfjs, to the original area and proportions on the map\n *\n * @private\n * @param {Array<Array<number>>} matrix Grid Data\n * @param {Array<number>} breaks BreakProps\n * @param {string} zProperty name of the z-values property\n * @param {Object} [commonProperties={}] GeoJSON properties passed to ALL isolines\n * @param {Object} [breaksProperties=[]] GeoJSON properties passed to the correspondent isoline\n * @returns {Array<MultiLineString>} isolines\n */\nfunction createIsoLines(\n  matrix: number[][],\n  breaks: number[],\n  zProperty: string,\n  commonProperties: GeoJsonProperties,\n  breaksProperties: GeoJsonProperties[]\n): Feature<MultiLineString>[] {\n  const results = [];\n  for (let i = 0; i < breaks.length; i++) {\n    const threshold = +breaks[i]; // make sure it's a number\n\n    const properties = { ...commonProperties, ...breaksProperties[i] };\n    properties[zProperty] = threshold;\n    // Pass options to marchingsquares lib to reproduce historical turf\n    // behaviour.\n    const isoline = multiLineString(\n      isoContours(matrix, threshold, { linearRing: false, noFrame: true }),\n      properties\n    );\n\n    results.push(isoline);\n  }\n  return results;\n}\n\n/**\n * Translates and scales isolines\n *\n * @private\n * @param {Array<MultiLineString>} createdIsoLines to be rescaled\n * @param {Array<Array<number>>} matrix Grid Data\n * @param {Object} points Points by Latitude\n * @returns {Array<MultiLineString>} isolines\n */\nfunction rescaleIsolines(\n  createdIsoLines: Feature<MultiLineString>[],\n  matrix: number[][],\n  points: FeatureCollection<Point>\n) {\n  // get dimensions (on the map) of the original grid\n  const gridBbox = bbox(points); // [ minX, minY, maxX, maxY ]\n  const originalWidth = gridBbox[2] - gridBbox[0];\n  const originalHeigth = gridBbox[3] - gridBbox[1];\n\n  // get origin, which is the first point of the last row on the rectangular data on the map\n  const x0 = gridBbox[0];\n  const y0 = gridBbox[1];\n\n  // get number of cells per side\n  const matrixWidth = matrix[0].length - 1;\n  const matrixHeight = matrix.length - 1;\n\n  // calculate the scaling factor between matrix and rectangular grid on the map\n  const scaleX = originalWidth / matrixWidth;\n  const scaleY = originalHeigth / matrixHeight;\n\n  const resize = (point: number[]) => {\n    point[0] = point[0] * scaleX + x0;\n    point[1] = point[1] * scaleY + y0;\n  };\n\n  // resize and shift each point/line of the createdIsoLines\n  createdIsoLines.forEach((isoline) => {\n    coordEach(isoline, resize);\n  });\n  return createdIsoLines;\n}\n\nexport { isolines };\nexport default isolines;\n", "import { getCoords, collectionOf } from \"@turf/invariant\";\nimport { featureEach } from \"@turf/meta\";\nimport { isObject } from \"@turf/helpers\";\n\n/**\n * Takes a {@link Point} grid and returns a correspondent matrix {Array<Array<number>>}\n * of the 'property' values\n *\n * @name gridToMatrix\n * @param {FeatureCollection<Point>} grid of points\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled\n * @param {boolean} [options.flip=false] returns the matrix upside-down\n * @param {boolean} [options.flags=false] flags, adding a `matrixPosition` array field ([row, column]) to its properties,\n * the grid points with coordinates on the matrix\n * @returns {Array<Array<number>>} matrix of property values\n * @example\n *   var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\n *   var cellSize = 3;\n *   var grid = turf.pointGrid(extent, cellSize);\n *   // add a random property to each point between 0 and 60\n *   for (var i = 0; i < grid.features.length; i++) {\n *     grid.features[i].properties.elevation = (Math.random() * 60);\n *   }\n *   gridToMatrix(grid);\n *   //= [\n *     [ 1, 13, 10,  9, 10, 13, 18],\n *     [34,  8,  5,  4,  5,  8, 13],\n *     [10,  5,  2,  1,  2,  5,  4],\n *     [ 0,  4, 56, 19,  1,  4,  9],\n *     [10,  5,  2,  1,  2,  5, 10],\n *     [57,  8,  5,  4,  5,  0, 57],\n *     [ 3, 13, 10,  9,  5, 13, 18],\n *     [18, 13, 10,  9, 78, 13, 18]\n *   ]\n */\nfunction gridToMatrix(grid, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var zProperty = options.zProperty || \"elevation\";\n  var flip = options.flip;\n  var flags = options.flags;\n\n  // validation\n  collectionOf(grid, \"Point\", \"input must contain Points\");\n\n  var pointsMatrix = sortPointsByLatLng(grid, flip);\n\n  var matrix = [];\n  // create property matrix from sorted points\n  // looping order matters here\n  for (var r = 0; r < pointsMatrix.length; r++) {\n    var pointRow = pointsMatrix[r];\n    var row = [];\n    for (var c = 0; c < pointRow.length; c++) {\n      var point = pointRow[c];\n      // Check if zProperty exist\n      if (point.properties[zProperty]) row.push(point.properties[zProperty]);\n      else row.push(0);\n      // add flags\n      if (flags === true) point.properties.matrixPosition = [r, c];\n    }\n    matrix.push(row);\n  }\n\n  return matrix;\n}\n\n/**\n * Sorts points by latitude and longitude, creating a 2-dimensional array of points\n *\n * @private\n * @param {FeatureCollection<Point>} points GeoJSON Point features\n * @param {boolean} [flip=false] returns the matrix upside-down\n * @returns {Array<Array<Point>>} points ordered by latitude and longitude\n */\nfunction sortPointsByLatLng(points, flip) {\n  var pointsByLatitude = {};\n\n  // divide points by rows with the same latitude\n  featureEach(points, function (point) {\n    var lat = getCoords(point)[1];\n    if (!pointsByLatitude[lat]) pointsByLatitude[lat] = [];\n    pointsByLatitude[lat].push(point);\n  });\n\n  // sort points (with the same latitude) by longitude\n  var orderedRowsByLatitude = Object.keys(pointsByLatitude).map(function (lat) {\n    var row = pointsByLatitude[lat];\n    var rowOrderedByLongitude = row.sort(function (a, b) {\n      return getCoords(a)[0] - getCoords(b)[0];\n    });\n    return rowOrderedByLongitude;\n  });\n\n  // sort rows (of points with the same latitude) by latitude\n  var pointMatrix = orderedRowsByLatitude.sort(function (a, b) {\n    if (flip) return getCoords(a[0])[1] - getCoords(b[0])[1];\n    else return getCoords(b[0])[1] - getCoords(a[0])[1];\n  });\n\n  return pointMatrix;\n}\n\nexport { gridToMatrix };\nexport default gridToMatrix;\n", "import {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { point } from \"@turf/helpers\";\n\n/**\n * Takes a {@link LineString|linestring}, {@link MultiLineString|multi-linestring},\n * {@link MultiPolygon|multi-polygon} or {@link Polygon|polygon} and\n * returns {@link Point|points} at all self-intersections.\n *\n * @name kinks\n * @param {Feature<LineString|MultiLineString|MultiPolygon|Polygon>} featureIn input feature\n * @returns {FeatureCollection<Point>} self-intersections\n * @example\n * var poly = turf.polygon([[\n *   [-12.034835, 8.901183],\n *   [-12.060413, 8.899826],\n *   [-12.03638, 8.873199],\n *   [-12.059383, 8.871418],\n *   [-12.034835, 8.901183]\n * ]]);\n *\n * var kinks = turf.kinks(poly);\n *\n * //addToMap\n * var addToMap = [poly, kinks]\n */\nfunction kinks<T extends LineString | MultiLineString | Polygon | MultiPolygon>(\n  featureIn: Feature<T> | T\n): FeatureCollection<Point> {\n  let coordinates: any;\n  let feature: any;\n  const results: FeatureCollection<Point> = {\n    type: \"FeatureCollection\",\n    features: [],\n  };\n  if (featureIn.type === \"Feature\") {\n    feature = featureIn.geometry;\n  } else {\n    feature = featureIn;\n  }\n  if (feature.type === \"LineString\") {\n    coordinates = [feature.coordinates];\n  } else if (feature.type === \"MultiLineString\") {\n    coordinates = feature.coordinates;\n  } else if (feature.type === \"MultiPolygon\") {\n    coordinates = [].concat(...feature.coordinates);\n  } else if (feature.type === \"Polygon\") {\n    coordinates = feature.coordinates;\n  } else {\n    throw new Error(\n      \"Input must be a LineString, MultiLineString, \" +\n        \"Polygon, or MultiPolygon Feature or Geometry\"\n    );\n  }\n  coordinates.forEach((line1: any) => {\n    coordinates.forEach((line2: any) => {\n      for (let i = 0; i < line1.length - 1; i++) {\n        // start iteration at i, intersections for k < i have already\n        // been checked in previous outer loop iterations\n        for (let k = i; k < line2.length - 1; k++) {\n          if (line1 === line2) {\n            // segments are adjacent and always share a vertex, not a kink\n            if (Math.abs(i - k) === 1) {\n              continue;\n            }\n            // first and last segment in a closed lineString or ring always share a vertex, not a kink\n            if (\n              // segments are first and last segment of lineString\n              i === 0 &&\n              k === line1.length - 2 &&\n              // lineString is closed\n              line1[i][0] === line1[line1.length - 1][0] &&\n              line1[i][1] === line1[line1.length - 1][1]\n            ) {\n              continue;\n            }\n          }\n\n          const intersection: any = lineIntersects(\n            line1[i][0],\n            line1[i][1],\n            line1[i + 1][0],\n            line1[i + 1][1],\n            line2[k][0],\n            line2[k][1],\n            line2[k + 1][0],\n            line2[k + 1][1]\n          );\n          if (intersection) {\n            results.features.push(point([intersection[0], intersection[1]]));\n          }\n        }\n      }\n    });\n  });\n  return results;\n}\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(\n  line1StartX: any,\n  line1StartY: any,\n  line1EndX: any,\n  line1EndY: any,\n  line2StartX: any,\n  line2StartY: any,\n  line2EndX: any,\n  line2EndY: any\n) {\n  // if the lines intersect, the result contains the x and y of the\n  // intersection (treating the lines as infinite) and booleans for whether\n  // line segment 1 or line segment 2 contain the point\n  let denominator;\n  let a;\n  let b;\n  let numerator1;\n  let numerator2;\n  const result = {\n    x: null,\n    y: null,\n    onLine1: false,\n    onLine2: false,\n  };\n  denominator =\n    (line2EndY - line2StartY) * (line1EndX - line1StartX) -\n    (line2EndX - line2StartX) * (line1EndY - line1StartY);\n  if (denominator === 0) {\n    if (result.x !== null && result.y !== null) {\n      return result;\n    } else {\n      return false;\n    }\n  }\n  a = line1StartY - line2StartY;\n  b = line1StartX - line2StartX;\n  numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;\n  numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  // if we cast these lines infinitely in both directions, they intersect here:\n  result.x = line1StartX + a * (line1EndX - line1StartX);\n  result.y = line1StartY + a * (line1EndY - line1StartY);\n\n  // if line1 is a segment and line2 is infinite, they intersect if:\n  if (a >= 0 && a <= 1) {\n    result.onLine1 = true;\n  }\n  // if line2 is a segment and line1 is infinite, they intersect if:\n  if (b >= 0 && b <= 1) {\n    result.onLine2 = true;\n  }\n  // if line1 and line2 are segments, they intersect if both of the above are true\n  if (result.onLine1 && result.onLine2) {\n    return [result.x, result.y];\n  } else {\n    return false;\n  }\n}\n\nexport { kinks };\nexport default kinks;\n", "import { Feature, FeatureCollection, GeometryCollection } from \"geojson\";\nimport { distance } from \"@turf/distance\";\nimport { Units } from \"@turf/helpers\";\nimport { segmentReduce } from \"@turf/meta\";\n\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nfunction length(\n  geojson: Feature<any> | FeatureCollection<any> | GeometryCollection,\n  options: {\n    units?: Units;\n  } = {}\n): number {\n  // Calculate distance from 2-vertex line segments\n  return segmentReduce(\n    geojson,\n    (previousValue, segment) => {\n      const coords = segment!.geometry.coordinates;\n      return previousValue! + distance(coords[0], coords[1], options);\n    },\n    0\n  );\n}\n\nexport { length };\nexport default length;\n", "import { Feature, LineString } from \"geojson\";\nimport { circle } from \"@turf/circle\";\nimport { destination } from \"@turf/destination\";\nimport { Coord, lineString, Units } from \"@turf/helpers\";\n\n/**\n * Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;\n * 0 bearing is North of center point, positive clockwise.\n *\n * @name lineArc\n * @param {Coord} center center point\n * @param {number} radius radius of the circle\n * @param {number} bearing1 angle, in decimal degrees, of the first radius of the arc\n * @param {number} bearing2 angle, in decimal degrees, of the second radius of the arc\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.steps=64] number of steps (straight segments) that will constitute the arc\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @returns {Feature<LineString>} line arc\n * @example\n * var center = turf.point([-75, 40]);\n * var radius = 5;\n * var bearing1 = 25;\n * var bearing2 = 47;\n *\n * var arc = turf.lineArc(center, radius, bearing1, bearing2);\n *\n * //addToMap\n * var addToMap = [center, arc]\n */\nfunction lineArc(\n  center: Coord,\n  radius: number,\n  bearing1: number,\n  bearing2: number,\n  options: {\n    steps?: number;\n    units?: Units;\n  } = {}\n): Feature<LineString> {\n  // default params\n  const steps = options.steps || 64;\n\n  const angle1 = convertAngleTo360(bearing1);\n  const angle2 = convertAngleTo360(bearing2);\n  const properties =\n    !Array.isArray(center) && center.type === \"Feature\"\n      ? center.properties\n      : {};\n\n  // handle angle parameters\n  if (angle1 === angle2) {\n    return lineString(\n      circle(center, radius, options).geometry.coordinates[0],\n      properties\n    );\n  }\n  const arcStartDegree = angle1;\n  const arcEndDegree = angle1 < angle2 ? angle2 : angle2 + 360;\n\n  let alpha = arcStartDegree;\n  const coordinates = [];\n  let i = 0;\n  // How many degrees we'll swing around between each step.\n  const arcStep = (arcEndDegree - arcStartDegree) / steps;\n  // Add coords to the list, increasing the angle from our start bearing\n  // (alpha) by arcStep degrees until we reach the end bearing.\n  while (alpha <= arcEndDegree) {\n    coordinates.push(\n      destination(center, radius, alpha, options).geometry.coordinates\n    );\n    i++;\n    alpha = arcStartDegree + i * arcStep;\n  }\n  return lineString(coordinates, properties);\n}\n\n/**\n * Takes any angle in  degrees\n * and returns a valid angle between 0-360 degrees\n *\n * @private\n * @param {number} alpha angle between -180-180 degrees\n * @returns {number} angle between 0-360 degrees\n */\nfunction convertAngleTo360(alpha: number) {\n  let beta = alpha % 360;\n  if (beta < 0) {\n    beta += 360;\n  }\n  return beta;\n}\n\nexport { lineArc };\nexport default lineArc;\n", "import { bearing } from \"@turf/bearing\";\nimport { distance } from \"@turf/distance\";\nimport { destination } from \"@turf/destination\";\nimport { lineString, isObject } from \"@turf/helpers\";\n\n/**\n * Takes a {@link LineString|line}, a specified distance along the line to a start {@link Point},\n * and a specified  distance along the line to a stop point\n * and returns a subsection of the line in-between those points.\n *\n * This can be useful for extracting only the part of a route between two distances.\n *\n * @name lineSliceAlong\n * @param {Feature<LineString>|LineString} line input line\n * @param {number} startDist distance along the line to starting point\n * @param {number} stopDist distance along the line to ending point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<LineString>} sliced line\n * @example\n * var line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);\n * var start = 12.5;\n * var stop = 25;\n * var sliced = turf.lineSliceAlong(line, start, stop, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line, start, stop, sliced]\n */\nfunction lineSliceAlong(line, startDist, stopDist, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n\n  var coords;\n  var slice = [];\n\n  // Validation\n  if (line.type === \"Feature\") coords = line.geometry.coordinates;\n  else if (line.type === \"LineString\") coords = line.coordinates;\n  else throw new Error(\"input must be a LineString Feature or Geometry\");\n  var origCoordsLength = coords.length;\n  var travelled = 0;\n  var overshot, direction, interpolated;\n  for (var i = 0; i < coords.length; i++) {\n    if (startDist >= travelled && i === coords.length - 1) break;\n    else if (travelled > startDist && slice.length === 0) {\n      overshot = startDist - travelled;\n      if (!overshot) {\n        slice.push(coords[i]);\n        return lineString(slice);\n      }\n      direction = bearing(coords[i], coords[i - 1]) - 180;\n      interpolated = destination(coords[i], overshot, direction, options);\n      slice.push(interpolated.geometry.coordinates);\n    }\n\n    if (travelled >= stopDist) {\n      overshot = stopDist - travelled;\n      if (!overshot) {\n        slice.push(coords[i]);\n        return lineString(slice);\n      }\n      direction = bearing(coords[i], coords[i - 1]) - 180;\n      interpolated = destination(coords[i], overshot, direction, options);\n      slice.push(interpolated.geometry.coordinates);\n      return lineString(slice);\n    }\n\n    if (travelled >= startDist) {\n      slice.push(coords[i]);\n    }\n\n    if (i === coords.length - 1) {\n      return lineString(slice);\n    }\n\n    travelled += distance(coords[i], coords[i + 1], options);\n  }\n\n  if (travelled < startDist && coords.length === origCoordsLength)\n    throw new Error(\"Start position is beyond line\");\n\n  var last = coords[coords.length - 1];\n  return lineString([last, last]);\n}\n\nexport { lineSliceAlong };\nexport default lineSliceAlong;\n", "import { length } from \"@turf/length\";\nimport { lineSliceAlong } from \"@turf/line-slice-along\";\nimport { flattenEach } from \"@turf/meta\";\nimport { featureCollection, isObject } from \"@turf/helpers\";\n\n/**\n * Divides a {@link LineString} into chunks of a specified length.\n * If the line is shorter than the segment length then the original line is returned.\n *\n * @name lineChunk\n * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geojson the lines to split\n * @param {number} segmentLength how long to make each segment\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] units can be degrees, radians, miles, or kilometers\n * @param {boolean} [options.reverse=false] reverses coordinates to start the first chunked segment at the end\n * @returns {FeatureCollection<LineString>} collection of line segments\n * @example\n * var line = turf.lineString([[-95, 40], [-93, 45], [-85, 50]]);\n *\n * var chunk = turf.lineChunk(line, 15, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [chunk];\n */\nfunction lineChunk(geojson, segmentLength, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var units = options.units;\n  var reverse = options.reverse;\n\n  // Validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (segmentLength <= 0)\n    throw new Error(\"segmentLength must be greater than 0\");\n\n  // Container\n  var results = [];\n\n  // Flatten each feature to simple LineString\n  flattenEach(geojson, function (feature) {\n    // reverses coordinates to start the first chunked segment at the end\n    if (reverse)\n      feature.geometry.coordinates = feature.geometry.coordinates.reverse();\n\n    sliceLineSegments(feature, segmentLength, units, function (segment) {\n      results.push(segment);\n    });\n  });\n  return featureCollection(results);\n}\n\n/**\n * Slice Line Segments\n *\n * @private\n * @param {Feature<LineString>} line GeoJSON LineString\n * @param {number} segmentLength how long to make each segment\n * @param {string}[units='kilometers'] units can be degrees, radians, miles, or kilometers\n * @param {Function} callback iterate over sliced line segments\n * @returns {void}\n */\nfunction sliceLineSegments(line, segmentLength, units, callback) {\n  var lineLength = length(line, { units: units });\n\n  // If the line is shorter than the segment length then the orginal line is returned.\n  if (lineLength <= segmentLength) return callback(line);\n\n  var numberOfSegments = lineLength / segmentLength;\n\n  // If numberOfSegments is integer, no need to plus 1\n  if (!Number.isInteger(numberOfSegments)) {\n    numberOfSegments = Math.floor(numberOfSegments) + 1;\n  }\n\n  for (var i = 0; i < numberOfSegments; i++) {\n    var outline = lineSliceAlong(\n      line,\n      segmentLength * i,\n      segmentLength * (i + 1),\n      { units: units }\n    );\n    callback(outline, i);\n  }\n}\n\nexport { lineChunk };\nexport default lineChunk;\n", "import { flattenEach } from \"@turf/meta\";\nimport { getCoords, getType } from \"@turf/invariant\";\nimport {\n  isObject,\n  lineString,\n  multiLineString,\n  lengthToDegrees,\n} from \"@turf/helpers\";\nimport { intersection } from \"./lib/intersection.js\";\n\n/**\n * Takes a {@link LineString|line} and returns a {@link LineString|line} at offset by the specified distance.\n *\n * @name lineOffset\n * @param {Geometry|Feature<LineString|MultiLineString>} geojson input GeoJSON\n * @param {number} distance distance to offset the line (can be of negative value)\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, kilometers, inches, yards, meters\n * @returns {Feature<LineString|MultiLineString>} Line offset from the input line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]], { \"stroke\": \"#F00\" });\n *\n * var offsetLine = turf.lineOffset(line, 2, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [offsetLine, line]\n * offsetLine.properties.stroke = \"#00F\"\n */\nfunction lineOffset(geojson, distance, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var units = options.units;\n\n  // Valdiation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (distance === undefined || distance === null || isNaN(distance))\n    throw new Error(\"distance is required\");\n\n  var type = getType(geojson);\n  var properties = geojson.properties;\n\n  switch (type) {\n    case \"LineString\":\n      return lineOffsetFeature(geojson, distance, units);\n    case \"MultiLineString\":\n      var coords = [];\n      flattenEach(geojson, function (feature) {\n        coords.push(\n          lineOffsetFeature(feature, distance, units).geometry.coordinates\n        );\n      });\n      return multiLineString(coords, properties);\n    default:\n      throw new Error(\"geometry \" + type + \" is not supported\");\n  }\n}\n\n/**\n * Line Offset\n *\n * @private\n * @param {Geometry|Feature<LineString>} line input line\n * @param {number} distance distance to offset the line (can be of negative value)\n * @param {string} [units=kilometers] units\n * @returns {Feature<LineString>} Line offset from the input line\n */\nfunction lineOffsetFeature(line, distance, units) {\n  var segments = [];\n  var offsetDegrees = lengthToDegrees(distance, units);\n  var coords = getCoords(line);\n  var finalCoords = [];\n  coords.forEach(function (currentCoords, index) {\n    if (index !== coords.length - 1) {\n      var segment = processSegment(\n        currentCoords,\n        coords[index + 1],\n        offsetDegrees\n      );\n      segments.push(segment);\n      if (index > 0) {\n        var seg2Coords = segments[index - 1];\n        var intersects = intersection(segment, seg2Coords);\n\n        // Handling for line segments that aren't straight\n        if (intersects !== false) {\n          seg2Coords[1] = intersects;\n          segment[0] = intersects;\n        }\n\n        finalCoords.push(seg2Coords[0]);\n        if (index === coords.length - 2) {\n          finalCoords.push(segment[0]);\n          finalCoords.push(segment[1]);\n        }\n      }\n      // Handling for lines that only have 1 segment\n      if (coords.length === 2) {\n        finalCoords.push(segment[0]);\n        finalCoords.push(segment[1]);\n      }\n    }\n  });\n  return lineString(finalCoords, line.properties);\n}\n\n/**\n * Process Segment\n * Inspiration taken from http://stackoverflow.com/questions/2825412/draw-a-parallel-line\n *\n * @private\n * @param {Array<number>} point1 Point coordinates\n * @param {Array<number>} point2 Point coordinates\n * @param {number} offset Offset\n * @returns {Array<Array<number>>} offset points\n */\nfunction processSegment(point1, point2, offset) {\n  var L = Math.sqrt(\n    (point1[0] - point2[0]) * (point1[0] - point2[0]) +\n      (point1[1] - point2[1]) * (point1[1] - point2[1])\n  );\n\n  var out1x = point1[0] + (offset * (point2[1] - point1[1])) / L;\n  var out2x = point2[0] + (offset * (point2[1] - point1[1])) / L;\n  var out1y = point1[1] + (offset * (point1[0] - point2[0])) / L;\n  var out2y = point2[1] + (offset * (point1[0] - point2[0])) / L;\n  return [\n    [out1x, out1y],\n    [out2x, out2y],\n  ];\n}\n\nexport { lineOffset };\nexport default lineOffset;\n", "/**\n * https://github.com/rook2pawn/node-intersection\n *\n * Author @rook2pawn\n */\n\n/**\n * AB\n *\n * @private\n * @param {Array<Array<number>>} segment - 2 vertex line segment\n * @returns {Array<number>} coordinates [x, y]\n */\nfunction ab(segment) {\n  var start = segment[0];\n  var end = segment[1];\n  return [end[0] - start[0], end[1] - start[1]];\n}\n\n/**\n * Cross Product\n *\n * @private\n * @param {Array<number>} v1 coordinates [x, y]\n * @param {Array<number>} v2 coordinates [x, y]\n * @returns {Array<number>} Cross Product\n */\nfunction crossProduct(v1, v2) {\n  return v1[0] * v2[1] - v2[0] * v1[1];\n}\n\n/**\n * Add\n *\n * @private\n * @param {Array<number>} v1 coordinates [x, y]\n * @param {Array<number>} v2 coordinates [x, y]\n * @returns {Array<number>} Add\n */\nfunction add(v1, v2) {\n  return [v1[0] + v2[0], v1[1] + v2[1]];\n}\n\n/**\n * Sub\n *\n * @private\n * @param {Array<number>} v1 coordinates [x, y]\n * @param {Array<number>} v2 coordinates [x, y]\n * @returns {Array<number>} Sub\n */\nfunction sub(v1, v2) {\n  return [v1[0] - v2[0], v1[1] - v2[1]];\n}\n\n/**\n * scalarMult\n *\n * @private\n * @param {number} s scalar\n * @param {Array<number>} v coordinates [x, y]\n * @returns {Array<number>} scalarMult\n */\nfunction scalarMult(s, v) {\n  return [s * v[0], s * v[1]];\n}\n\n/**\n * Intersect Segments\n *\n * @private\n * @param {Array<number>} a coordinates [x, y]\n * @param {Array<number>} b coordinates [x, y]\n * @returns {Array<number>} intersection\n */\nfunction intersectSegments(a, b) {\n  var p = a[0];\n  var r = ab(a);\n  var q = b[0];\n  var s = ab(b);\n\n  var cross = crossProduct(r, s);\n  var qmp = sub(q, p);\n  var numerator = crossProduct(qmp, s);\n  var t = numerator / cross;\n  var intersection = add(p, scalarMult(t, r));\n  return intersection;\n}\n\n/**\n * Is Parallel\n *\n * @private\n * @param {Array<number>} a coordinates [x, y]\n * @param {Array<number>} b coordinates [x, y]\n * @returns {boolean} true if a and b are parallel (or co-linear)\n */\nfunction isParallel(a, b) {\n  var r = ab(a);\n  var s = ab(b);\n  return crossProduct(r, s) === 0;\n}\n\n/**\n * Intersection\n *\n * @private\n * @param {Array<number>} a coordinates [x, y]\n * @param {Array<number>} b coordinates [x, y]\n * @returns {Array<number>|boolean} true if a and b are parallel (or co-linear)\n */\nfunction intersection(a, b) {\n  if (isParallel(a, b)) return false;\n  return intersectSegments(a, b);\n}\n\nexport { intersection };\nexport default intersection;\n", "import { getCoords, getType } from \"@turf/invariant\";\nimport { lineString as linestring } from \"@turf/helpers\";\nimport { nearestPointOnLine } from \"@turf/nearest-point-on-line\";\n\n/**\n * Takes a {@link LineString|line}, a start {@link Point}, and a stop point\n * and returns a subsection of the line in-between those points.\n * The start & stop points don't need to fall exactly on the line.\n *\n * This can be useful for extracting only the part of a route between waypoints.\n *\n * @name lineSlice\n * @param {Coord} startPt starting point\n * @param {Coord} stopPt stopping point\n * @param {Feature<LineString>|LineString} line line to slice\n * @returns {Feature<LineString>} sliced line\n * @example\n * var line = turf.lineString([\n *     [-77.031669, 38.878605],\n *     [-77.029609, 38.881946],\n *     [-77.020339, 38.884084],\n *     [-77.025661, 38.885821],\n *     [-77.021884, 38.889563],\n *     [-77.019824, 38.892368]\n * ]);\n * var start = turf.point([-77.029609, 38.881946]);\n * var stop = turf.point([-77.021884, 38.889563]);\n *\n * var sliced = turf.lineSlice(start, stop, line);\n *\n * //addToMap\n * var addToMap = [start, stop, line]\n */\nfunction lineSlice(startPt, stopPt, line) {\n  // Validation\n  var coords = getCoords(line);\n  if (getType(line) !== \"LineString\")\n    throw new Error(\"line must be a LineString\");\n\n  var startVertex = nearestPointOnLine(line, startPt);\n  var stopVertex = nearestPointOnLine(line, stopPt);\n  var ends;\n  if (startVertex.properties.index <= stopVertex.properties.index) {\n    ends = [startVertex, stopVertex];\n  } else {\n    ends = [stopVertex, startVertex];\n  }\n  var clipCoords = [ends[0].geometry.coordinates];\n  for (\n    var i = ends[0].properties.index + 1;\n    i < ends[1].properties.index + 1;\n    i++\n  ) {\n    clipCoords.push(coords[i]);\n  }\n  clipCoords.push(ends[1].geometry.coordinates);\n  return linestring(clipCoords, line.properties);\n}\n\nexport { lineSlice };\nexport default lineSlice;\n", "import { distance } from \"@turf/distance\";\nimport { BBox } from \"geojson\";\n\n/**\n * Takes a bounding box and calculates the minimum square bounding box that\n * would contain the input.\n *\n * @name square\n * @param {BBox} bbox extent in [west, south, east, north] order\n * @returns {BBox} a square surrounding `bbox`\n * @example\n * const bbox = [-20, -20, -15, 0];\n * const squared = turf.square(bbox);\n *\n * //addToMap\n * const addToMap = [turf.bboxPolygon(bbox), turf.bboxPolygon(squared)]\n */\nfunction square(bbox: BBox): BBox {\n  var west = bbox[0];\n  var south = bbox[1];\n  var east = bbox[2];\n  var north = bbox[3];\n\n  var horizontalDistance = distance(bbox.slice(0, 2), [east, south]);\n  var verticalDistance = distance(bbox.slice(0, 2), [west, north]);\n  if (horizontalDistance >= verticalDistance) {\n    var verticalMidpoint = (south + north) / 2;\n    return [\n      west,\n      verticalMidpoint - (east - west) / 2,\n      east,\n      verticalMidpoint + (east - west) / 2,\n    ];\n  } else {\n    var horizontalMidpoint = (west + east) / 2;\n    return [\n      horizontalMidpoint - (north - south) / 2,\n      south,\n      horizontalMidpoint + (north - south) / 2,\n      north,\n    ];\n  }\n}\n\nexport { square };\nexport default square;\n", "import { coordEach } from \"@turf/meta\";\nimport { AllGeoJSON, isObject } from \"@turf/helpers\";\n\n/**\n * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.\n *\n * @name truncate\n * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] coordinate decimal precision\n * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} layer with truncated geometry\n * @example\n * var point = turf.point([\n *     70.46923055566859,\n *     58.11088890802906,\n *     1508\n * ]);\n * var options = {precision: 3, coordinates: 2};\n * var truncated = turf.truncate(point, options);\n * //=truncated.geometry.coordinates => [70.469, 58.111]\n *\n * //addToMap\n * var addToMap = [truncated];\n */\nfunction truncate<T extends AllGeoJSON>(\n  geojson: T,\n  options?: {\n    precision?: number;\n    coordinates?: number;\n    mutate?: boolean;\n  }\n): T {\n  // Optional parameters\n  options = options ?? {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var precision = options.precision;\n  var coordinates = options.coordinates;\n  var mutate = options.mutate;\n\n  // default params\n  precision =\n    precision === undefined || precision === null || isNaN(precision)\n      ? 6\n      : precision;\n  coordinates =\n    coordinates === undefined || coordinates === null || isNaN(coordinates)\n      ? 3\n      : coordinates;\n\n  // validation\n  if (!geojson) throw new Error(\"<geojson> is required\");\n  if (typeof precision !== \"number\")\n    throw new Error(\"<precision> must be a number\");\n  if (typeof coordinates !== \"number\")\n    throw new Error(\"<coordinates> must be a number\");\n\n  // prevent input mutation\n  if (mutate === false || mutate === undefined)\n    geojson = JSON.parse(JSON.stringify(geojson));\n\n  var factor = Math.pow(10, precision);\n\n  // Truncate Coordinates\n  coordEach(geojson, function (coords) {\n    truncateCoords(coords, factor, coordinates!);\n  });\n  return geojson;\n}\n\n/**\n * Truncate Coordinates - Mutates coordinates in place\n *\n * @private\n * @param {Array<any>} coords Geometry Coordinates\n * @param {number} factor rounding factor for coordinate decimal precision\n * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)\n * @returns {Array<any>} mutated coordinates\n */\nfunction truncateCoords(coords: number[], factor: number, coordinates: number) {\n  // Remove extra coordinates (usually elevation coordinates and more)\n  if (coords.length > coordinates) coords.splice(coordinates, coords.length);\n\n  // Truncate coordinate decimals\n  for (var i = 0; i < coords.length; i++) {\n    coords[i] = Math.round(coords[i] * factor) / factor;\n  }\n  return coords;\n}\n\nexport { truncate };\nexport default truncate;\n", "import { geojsonRbush as rbush } from \"@turf/geojson-rbush\";\nimport { square } from \"@turf/square\";\nimport { bbox } from \"@turf/bbox\";\nimport { truncate } from \"@turf/truncate\";\nimport { lineSegment } from \"@turf/line-segment\";\nimport { lineIntersect } from \"@turf/line-intersect\";\nimport { nearestPointOnLine } from \"@turf/nearest-point-on-line\";\nimport { getCoords, getCoord, getType } from \"@turf/invariant\";\nimport { featureEach, featureReduce, flattenEach } from \"@turf/meta\";\nimport { lineString, featureCollection } from \"@turf/helpers\";\n\n/**\n * Split a LineString by another GeoJSON Feature.\n *\n * @name lineSplit\n * @param {Feature<LineString>} line LineString Feature to split\n * @param {Feature<any>} splitter Feature used to split line\n * @returns {FeatureCollection<LineString>} Split LineStrings\n * @example\n * var line = turf.lineString([[120, -25], [145, -25]]);\n * var splitter = turf.lineString([[130, -15], [130, -35]]);\n *\n * var split = turf.lineSplit(line, splitter);\n *\n * //addToMap\n * var addToMap = [line, splitter]\n */\nfunction lineSplit(line, splitter) {\n  if (!line) throw new Error(\"line is required\");\n  if (!splitter) throw new Error(\"splitter is required\");\n\n  var lineType = getType(line);\n  var splitterType = getType(splitter);\n\n  if (lineType !== \"LineString\") throw new Error(\"line must be LineString\");\n  if (splitterType === \"FeatureCollection\")\n    throw new Error(\"splitter cannot be a FeatureCollection\");\n  if (splitterType === \"GeometryCollection\")\n    throw new Error(\"splitter cannot be a GeometryCollection\");\n\n  // remove excessive decimals from splitter\n  // to avoid possible approximation issues in rbush\n  var truncatedSplitter = truncate(splitter, { precision: 7 });\n\n  switch (splitterType) {\n    case \"Point\":\n      return splitLineWithPoint(line, truncatedSplitter);\n    case \"MultiPoint\":\n      return splitLineWithPoints(line, truncatedSplitter);\n    case \"LineString\":\n    case \"MultiLineString\":\n    case \"Polygon\":\n    case \"MultiPolygon\":\n      return splitLineWithPoints(\n        line,\n        lineIntersect(line, truncatedSplitter, {\n          ignoreSelfIntersections: true,\n        })\n      );\n  }\n}\n\n/**\n * Split LineString with MultiPoint\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {FeatureCollection<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\nfunction splitLineWithPoints(line, splitter) {\n  var results = [];\n  var tree = rbush();\n\n  flattenEach(splitter, function (point) {\n    // Add index/id to features (needed for filter)\n    results.forEach(function (feature, index) {\n      feature.id = index;\n    });\n    // First Point - doesn't need to handle any previous line results\n    if (!results.length) {\n      results = splitLineWithPoint(line, point).features;\n\n      // Add Square BBox to each feature for GeoJSON-RBush\n      results.forEach(function (feature) {\n        if (!feature.bbox) feature.bbox = square(bbox(feature));\n      });\n      tree.load(featureCollection(results));\n      // Split with remaining points - lines might needed to be split multiple times\n    } else {\n      // Find all lines that are within the splitter's bbox\n      var search = tree.search(point);\n\n      if (search.features.length) {\n        // RBush might return multiple lines - only process the closest line to splitter\n        var closestLine = findClosestFeature(point, search);\n\n        // Remove closest line from results since this will be split into two lines\n        // This removes any duplicates inside the results & index\n        results = results.filter(function (feature) {\n          return feature.id !== closestLine.id;\n        });\n        tree.remove(closestLine);\n\n        // Append the two newly split lines into the results\n        featureEach(splitLineWithPoint(closestLine, point), function (line) {\n          results.push(line);\n          tree.insert(line);\n        });\n      }\n    }\n  });\n  return featureCollection(results);\n}\n\n/**\n * Split LineString with Point\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {Feature<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\nfunction splitLineWithPoint(line, splitter) {\n  var results = [];\n\n  // handle endpoints\n  var startPoint = getCoords(line)[0];\n  var endPoint = getCoords(line)[line.geometry.coordinates.length - 1];\n  if (\n    pointsEquals(startPoint, getCoord(splitter)) ||\n    pointsEquals(endPoint, getCoord(splitter))\n  )\n    return featureCollection([line]);\n\n  // Create spatial index\n  var tree = rbush();\n  var segments = lineSegment(line);\n  tree.load(segments);\n\n  // Find all segments that are within bbox of splitter\n  var search = tree.search(splitter);\n\n  // Return itself if point is not within spatial index\n  if (!search.features.length) return featureCollection([line]);\n\n  // RBush might return multiple lines - only process the closest line to splitter\n  var closestSegment = findClosestFeature(splitter, search);\n\n  // Initial value is the first point of the first segments (beginning of line)\n  var initialValue = [startPoint];\n  var lastCoords = featureReduce(\n    segments,\n    function (previous, current, index) {\n      var currentCoords = getCoords(current)[1];\n      var splitterCoords = getCoord(splitter);\n\n      // Location where segment intersects with line\n      if (index === closestSegment.id) {\n        previous.push(splitterCoords);\n        results.push(lineString(previous));\n        // Don't duplicate splitter coordinate (Issue #688)\n        if (pointsEquals(splitterCoords, currentCoords))\n          return [splitterCoords];\n        return [splitterCoords, currentCoords];\n\n        // Keep iterating over coords until finished or intersection is found\n      } else {\n        previous.push(currentCoords);\n        return previous;\n      }\n    },\n    initialValue\n  );\n  // Append last line to final split results\n  if (lastCoords.length > 1) {\n    results.push(lineString(lastCoords));\n  }\n  return featureCollection(results);\n}\n\n/**\n * Find Closest Feature\n *\n * @private\n * @param {Feature<Point>} point Feature must be closest to this point\n * @param {FeatureCollection<LineString>} lines Collection of Features\n * @returns {Feature<LineString>} closest LineString\n */\nfunction findClosestFeature(point, lines) {\n  if (!lines.features.length) throw new Error(\"lines must contain features\");\n  // Filter to one segment that is the closest to the line\n  if (lines.features.length === 1) return lines.features[0];\n\n  var closestFeature;\n  var closestDistance = Infinity;\n  featureEach(lines, function (segment) {\n    var pt = nearestPointOnLine(segment, point);\n    var dist = pt.properties.dist;\n    if (dist < closestDistance) {\n      closestFeature = segment;\n      closestDistance = dist;\n    }\n  });\n  return closestFeature;\n}\n\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Array<number>} pt1 point\n * @param {Array<number>} pt2 point\n * @returns {boolean} true if they are equals\n */\nfunction pointsEquals(pt1, pt2) {\n  return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n\nexport { lineSplit };\nexport default lineSplit;\n", "import {\n  Feature,\n  FeatureCollection,\n  MultiLineString,\n  LineString,\n  GeoJsonProperties,\n  BBox,\n  Position,\n} from \"geojson\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nimport { getCoords, getGeom } from \"@turf/invariant\";\nimport { polygon, multiPolygon, lineString } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\n\n/**\n * Converts (Multi)LineString(s) to Polygon(s).\n *\n * @name lineToPolygon\n * @param {FeatureCollection|Feature<LineString|MultiLineString>} lines Features to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @param {boolean} [options.autoComplete=true] auto complete linestrings (matches first & last coordinates)\n * @param {boolean} [options.orderCoords=true] sorts linestrings to place outer ring at the first position of the coordinates\n * @param {boolean} [options.mutate=false] mutate the original linestring using autoComplete (matches first & last coordinates)\n * @returns {Feature<Polygon|MultiPolygon>} converted to Polygons\n * @example\n * var line = turf.lineString([[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]);\n *\n * var polygon = turf.lineToPolygon(line);\n *\n * //addToMap\n * var addToMap = [polygon];\n */\nfunction lineToPolygon<G extends LineString | MultiLineString>(\n  lines: Feature<G> | FeatureCollection<G> | G,\n  options: {\n    properties?: GeoJsonProperties;\n    autoComplete?: boolean;\n    orderCoords?: boolean;\n    mutate?: boolean;\n  } = {}\n) {\n  // Optional parameters\n  var properties = options.properties;\n  var autoComplete = options.autoComplete ?? true;\n  var orderCoords = options.orderCoords ?? true;\n  var mutate = options.mutate ?? false;\n\n  if (!mutate) {\n    lines = clone(lines);\n  }\n\n  switch (lines.type) {\n    case \"FeatureCollection\":\n      var coords: number[][][][] = [];\n      lines.features.forEach(function (line) {\n        coords.push(\n          getCoords(lineStringToPolygon(line, {}, autoComplete, orderCoords))\n        );\n      });\n      return multiPolygon(coords, properties);\n    default:\n      return lineStringToPolygon(lines, properties, autoComplete, orderCoords);\n  }\n}\n\n/**\n * LineString to Polygon\n *\n * @private\n * @param {Feature<LineString|MultiLineString>} line line\n * @param {Object} [properties] translates GeoJSON properties to Feature\n * @param {boolean} [autoComplete=true] auto complete linestrings\n * @param {boolean} [orderCoords=true] sorts linestrings to place outer ring at the first position of the coordinates\n * @returns {Feature<Polygon>} line converted to Polygon\n */\nfunction lineStringToPolygon<G extends LineString | MultiLineString>(\n  line: Feature<G> | G,\n  properties: GeoJsonProperties | undefined,\n  autoComplete: boolean,\n  orderCoords: boolean\n) {\n  properties = properties\n    ? properties\n    : line.type === \"Feature\"\n      ? line.properties\n      : {};\n  var geom = getGeom(line);\n  var coords: Position[] | Position[][] = geom.coordinates;\n  var type = geom.type;\n\n  if (!coords.length) throw new Error(\"line must contain coordinates\");\n\n  switch (type) {\n    case \"LineString\":\n      if (autoComplete) coords = autoCompleteCoords(coords as Position[]);\n      return polygon([coords as Position[]], properties);\n    case \"MultiLineString\":\n      var multiCoords: number[][][] = [];\n      var largestArea = 0;\n\n      (coords as Position[][]).forEach(function (coord) {\n        if (autoComplete) coord = autoCompleteCoords(coord);\n\n        // Largest LineString to be placed in the first position of the coordinates array\n        if (orderCoords) {\n          var area = calculateArea(turfBBox(lineString(coord)));\n          if (area > largestArea) {\n            multiCoords.unshift(coord);\n            largestArea = area;\n          } else multiCoords.push(coord);\n        } else {\n          multiCoords.push(coord);\n        }\n      });\n      return polygon(multiCoords, properties);\n    default:\n      throw new Error(\"geometry type \" + type + \" is not supported\");\n  }\n}\n\n/**\n * Auto Complete Coords - matches first & last coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords Coordinates\n * @returns {Array<Array<number>>} auto completed coordinates\n */\nfunction autoCompleteCoords(coords: Position[]) {\n  var first = coords[0];\n  var x1 = first[0];\n  var y1 = first[1];\n  var last = coords[coords.length - 1];\n  var x2 = last[0];\n  var y2 = last[1];\n  if (x1 !== x2 || y1 !== y2) {\n    coords.push(first);\n  }\n  return coords;\n}\n\n/**\n * area - quick approximate area calculation (used to sort)\n *\n * @private\n * @param {Array<number>} bbox BBox [west, south, east, north]\n * @returns {number} very quick area calculation\n */\nfunction calculateArea(bbox: BBox) {\n  var west = bbox[0];\n  var south = bbox[1];\n  var east = bbox[2];\n  var north = bbox[3];\n  return Math.abs(west - east) * Math.abs(south - north);\n}\n\nexport { lineToPolygon };\nexport default lineToPolygon;\n", "import {\n  Feature,\n  FeatureCollection,\n  Polygon,\n  Position,\n  MultiPolygon,\n} from \"geojson\";\nimport { polygon as createPolygon, multiPolygon } from \"@turf/helpers\";\nimport polygonClipping, { Geom } from \"polygon-clipping\";\nimport { clone } from \"@turf/clone\";\n\n/**\n * Takes polygons or multipolygons and an optional mask, and returns an exterior\n * ring polygon with holes.\n *\n * @name mask\n * @param {Polygon|MultiPolygon|Feature<Polygon|MultiPolygon>|FeatureCollection<Polygon|MultiPolygon>} polygon GeoJSON polygon used as interior rings or holes\n * @param {Polygon|Feature<Polygon>} [mask] GeoJSON polygon used as the exterior ring (if undefined, the world extent is used)\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] allows the `mask` GeoJSON input to be mutated (performance improvement if true)\n * @returns {Feature<Polygon>} Masked Polygon (exterior ring with holes)\n * @example\n * const polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\n * const mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n *\n * const masked = turf.mask(polygon, mask);\n *\n * //addToMap\n * const addToMap = [masked]\n */\nfunction mask<T extends Polygon | MultiPolygon>(\n  polygon: T | Feature<T> | FeatureCollection<T>,\n  mask?: Polygon | Feature<Polygon>,\n  options?: { mutate?: boolean }\n): Feature<Polygon> {\n  const mutate = options?.mutate ?? false; // by default, do not mutate\n\n  let maskTemplate = mask;\n  if (mask && mutate === false) {\n    // Clone mask if requested to avoid side effects\n    maskTemplate = clone(mask);\n  }\n\n  // Define initial mask\n  const maskPolygon = createMask(maskTemplate);\n\n  let polygonOuters = null;\n  if (polygon.type === \"FeatureCollection\") {\n    polygonOuters = unionFc(polygon);\n  } else if (polygon.type === \"Feature\") {\n    // Need to cast below as Position[][] isn't quite as strict as Geom, even\n    // though they should be equivalent.\n    polygonOuters = createGeomFromPolygonClippingOutput(\n      polygonClipping.union(polygon.geometry.coordinates as Geom)\n    );\n  } else {\n    // Geometry\n    // Need to cast below as Position[][] isn't quite as strict as Geom, even\n    // though they should be equivalent.\n    polygonOuters = createGeomFromPolygonClippingOutput(\n      polygonClipping.union(polygon.coordinates as Geom)\n    );\n  }\n\n  polygonOuters.geometry.coordinates.forEach(function (contour) {\n    maskPolygon.geometry.coordinates.push(contour[0]);\n  });\n\n  return maskPolygon;\n}\n\nfunction unionFc(fc: FeatureCollection<Polygon | MultiPolygon>) {\n  // Need to cast below as Position[][] isn't quite as strict as Geom, even\n  // though they should be equivalent.\n\n  // Stick with apply() below as spread operator degrades performance. Have\n  // to disable prefer-spread lint rule though.\n  /* eslint-disable prefer-spread */\n  const unioned =\n    fc.features.length === 2\n      ? polygonClipping.union(\n          fc.features[0].geometry.coordinates as Geom,\n          fc.features[1].geometry.coordinates as Geom\n        )\n      : polygonClipping.union.apply(\n          polygonClipping,\n          fc.features.map(function (f) {\n            return f.geometry.coordinates;\n          }) as [Geom, ...Geom[]]\n        );\n  /* eslint-enable */\n  return createGeomFromPolygonClippingOutput(unioned);\n}\n\nfunction createGeomFromPolygonClippingOutput(unioned: Position[][][]) {\n  return multiPolygon(unioned);\n}\n\n/**\n * Create Mask Coordinates\n *\n * @private\n * @param {Feature<Polygon>} [mask] default to world if undefined\n * @returns {Feature<Polygon>} mask as a polygon\n */\nfunction createMask(mask: Feature<Polygon> | Polygon | undefined) {\n  const world = [\n    [\n      [180, 90],\n      [-180, 90],\n      [-180, -90],\n      [180, -90],\n      [180, 90],\n    ],\n  ];\n  let coordinates = world;\n  if (mask) {\n    if (mask.type === \"Feature\") {\n      // polygon feature\n      coordinates = mask.geometry.coordinates;\n    } else {\n      // polygon geometry\n      coordinates = mask.coordinates;\n    }\n  }\n  return createPolygon(coordinates);\n}\n\nexport { mask };\nexport default mask;\n", "import { Feature, Point } from \"geojson\";\nimport { bearing } from \"@turf/bearing\";\nimport { destination } from \"@turf/destination\";\nimport { distance } from \"@turf/distance\";\nimport { Coord } from \"@turf/helpers\";\n\n/**\n * Takes two points and returns a point midway between them. The midpoint is\n * calculated geodesically, meaning the curvature of the earth is taken into\n * account.\n *\n * @name midpoint\n * @param {Coord} point1 first point\n * @param {Coord} point2 second point\n * @returns {Feature<Point>} a point midway between `pt1` and `pt2`\n * @example\n * const point1 = turf.point([144.834823, -37.771257]);\n * const point2 = turf.point([145.14244, -37.830937]);\n *\n * const midpoint = turf.midpoint(point1, point2);\n *\n * //addToMap\n * const addToMap = [point1, point2, midpoint];\n * midpoint.properties['marker-color'] = '#f00';\n */\nfunction midpoint(point1: Coord, point2: Coord): Feature<Point> {\n  const dist = distance(point1, point2);\n  const heading = bearing(point1, point2);\n  const midpoint = destination(point1, dist / 2, heading);\n\n  return midpoint;\n}\n\nexport { midpoint };\nexport default midpoint;\n", "import { FeatureCollection } from \"geojson\";\nimport { distanceWeight as spatialWeight } from \"@turf/distance-weight\";\nimport { featureEach } from \"@turf/meta\";\n\n/**\n * Moran's I measures patterns of attribute values associated with features.\n * The method reveal whether similar values tend to occur near each other,\n * or whether high or low values are interspersed.\n *\n * Moran's I > 0 means a clusterd pattern.\n * Moran's I < 0 means a dispersed pattern.\n * Moran's I = 0 means a random pattern.\n *\n * In order to test the significance of the result. The z score is calculated.\n * A positive enough z-score (ex. >1.96) indicates clustering,\n * while a negative enough z-score (ex. <-1.96) indicates a dispersed pattern.\n *\n * the z-score can be calculated based on a normal or random assumption.\n *\n * **Bibliography***\n *\n * 1. [Moran's I](https://en.wikipedia.org/wiki/Moran%27s_I)\n *\n * 2. [pysal](http://pysal.readthedocs.io/en/latest/index.html)\n *\n * 3. Andy Mitchell, The ESRI Guide to GIS Analysis Volume 2: Spatial Measurements & Statistics.\n *\n * @name moranIndex\n * @param {FeatureCollection<any>} fc\n * @param {Object} options\n * @param {string} options.inputField the property name, must contain numeric values\n * @param {number} [options.threshold=100000] the distance threshold\n * @param {number} [options.p=2] the Minkowski p-norm distance parameter\n * @param {boolean} [options.binary=false] whether transfrom the distance to binary\n * @param {number} [options.alpha=-1] the distance decay parameter\n * @param {boolean} [options.standardization=true] wheter row standardization the distance\n * @returns {MoranIndex}\n * @example\n *\n * const bbox = [-65, 40, -63, 42];\n * const dataset = turf.randomPoint(100, { bbox: bbox });\n *\n * const result = turf.moranIndex(dataset, {\n *   inputField: 'CRIME',\n * });\n */\n\nfunction moranIndex(\n  fc: FeatureCollection<any>,\n  options: {\n    inputField: string;\n    threshold?: number;\n    p?: number;\n    binary?: boolean;\n    alpha?: number;\n    standardization?: boolean;\n  }\n): {\n  moranIndex: number;\n  expectedMoranIndex: number;\n  stdNorm: number;\n  zNorm: number;\n} {\n  const inputField = options.inputField;\n  const threshold = options.threshold || 100000;\n  const p = options.p || 2;\n  const binary = options.binary ?? false;\n  const alpha = options.alpha || -1;\n  const standardization = options.standardization ?? true;\n\n  const weight = spatialWeight(fc, {\n    alpha,\n    binary,\n    p,\n    standardization,\n    threshold,\n  });\n\n  const y: number[] = [];\n  featureEach(fc, (feature) => {\n    const feaProperties = feature.properties || {};\n    // validate inputField exists\n    y.push(feaProperties[inputField]);\n  });\n\n  const yMean = mean(y);\n  const yVar = variance(y);\n  let weightSum = 0;\n  let s0 = 0;\n  let s1 = 0;\n  let s2 = 0;\n  const n = weight.length;\n  // validate y.length is the same as weight.length\n  for (let i = 0; i < n; i++) {\n    let subS2 = 0;\n    for (let j = 0; j < n; j++) {\n      weightSum += weight[i][j] * (y[i] - yMean) * (y[j] - yMean);\n      s0 += weight[i][j];\n      s1 += Math.pow(weight[i][j] + weight[j][i], 2);\n      subS2 += weight[i][j] + weight[j][i];\n    }\n    s2 += Math.pow(subS2, 2);\n  }\n  s1 = 0.5 * s1;\n\n  const moranIndex = weightSum / s0 / yVar;\n  const expectedMoranIndex = -1 / (n - 1);\n  const vNum = n * n * s1 - n * s2 + 3 * (s0 * s0);\n  const vDen = (n - 1) * (n + 1) * (s0 * s0);\n  const vNorm = vNum / vDen - expectedMoranIndex * expectedMoranIndex;\n  const stdNorm = Math.sqrt(vNorm);\n  const zNorm = (moranIndex - expectedMoranIndex) / stdNorm;\n\n  return {\n    expectedMoranIndex,\n    moranIndex,\n    stdNorm,\n    zNorm,\n  };\n}\n\n/**\n * get mean of a list\n * @param {number[]} y\n * @returns {number}\n *\n */\nfunction mean(y: number[]): number {\n  let sum = 0;\n  for (const item of y) {\n    sum += item;\n  }\n  return sum / y.length;\n}\n/**\n * get variance of a list\n * @param {number[]} y\n * @returns {number}\n *\n */\nfunction variance(y: number[]): number {\n  const yMean = mean(y);\n  let sum = 0;\n  for (const item of y) {\n    sum += Math.pow(item - yMean, 2);\n  }\n  return sum / y.length;\n}\n\n/**\n * @typedef {Object} MoranIndex\n * @property {number} moranIndex the moran's Index of the observed feature set\n * @property {number} expectedMoranIndex the moran's Index of the random distribution\n * @property {number} stdNorm the standard devitaion of the random distribution\n * @property {number} zNorm the z-score of the observe samples with regard to the random distribution\n */\n\nexport { moranIndex };\nexport default moranIndex;\n", "import { Feature, FeatureCollection, Point } from \"geojson\";\nimport { Coord, Units } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\nimport { distance } from \"@turf/distance\";\nimport { featureEach } from \"@turf/meta\";\n\ninterface NearestPoint extends Feature<Point> {\n  properties: {\n    featureIndex: number;\n    distanceToPoint: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Takes a reference {@link Point|point} and a FeatureCollection of Features\n * with Point geometries and returns the\n * point from the FeatureCollection closest to the reference. This calculation\n * is geodesic.\n *\n * @name nearestPoint\n * @param {Coord} targetPoint the reference point\n * @param {FeatureCollection<Point>} points against input point set\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] the units of the numeric result\n * @returns {Feature<Point>} the closest point in the set to the reference point\n * @example\n * var targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\n * var points = turf.featureCollection([\n *     turf.point([28.973865, 41.011122]),\n *     turf.point([28.948459, 41.024204]),\n *     turf.point([28.938674, 41.013324])\n * ]);\n *\n * var nearest = turf.nearestPoint(targetPoint, points);\n *\n * //addToMap\n * var addToMap = [targetPoint, points, nearest];\n * nearest.properties['marker-color'] = '#F00';\n */\nfunction nearestPoint(\n  targetPoint: Coord,\n  points: FeatureCollection<Point>,\n  options: {\n    units?: Units;\n  } = {}\n): NearestPoint {\n  // Input validation\n  if (!targetPoint) throw new Error(\"targetPoint is required\");\n  if (!points) throw new Error(\"points is required\");\n\n  let minDist = Infinity;\n  let bestFeatureIndex = 0;\n  featureEach(points, (pt, featureIndex) => {\n    const distanceToPoint = distance(targetPoint, pt, options);\n    if (distanceToPoint < minDist) {\n      bestFeatureIndex = featureIndex;\n      minDist = distanceToPoint;\n    }\n  });\n  const nearestPoint = clone(points.features[bestFeatureIndex]);\n\n  return {\n    ...nearestPoint,\n    properties: {\n      ...nearestPoint.properties,\n      featureIndex: bestFeatureIndex,\n      distanceToPoint: minDist,\n    },\n  };\n}\n\nexport { nearestPoint, NearestPoint };\nexport default nearestPoint;\n", "import {\n  FeatureCollection,\n  Feature,\n  Point,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { area } from \"@turf/area\";\nimport { bbox } from \"@turf/bbox\";\nimport { bboxPolygon } from \"@turf/bbox-polygon\";\nimport { centroid } from \"@turf/centroid\";\nimport { distance } from \"@turf/distance\";\nimport { nearestPoint } from \"@turf/nearest-point\";\nimport { featureEach } from \"@turf/meta\";\nimport {\n  convertArea,\n  featureCollection,\n  Units,\n  AreaUnits,\n} from \"@turf/helpers\";\n\ninterface NearestNeighborStatistics {\n  units: Units & AreaUnits;\n  arealUnits: string;\n  observedMeanDistance: number;\n  expectedMeanDistance: number;\n  numberOfPoints: number;\n  zScore: number;\n}\n\ninterface NearestNeighborStudyArea extends Feature<Polygon> {\n  properties: {\n    nearestNeighborAnalysis: NearestNeighborStatistics;\n    [key: string]: any;\n  };\n}\n\n/**\n * Nearest Neighbor Analysis calculates an index based the average distances\n * between points in the dataset, thereby providing inference as to whether the\n * data is clustered, dispersed, or randomly distributed within the study area.\n *\n * It returns a {@link Feature<Polygon>} of the study area, with the results of\n * the analysis attached as part of of the `nearestNeighborAnalysis` property\n * of the study area's `properties`. The attached\n * [_z_-score](https://en.wikipedia.org/wiki/Standard_score) indicates how many\n * standard deviations above or below the expected mean distance the data's\n * observed mean distance is. The more negative, the more clustered. The more\n * positive, the more evenly dispersed. A _z_-score between -2 and 2 indicates\n * a seemingly random distribution. That is, within _p_ of less than 0.05, the\n * distribution appears statistically significantly neither clustered nor\n * dispersed.\n *\n * **Remarks**\n *\n * - Though the analysis will work on any {@link FeatureCollection} type, it\n * works best with {@link Point} collections.\n *\n * - This analysis is _very_ sensitive to the study area provided.\n * If no {@link Feature<Polygon>} is passed as the study area, the function draws a box\n * around the data, which may distort the findings. This analysis works best\n * with a bounded area of interest within with the data is either clustered,\n * dispersed, or randomly distributed. For example, a city's subway stops may\n * look extremely clustered if the study area is an entire state. On the other\n * hand, they may look rather evenly dispersed if the study area is limited to\n * the city's downtown.\n *\n * **Bibliography**\n *\n * Philip J. Clark and Francis C. Evans, “Distance to Nearest Neighbor as a\n * Measure of Spatial Relationships in Populations,” _Ecology_ 35, no. 4\n * (1954): 445–453, doi:[10.2307/1931034](http://doi.org/10.2307/1931034).\n *\n * @name nearestNeighborAnalysis\n * @param {FeatureCollection<any>} dataset FeatureCollection (pref. of points) to study\n * @param {Object} [options={}] Optional parameters\n * @param {Feature<Polygon>} [options.studyArea] polygon representing the study area\n * @param {string} [options.units='kilometers'] unit of measurement for distances and, squared, area.\n * @param {Object} [options.properties={}] properties\n * @returns {Feature<Polygon>} A polygon of the study area or an approximation of one.\n * @example\n * var bbox = [-65, 40, -63, 42];\n * var dataset = turf.randomPoint(100, { bbox: bbox });\n * var nearestNeighborStudyArea = turf.nearestNeighborAnalysis(dataset);\n *\n * //addToMap\n * var addToMap = [dataset, nearestNeighborStudyArea];\n */\nfunction nearestNeighborAnalysis(\n  dataset: FeatureCollection<any>,\n  options?: {\n    studyArea?: Feature<Polygon>;\n    units?: Units & AreaUnits;\n    properties?: GeoJsonProperties;\n  }\n): NearestNeighborStudyArea {\n  // Optional params\n  options = options || {};\n  const studyArea = options.studyArea || bboxPolygon(bbox(dataset));\n  const properties = options.properties || {};\n  const units = options.units || \"kilometers\";\n\n  const features: Array<Feature<Point>> = [];\n  featureEach(dataset, (feature) => {\n    features.push(centroid(feature));\n  });\n  const n = features.length;\n  const observedMeanDistance =\n    features\n      .map((feature, index) => {\n        const otherFeatures = featureCollection<Point>(\n          features.filter((f, i) => {\n            return i !== index;\n          })\n        );\n        // Have to add the ! to make typescript validation pass\n        // see https://stackoverflow.com/a/40350534/1979085\n        return distance(\n          feature,\n          nearestPoint(feature, otherFeatures).geometry!.coordinates,\n          { units }\n        );\n      })\n      .reduce((sum, value) => {\n        return sum + value;\n      }, 0) / n;\n\n  const populationDensity = n / convertArea(area(studyArea), \"meters\", units);\n  const expectedMeanDistance = 1 / (2 * Math.sqrt(populationDensity));\n  const variance = 0.26136 / Math.sqrt(n * populationDensity);\n  properties.nearestNeighborAnalysis = {\n    units: units,\n    arealUnits: units + \"²\",\n    observedMeanDistance: observedMeanDistance,\n    expectedMeanDistance: expectedMeanDistance,\n    nearestNeighborIndex: observedMeanDistance / expectedMeanDistance,\n    numberOfPoints: n,\n    zScore: (observedMeanDistance - expectedMeanDistance) / variance,\n  };\n  studyArea.properties = properties;\n\n  return studyArea as NearestNeighborStudyArea;\n}\n\nexport {\n  nearestNeighborAnalysis,\n  NearestNeighborStatistics,\n  NearestNeighborStudyArea,\n};\nexport default nearestNeighborAnalysis;\n", "// Taken from http://geomalgorithms.com/a02-_lines.html\nimport { Feature, LineString } from \"geojson\";\nimport { distance as getDistance } from \"@turf/distance\";\nimport {\n  convertLength,\n  Coord,\n  feature,\n  lineString,\n  point,\n  Units,\n} from \"@turf/helpers\";\nimport { featureOf } from \"@turf/invariant\";\nimport { segmentEach } from \"@turf/meta\";\nimport { rhumbDistance as getPlanarDistance } from \"@turf/rhumb-distance\";\n\n/**\n * Returns the minimum distance between a {@link Point} and a {@link LineString}, being the distance from a line the\n * minimum distance between the point and any segment of the `LineString`.\n *\n * @name pointToLineDistance\n * @param {Feature<Point>|Array<number>} pt Feature or Geometry\n * @param {Feature<LineString>} line GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be anything supported by turf/convertLength\n * (ex: degrees, radians, miles, or kilometers)\n * @param {string} [options.method=\"geodesic\"] whether to calculate the distance based on geodesic (spheroid) or\n * planar (flat) method. Valid options are 'geodesic' or 'planar'.\n * @returns {number} distance between point and line\n * @example\n * var pt = turf.point([0, 0]);\n * var line = turf.lineString([[1, 1],[-1, 1]]);\n *\n * var distance = turf.pointToLineDistance(pt, line, {units: 'miles'});\n * //=69.11854715938406\n */\nfunction pointToLineDistance(\n  pt: Coord,\n  line: Feature<LineString> | LineString,\n  options: {\n    units?: Units;\n    method?: \"geodesic\" | \"planar\";\n  } = {}\n): number {\n  // Optional parameters\n  if (!options.method) {\n    options.method = \"geodesic\";\n  }\n  if (!options.units) {\n    options.units = \"kilometers\";\n  }\n\n  // validation\n  if (!pt) {\n    throw new Error(\"pt is required\");\n  }\n  if (Array.isArray(pt)) {\n    pt = point(pt);\n  } else if (pt.type === \"Point\") {\n    pt = feature(pt);\n  } else {\n    featureOf(pt, \"Point\", \"point\");\n  }\n\n  if (!line) {\n    throw new Error(\"line is required\");\n  }\n  if (Array.isArray(line)) {\n    line = lineString(line);\n  } else if (line.type === \"LineString\") {\n    line = feature(line);\n  } else {\n    featureOf(line, \"LineString\", \"line\");\n  }\n\n  let distance = Infinity;\n  const p = pt.geometry.coordinates;\n  segmentEach(line, (segment) => {\n    const a = segment!.geometry.coordinates[0];\n    const b = segment!.geometry.coordinates[1];\n    const d = distanceToSegment(p, a, b, options);\n    if (d < distance) {\n      distance = d;\n    }\n  });\n  return convertLength(distance, \"degrees\", options.units);\n}\n\n/**\n * Returns the distance between a point P on a segment AB.\n *\n * @private\n * @param {Array<number>} p external point\n * @param {Array<number>} a first segment point\n * @param {Array<number>} b second segment point\n * @param {Object} [options={}] Optional parameters\n * @returns {number} distance\n */\nfunction distanceToSegment(\n  p: number[],\n  a: number[],\n  b: number[],\n  options: any\n) {\n  const v = [b[0] - a[0], b[1] - a[1]];\n  const w = [p[0] - a[0], p[1] - a[1]];\n\n  const c1 = dot(w, v);\n  if (c1 <= 0) {\n    return calcDistance(p, a, { method: options.method, units: \"degrees\" });\n  }\n  const c2 = dot(v, v);\n  if (c2 <= c1) {\n    return calcDistance(p, b, { method: options.method, units: \"degrees\" });\n  }\n  const b2 = c1 / c2;\n  const Pb = [a[0] + b2 * v[0], a[1] + b2 * v[1]];\n  return calcDistance(p, Pb, { method: options.method, units: \"degrees\" });\n}\n\nfunction dot(u: number[], v: number[]) {\n  return u[0] * v[0] + u[1] * v[1];\n}\n\nfunction calcDistance(a: number[], b: number[], options: any) {\n  return options.method === \"planar\"\n    ? getPlanarDistance(a, b, options)\n    : getDistance(a, b, options);\n}\n\nexport { pointToLineDistance };\nexport default pointToLineDistance;\n", "import {\n  Feature,\n  FeatureCollection,\n  GeometryCollection,\n  LineString,\n  Point,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { Units } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { featureEach, geomEach } from \"@turf/meta\";\nimport { pointToLineDistance } from \"@turf/point-to-line-distance\";\n\n/**\n * Returns the closest {@link Point|point}, of a {@link FeatureCollection|collection} of points,\n * to a {@link LineString|line}. The returned point has a `dist` property indicating its distance to the line.\n *\n * @name nearestPointToLine\n * @param {FeatureCollection|GeometryCollection<Point>} points Point Collection\n * @param {Feature|Geometry<LineString>} line Line Feature\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units='kilometers'] unit of the output distance property\n * (eg: degrees, radians, miles, or kilometers)\n * @param {Object} [options.properties={}] Translate Properties to Point\n * @returns {Feature<Point>} the closest point\n * @example\n * var pt1 = turf.point([0, 0]);\n * var pt2 = turf.point([0.5, 0.5]);\n * var points = turf.featureCollection([pt1, pt2]);\n * var line = turf.lineString([[1,1], [-1,1]]);\n *\n * var nearest = turf.nearestPointToLine(points, line);\n *\n * //addToMap\n * var addToMap = [nearest, line];\n */\nfunction nearestPointToLine<P = { dist: number; [key: string]: any }>(\n  points:\n    | FeatureCollection<Point>\n    | Feature<GeometryCollection>\n    | GeometryCollection,\n  line: Feature<LineString> | LineString,\n  options: {\n    units?: Units;\n    properties?: GeoJsonProperties;\n  } = {}\n): Feature<Point, P> {\n  const units = options.units;\n  const properties = options.properties || {};\n\n  // validation\n  const pts = normalize(points);\n  if (!pts.features.length) {\n    throw new Error(\"points must contain features\");\n  }\n\n  if (!line) {\n    throw new Error(\"line is required\");\n  }\n  if (getType(line) !== \"LineString\") {\n    throw new Error(\"line must be a LineString\");\n  }\n\n  let dist = Infinity;\n  let pt: any = null;\n\n  featureEach(pts, (point) => {\n    const d = pointToLineDistance(point, line, { units });\n    if (d < dist) {\n      dist = d;\n      pt = point;\n    }\n  });\n  /**\n   * Translate Properties to final Point, priorities:\n   * 1. options.properties\n   * 2. inherent Point properties\n   * 3. dist custom properties created by NearestPointToLine\n   */\n  if (pt) {\n    pt.properties = { ...{ dist }, ...pt.properties, ...properties };\n  }\n  return pt;\n}\n\n/**\n * Convert Collection to FeatureCollection\n *\n * @private\n * @param {FeatureCollection|GeometryCollection} points Points\n * @returns {FeatureCollection<Point>} points\n */\nfunction normalize(points: any): FeatureCollection<Point> {\n  const features: any[] = [];\n  const type = points.geometry ? points.geometry.type : points.type;\n  switch (type) {\n    case \"GeometryCollection\":\n      geomEach(points, (geom) => {\n        if (geom.type === \"Point\") {\n          features.push({ type: \"Feature\", properties: {}, geometry: geom });\n        }\n      });\n      return { type: \"FeatureCollection\", features };\n    case \"FeatureCollection\":\n      points.features = points.features.filter((feature: any) => {\n        return feature.geometry.type === \"Point\";\n      });\n      return points;\n    default:\n      throw new Error(\"points must be a Point Collection\");\n  }\n}\n\nexport { nearestPointToLine };\nexport default nearestPointToLine;\n", "import { Feature, Polygon } from \"geojson\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\nimport { Coord } from \"@turf/helpers\";\n\n/**\n * Takes a triangular plane as a polygon and a point within that triangle, and\n * returns the z-value at that point.\n *\n * The Polygon should have properties `a`, `b`, and `c`\n * that define the values at its three corners. Alternatively, the z-values\n * of each triangle point can be provided by their respective 3rd coordinate\n * if their values are not provided as properties.\n *\n * @name planepoint\n * @param {Coord} point the Point for which a z-value will be calculated\n * @param {Feature<Polygon>} triangle a Polygon feature with three vertices\n * @returns {number} the z-value for `interpolatedPoint`\n * @example\n * const point = turf.point([-75.3221, 39.529]);\n * // \"a\", \"b\", and \"c\" values represent the values of the coordinates in order.\n * const triangle = turf.polygon([[\n *   [-75.1221, 39.57],\n *   [-75.58, 39.18],\n *   [-75.97, 39.86],\n *   [-75.1221, 39.57]\n * ]], {\n *   \"a\": 11,\n *   \"b\": 122,\n *   \"c\": 44\n * });\n *\n * const zValue = turf.planepoint(point, triangle);\n * point.properties.zValue = zValue;\n *\n * //addToMap\n * const addToMap = [triangle, point];\n */\nfunction planepoint(\n  point: Coord,\n  triangle: Feature<Polygon> | Polygon\n): number {\n  // Normalize input\n  const coord = getCoord(point);\n  const geom = getGeom(triangle);\n  const coords = geom.coordinates;\n  const outer = coords[0];\n  if (outer.length < 4)\n    throw new Error(\"OuterRing of a Polygon must have 4 or more Positions.\");\n  const properties = (triangle.type === \"Feature\" && triangle.properties) || {};\n  const a = properties.a;\n  const b = properties.b;\n  const c = properties.c;\n\n  // Planepoint\n  const x = coord[0];\n  const y = coord[1];\n  const x1 = outer[0][0];\n  const y1 = outer[0][1];\n  const z1 = a !== undefined ? a : outer[0][2];\n  const x2 = outer[1][0];\n  const y2 = outer[1][1];\n  const z2 = b !== undefined ? b : outer[1][2];\n  const x3 = outer[2][0];\n  const y3 = outer[2][1];\n  const z3 = c !== undefined ? c : outer[2][2];\n  const z =\n    (z3 * (x - x1) * (y - y2) +\n      z1 * (x - x2) * (y - y3) +\n      z2 * (x - x3) * (y - y1) -\n      z2 * (x - x1) * (y - y3) -\n      z3 * (x - x2) * (y - y1) -\n      z1 * (x - x3) * (y - y2)) /\n    ((x - x1) * (y - y2) +\n      (x - x2) * (y - y3) +\n      (x - x3) * (y - y1) -\n      (x - x1) * (y - y3) -\n      (x - x2) * (y - y1) -\n      (x - x3) * (y - y2));\n\n  return z;\n}\n\nexport { planepoint };\nexport default planepoint;\n", "import type { Feature, Point } from \"geojson\";\nimport type { AllGeoJSON } from \"@turf/helpers\";\nimport { explode } from \"@turf/explode\";\nimport { center as centroid } from \"@turf/center\";\nimport { nearestPoint } from \"@turf/nearest-point\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { featureCollection, feature, point } from \"@turf/helpers\";\n\n/**\n * Takes a Feature or FeatureCollection and returns a {@link Point} guaranteed to be on the surface of the feature.\n *\n * * Given a {@link Polygon}, the point will be in the area of the polygon\n * * Given a {@link LineString}, the point will be along the string\n * * Given a {@link Point}, the point will the same as the input\n *\n * @name pointOnFeature\n * @param {GeoJSON} geojson any Feature or FeatureCollection\n * @returns {Feature<Point>} a point on the surface of `input`\n * @example\n * var polygon = turf.polygon([[\n *   [116, -36],\n *   [131, -32],\n *   [146, -43],\n *   [155, -25],\n *   [133, -9],\n *   [111, -22],\n *   [116, -36]\n * ]]);\n *\n * var pointOnPolygon = turf.pointOnFeature(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, pointOnPolygon];\n */\nfunction pointOnFeature(geojson: AllGeoJSON): Feature<Point> {\n  // normalize\n  const fc = normalize(geojson);\n\n  // get centroid\n  const cent = centroid(fc);\n\n  // check to see if centroid is on surface\n  let onSurface = false;\n  let i = 0;\n  while (!onSurface && i < fc.features.length) {\n    const geom = fc.features[i].geometry;\n    let x, y, x1, y1, x2, y2;\n    let onLine = false;\n    if (geom.type === \"Point\") {\n      if (\n        cent.geometry.coordinates[0] === geom.coordinates[0] &&\n        cent.geometry.coordinates[1] === geom.coordinates[1]\n      ) {\n        onSurface = true;\n      }\n    } else if (geom.type === \"MultiPoint\") {\n      let onMultiPoint = false;\n      let k = 0;\n      while (!onMultiPoint && k < geom.coordinates.length) {\n        if (\n          cent.geometry.coordinates[0] === geom.coordinates[k][0] &&\n          cent.geometry.coordinates[1] === geom.coordinates[k][1]\n        ) {\n          onSurface = true;\n          onMultiPoint = true;\n        }\n        k++;\n      }\n    } else if (geom.type === \"LineString\") {\n      let k = 0;\n      while (!onLine && k < geom.coordinates.length - 1) {\n        x = cent.geometry.coordinates[0];\n        y = cent.geometry.coordinates[1];\n        x1 = geom.coordinates[k][0];\n        y1 = geom.coordinates[k][1];\n        x2 = geom.coordinates[k + 1][0];\n        y2 = geom.coordinates[k + 1][1];\n        if (pointOnSegment(x, y, x1, y1, x2, y2)) {\n          onLine = true;\n          onSurface = true;\n        }\n        k++;\n      }\n    } else if (geom.type === \"MultiLineString\") {\n      let j = 0;\n      while (j < geom.coordinates.length) {\n        onLine = false;\n        let k = 0;\n        const line = geom.coordinates[j];\n        while (!onLine && k < line.length - 1) {\n          x = cent.geometry.coordinates[0];\n          y = cent.geometry.coordinates[1];\n          x1 = line[k][0];\n          y1 = line[k][1];\n          x2 = line[k + 1][0];\n          y2 = line[k + 1][1];\n          if (pointOnSegment(x, y, x1, y1, x2, y2)) {\n            onLine = true;\n            onSurface = true;\n          }\n          k++;\n        }\n        j++;\n      }\n    } else if (geom.type === \"Polygon\" || geom.type === \"MultiPolygon\") {\n      if (booleanPointInPolygon(cent, geom)) {\n        onSurface = true;\n      }\n    }\n    i++;\n  }\n  if (onSurface) {\n    return cent;\n  } else {\n    const vertices = featureCollection<Point>([]);\n    for (let f = 0; f < fc.features.length; f++) {\n      vertices.features = vertices.features.concat(\n        explode(fc.features[f]).features\n      );\n    }\n    // Remove distanceToPoint properties from nearestPoint()\n    return point(nearestPoint(cent, vertices).geometry.coordinates);\n  }\n}\n\n/**\n * Normalizes any GeoJSON to a FeatureCollection\n *\n * @private\n * @name normalize\n * @param {GeoJSON} geojson Any GeoJSON\n * @returns {FeatureCollection} FeatureCollection\n */\nfunction normalize(geojson: AllGeoJSON) {\n  if (geojson.type !== \"FeatureCollection\") {\n    if (geojson.type !== \"Feature\") {\n      return featureCollection([feature(geojson)]);\n    }\n    return featureCollection([geojson]);\n  }\n  return geojson;\n}\n\nfunction pointOnSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const ab = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  const ap = Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n  const pb = Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y));\n  return ab === ap + pb;\n}\n\nexport { pointOnFeature };\nexport default pointOnFeature;\n", "import type {\n  Feature,\n  FeatureCollection,\n  Polygon,\n  MultiPolygon,\n  MultiPoint,\n  Point,\n  GeoJsonProperties,\n  Position,\n} from \"geojson\";\nimport { booleanPointInPolygon as pointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { featureCollection, multiPoint } from \"@turf/helpers\";\nimport { geomEach, featureEach, coordEach } from \"@turf/meta\";\n\n/**\n * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.\n *\n * @name pointsWithinPolygon\n * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search\n * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within\n * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in\n * @example\n * var points = turf.points([\n *     [-46.6318, -23.5523],\n *     [-46.6246, -23.5325],\n *     [-46.6062, -23.5513],\n *     [-46.663, -23.554],\n *     [-46.643, -23.557]\n * ]);\n *\n * var searchWithin = turf.polygon([[\n *     [-46.653,-23.543],\n *     [-46.634,-23.5346],\n *     [-46.613,-23.543],\n *     [-46.614,-23.559],\n *     [-46.631,-23.567],\n *     [-46.653,-23.560],\n *     [-46.653,-23.543]\n * ]]);\n *\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n *\n * //addToMap\n * var addToMap = [points, searchWithin, ptsWithin]\n * turf.featureEach(ptsWithin, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction pointsWithinPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties,\n>(\n  points:\n    | Feature<Point | MultiPoint, P>\n    | FeatureCollection<Point | MultiPoint, P>,\n  polygons: Feature<G> | FeatureCollection<G> | G\n): FeatureCollection<Point | MultiPoint, P> {\n  const results: Feature<Point | MultiPoint, P>[] = [];\n  featureEach(points, function (point) {\n    let contained = false;\n    if (point.geometry.type === \"Point\") {\n      geomEach(polygons, function (polygon) {\n        if (pointInPolygon(point as Feature<Point, P>, polygon)) {\n          contained = true;\n        }\n      });\n      if (contained) {\n        results.push(point);\n      }\n    } else if (point.geometry.type === \"MultiPoint\") {\n      var pointsWithin: Position[] = [];\n      geomEach(polygons, function (polygon) {\n        coordEach(point as Feature<MultiPoint>, function (pointCoord) {\n          if (pointInPolygon(pointCoord, polygon)) {\n            contained = true;\n            pointsWithin.push(pointCoord);\n          }\n        });\n      });\n      if (contained) {\n        results.push(\n          multiPoint(pointsWithin, point.properties) as Feature<MultiPoint, P>\n        );\n      }\n    } else {\n      throw new Error(\"Input geometry must be a Point or MultiPoint\");\n    }\n  });\n  return featureCollection(results);\n}\n\nexport { pointsWithinPolygon };\nexport default pointsWithinPolygon;\n", "import {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  Polygon,\n} from \"geojson\";\nimport { featureCollection } from \"@turf/helpers\";\nimport { Graph } from \"./lib/Graph.js\";\nimport { EdgeRing } from \"./lib/EdgeRing.js\";\n\n/**\n * Polygonizes {@link LineString|(Multi)LineString(s)} into {@link Polygons}.\n *\n * Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).\n *\n * Polygonizes a set of lines that represents edges in a planar graph. Edges must be correctly\n * noded, i.e., they must only meet at their endpoints.\n *\n * The implementation correctly handles:\n *\n * - Dangles: edges which have one or both ends which are not incident on another edge endpoint.\n * - Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.\n *\n * @name polygonize\n * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geoJson Lines in order to polygonize\n * @returns {FeatureCollection<Polygon>} Polygons created\n * @throws {Error} if geoJson is invalid.\n */\nfunction polygonize<T extends LineString | MultiLineString>(\n  geoJson: Feature<T> | FeatureCollection<T> | T\n): FeatureCollection<Polygon> {\n  const graph = Graph.fromGeoJson(geoJson);\n\n  // 1. Remove dangle node\n  graph.deleteDangles();\n\n  // 2. Remove cut-edges (bridge edges)\n  graph.deleteCutEdges();\n\n  // 3. Get all holes and shells\n  const holes: EdgeRing[] = [],\n    shells: EdgeRing[] = [];\n\n  graph\n    .getEdgeRings()\n    .filter((edgeRing) => edgeRing.isValid())\n    .forEach((edgeRing) => {\n      if (edgeRing.isHole()) holes.push(edgeRing);\n      else shells.push(edgeRing);\n    });\n\n  // 4. Assign Holes to Shells\n  holes.forEach((hole) => {\n    if (EdgeRing.findEdgeRingContaining(hole, shells)) shells.push(hole);\n  });\n\n  // 5. EdgeRings to Polygons\n  return featureCollection(shells.map((shell) => shell.toPolygon()));\n}\n\nexport { polygonize };\nexport default polygonize;\n", "import { Feature, Polygon } from \"geojson\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { point } from \"@turf/helpers\";\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign#Polyfill\nfunction mathSign(x: number) {\n  return ((x > 0) as unknown as number) - ((x < 0) as unknown as number) || +x;\n}\n\n/**\n * Returns the direction of the point q relative to the vector p1 -> p2.\n *\n * Implementation of geos::algorithm::CGAlgorithm::orientationIndex()\n * (same as geos::algorithm::CGAlgorithm::computeOrientation())\n *\n * @param {number[]} p1 - the origin point of the vector\n * @param {number[]} p2 - the final point of the vector\n * @param {number[]} q - the point to compute the direction to\n *\n * @returns {number} - 1 if q is ccw (left) from p1->p2,\n *    -1 if q is cw (right) from p1->p2,\n *     0 if q is colinear with p1->p2\n */\nexport function orientationIndex(p1: number[], p2: number[], q: number[]) {\n  const dx1 = p2[0] - p1[0],\n    dy1 = p2[1] - p1[1],\n    dx2 = q[0] - p2[0],\n    dy2 = q[1] - p2[1];\n\n  return mathSign(dx1 * dy2 - dx2 * dy1);\n}\n\n/**\n * Checks if two envelopes are equal.\n *\n * The function assumes that the arguments are envelopes, i.e.: Rectangular polygon\n *\n * @param {Feature<Polygon>} env1 - Envelope\n * @param {Feature<Polygon>} env2 - Envelope\n * @returns {boolean} - True if the envelopes are equal\n */\nexport function envelopeIsEqual(\n  env1: Feature<Polygon>,\n  env2: Feature<Polygon>\n) {\n  const envX1 = env1.geometry.coordinates[0].map((c) => c[0]),\n    envY1 = env1.geometry.coordinates[0].map((c) => c[1]),\n    envX2 = env2.geometry.coordinates[0].map((c) => c[0]),\n    envY2 = env2.geometry.coordinates[0].map((c) => c[1]);\n\n  return (\n    Math.max.apply(null, envX1) === Math.max.apply(null, envX2) &&\n    Math.max.apply(null, envY1) === Math.max.apply(null, envY2) &&\n    Math.min.apply(null, envX1) === Math.min.apply(null, envX2) &&\n    Math.min.apply(null, envY1) === Math.min.apply(null, envY2)\n  );\n}\n\n/**\n * Check if a envelope is contained in other one.\n *\n * The function assumes that the arguments are envelopes, i.e.: Convex polygon\n * XXX: Envelopes are rectangular, checking if a point is inside a rectangule is something easy,\n * this could be further improved.\n *\n * @param {Feature<Polygon>} self - Envelope\n * @param {Feature<Polygon>} env - Envelope\n * @returns {boolean} - True if env is contained in self\n */\nexport function envelopeContains(\n  self: Feature<Polygon>,\n  env: Feature<Polygon>\n) {\n  return env.geometry.coordinates[0].every((c) =>\n    booleanPointInPolygon(point(c), self)\n  );\n}\n\n/**\n * Checks if two coordinates are equal.\n *\n * @param {number[]} coord1 - First coordinate\n * @param {number[]} coord2 - Second coordinate\n * @returns {boolean} - True if coordinates are equal\n */\nexport function coordinatesEqual(coord1: number[], coord2: number[]) {\n  return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n}\n", "import { orientationIndex } from \"./util.js\";\nimport { Edge } from \"./Edge.js\";\n\n/**\n * Node\n */\nclass Node {\n  static buildId(coordinates: number[]) {\n    return coordinates.join(\",\");\n  }\n\n  public id: string;\n  public coordinates: number[];\n  public innerEdges: Edge[];\n  private outerEdges: Edge[];\n  private outerEdgesSorted: boolean;\n\n  constructor(coordinates: number[]) {\n    this.id = Node.buildId(coordinates);\n    this.coordinates = coordinates; //< {Number[]}\n    this.innerEdges = []; //< {Edge[]}\n\n    // We wil store to (out) edges in an CCW order as geos::planargraph::DirectedEdgeStar does\n    this.outerEdges = []; //< {Edge[]}\n    this.outerEdgesSorted = false; //< {Boolean} flag that stores if the outer Edges had been sorted\n  }\n\n  removeInnerEdge(edge: Edge) {\n    this.innerEdges = this.innerEdges.filter((e) => e.from.id !== edge.from.id);\n  }\n\n  removeOuterEdge(edge: Edge) {\n    this.outerEdges = this.outerEdges.filter((e) => e.to.id !== edge.to.id);\n  }\n\n  /**\n   * Outer edges are stored CCW order.\n   *\n   * @memberof Node\n   * @param {Edge} edge - Edge to add as an outerEdge.\n   */\n  addOuterEdge(edge: Edge) {\n    this.outerEdges.push(edge);\n    this.outerEdgesSorted = false;\n  }\n\n  /**\n   * Sorts outer edges in CCW way.\n   *\n   * @memberof Node\n   * @private\n   */\n  sortOuterEdges() {\n    if (!this.outerEdgesSorted) {\n      //this.outerEdges.sort((a, b) => a.compareTo(b));\n      // Using this comparator in order to be deterministic\n      this.outerEdges.sort((a, b) => {\n        const aNode = a.to,\n          bNode = b.to;\n\n        if (\n          aNode.coordinates[0] - this.coordinates[0] >= 0 &&\n          bNode.coordinates[0] - this.coordinates[0] < 0\n        )\n          return 1;\n        if (\n          aNode.coordinates[0] - this.coordinates[0] < 0 &&\n          bNode.coordinates[0] - this.coordinates[0] >= 0\n        )\n          return -1;\n\n        if (\n          aNode.coordinates[0] - this.coordinates[0] === 0 &&\n          bNode.coordinates[0] - this.coordinates[0] === 0\n        ) {\n          if (\n            aNode.coordinates[1] - this.coordinates[1] >= 0 ||\n            bNode.coordinates[1] - this.coordinates[1] >= 0\n          )\n            return aNode.coordinates[1] - bNode.coordinates[1];\n          return bNode.coordinates[1] - aNode.coordinates[1];\n        }\n\n        const det = orientationIndex(\n          this.coordinates,\n          aNode.coordinates,\n          bNode.coordinates\n        );\n        if (det < 0) return 1;\n        if (det > 0) return -1;\n\n        const d1 =\n            Math.pow(aNode.coordinates[0] - this.coordinates[0], 2) +\n            Math.pow(aNode.coordinates[1] - this.coordinates[1], 2),\n          d2 =\n            Math.pow(bNode.coordinates[0] - this.coordinates[0], 2) +\n            Math.pow(bNode.coordinates[1] - this.coordinates[1], 2);\n\n        return d1 - d2;\n      });\n      this.outerEdgesSorted = true;\n    }\n  }\n\n  /**\n   * Retrieves outer edges.\n   *\n   * They are sorted if they aren't in the CCW order.\n   *\n   * @memberof Node\n   * @returns {Edge[]} - List of outer edges sorted in a CCW order.\n   */\n  getOuterEdges() {\n    this.sortOuterEdges();\n    return this.outerEdges;\n  }\n\n  getOuterEdge(i: number) {\n    this.sortOuterEdges();\n    return this.outerEdges[i];\n  }\n\n  addInnerEdge(edge: Edge) {\n    this.innerEdges.push(edge);\n  }\n}\n\nexport { Node };\nexport default Node;\n", "import { lineString } from \"@turf/helpers\";\nimport { orientationIndex } from \"./util.js\";\nimport { Node } from \"./Node.js\";\nimport { EdgeRing } from \"./EdgeRing.js\";\n\n/**\n * This class is inspired by GEOS's geos::operation::polygonize::PolygonizeDirectedEdge\n */\nclass Edge {\n  public label?: number;\n  public symetric?: Edge;\n  public from: Node;\n  public to: Node;\n  public next?: Edge;\n  public ring?: EdgeRing;\n\n  /**\n   * Creates or get the symetric Edge.\n   *\n   * @returns {Edge} - Symetric Edge.\n   */\n  getSymetric() {\n    if (!this.symetric) {\n      this.symetric = new Edge(this.to, this.from);\n      this.symetric.symetric = this;\n    }\n\n    return this.symetric;\n  }\n\n  /**\n   * @param {Node} from - start node of the Edge\n   * @param {Node} to - end node of the edge\n   */\n  constructor(from: Node, to: Node) {\n    this.from = from; //< start\n    this.to = to; //< End\n\n    this.next = undefined; //< The edge to be computed after\n    this.label = undefined; //< Used in order to detect Cut Edges (Bridges)\n    this.symetric = undefined; //< The symetric edge of this\n    this.ring = undefined; //< EdgeRing in which the Edge is\n\n    this.from.addOuterEdge(this);\n    this.to.addInnerEdge(this);\n  }\n\n  /**\n   * Removes edge from from and to nodes.\n   */\n  deleteEdge() {\n    this.from.removeOuterEdge(this);\n    this.to.removeInnerEdge(this);\n  }\n\n  /**\n   * Compares Edge equallity.\n   *\n   * An edge is equal to another, if the from and to nodes are the same.\n   *\n   * @param {Edge} edge - Another Edge\n   * @returns {boolean} - True if Edges are equal, False otherwise\n   */\n  isEqual(edge: Edge) {\n    return this.from.id === edge.from.id && this.to.id === edge.to.id;\n  }\n\n  toString() {\n    return `Edge { ${this.from.id} -> ${this.to.id} }`;\n  }\n\n  /**\n   * Returns a LineString representation of the Edge\n   *\n   * @returns {Feature<LineString>} - LineString representation of the Edge\n   */\n  toLineString() {\n    return lineString([this.from.coordinates, this.to.coordinates]);\n  }\n\n  /**\n   * Comparator of two edges.\n   *\n   * Implementation of geos::planargraph::DirectedEdge::compareTo.\n   *\n   * @param {Edge} edge - Another edge to compare with this one\n   * @returns {number} -1 if this Edge has a greater angle with the positive x-axis than b,\n   *          0 if the Edges are colinear,\n   *          1 otherwise\n   */\n  compareTo(edge: Edge) {\n    return orientationIndex(\n      edge.from.coordinates,\n      edge.to.coordinates,\n      this.to.coordinates\n    );\n  }\n}\n\nexport { Edge };\nexport default Edge;\n", "import { Polygon, Feature, Point, Position } from \"geojson\";\nimport {\n  orientationIndex,\n  envelopeIsEqual,\n  envelopeContains,\n  coordinatesEqual,\n} from \"./util.js\";\nimport { multiPoint, polygon, point } from \"@turf/helpers\";\nimport { envelope } from \"@turf/envelope\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { Edge } from \"./Edge.js\";\n\n/**\n * Ring of edges which form a polygon.\n *\n * The ring may be either an outer shell or a hole.\n *\n * This class is inspired in GEOS's geos::operation::polygonize::EdgeRing\n */\nclass EdgeRing {\n  private edges: Edge[];\n  private polygon?: Feature<\n    Polygon,\n    {\n      [name: string]: any;\n    }\n  >;\n  private envelope?: Feature<\n    Polygon,\n    {\n      [name: string]: any;\n    }\n  >;\n\n  constructor() {\n    this.edges = [];\n    this.polygon = undefined; //< Caches Polygon representation\n    this.envelope = undefined; //< Caches Envelope representation\n  }\n\n  /**\n   * Add an edge to the ring, inserting it in the last position.\n   *\n   * @memberof EdgeRing\n   * @param {Edge} edge - Edge to be inserted\n   */\n  push(edge: Edge) {\n    this.edges.push(edge);\n    this.polygon = this.envelope = undefined;\n  }\n\n  /**\n   * Get Edge.\n   *\n   * @memberof EdgeRing\n   * @param {number} i - Index\n   * @returns {Edge} - Edge in the i position\n   */\n  get(i: number) {\n    return this.edges[i];\n  }\n\n  /**\n   * Getter of length property.\n   *\n   * @memberof EdgeRing\n   * @returns {number} - Length of the edge ring.\n   */\n  get length() {\n    return this.edges.length;\n  }\n\n  /**\n   * Similar to Array.prototype.forEach for the list of Edges in the EdgeRing.\n   *\n   * @memberof EdgeRing\n   * @param {Function} f - The same function to be passed to Array.prototype.forEach\n   */\n  forEach(f: (edge: Edge, index: number, array: Edge[]) => void) {\n    this.edges.forEach(f);\n  }\n\n  /**\n   * Similar to Array.prototype.map for the list of Edges in the EdgeRing.\n   *\n   * @memberof EdgeRing\n   * @param {Function} f - The same function to be passed to Array.prototype.map\n   * @returns {Array} - The mapped values in the function\n   */\n  map<T>(f: (edge: Edge, index: number, array: Edge[]) => T): T[] {\n    return this.edges.map(f);\n  }\n\n  /**\n   * Similar to Array.prototype.some for the list of Edges in the EdgeRing.\n   *\n   * @memberof EdgeRing\n   * @param {Function} f - The same function to be passed to Array.prototype.some\n   * @returns {boolean} - True if an Edge check the condition\n   */\n  some(f: (edge: Edge, index: number, array: Edge[]) => boolean) {\n    return this.edges.some(f);\n  }\n\n  /**\n   * Check if the ring is valid in geomtry terms.\n   *\n   * A ring must have either 0 or 4 or more points. The first and the last must be\n   * equal (in 2D)\n   * geos::geom::LinearRing::validateConstruction\n   *\n   * @memberof EdgeRing\n   * @returns {boolean} - Validity of the EdgeRing\n   */\n  isValid() {\n    // TODO: stub\n    return true;\n  }\n\n  /**\n   * Tests whether this ring is a hole.\n   *\n   * A ring is a hole if it is oriented counter-clockwise.\n   * Similar implementation of geos::algorithm::CGAlgorithms::isCCW\n   *\n   * @memberof EdgeRing\n   * @returns {boolean} - true: if it is a hole\n   */\n  isHole() {\n    // XXX: Assuming Ring is valid\n    // Find highest point\n    const hiIndex = this.edges.reduce((high, edge, i) => {\n        if (edge.from.coordinates[1] > this.edges[high].from.coordinates[1])\n          high = i;\n        return high;\n      }, 0),\n      iPrev = (hiIndex === 0 ? this.length : hiIndex) - 1,\n      iNext = (hiIndex + 1) % this.length,\n      disc = orientationIndex(\n        this.edges[iPrev].from.coordinates,\n        this.edges[hiIndex].from.coordinates,\n        this.edges[iNext].from.coordinates\n      );\n\n    if (disc === 0)\n      return (\n        this.edges[iPrev].from.coordinates[0] >\n        this.edges[iNext].from.coordinates[0]\n      );\n    return disc > 0;\n  }\n\n  /**\n   * Creates a MultiPoint representing the EdgeRing (discarts edges directions).\n   *\n   * @memberof EdgeRing\n   * @returns {Feature<MultiPoint>} - Multipoint representation of the EdgeRing\n   */\n  toMultiPoint() {\n    return multiPoint(this.edges.map((edge) => edge.from.coordinates));\n  }\n\n  /**\n   * Creates a Polygon representing the EdgeRing.\n   *\n   * @memberof EdgeRing\n   * @returns {Feature<Polygon>} - Polygon representation of the Edge Ring\n   */\n  toPolygon() {\n    if (this.polygon) return this.polygon;\n    const coordinates = this.edges.map((edge) => edge.from.coordinates);\n    coordinates.push(this.edges[0].from.coordinates);\n    return (this.polygon = polygon([coordinates]));\n  }\n\n  /**\n   * Calculates the envelope of the EdgeRing.\n   *\n   * @memberof EdgeRing\n   * @returns {Feature<Polygon>} - envelope\n   */\n  getEnvelope() {\n    if (this.envelope) return this.envelope;\n    return (this.envelope = envelope(this.toPolygon()) as Feature<\n      Polygon,\n      { [name: string]: any }\n    >);\n  }\n\n  /**\n   * `geos::operation::polygonize::EdgeRing::findEdgeRingContaining`\n   *\n   * @param {EdgeRing} testEdgeRing - EdgeRing to look in the list\n   * @param {EdgeRing[]} shellList - List of EdgeRing in which to search\n   *\n   * @returns {EdgeRing} - EdgeRing which contains the testEdgeRing\n   */\n  static findEdgeRingContaining(\n    testEdgeRing: EdgeRing,\n    shellList: EdgeRing[]\n  ): EdgeRing | undefined {\n    const testEnvelope = testEdgeRing.getEnvelope();\n\n    let minEnvelope: Feature<Polygon>, minShell: EdgeRing | undefined;\n    shellList.forEach((shell) => {\n      const tryEnvelope = shell.getEnvelope();\n\n      if (minShell) minEnvelope = minShell.getEnvelope();\n\n      // the hole envelope cannot equal the shell envelope\n      if (envelopeIsEqual(tryEnvelope, testEnvelope)) return;\n\n      if (envelopeContains(tryEnvelope, testEnvelope)) {\n        const testEdgeRingCoordinates = testEdgeRing.map(\n          (edge) => edge.from.coordinates\n        );\n\n        let testPoint: Position | undefined;\n        for (const pt of testEdgeRingCoordinates) {\n          if (\n            !shell.some((edge) => coordinatesEqual(pt, edge.from.coordinates))\n          ) {\n            testPoint = pt;\n          }\n        }\n\n        if (testPoint && shell.inside(point(testPoint))) {\n          if (!minShell || envelopeContains(minEnvelope, tryEnvelope))\n            minShell = shell;\n        }\n      }\n    });\n\n    return minShell;\n  }\n\n  /**\n   * Checks if the point is inside the edgeRing\n   *\n   * @param {Feature<Point>} pt - Point to check if it is inside the edgeRing\n   * @returns {boolean} - True if it is inside, False otherwise\n   */\n  inside(pt: Feature<Point>) {\n    return booleanPointInPolygon(pt, this.toPolygon());\n  }\n}\n\nexport { EdgeRing };\nexport default EdgeRing;\n", "import { Node } from \"./Node.js\";\nimport { Edge } from \"./Edge.js\";\nimport { EdgeRing } from \"./EdgeRing.js\";\nimport { flattenEach, coordReduce } from \"@turf/meta\";\nimport { featureOf } from \"@turf/invariant\";\nimport {\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  Feature,\n} from \"geojson\";\nimport { AllGeoJSON } from \"@turf/helpers\";\n\n/**\n * Validates the geoJson.\n *\n * @param {GeoJSON} geoJson - input geoJson.\n * @throws {Error} if geoJson is invalid.\n */\nfunction validateGeoJson(geoJson: AllGeoJSON) {\n  if (!geoJson) throw new Error(\"No geojson passed\");\n\n  if (\n    geoJson.type !== \"FeatureCollection\" &&\n    geoJson.type !== \"GeometryCollection\" &&\n    geoJson.type !== \"MultiLineString\" &&\n    geoJson.type !== \"LineString\" &&\n    geoJson.type !== \"Feature\"\n  )\n    throw new Error(\n      `Invalid input type '${geoJson.type}'. Geojson must be FeatureCollection, GeometryCollection, LineString, MultiLineString or Feature`\n    );\n}\n\n/**\n * Represents a planar graph of edges and nodes that can be used to compute a polygonization.\n *\n * Although, this class is inspired by GEOS's `geos::operation::polygonize::PolygonizeGraph`,\n * it isn't a rewrite. As regards algorithm, this class implements the same logic, but it\n * isn't a javascript transcription of the C++ source.\n *\n * This graph is directed (both directions are created)\n */\nclass Graph {\n  private nodes: { [id: string]: Node };\n  private edges: Edge[];\n\n  /**\n   * Creates a graph from a GeoJSON.\n   *\n   * @param {FeatureCollection<LineString>} geoJson - it must comply with the restrictions detailed in the index\n   * @returns {Graph} - The newly created graph\n   * @throws {Error} if geoJson is invalid.\n   */\n  static fromGeoJson(\n    geoJson:\n      | FeatureCollection<LineString | MultiLineString>\n      | LineString\n      | MultiLineString\n      | Feature<LineString | MultiLineString>\n  ) {\n    validateGeoJson(geoJson);\n\n    const graph = new Graph();\n    flattenEach(geoJson, (feature) => {\n      featureOf(feature, \"LineString\", \"Graph::fromGeoJson\");\n      // When a LineString if formed by many segments, split them\n      coordReduce<number[]>(feature, (prev, cur) => {\n        if (prev) {\n          const start = graph.getNode(prev),\n            end = graph.getNode(cur);\n\n          graph.addEdge(start, end);\n        }\n        return cur;\n      });\n    });\n\n    return graph;\n  }\n\n  /**\n   * Creates or get a Node.\n   *\n   * @param {number[]} coordinates - Coordinates of the node\n   * @returns {Node} - The created or stored node\n   */\n  getNode(coordinates: number[]) {\n    const id = Node.buildId(coordinates);\n    let node = this.nodes[id];\n    if (!node) node = this.nodes[id] = new Node(coordinates);\n\n    return node;\n  }\n\n  /**\n   * Adds an Edge and its symetricall.\n   *\n   * Edges are added symetrically, i.e.: we also add its symetric\n   *\n   * @param {Node} from - Node which starts the Edge\n   * @param {Node} to - Node which ends the Edge\n   */\n  addEdge(from: Node, to: Node) {\n    const edge = new Edge(from, to),\n      symetricEdge = edge.getSymetric();\n\n    this.edges.push(edge);\n    this.edges.push(symetricEdge);\n  }\n\n  constructor() {\n    this.edges = []; //< {Edge[]} dirEdges\n\n    // The key is the `id` of the Node (ie: coordinates.join(','))\n    this.nodes = {};\n  }\n\n  /**\n   * Removes Dangle Nodes (nodes with grade 1).\n   */\n  deleteDangles() {\n    Object.keys(this.nodes)\n      .map((id) => this.nodes[id])\n      .forEach((node) => this._removeIfDangle(node));\n  }\n\n  /**\n   * Check if node is dangle, if so, remove it.\n   *\n   * It calls itself recursively, removing a dangling node might cause another dangling node\n   *\n   * @param {Node} node - Node to check if it's a dangle\n   */\n  _removeIfDangle(node: Node) {\n    // As edges are directed and symetrical, we count only innerEdges\n    if (node.innerEdges.length <= 1) {\n      const outerNodes = node.getOuterEdges().map((e) => e.to);\n      this.removeNode(node);\n      outerNodes.forEach((n) => this._removeIfDangle(n));\n    }\n  }\n\n  /**\n   * Delete cut-edges (bridge edges).\n   *\n   * The graph will be traversed, all the edges will be labeled according the ring\n   * in which they are. (The label is a number incremented by 1). Edges with the same\n   * label are cut-edges.\n   */\n  deleteCutEdges() {\n    this._computeNextCWEdges();\n    this._findLabeledEdgeRings();\n\n    // Cut-edges (bridges) are edges where both edges have the same label\n    this.edges.forEach((edge) => {\n      if (edge.label === edge.symetric!.label) {\n        this.removeEdge(edge.symetric!);\n        this.removeEdge(edge);\n      }\n    });\n  }\n\n  /**\n   * Set the `next` property of each Edge.\n   *\n   * The graph will be transversed in a CW form, so, we set the next of the symetrical edge as the previous one.\n   * OuterEdges are sorted CCW.\n   *\n   * @param {Node} [node] - If no node is passed, the function calls itself for every node in the Graph\n   */\n  _computeNextCWEdges(node?: Node) {\n    if (typeof node === \"undefined\") {\n      Object.keys(this.nodes).forEach((id) =>\n        this._computeNextCWEdges(this.nodes[id])\n      );\n    } else {\n      node.getOuterEdges().forEach((edge, i) => {\n        node.getOuterEdge(\n          (i === 0 ? node.getOuterEdges().length : i) - 1\n        ).symetric!.next = edge;\n      });\n    }\n  }\n\n  /**\n   * Computes the next edge pointers going CCW around the given node, for the given edgering label.\n   *\n   * This algorithm has the effect of converting maximal edgerings into minimal edgerings\n   *\n   * XXX: method literally transcribed from `geos::operation::polygonize::PolygonizeGraph::computeNextCCWEdges`,\n   * could be written in a more javascript way.\n   *\n   * @param {Node} node - Node\n   * @param {number} label - Ring's label\n   */\n  _computeNextCCWEdges(node: Node, label: number) {\n    const edges = node.getOuterEdges();\n    let firstOutDE, prevInDE;\n\n    for (let i = edges.length - 1; i >= 0; --i) {\n      let de = edges[i],\n        sym = de.symetric,\n        outDE,\n        inDE;\n\n      if (de.label === label) outDE = de;\n\n      if (sym!.label === label) inDE = sym;\n\n      if (!outDE || !inDE)\n        // This edge is not in edgering\n        continue;\n\n      if (inDE) prevInDE = inDE;\n\n      if (outDE) {\n        if (prevInDE) {\n          prevInDE.next = outDE;\n          prevInDE = undefined;\n        }\n\n        if (!firstOutDE) firstOutDE = outDE;\n      }\n    }\n\n    if (prevInDE) prevInDE.next = firstOutDE;\n  }\n\n  /**\n   * Finds rings and labels edges according to which rings are.\n   *\n   * The label is a number which is increased for each ring.\n   *\n   * @returns {Edge[]} edges that start rings\n   */\n  _findLabeledEdgeRings() {\n    const edgeRingStarts: Edge[] = [];\n    let label = 0;\n    this.edges.forEach((edge) => {\n      if (edge.label! >= 0) return;\n\n      edgeRingStarts.push(edge);\n\n      let e = edge;\n      do {\n        e.label = label;\n        e = e.next!;\n      } while (!edge.isEqual(e));\n\n      label++;\n    });\n\n    return edgeRingStarts;\n  }\n\n  /**\n   * Computes the EdgeRings formed by the edges in this graph.\n   *\n   * @returns {EdgeRing[]} - A list of all the EdgeRings in the graph.\n   */\n  getEdgeRings() {\n    this._computeNextCWEdges();\n\n    // Clear labels\n    this.edges.forEach((edge) => {\n      edge.label = undefined;\n    });\n\n    this._findLabeledEdgeRings().forEach((edge) => {\n      // convertMaximalToMinimalEdgeRings\n      this._findIntersectionNodes(edge).forEach((node) => {\n        this._computeNextCCWEdges(node, edge.label!);\n      });\n    });\n\n    const edgeRingList: EdgeRing[] = [];\n\n    // find all edgerings\n    this.edges.forEach((edge) => {\n      if (edge.ring) return;\n      edgeRingList.push(this._findEdgeRing(edge));\n    });\n\n    return edgeRingList;\n  }\n\n  /**\n   * Find all nodes in a Maxima EdgeRing which are self-intersection nodes.\n   *\n   * @param {Node} startEdge - Start Edge of the Ring\n   * @returns {Node[]} - intersection nodes\n   */\n  _findIntersectionNodes(startEdge: Edge) {\n    const intersectionNodes = [];\n    let edge = startEdge;\n    do {\n      // getDegree\n      let degree = 0;\n      edge.from.getOuterEdges().forEach((e) => {\n        if (e.label === startEdge.label) ++degree;\n      });\n\n      if (degree > 1) intersectionNodes.push(edge.from);\n\n      edge = edge.next!;\n    } while (!startEdge.isEqual(edge));\n\n    return intersectionNodes;\n  }\n\n  /**\n   * Get the edge-ring which starts from the provided Edge.\n   *\n   * @param {Edge} startEdge - starting edge of the edge ring\n   * @returns {EdgeRing} - EdgeRing which start Edge is the provided one.\n   */\n  _findEdgeRing(startEdge: Edge) {\n    let edge = startEdge;\n    const edgeRing = new EdgeRing();\n\n    do {\n      edgeRing.push(edge);\n      edge.ring = edgeRing;\n      edge = edge.next!;\n    } while (!startEdge.isEqual(edge));\n\n    return edgeRing;\n  }\n\n  /**\n   * Removes a node from the Graph.\n   *\n   * It also removes edges asociated to that node\n   * @param {Node} node - Node to be removed\n   */\n  removeNode(node: Node) {\n    node.getOuterEdges().forEach((edge) => this.removeEdge(edge));\n    node.innerEdges.forEach((edge) => this.removeEdge(edge));\n    delete this.nodes[node.id];\n  }\n\n  /**\n   * Remove edge from the graph and deletes the edge.\n   *\n   * @param {Edge} edge - Edge to be removed\n   */\n  removeEdge(edge: Edge) {\n    this.edges = this.edges.filter((e) => !e.isEqual(edge));\n    edge.deleteEdge();\n  }\n}\n\nexport { Graph };\nexport default Graph;\n", "import type {\n  Feature,\n  FeatureCollection,\n  Polygon,\n  Position,\n  MultiPolygon,\n} from \"geojson\";\nimport { featureCollection, multiPolygon, polygon } from \"@turf/helpers\";\nimport { coordEach, geomEach } from \"@turf/meta\";\n\n/**\n * Smooths a {@link Polygon} or {@link MultiPolygon}. Based on [Chaikin's algorithm](http://graphics.cs.ucdavis.edu/education/CAGDNotes/Chaikins-Algorithm/Chaikins-Algorithm.html).\n * Warning: may create degenerate polygons.\n *\n * @name polygonSmooth\n * @param {FeatureCollection<Polygon|MultiPolygon>|Feature<Polygon|MultiPolygon>|Polygon|MultiPolygon} inputPolys (Multi)Polygon(s) to smooth\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.iterations=1] The number of times to smooth the polygon. A higher value means a smoother polygon.\n * @returns {FeatureCollection<Polygon|MultiPolygon>} FeatureCollection containing the smoothed polygon/multipoylgons\n * @example\n * var polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\n *\n * var smoothed = turf.polygonSmooth(polygon, {iterations: 3})\n *\n * //addToMap\n * var addToMap = [smoothed, polygon];\n */\nfunction polygonSmooth(\n  inputPolys:\n    | FeatureCollection<Polygon | MultiPolygon>\n    | Feature<Polygon | MultiPolygon>\n    | Polygon\n    | MultiPolygon,\n  options?: {\n    iterations?: number;\n  }\n): FeatureCollection<Polygon | MultiPolygon> {\n  // Optional parameters\n  options = options || {};\n  options.iterations = options.iterations || 1;\n\n  const { iterations } = options;\n\n  const outPolys: Feature<Polygon | MultiPolygon>[] = [];\n  if (!inputPolys) throw new Error(\"inputPolys is required\");\n\n  geomEach(inputPolys, function (geom, geomIndex, properties) {\n    if (geom.type === \"Polygon\") {\n      let outCoords: Position[][] = [[]];\n      for (let i = 0; i < iterations; i++) {\n        let tempOutput: Position[][] = [];\n        let poly = geom;\n        if (i > 0) {\n          poly = polygon(outCoords).geometry;\n        }\n        processPolygon(poly, tempOutput);\n        outCoords = tempOutput.slice(0);\n      }\n      outPolys.push(polygon(outCoords, properties));\n    } else if (geom.type === \"MultiPolygon\") {\n      let outCoords: Position[][][] = [[[]]];\n      for (let y = 0; y < iterations; y++) {\n        let tempOutput: Position[][][] = [];\n        let poly = geom;\n        if (y > 0) {\n          poly = multiPolygon(outCoords).geometry;\n        }\n        processMultiPolygon(poly, tempOutput);\n        outCoords = tempOutput.slice(0);\n      }\n      outPolys.push(multiPolygon(outCoords, properties));\n    } else {\n      throw new Error(\"geometry is invalid, must be Polygon or MultiPolygon\");\n    }\n  });\n\n  return featureCollection(outPolys);\n}\n\n/**\n * @param {poly} poly to process\n * @param {poly} tempOutput to place the results in\n * @private\n */\nfunction processPolygon(poly: Polygon, tempOutput: Position[][]) {\n  var previousCoord: Position;\n  var previousGeometryIndex: number;\n\n  coordEach(\n    poly,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (previousGeometryIndex !== geometryIndex) {\n        tempOutput.push([]);\n      } else {\n        var p0x = previousCoord[0];\n        var p0y = previousCoord[1];\n        var p1x = currentCoord[0];\n        var p1y = currentCoord[1];\n        tempOutput[geometryIndex].push([\n          0.75 * p0x + 0.25 * p1x,\n          0.75 * p0y + 0.25 * p1y,\n        ]);\n        tempOutput[geometryIndex].push([\n          0.25 * p0x + 0.75 * p1x,\n          0.25 * p0y + 0.75 * p1y,\n        ]);\n      }\n      previousCoord = currentCoord;\n      previousGeometryIndex = geometryIndex;\n    },\n    false\n  );\n  tempOutput.forEach(function (ring) {\n    ring.push(ring[0]);\n  });\n}\n\n/**\n * @param {poly} poly to process\n * @param {poly} tempOutput to place the results in\n * @private\n */\nfunction processMultiPolygon(poly: MultiPolygon, tempOutput: Position[][][]) {\n  let previousCoord: Position;\n  let previousMultiFeatureIndex: number;\n  let previousGeometryIndex: number;\n\n  coordEach(\n    poly,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (previousMultiFeatureIndex !== multiFeatureIndex) {\n        tempOutput.push([[]]);\n      } else if (previousGeometryIndex !== geometryIndex) {\n        tempOutput[multiFeatureIndex].push([]);\n      } else {\n        var p0x = previousCoord[0];\n        var p0y = previousCoord[1];\n        var p1x = currentCoord[0];\n        var p1y = currentCoord[1];\n        tempOutput[multiFeatureIndex][geometryIndex].push([\n          0.75 * p0x + 0.25 * p1x,\n          0.75 * p0y + 0.25 * p1y,\n        ]);\n        tempOutput[multiFeatureIndex][geometryIndex].push([\n          0.25 * p0x + 0.75 * p1x,\n          0.25 * p0y + 0.75 * p1y,\n        ]);\n      }\n      previousCoord = currentCoord;\n      previousMultiFeatureIndex = multiFeatureIndex;\n      previousGeometryIndex = geometryIndex;\n    },\n    false\n  );\n  tempOutput.forEach(function (poly) {\n    poly.forEach(function (ring) {\n      ring.push(ring[0]);\n    });\n  });\n}\n\nexport { polygonSmooth };\nexport default polygonSmooth;\n", "import type {\n  Feature,\n  FeatureCollection,\n  Point,\n  Polygon,\n  Position,\n  MultiPolygon,\n} from \"geojson\";\nimport type { Coord } from \"@turf/helpers\";\nimport { getCoords, getType } from \"@turf/invariant\";\nimport { point, featureCollection } from \"@turf/helpers\";\nimport { bbox as calcBbox } from \"@turf/bbox\";\nimport { explode } from \"@turf/explode\";\nimport { nearestPoint } from \"@turf/nearest-point\";\n\n/**\n * Finds the tangents of a {@link Polygon|(Multi)Polygon} from a {@link Point}.\n *\n * @name polygonTangents\n * @param {Coord} pt to calculate the tangent points from\n * @param {Feature<Polygon|MultiPolygon>} polygon to get tangents from\n * @returns {FeatureCollection<Point>} Feature Collection containing the two tangent points\n * @example\n * var polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\n * var point = turf.point([61, 5]);\n *\n * var tangents = turf.polygonTangents(point, polygon)\n *\n * //addToMap\n * var addToMap = [tangents, point, polygon];\n */\nfunction polygonTangents<T extends Polygon | MultiPolygon>(\n  pt: Coord,\n  polygon: Feature<T> | T\n): FeatureCollection<Point> {\n  const pointCoords = getCoords(pt);\n  const polyCoords = getCoords(polygon);\n\n  let rtan: Position = [];\n  let ltan: Position = [];\n  let eprev: number;\n  const bbox = calcBbox(polygon);\n  let nearestPtIndex = 0;\n  let nearest = null;\n\n  // If the point lies inside the polygon bbox then we need to be a bit trickier\n  // otherwise points lying inside reflex angles on concave polys can have issues\n  if (\n    pointCoords[0] > bbox[0] &&\n    pointCoords[0] < bbox[2] &&\n    pointCoords[1] > bbox[1] &&\n    pointCoords[1] < bbox[3]\n  ) {\n    nearest = nearestPoint(pt, explode(polygon));\n    nearestPtIndex = nearest.properties.featureIndex;\n  }\n  const type = getType(polygon);\n  switch (type) {\n    case \"Polygon\":\n      rtan = polyCoords[0][nearestPtIndex];\n      ltan = polyCoords[0][0];\n      if (nearest !== null) {\n        if (nearest.geometry.coordinates[1] < pointCoords[1])\n          ltan = polyCoords[0][nearestPtIndex];\n      }\n      eprev = isLeft(\n        polyCoords[0][0],\n        polyCoords[0][polyCoords[0].length - 1],\n        pointCoords\n      );\n      [rtan, ltan] = processPolygon(\n        polyCoords[0],\n        pointCoords,\n        eprev,\n        rtan,\n        ltan\n      );\n      break;\n    case \"MultiPolygon\":\n      var closestFeature = 0;\n      var closestVertex = 0;\n      var verticesCounted = 0;\n      for (var i = 0; i < polyCoords[0].length; i++) {\n        closestFeature = i;\n        var verticeFound = false;\n        for (var i2 = 0; i2 < polyCoords[0][i].length; i2++) {\n          closestVertex = i2;\n          if (verticesCounted === nearestPtIndex) {\n            verticeFound = true;\n            break;\n          }\n          verticesCounted++;\n        }\n        if (verticeFound) break;\n      }\n      rtan = polyCoords[0][closestFeature][closestVertex];\n      ltan = polyCoords[0][closestFeature][closestVertex];\n      eprev = isLeft(\n        polyCoords[0][0][0],\n        polyCoords[0][0][polyCoords[0][0].length - 1],\n        pointCoords\n      );\n      polyCoords.forEach(function (ring) {\n        [rtan, ltan] = processPolygon(ring[0], pointCoords, eprev, rtan, ltan);\n      });\n      break;\n  }\n  return featureCollection([point(rtan), point(ltan)]);\n}\n\nfunction processPolygon(\n  polygonCoords: Position[],\n  ptCoords: Position,\n  eprev: number,\n  rtan: Position,\n  ltan: Position\n) {\n  for (let i = 0; i < polygonCoords.length; i++) {\n    const currentCoords = polygonCoords[i];\n    let nextCoordPair = polygonCoords[i + 1];\n    if (i === polygonCoords.length - 1) {\n      nextCoordPair = polygonCoords[0];\n    }\n    const enext = isLeft(currentCoords, nextCoordPair, ptCoords);\n    if (eprev <= 0 && enext > 0) {\n      if (!isBelow(ptCoords, currentCoords, rtan)) {\n        rtan = currentCoords;\n      }\n    } else if (eprev > 0 && enext <= 0) {\n      if (!isAbove(ptCoords, currentCoords, ltan)) {\n        ltan = currentCoords;\n      }\n    }\n    eprev = enext;\n  }\n  return [rtan, ltan];\n}\n\nfunction isAbove(point1: Position, point2: Position, point3: Position) {\n  return isLeft(point1, point2, point3) > 0;\n}\n\nfunction isBelow(point1: Position, point2: Position, point3: Position) {\n  return isLeft(point1, point2, point3) < 0;\n}\n\nfunction isLeft(point1: Position, point2: Position, point3: Position) {\n  return (\n    (point2[0] - point1[0]) * (point3[1] - point1[1]) -\n    (point3[0] - point1[0]) * (point2[1] - point1[1])\n  );\n}\n\nexport { polygonTangents };\nexport default polygonTangents;\n", "import { Position } from \"geojson\";\nimport { coordEach } from \"@turf/meta\";\nimport { AllGeoJSON, isNumber } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\n\n/**\n * Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection\n *\n * @name toMercator\n * @param {GeoJSON|Position} geojson WGS84 GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-71,41]);\n * var converted = turf.toMercator(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nfunction toMercator<G = AllGeoJSON | Position>(\n  geojson: G,\n  options: { mutate?: boolean } = {}\n): G {\n  return convert(geojson, \"mercator\", options);\n}\n\n/**\n * Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection\n *\n * @name toWgs84\n * @param {GeoJSON|Position} geojson Mercator GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-7903683.846322424, 5012341.663847514]);\n * var converted = turf.toWgs84(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nfunction toWgs84<G = AllGeoJSON | Position>(\n  geojson: G,\n  options: { mutate?: boolean } = {}\n): G {\n  return convert(geojson, \"wgs84\", options);\n}\n\n/**\n * Converts a GeoJSON coordinates to the defined `projection`\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON Feature or Geometry\n * @param {string} projection defines the projection system to convert the coordinates to\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Converted GeoJSON\n */\nfunction convert(\n  geojson: any,\n  projection: string,\n  options: { mutate?: boolean } = {}\n): any {\n  // Optional parameters\n  options = options || {};\n  var mutate = options.mutate;\n\n  // Validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  // Handle Position\n  if (Array.isArray(geojson) && isNumber(geojson[0]))\n    geojson =\n      projection === \"mercator\"\n        ? convertToMercator(geojson)\n        : convertToWgs84(geojson);\n  // Handle GeoJSON\n  else {\n    // Handle possible data mutation\n    if (mutate !== true) geojson = clone(geojson);\n\n    coordEach(geojson, function (coord) {\n      var newCoord =\n        projection === \"mercator\"\n          ? convertToMercator(coord)\n          : convertToWgs84(coord);\n      coord[0] = newCoord[0];\n      coord[1] = newCoord[1];\n    });\n  }\n  return geojson;\n}\n\n/**\n * Convert lon/lat values to 900913 x/y.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} lonLat WGS84 point\n * @returns {Array<number>} Mercator [x, y] point\n */\nfunction convertToMercator(lonLat: number[]) {\n  var D2R = Math.PI / 180,\n    // 900913 properties\n    A = 6378137.0,\n    MAXEXTENT = 20037508.342789244;\n\n  // compensate longitudes passing the 180th meridian\n  // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js\n  var adjusted =\n    Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;\n  var xy = [\n    A * adjusted * D2R,\n    A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R)),\n  ];\n\n  // if xy value is beyond maxextent (e.g. poles), return maxextent\n  if (xy[0] > MAXEXTENT) xy[0] = MAXEXTENT;\n  if (xy[0] < -MAXEXTENT) xy[0] = -MAXEXTENT;\n  if (xy[1] > MAXEXTENT) xy[1] = MAXEXTENT;\n  if (xy[1] < -MAXEXTENT) xy[1] = -MAXEXTENT;\n\n  return xy;\n}\n\n/**\n * Convert 900913 x/y values to lon/lat.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} xy Mercator [x, y] point\n * @returns {Array<number>} WGS84 [lon, lat] point\n */\nfunction convertToWgs84(xy: number[]) {\n  // 900913 properties.\n  var R2D = 180 / Math.PI;\n  var A = 6378137.0;\n\n  return [\n    (xy[0] * R2D) / A,\n    (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-xy[1] / A))) * R2D,\n  ];\n}\n\n/**\n * Returns the sign of the input, or zero\n *\n * @private\n * @param {number} x input\n * @returns {number} -1|0|1 output\n */\nfunction sign(x: number) {\n  return x < 0 ? -1 : x > 0 ? 1 : 0;\n}\n\nexport { toMercator, toWgs84 };\n", "import { BBox, FeatureCollection, Point } from \"geojson\";\nimport { area } from \"@turf/area\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nimport { bboxPolygon } from \"@turf/bbox-polygon\";\nimport { getCoord } from \"@turf/invariant\";\nimport { squareGrid } from \"@turf/square-grid\";\n\ninterface QuadratAnalysisResult {\n  criticalValue: number;\n  maxAbsoluteDifference: number;\n  isRandom: boolean;\n  observedDistribution: number[];\n}\n\n/**\n * Quadrat analysis lays a set of equal-size areas(quadrat) over the study area and counts\n * the number of features in each quadrat and creates a frequency table.\n * The table lists the number of quadrats containing no features,\n * the number containing one feature, two features, and so on,\n * all the way up to the quadrat containing the most features.\n * The method then creates the frequency table for the random distribution, usually based on a Poisson distribution.\n * The method uses the distribution to calculate the probability for 0 feature occuring,\n * 1 feature occuring, 2 features, and so on,\n * and lists these probabilities in the frequency table.\n * By comparing the two frequency tables, you can see whether the features create a pattern.\n * If the table for the observed distribution has more quadrats containing many features than the\n * table for the random distribution dose, then the features create a clustered pattern.\n *\n * It is hard to judge the frequency tables are similar or different just by looking at them.\n * So, we can use serval statistical tests to find out how much the frequency tables differ.\n * We use Kolmogorov-Smirnov test.This method calculates cumulative probabilities for both distributions,\n * and then compares the cumulative probabilities at each class level and selects the largest absolute difference D.\n * Then, the test compares D to the critical value for a confidence level you specify.\n * If D is greater than the critical value, the difference between  the observed distribution and\n * the random distribution is significant. The greater the value the bigger the difference.\n *\n * Traditionally, squares are used for the shape of the quadrats, in a regular grid(square-grid).\n * Some researchers suggest that the quadrat size equal twice the size of mean area per feature,\n * which is simply the area of the study area divided by the number of features.\n *\n *\n * @name quadratAnalysis\n * @param {FeatureCollection<Point>} pointFeatureSet point set to study\n * @param {Object} [options={}] optional parameters\n * @param {bbox} [options.studyBbox] bbox representing the study area\n * @param {number} [options.confidenceLevel=20] a confidence level.\n * The unit is percentage . 5 means 95%, value must be in {@link K_TABLE}\n * @returns {Object} result {@link QuadratAnalysisResult}\n * @example\n *\n * var bbox = [-65, 40, -63, 42];\n * var dataset = turf.randomPoint(100, { bbox: bbox });\n * var result = turf.quadratAnalysis(dataset);\n *\n */\nfunction quadratAnalysis(\n  pointFeatureSet: FeatureCollection<Point>,\n  options: {\n    studyBbox?: [number, number, number, number];\n    confidenceLevel?: 20 | 15 | 10 | 5 | 2 | 1;\n  }\n): QuadratAnalysisResult {\n  options = options || {};\n  const studyBbox = options.studyBbox || turfBBox(pointFeatureSet);\n  const confidenceLevel = options.confidenceLevel || 20;\n  const points = pointFeatureSet.features;\n\n  // create square-grid\n  const numOfPoints = points.length;\n  const sizeOfArea = area(bboxPolygon(studyBbox));\n  const lengthOfSide = Math.sqrt((sizeOfArea / numOfPoints) * 2);\n  const grid = squareGrid(studyBbox, lengthOfSide, {\n    units: \"meters\",\n  });\n  const quadrats = grid.features;\n\n  // count the number of features in each quadrat\n  const quadratIdDict: { [key: string]: { box: BBox; cnt: number } } = {};\n  for (let i = 0; i < quadrats.length; i++) {\n    quadratIdDict[i] = {\n      box: turfBBox(quadrats[i]),\n      cnt: 0,\n    };\n  }\n\n  let sumOfPoint = 0;\n  for (const pt of points) {\n    for (const key of Object.keys(quadratIdDict)) {\n      const box = quadratIdDict[key].box;\n      if (inBBox(getCoord(pt), box)) {\n        quadratIdDict[key].cnt += 1;\n        sumOfPoint += 1;\n        break;\n      }\n    }\n  }\n\n  // the most amount of features in quadrat\n  let maxCnt = 0;\n  for (const key of Object.keys(quadratIdDict)) {\n    const cnt = quadratIdDict[key].cnt;\n    if (cnt > maxCnt) {\n      maxCnt = cnt;\n    }\n  }\n\n  const expectedDistribution = [];\n  const numOfQuadrat = Object.keys(quadratIdDict).length;\n  const lambda = sumOfPoint / numOfQuadrat;\n\n  // get the cumulative probability of the random distribution\n  let cumulativeProbility = 0.0;\n  for (let x = 0; x < maxCnt + 1; x++) {\n    cumulativeProbility +=\n      (Math.exp(-lambda) * Math.pow(lambda, x)) / factorial(x);\n    expectedDistribution.push(cumulativeProbility);\n  }\n\n  // get the cumulative probability of the observed distribution\n  const observedDistribution = [];\n  let cumulativeObservedQuads = 0;\n  for (let x = 0; x < maxCnt + 1; x++) {\n    for (const key of Object.keys(quadratIdDict)) {\n      if (quadratIdDict[key].cnt === x) {\n        cumulativeObservedQuads += 1;\n      }\n    }\n    const p = cumulativeObservedQuads / numOfQuadrat;\n    observedDistribution.push(p);\n  }\n\n  // get the largest absolute difference between two distributions\n  let maxDifference = 0;\n  for (let x = 0; x < maxCnt + 1; x++) {\n    const difference = Math.abs(\n      expectedDistribution[x] - observedDistribution[x]\n    );\n    if (difference > maxDifference) {\n      maxDifference = difference;\n    }\n  }\n\n  const k = K_TABLE[confidenceLevel];\n\n  // statistical test\n  const criticalValue = k / Math.sqrt(numOfQuadrat);\n  const result: QuadratAnalysisResult = {\n    criticalValue,\n    isRandom: true,\n    maxAbsoluteDifference: maxDifference,\n    observedDistribution,\n  };\n\n  if (maxDifference > criticalValue) {\n    result.isRandom = false;\n  }\n\n  return result;\n}\n\n/**\n * the confidence level\n * @type {Object} K_TABLE\n * @property {number} 20\n * @property {number} 15\n * @property {number} 10\n * @property {number} 5\n * @property {number} 2\n * @property {number} 1\n */\nconst K_TABLE = {\n  20: 1.07275,\n  15: 1.13795,\n  10: 1.22385,\n  5: 1.3581,\n  2: 1.51743,\n  1: 1.62762,\n};\n\n/**\n * the return type of the quadratAnalysis\n * @typedef {Object} QuadratAnalysisResult\n * @property {number} criticalValue\n * @property {number} maxAbsoluteDifference\n * @property {boolean} isRandom\n * @property {Array.<number>} observedDistribution the cumulative distribution of observed features,\n * the index represents the number of features in the quadrat.\n */\n\n/**\n * inBBox from @turf/boolean-point-in-polygon\n *\n * @private\n * @param {Array<number>} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt: number[], bbox: BBox) {\n  return (\n    bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]\n  );\n}\n\n/**\n * https://stackoverflow.com/questions/3959211/fast-factorial-function-in-javascript\n * @private\n * @param {number} num Number\n * @returns {number} the factorial of num\n */\nfunction factorial(num: number) {\n  const f: number[] = [];\n  function inner(n: number): number {\n    if (n === 0 || n === 1) {\n      return 1;\n    }\n    if (f[n] > 0) {\n      return f[n];\n    }\n    return (f[n] = inner(n - 1) * n);\n  }\n  return inner(num);\n}\n\nexport { QuadratAnalysisResult, quadratAnalysis };\nexport default quadratAnalysis;\n", "import {\n  BBox,\n  FeatureCollection,\n  LineString,\n  Point,\n  Polygon,\n  Position,\n} from \"geojson\";\nimport {\n  featureCollection,\n  isNumber,\n  isObject,\n  lineString,\n  point,\n  polygon,\n  validateBBox,\n} from \"@turf/helpers\";\n\n/**\n * Returns a random position within a {@link bounding box}.\n *\n * @name randomPosition\n * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.\n * @returns {Array<number>} Position [longitude, latitude]\n * @throws {Error} if bbox is invalid\n * @example\n * var position = turf.randomPosition([-180, -90, 180, 90])\n * // => position\n */\nfunction randomPosition(bbox?: BBox | { bbox: BBox }): Position {\n  checkBBox(bbox);\n  return randomPositionUnchecked(bbox);\n}\n\n// does not check bbox for validity, that is handled by the exported functions\nfunction randomPositionUnchecked(bbox?: BBox | { bbox: BBox }): Position {\n  if (Array.isArray(bbox)) {\n    return coordInBBox(bbox);\n  }\n  if (bbox && bbox.bbox) {\n    return coordInBBox(bbox.bbox);\n  }\n  return [lon(), lat()];\n}\n\nfunction checkBBox(bbox?: BBox | { bbox: BBox }) {\n  if (bbox == null) {\n    return;\n  } else if (Array.isArray(bbox)) {\n    validateBBox(bbox);\n  } else if (bbox.bbox != null) {\n    validateBBox(bbox.bbox);\n  }\n}\n\n/**\n * Returns a random {@link point}.\n *\n * @name randomPoint\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @throws {Error} if bbox is invalid\n * @example\n * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n * // => points\n */\nfunction randomPoint(\n  count?: number,\n  options: {\n    bbox?: BBox;\n  } = {}\n): FeatureCollection<Point, any> {\n  checkBBox(options.bbox);\n  if (count === undefined || count === null) {\n    count = 1;\n  }\n  const features = [];\n  for (let i = 0; i < count; i++) {\n    features.push(point(randomPositionUnchecked(options.bbox)));\n  }\n  return featureCollection(features);\n}\n\n/**\n * Returns a random {@link polygon}.\n *\n * @name randomPolygon\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a\n * vertex can reach out of the center of the Polygon.\n * @returns {FeatureCollection<Polygon>} GeoJSON FeatureCollection of polygons\n * @throws {Error} if bbox is invalid\n * @example\n * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n * // => polygons\n */\nfunction randomPolygon(\n  count?: number,\n  options: {\n    bbox?: BBox;\n    num_vertices?: number;\n    max_radial_length?: number;\n  } = {}\n): FeatureCollection<Polygon, any> {\n  checkBBox(options.bbox);\n\n  // Default param\n  if (count === undefined || count === null) {\n    count = 1;\n  }\n  if (options.bbox === undefined || options.bbox === null) {\n    options.bbox = [-180, -90, 180, 90];\n  }\n  if (!isNumber(options.num_vertices) || options.num_vertices === undefined) {\n    options.num_vertices = 10;\n  }\n  if (\n    !isNumber(options.max_radial_length) ||\n    options.max_radial_length === undefined\n  ) {\n    options.max_radial_length = 10;\n  }\n\n  const bboxWidth = Math.abs(options.bbox[0] - options.bbox[2]);\n  const bboxHeight = Math.abs(options.bbox[1] - options.bbox[3]);\n\n  const maxRadius = Math.min(bboxWidth / 2, bboxHeight / 2);\n\n  if (options.max_radial_length > maxRadius) {\n    throw new Error(\"max_radial_length is greater than the radius of the bbox\");\n  }\n\n  // Create a padded bbox to avoid the polygons to be too close to the border\n  const paddedBbox = [\n    options.bbox[0] + options.max_radial_length,\n    options.bbox[1] + options.max_radial_length,\n    options.bbox[2] - options.max_radial_length,\n    options.bbox[3] - options.max_radial_length,\n  ] as BBox;\n\n  const features = [];\n  for (let i = 0; i < count; i++) {\n    let vertices: any[] = [];\n    const circleOffsets = [...Array(options.num_vertices + 1)].map(Math.random);\n\n    // Sum Offsets\n    circleOffsets.forEach((cur: any, index: number, arr: any[]) => {\n      arr[index] = index > 0 ? cur + arr[index - 1] : cur;\n    });\n\n    // scaleOffsets\n    circleOffsets.forEach((cur: any) => {\n      cur = (cur * 2 * Math.PI) / circleOffsets[circleOffsets.length - 1];\n      const radialScaler = Math.random();\n      vertices.push([\n        radialScaler * (options.max_radial_length || 10) * Math.sin(cur),\n        radialScaler * (options.max_radial_length || 10) * Math.cos(cur),\n      ]);\n    });\n    vertices[vertices.length - 1] = vertices[0]; // close the ring\n\n    // center the polygon around something\n    vertices = vertices.map(\n      vertexToCoordinate(randomPositionUnchecked(paddedBbox))\n    );\n    features.push(polygon([vertices]));\n  }\n  return featureCollection(features);\n}\n\n/**\n * Returns a random {@link linestring}.\n *\n * @name randomLineString\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a\n * vertex can be from its predecessor\n * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a\n * line segment can turn from the previous segment.\n * @returns {FeatureCollection<LineString>} GeoJSON FeatureCollection of linestrings\n * @throws {Error} if bbox is invalid\n * @example\n * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n * // => lineStrings\n */\nfunction randomLineString(\n  count?: number,\n  options: {\n    bbox?: BBox;\n    num_vertices?: number;\n    max_length?: number;\n    max_rotation?: number;\n  } = {}\n): FeatureCollection<LineString, any> {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n  const bbox = options.bbox;\n  checkBBox(bbox);\n  let num_vertices = options.num_vertices;\n  let max_length = options.max_length;\n  let max_rotation = options.max_rotation;\n  if (count === undefined || count === null) {\n    count = 1;\n  }\n\n  // Default parameters\n  if (\n    !isNumber(num_vertices) ||\n    num_vertices === undefined ||\n    num_vertices < 2\n  ) {\n    num_vertices = 10;\n  }\n  if (!isNumber(max_length) || max_length === undefined) {\n    max_length = 0.0001;\n  }\n  if (!isNumber(max_rotation) || max_rotation === undefined) {\n    max_rotation = Math.PI / 8;\n  }\n\n  const features = [];\n  for (let i = 0; i < count; i++) {\n    const startingPoint = randomPositionUnchecked(bbox);\n    const vertices = [startingPoint];\n    for (let j = 0; j < num_vertices - 1; j++) {\n      const priorAngle =\n        j === 0\n          ? Math.random() * 2 * Math.PI\n          : Math.tan(\n              (vertices[j][1] - vertices[j - 1][1]) /\n                (vertices[j][0] - vertices[j - 1][0])\n            );\n      const angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;\n      const distance = Math.random() * max_length;\n      vertices.push([\n        vertices[j][0] + distance * Math.cos(angle),\n        vertices[j][1] + distance * Math.sin(angle),\n      ]);\n    }\n    features.push(lineString(vertices));\n  }\n\n  return featureCollection(features);\n}\n\nfunction vertexToCoordinate(hub: number[]) {\n  return (cur: number[]) => {\n    return [cur[0] + hub[0], cur[1] + hub[1]];\n  };\n}\n\nfunction rnd() {\n  return Math.random() - 0.5;\n}\nfunction lon() {\n  return rnd() * 360;\n}\nfunction lat() {\n  return rnd() * 180;\n}\n\nfunction coordInBBox(bbox: BBox) {\n  return [\n    Math.random() * (bbox[2] - bbox[0]) + bbox[0],\n    Math.random() * (bbox[3] - bbox[1]) + bbox[1],\n  ];\n}\n\nexport { randomPosition, randomPoint, randomPolygon, randomLineString };\n", "import type {\n  Feature,\n  Position,\n  GeometryCollection,\n  Geometry,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Polygon,\n  FeatureCollection,\n} from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { booleanClockwise } from \"@turf/boolean-clockwise\";\nimport { geomEach, featureEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { featureCollection, isObject } from \"@turf/helpers\";\nimport type { AllGeoJSON } from \"@turf/helpers\";\n\n/**\n * Rewind {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon} outer ring counterclockwise and inner rings clockwise (Uses {@link http://en.wikipedia.org/wiki/Shoelace_formula|Shoelace Formula}).\n *\n * @name rewind\n * @param {GeoJSON} geojson input GeoJSON Polygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.reverse=false] enable reverse winding\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} rewind Polygon\n * @example\n * var polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);\n *\n * var rewind = turf.rewind(polygon);\n *\n * //addToMap\n * var addToMap = [rewind];\n */\nfunction rewind<T extends AllGeoJSON>(\n  geojson: T,\n  options: {\n    reverse?: boolean;\n    mutate?: boolean;\n  } = {}\n): Geometry | Feature | FeatureCollection {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const mutate = options.mutate ?? false;\n  const reverse = options.reverse ?? false;\n\n  // validation\n  if (!geojson) throw new Error(\"<geojson> is required\");\n  if (typeof reverse !== \"boolean\")\n    throw new Error(\"<reverse> must be a boolean\");\n  if (typeof mutate !== \"boolean\")\n    throw new Error(\"<mutate> must be a boolean\");\n\n  // Prevent input mutation if requested and necessary.\n  if (!mutate && geojson.type !== \"Point\" && geojson.type !== \"MultiPoint\") {\n    geojson = clone(geojson);\n  }\n\n  // Support Feature Collection or Geometry Collection\n  const results: Feature[] = [];\n  switch (geojson.type) {\n    case \"GeometryCollection\":\n      geomEach(geojson, function (geometry) {\n        rewindFeature(geometry, reverse);\n      });\n      return geojson;\n    case \"FeatureCollection\":\n      featureEach(geojson, function (feature) {\n        const rewoundFeature = rewindFeature(feature, reverse) as Feature;\n        featureEach(rewoundFeature, function (result) {\n          results.push(result);\n        });\n      });\n      return featureCollection(results);\n  }\n  // Support Feature or Geometry Objects\n  return rewindFeature(geojson, reverse);\n}\n\n/**\n * Rewind\n *\n * @private\n * @param {Geometry|Feature<any>} geojson Geometry or Feature\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {Geometry|Feature<any>} rewind Geometry or Feature\n */\nfunction rewindFeature(\n  geojson: Geometry | GeometryCollection | Feature,\n  reverse: boolean\n) {\n  const type =\n    geojson.type === \"Feature\" ? geojson.geometry.type : geojson.type;\n\n  // Support all GeoJSON Geometry Objects\n  switch (type) {\n    case \"GeometryCollection\":\n      geomEach(geojson, function (geometry) {\n        rewindFeature(geometry, reverse);\n      });\n      return geojson;\n    case \"LineString\":\n      rewindLineString(getCoords(geojson as LineString), reverse);\n      return geojson;\n    case \"Polygon\":\n      rewindPolygon(getCoords(geojson as Polygon), reverse);\n      return geojson;\n    case \"MultiLineString\":\n      getCoords(geojson as MultiLineString).forEach(function (lineCoords) {\n        rewindLineString(lineCoords, reverse);\n      });\n      return geojson;\n    case \"MultiPolygon\":\n      getCoords(geojson as MultiPolygon).forEach(function (lineCoords) {\n        rewindPolygon(lineCoords, reverse);\n      });\n      return geojson;\n    case \"Point\":\n    case \"MultiPoint\":\n      // noop\n      return geojson;\n  }\n}\n\n/**\n * Rewind LineString - outer ring clockwise\n *\n * @private\n * @param {Array<Array<number>>} coords GeoJSON LineString geometry coordinates\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {void} mutates coordinates\n */\nfunction rewindLineString(coords: Position[], reverse: boolean) {\n  if (booleanClockwise(coords) === reverse) coords.reverse();\n}\n\n/**\n * Rewind Polygon - outer ring counterclockwise and inner rings clockwise.\n *\n * @private\n * @param {Array<Array<Array<number>>>} coords GeoJSON Polygon geometry coordinates\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {void} mutates coordinates\n */\nfunction rewindPolygon(coords: Position[][], reverse: boolean) {\n  // outer ring\n  if (booleanClockwise(coords[0]) !== reverse) {\n    coords[0].reverse();\n  }\n  // inner rings\n  for (let i = 1; i < coords.length; i++) {\n    if (booleanClockwise(coords[i]) === reverse) {\n      coords[i].reverse();\n    }\n  }\n}\n\nexport { rewind };\nexport default rewind;\n", "// http://stackoverflow.com/questions/11935175/sampling-a-random-subset-from-an-array\nimport { Feature, FeatureCollection, Geometry, GeometryObject } from \"geojson\";\nimport { featureCollection } from \"@turf/helpers\";\n\n/**\n * Takes a {@link FeatureCollection} and returns a FeatureCollection with given number of {@link Feature|features} at random.\n *\n * @name sample\n * @param {FeatureCollection} featurecollection set of input features\n * @param {number} num number of features to select\n * @returns {FeatureCollection} a FeatureCollection with `n` features\n * @example\n * var points = turf.randomPoint(100, {bbox: [-80, 30, -60, 60]});\n *\n * var sample = turf.sample(points, 5);\n *\n * //addToMap\n * var addToMap = [points, sample]\n * turf.featureEach(sample, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction sample<T extends GeometryObject>(\n  fc: FeatureCollection<T>,\n  num: number\n): FeatureCollection<T> {\n  if (!fc) throw new Error(\"fc is required\");\n  if (num === null || num === undefined) throw new Error(\"num is required\");\n  if (typeof num !== \"number\") throw new Error(\"num must be a number\");\n  var outFC = featureCollection(getRandomSubarray(fc.features, num));\n  return outFC;\n}\n\nfunction getRandomSubarray<T extends Geometry>(\n  arr: Feature<T>[],\n  size: number\n) {\n  var shuffled = arr.slice(0),\n    i = arr.length,\n    min = i - size,\n    temp,\n    index;\n  while (i-- > min) {\n    index = Math.floor((i + 1) * Math.random());\n    temp = shuffled[index];\n    shuffled[index] = shuffled[i];\n    shuffled[i] = temp;\n  }\n  return shuffled.slice(min);\n}\n\nexport { sample };\nexport default sample;\n", "import { Feature, Polygon, GeoJsonProperties } from \"geojson\";\nimport { circle } from \"@turf/circle\";\nimport { lineArc } from \"@turf/line-arc\";\nimport { coordEach } from \"@turf/meta\";\nimport { Units, Coord, isObject, polygon } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\n\n/**\n * Creates a circular sector of a circle of given radius and center {@link Point},\n * between (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.\n *\n * @name sector\n * @param {Coord} center center point\n * @param {number} radius radius of the circle\n * @param {number} bearing1 angle, in decimal degrees, of the first radius of the sector\n * @param {number} bearing2 angle, in decimal degrees, of the second radius of the sector\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {number} [options.steps=64] number of steps\n * @param {Properties} [options.properties={}] Translate properties to Feature Polygon\n * @returns {Feature<Polygon>} sector polygon\n * @example\n * var center = turf.point([-75, 40]);\n * var radius = 5;\n * var bearing1 = 25;\n * var bearing2 = 45;\n *\n * var sector = turf.sector(center, radius, bearing1, bearing2);\n *\n * //addToMap\n * var addToMap = [center, sector];\n */\nfunction sector(\n  center: Coord,\n  radius: number,\n  bearing1: number,\n  bearing2: number,\n  options: {\n    steps?: number;\n    units?: Units;\n    properties?: GeoJsonProperties;\n  } = {}\n): Feature<Polygon> {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  // Most options only for passing through to circle()\n  const properties = options.properties;\n\n  // validation\n  if (!center) throw new Error(\"center is required\");\n  if (bearing1 === undefined || bearing1 === null)\n    throw new Error(\"bearing1 is required\");\n  if (bearing2 === undefined || bearing2 === null)\n    throw new Error(\"bearing2 is required\");\n  if (!radius) throw new Error(\"radius is required\");\n  if (typeof options !== \"object\") throw new Error(\"options must be an object\");\n\n  if (convertAngleTo360(bearing1) === convertAngleTo360(bearing2)) {\n    return circle(center, radius, options);\n  }\n  const coords = getCoords(center);\n  const arc = lineArc(center, radius, bearing1, bearing2, options);\n  const sliceCoords = [[coords]];\n  coordEach(arc, function (currentCoords) {\n    sliceCoords[0].push(currentCoords);\n  });\n  sliceCoords[0].push(coords);\n\n  return polygon(sliceCoords, properties);\n}\n\n/**\n * Takes any angle in degrees\n * and returns a valid angle between 0-360 degrees\n *\n * @private\n * @param {number} alpha angle between -180-180 degrees\n * @returns {number} angle between 0-360 degrees\n */\nfunction convertAngleTo360(alpha: number) {\n  let beta = alpha % 360;\n  if (beta < 0) {\n    beta += 360;\n  }\n  return beta;\n}\n\nexport { sector };\nexport default sector;\n", "import { Corners, Coord } from \"@turf/helpers\";\nimport { FeatureCollection, GeoJSON, GeometryCollection } from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { center } from \"@turf/center\";\nimport { centroid } from \"@turf/centroid\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { coordEach, featureEach } from \"@turf/meta\";\nimport { point, isObject } from \"@turf/helpers\";\nimport { getCoord, getCoords, getType } from \"@turf/invariant\";\n\n/**\n * Scale GeoJSON objects from a given point by a scaling factor e.g. factor=2\n * would make each object 200% larger.\n * If a FeatureCollection is provided, the origin point will be calculated\n * based on each individual feature _unless_ an exact\n *\n * @name transformScale\n * @param {GeoJSON|GeometryCollection} geojson objects to be scaled\n * @param {number} factor of scaling, positive values greater than 0. Numbers between 0 and 1 will shrink the geojson, numbers greater than 1 will expand it, a factor of 1 will not change the geojson.\n * @param {Object} [options={}] Optional parameters\n * @param {Corners|Coord} [options.origin='centroid'] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance improvement if true)\n * @returns {GeoJSON|GeometryCollection} scaled GeoJSON\n * @example\n * const poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * const scaledPoly = turf.transformScale(poly, 3);\n *\n * //addToMap\n * const addToMap = [poly, scaledPoly];\n * scaledPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformScale<T extends GeoJSON | GeometryCollection>(\n  geojson: T,\n  factor: number,\n  options?: {\n    origin?: Corners | Coord;\n    mutate?: boolean;\n  }\n): T {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const origin = options.origin || \"centroid\";\n  const mutate = options.mutate || false;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson required\");\n  if (typeof factor !== \"number\" || factor <= 0)\n    throw new Error(\"invalid factor\");\n  const originIsPoint = Array.isArray(origin) || typeof origin === \"object\";\n\n  // Clone geojson to avoid side effects\n  if (mutate !== true) geojson = clone(geojson);\n\n  // Scale each Feature separately if a feature collection AND the user didn't\n  // pass a single explicit point to scale the whole collection from.\n  if (geojson.type === \"FeatureCollection\" && !originIsPoint) {\n    featureEach(geojson, function (feature, index) {\n      // The type guard above is not recognised in the callback so we have to\n      // cast to accept responsibility.\n      (geojson as FeatureCollection).features[index] = scale(\n        feature,\n        factor,\n        origin\n      );\n    });\n    return geojson;\n  }\n  // Scale Feature/Geometry\n  return scale(geojson, factor, origin);\n}\n\n/**\n * Scale Feature/Geometry\n *\n * @private\n * @param {GeoJSON|GeometryCollection} feature feature or geometry collection to scale\n * @param {number} factor of scaling, positive or negative values greater than 0\n * @param {Corners|Coord} [origin=\"centroid\"] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)\n * @returns {GeoJSON|GeometryCollection} scaled GeoJSON Feature/Geometry\n */\nfunction scale<T extends GeoJSON | GeometryCollection>(\n  feature: T,\n  factor: number,\n  origin: Corners | Coord\n): T {\n  // Default params\n  const isPoint = getType(feature) === \"Point\";\n  // Work with a Coord equivalent of the origin from here on.\n  const originCoord: Coord = defineOrigin(feature, origin);\n\n  // Shortcut no-scaling\n  if (factor === 1 || isPoint) return feature;\n\n  // Scale each coordinate\n  coordEach(feature, function (coord) {\n    const originalDistance = rhumbDistance(originCoord, coord);\n    const bearing = rhumbBearing(originCoord, coord);\n    const newDistance = originalDistance * factor;\n    const newCoord = getCoords(\n      rhumbDestination(originCoord, newDistance, bearing)\n    );\n    coord[0] = newCoord[0];\n    coord[1] = newCoord[1];\n    if (coord.length === 3) coord[2] *= factor;\n  });\n\n  delete feature.bbox;\n\n  return feature;\n}\n\n/**\n * Define Origin\n *\n * @private\n * @param {GeoJSON|GeometryCollection} geojson GeoJSON\n * @param {Corners|Coord} origin sw/se/nw/ne/center/centroid\n * @returns {Feature<Point>} Point origin\n */\nfunction defineOrigin(\n  geojson: GeoJSON | GeometryCollection,\n  origin: Corners | Coord\n): Coord {\n  // Default params\n  if (origin === undefined || origin === null) origin = \"centroid\";\n\n  // Input Coord\n  if (Array.isArray(origin) || typeof origin === \"object\")\n    return getCoord(origin);\n\n  // Define BBox\n  const bbox = geojson.bbox\n    ? geojson.bbox\n    : turfBBox(geojson, { recompute: true });\n  const west = bbox[0];\n  const south = bbox[1];\n  const east = bbox[2];\n  const north = bbox[3];\n\n  // Having to disable eslint below for lines which fail the no-fallthrough\n  // rule, though only because of the ts-expect-error rules. Once we remove\n  // southeast, bottomright, rightbottom, etc we should be able to remove all\n  // these supressions.\n  /* eslint-disable no-fallthrough */\n  switch (origin) {\n    case \"sw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomleft\":\n      return point([west, south]);\n    case \"se\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomright\":\n      return point([east, south]);\n    case \"nw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topleft\":\n      return point([west, north]);\n    case \"ne\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topright\":\n      return point([east, north]);\n    case \"center\":\n      return center(geojson);\n    case undefined:\n    case null:\n    case \"centroid\":\n      return centroid(geojson);\n    default:\n      throw new Error(\"invalid origin\");\n  }\n  /* eslint-enable no-fallthrough */\n}\n\nexport { transformScale };\nexport default transformScale;\n", "import {\n  Polygon,\n  Feature,\n  FeatureCollection,\n  LineString,\n  Geometry,\n  Point,\n} from \"geojson\";\nimport { bbox } from \"@turf/bbox\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { distance } from \"@turf/distance\";\nimport { transformScale as scale } from \"@turf/transform-scale\";\nimport { cleanCoords } from \"@turf/clean-coords\";\nimport { bboxPolygon } from \"@turf/bbox-polygon\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\nimport {\n  Coord,\n  Units,\n  point,\n  isNumber,\n  lineString,\n  isObject,\n  featureCollection,\n  feature,\n} from \"@turf/helpers\";\nimport { Graph, GridNode, astar } from \"./lib/javascript-astar.js\";\n\n/**\n * Returns the shortest {@link LineString|path} from {@link Point|start} to {@link Point|end} without colliding with\n * any {@link Feature} in {@link FeatureCollection<Polygon>| obstacles}\n *\n * @name shortestPath\n * @param {Coord} start point\n * @param {Coord} end point\n * @param {Object} [options={}] optional parameters\n * @param {Geometry|Feature|FeatureCollection<Polygon>} [options.obstacles] areas which path cannot travel\n * @param {string} [options.units='kilometers'] unit in which resolution & minimum distance will be expressed in; it can be degrees, radians, miles, kilometers, ...\n * @param {number} [options.resolution=100] distance between matrix points on which the path will be calculated\n * @returns {Feature<LineString>} shortest path between start and end\n * @example\n * var start = [-5, -6];\n * var end = [9, -6];\n * var options = {\n *   obstacles: turf.polygon([[[0, -7], [5, -7], [5, -3], [0, -3], [0, -7]]])\n * };\n *\n * var path = turf.shortestPath(start, end, options);\n *\n * //addToMap\n * var addToMap = [start, end, options.obstacles, path];\n */\nfunction shortestPath(\n  start: Coord,\n  end: Coord,\n  options: {\n    obstacles?: Polygon | Feature<Polygon> | FeatureCollection<Polygon>;\n    units?: Units;\n    resolution?: number;\n  } = {}\n): Feature<LineString> {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  let obstacles = options.obstacles || featureCollection([]);\n  let resolution = options.resolution || 100;\n\n  // validation\n  if (!start) throw new Error(\"start is required\");\n  if (!end) throw new Error(\"end is required\");\n  if (resolution && (!isNumber(resolution) || resolution <= 0))\n    throw new Error(\"options.resolution must be a number, greater than 0\");\n\n  // Normalize Inputs\n  const startCoord = getCoord(start);\n  const endCoord = getCoord(end);\n  start = point(startCoord);\n  end = point(endCoord);\n\n  // Handle obstacles\n  if (obstacles.type === \"FeatureCollection\") {\n    if (obstacles.features.length === 0) {\n      return lineString([startCoord, endCoord]);\n    }\n  } else if (obstacles.type === \"Polygon\") {\n    obstacles = featureCollection([feature(getGeom(obstacles))]);\n  } else {\n    throw new Error(\"invalid obstacles\");\n  }\n\n  // define path grid area\n  const collection: FeatureCollection<Geometry> = obstacles;\n  collection.features.push(start);\n  collection.features.push(end);\n  const box = bbox(scale(bboxPolygon(bbox(collection)), 1.15)); // extend 15%\n  const [west, south, east, north] = box;\n\n  const width = distance([west, south], [east, south], options);\n  const division = width / resolution;\n\n  collection.features.pop();\n  collection.features.pop();\n\n  const xFraction = division / distance([west, south], [east, south], options);\n  const cellWidth = xFraction * (east - west);\n  const yFraction = division / distance([west, south], [west, north], options);\n  const cellHeight = yFraction * (north - south);\n\n  const bboxHorizontalSide = east - west;\n  const bboxVerticalSide = north - south;\n  const columns = Math.floor(bboxHorizontalSide / cellWidth);\n  const rows = Math.floor(bboxVerticalSide / cellHeight);\n  // adjust origin of the grid\n  const deltaX = (bboxHorizontalSide - columns * cellWidth) / 2;\n  const deltaY = (bboxVerticalSide - rows * cellHeight) / 2;\n\n  // loop through points only once to speed up process\n  // define matrix grid for A-star algorithm\n  const pointMatrix: string[][] = [];\n  const matrix: number[][] = [];\n\n  let closestToStart: GridNode;\n  let closestToEnd: GridNode;\n  let minDistStart = Infinity;\n  let minDistEnd = Infinity;\n  let currentY = north - deltaY;\n  let r = 0;\n  while (currentY >= south) {\n    // var currentY = south + deltaY;\n    const matrixRow = [];\n    const pointMatrixRow = [];\n    let currentX = west + deltaX;\n    let c = 0;\n    while (currentX <= east) {\n      const pt = point([currentX, currentY]);\n      const isInsideObstacle = isInside(pt, obstacles);\n      // feed obstacles matrix\n      matrixRow.push(isInsideObstacle ? 0 : 1); // with javascript-astar\n      // matrixRow.push(isInsideObstacle ? 1 : 0); // with astar-andrea\n      // map point's coords\n      pointMatrixRow.push(currentX + \"|\" + currentY);\n      // set closest points\n      const distStart = distance(pt, start);\n      // if (distStart < minDistStart) {\n      if (!isInsideObstacle && distStart < minDistStart) {\n        minDistStart = distStart;\n        closestToStart = { x: c, y: r };\n      }\n      const distEnd = distance(pt, end);\n      // if (distEnd < minDistEnd) {\n      if (!isInsideObstacle && distEnd < minDistEnd) {\n        minDistEnd = distEnd;\n        closestToEnd = { x: c, y: r };\n      }\n      currentX += cellWidth;\n      c++;\n    }\n    matrix.push(matrixRow);\n    pointMatrix.push(pointMatrixRow);\n    currentY -= cellHeight;\n    r++;\n  }\n\n  // find path on matrix grid\n\n  // javascript-astar ----------------------\n  const graph = new Graph(matrix, { diagonal: true });\n  const startOnMatrix = graph.grid[closestToStart!.y][closestToStart!.x];\n  const endOnMatrix = graph.grid[closestToEnd!.y][closestToEnd!.x];\n  const result: GridNode[] = astar.search(graph, startOnMatrix, endOnMatrix);\n\n  const path = [startCoord];\n  result.forEach(function (coord) {\n    const coords = pointMatrix[coord.x][coord.y].split(\"|\");\n    path.push([+coords[0], +coords[1]]); // make sure coords are numbers\n  });\n  path.push(endCoord);\n  // ---------------------------------------\n\n  // astar-andrea ------------------------\n  // var result = aStar(matrix, [closestToStart.x, closestToStart.y], [closestToEnd.x, closestToEnd.y], 'DiagonalFree');\n  // var path = [start.geometry.coordinates];\n  // result.forEach(function (coord) {\n  //     var coords = pointMatrix[coord[1]][coord[0]].split('|');\n  //     path.push([+coords[0], +coords[1]]); // make sure coords are numbers\n  // });\n  // path.push(end.geometry.coordinates);\n  // ---------------------------------------\n\n  return cleanCoords(lineString(path));\n}\n\n/**\n * Checks if Point is inside any of the Polygons\n *\n * @private\n * @param {Feature<Point>} pt to check\n * @param {FeatureCollection<Polygon>} polygons features\n * @returns {boolean} if inside or not\n */\nfunction isInside(pt: Feature<Point>, polygons: FeatureCollection<Polygon>) {\n  for (let i = 0; i < polygons.features.length; i++) {\n    if (booleanPointInPolygon(pt, polygons.features[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport { shortestPath };\nexport default shortestPath;\n", "// javascript-astar 0.4.1\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n  var curr = node,\n    path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function (node) {\n    return node.f;\n  });\n}\n\n/**\n * Astar\n * @private\n */\nexport var astar = {\n  /**\n   * Perform an A* Search on a graph given a start and end node.\n   *\n   * @private\n   * @memberof astar\n   * @param {Graph} graph Graph\n   * @param {GridNode} start Start\n   * @param {GridNode} end End\n   * @param {Object} [options] Options\n   * @param {bool} [options.closest] Specifies whether to return the path to the closest node if the target is unreachable.\n   * @param {Function} [options.heuristic] Heuristic function (see astar.heuristics).\n   * @returns {Object} Search\n   */\n  search: function (graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan,\n      closest = options.closest ?? false;\n\n    var openHeap = getHeap(),\n      closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode),\n          beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (\n              neighbor.h < closestNode.h ||\n              (neighbor.h === closestNode.h && neighbor.g < closestNode.g)\n            ) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function (pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function (pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return D * (d1 + d2) + (D2 - 2 * D) * Math.min(d1, d2);\n    },\n  },\n  cleanNode: function (node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  },\n};\n\n/**\n * A graph memory structure\n *\n * @private\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options] Options\n * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n * @returns {void} Graph\n */\nexport function Graph(gridIn, options) {\n  options = options || {};\n  this.nodes = [];\n  this.diagonal = !!options.diagonal;\n  this.grid = [];\n  for (var x = 0; x < gridIn.length; x++) {\n    this.grid[x] = [];\n\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n      var node = new GridNode(x, y, row[y]);\n      this.grid[x][y] = node;\n      this.nodes.push(node);\n    }\n  }\n  this.init();\n}\n\nGraph.prototype.init = function () {\n  this.dirtyNodes = [];\n  for (var i = 0; i < this.nodes.length; i++) {\n    astar.cleanNode(this.nodes[i]);\n  }\n};\n\nGraph.prototype.cleanDirty = function () {\n  for (var i = 0; i < this.dirtyNodes.length; i++) {\n    astar.cleanNode(this.dirtyNodes[i]);\n  }\n  this.dirtyNodes = [];\n};\n\nGraph.prototype.markDirty = function (node) {\n  this.dirtyNodes.push(node);\n};\n\nGraph.prototype.neighbors = function (node) {\n  var ret = [],\n    x = node.x,\n    y = node.y,\n    grid = this.grid;\n\n  // West\n  if (grid[x - 1] && grid[x - 1][y]) {\n    ret.push(grid[x - 1][y]);\n  }\n\n  // East\n  if (grid[x + 1] && grid[x + 1][y]) {\n    ret.push(grid[x + 1][y]);\n  }\n\n  // South\n  if (grid[x] && grid[x][y - 1]) {\n    ret.push(grid[x][y - 1]);\n  }\n\n  // North\n  if (grid[x] && grid[x][y + 1]) {\n    ret.push(grid[x][y + 1]);\n  }\n\n  if (this.diagonal) {\n    // Southwest\n    if (grid[x - 1] && grid[x - 1][y - 1]) {\n      ret.push(grid[x - 1][y - 1]);\n    }\n\n    // Southeast\n    if (grid[x + 1] && grid[x + 1][y - 1]) {\n      ret.push(grid[x + 1][y - 1]);\n    }\n\n    // Northwest\n    if (grid[x - 1] && grid[x - 1][y + 1]) {\n      ret.push(grid[x - 1][y + 1]);\n    }\n\n    // Northeast\n    if (grid[x + 1] && grid[x + 1][y + 1]) {\n      ret.push(grid[x + 1][y + 1]);\n    }\n  }\n\n  return ret;\n};\n\nGraph.prototype.toString = function () {\n  var graphString = [],\n    nodes = this.grid, // when using grid\n    rowDebug,\n    row,\n    y,\n    l;\n  for (var x = 0, len = nodes.length; x < len; x++) {\n    rowDebug = [];\n    row = nodes[x];\n    for (y = 0, l = row.length; y < l; y++) {\n      rowDebug.push(row[y].weight);\n    }\n    graphString.push(rowDebug.join(\" \"));\n  }\n  return graphString.join(\"\\n\");\n};\n\nfunction GridNode(x, y, weight) {\n  this.x = x;\n  this.y = y;\n  this.weight = weight;\n}\n\nGridNode.prototype.toString = function () {\n  return \"[\" + this.x + \" \" + this.y + \"]\";\n};\n\nGridNode.prototype.getCost = function (fromNeighbor) {\n  // Take diagonal weight into consideration.\n  if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {\n    return this.weight * 1.41421;\n  }\n  return this.weight;\n};\n\nGridNode.prototype.isWall = function () {\n  return this.weight === 0;\n};\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function () {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function (node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function () {\n    return this.content.length;\n  },\n  rescoreElement: function (node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function (n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1,\n        parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n        // Found a parent that is less, no need to sink any further.\n      } else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function (n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null,\n        child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n        // Otherwise, we are done.\n      } else {\n        break;\n      }\n    }\n  },\n};\n", "import { Geometry, Position } from \"geojson\";\nimport { cleanCoords } from \"@turf/clean-coords\";\nimport { clone } from \"@turf/clone\";\nimport { geomEach } from \"@turf/meta\";\nimport { AllGeoJSON, isObject } from \"@turf/helpers\";\nimport { simplify as simplifyJS } from \"./lib/simplify.js\";\n\n/**\n * Takes a {@link GeoJSON} object and returns a simplified version. Internally uses the 2d version of\n * [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.\n *\n *\n * @name simplify\n * @param {GeoJSON} geojson object to be simplified\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.tolerance=1] simplification tolerance\n * @param {boolean} [options.highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} a simplified GeoJSON\n * @example\n * var geojson = turf.polygon([[\n *   [-70.603637, -33.399918],\n *   [-70.614624, -33.395332],\n *   [-70.639343, -33.392466],\n *   [-70.659942, -33.394759],\n *   [-70.683975, -33.404504],\n *   [-70.697021, -33.419406],\n *   [-70.701141, -33.434306],\n *   [-70.700454, -33.446339],\n *   [-70.694274, -33.458369],\n *   [-70.682601, -33.465816],\n *   [-70.668869, -33.472117],\n *   [-70.646209, -33.473835],\n *   [-70.624923, -33.472117],\n *   [-70.609817, -33.468107],\n *   [-70.595397, -33.458369],\n *   [-70.587158, -33.442901],\n *   [-70.587158, -33.426283],\n *   [-70.590591, -33.414248],\n *   [-70.594711, -33.406224],\n *   [-70.603637, -33.399918]\n * ]]);\n * var options = {tolerance: 0.01, highQuality: false};\n * var simplified = turf.simplify(geojson, options);\n *\n * //addToMap\n * var addToMap = [geojson, simplified]\n */\nfunction simplify<T extends AllGeoJSON>(\n  geojson: T,\n  options: {\n    tolerance?: number;\n    highQuality?: boolean;\n    mutate?: boolean;\n  } = {}\n): T {\n  // Optional parameters\n  options = options ?? {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const tolerance = options.tolerance ?? 1;\n  const highQuality = options.highQuality ?? false;\n  const mutate = options.mutate ?? false;\n\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (tolerance && tolerance < 0) throw new Error(\"invalid tolerance\");\n\n  // Clone geojson to avoid side effects\n  if (mutate !== true) geojson = clone(geojson);\n\n  geomEach(geojson, function (geom) {\n    simplifyGeom(geom, tolerance, highQuality);\n  });\n  return geojson;\n}\n\n/**\n * Simplifies a feature's coordinates\n *\n * @private\n * @param {Geometry} geometry to be simplified\n * @param {number} [tolerance=1] simplification tolerance\n * @param {boolean} [highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\n * @returns {Geometry} output\n */\nfunction simplifyGeom(\n  geometry: Geometry,\n  tolerance: number,\n  highQuality: boolean\n) {\n  const type = geometry.type;\n\n  // \"unsimplyfiable\" geometry types\n  if (type === \"Point\" || type === \"MultiPoint\") return geometry;\n\n  // Remove any extra coordinates\n  cleanCoords(geometry, { mutate: true });\n\n  if (type !== \"GeometryCollection\") {\n    // TODO should this cater for GeometryCollections too?\n    switch (type) {\n      case \"LineString\":\n        geometry.coordinates = simplifyJS(\n          geometry.coordinates,\n          tolerance,\n          highQuality\n        );\n        break;\n      case \"MultiLineString\":\n        geometry.coordinates = geometry.coordinates.map((lines) =>\n          simplifyJS(lines, tolerance, highQuality)\n        );\n        break;\n      case \"Polygon\":\n        geometry.coordinates = simplifyPolygon(\n          geometry.coordinates,\n          tolerance,\n          highQuality\n        );\n        break;\n      case \"MultiPolygon\":\n        geometry.coordinates = geometry.coordinates.map((rings) =>\n          simplifyPolygon(rings, tolerance, highQuality)\n        );\n    }\n  }\n\n  return geometry;\n}\n\n/**\n * Simplifies the coordinates of a Polygon with simplify-js\n *\n * @private\n * @param {Array<number>} coordinates to be processed\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\n * @returns {Array<Array<Array<number>>>} simplified coords\n */\nfunction simplifyPolygon(\n  coordinates: Position[][],\n  tolerance: number,\n  highQuality: boolean\n) {\n  return coordinates.map(function (ring) {\n    if (ring.length < 4) {\n      throw new Error(\"invalid polygon\");\n    }\n    let ringTolerance = tolerance;\n    let simpleRing = simplifyJS(ring, ringTolerance, highQuality);\n    // remove 1 percent of tolerance until enough points to make a triangle\n    while (!checkValidity(simpleRing)) {\n      ringTolerance -= ringTolerance * 0.01;\n      simpleRing = simplifyJS(ring, ringTolerance, highQuality);\n    }\n    if (\n      simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0] ||\n      simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1]\n    ) {\n      simpleRing.push(simpleRing[0]);\n    }\n    return simpleRing;\n  });\n}\n\n/**\n * Returns true if ring has at least 3 coordinates and its first coordinate is the same as its last\n *\n * @private\n * @param {Array<number>} ring coordinates to be checked\n * @returns {boolean} true if valid\n */\nfunction checkValidity(ring: Position[]) {\n  if (ring.length < 3) return false;\n  //if the last point is the same as the first, it's not a triangle\n  return !(\n    ring.length === 3 &&\n    ring[2][0] === ring[0][0] &&\n    ring[2][1] === ring[0][1]\n  );\n}\n\nexport { simplify };\nexport default simplify;\n", "/*\n (c) 2013, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n  var dx = p1[0] - p2[0],\n    dy = p1[1] - p2[1];\n\n  return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n  var x = p1[0],\n    y = p1[1],\n    dx = p2[0] - x,\n    dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n\n  return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n  var prevPoint = points[0],\n    newPoints = [prevPoint],\n    point;\n\n  for (var i = 1, len = points.length; i < len; i++) {\n    point = points[i];\n\n    if (getSqDist(point, prevPoint) > sqTolerance) {\n      newPoints.push(point);\n      prevPoint = point;\n    }\n  }\n\n  if (prevPoint !== point) newPoints.push(point);\n\n  return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n  var maxSqDist = sqTolerance,\n    index;\n\n  for (var i = first + 1; i < last; i++) {\n    var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1)\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    simplified.push(points[index]);\n    if (last - index > 1)\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n  var last = points.length - 1;\n\n  var simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n\n  return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n  if (points.length <= 2) return points;\n\n  var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n  points = simplifyDouglasPeucker(points, sqTolerance);\n\n  return points;\n}\n\nexport { simplify };\nexport default simplify;\n", "import {\n  FeatureCollection,\n  Feature,\n  Position,\n  Polygon,\n  GeoJsonProperties,\n  Point,\n} from \"geojson\";\nimport { coordAll, featureEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { featureCollection, isObject, isNumber } from \"@turf/helpers\";\nimport { centerMean } from \"@turf/center-mean\";\nimport { pointsWithinPolygon } from \"@turf/points-within-polygon\";\nimport { ellipse } from \"@turf/ellipse\";\n\ndeclare interface SDEProps {\n  meanCenterCoordinates: Position;\n  semiMajorAxis: number;\n  semiMinorAxis: number;\n  numberOfFeatures: number;\n  angle: number;\n  percentageWithinEllipse: number;\n}\n\ndeclare interface StandardDeviationalEllipse extends Feature<Polygon> {\n  properties: {\n    standardDeviationalEllipse: SDEProps;\n    [key: string]: any;\n  } | null;\n}\n\n/**\n * Takes a collection of features and returns a standard deviational ellipse,\n * also known as a “directional distribution.” The standard deviational ellipse\n * aims to show the direction and the distribution of a dataset by drawing\n * an ellipse that contains about one standard deviation’s worth (~ 70%) of the\n * data.\n *\n * This module mirrors the functionality of {@link http://desktop.arcgis.com/en/arcmap/10.3/tools/spatial-statistics-toolbox/directional-distribution.htm|Directional Distribution}\n * in ArcGIS and the {@link http://arken.nmbu.no/~havatv/gis/qgisplugins/SDEllipse/|QGIS Standard Deviational Ellipse Plugin}\n *\n * **Bibliography**\n *\n * • Robert S. Yuill, “The Standard Deviational Ellipse; An Updated Tool for\n * Spatial Description,” _Geografiska Annaler_ 53, no. 1 (1971): 28–39,\n * doi:{@link https://doi.org/10.2307/490885|10.2307/490885}.\n *\n * • Paul Hanly Furfey, “A Note on Lefever’s “Standard Deviational Ellipse,”\n * _American Journal of Sociology_ 33, no. 1 (1927): 94—98,\n * doi:{@link https://doi.org/10.1086/214336|10.1086/214336}.\n *\n *\n * @name standardDeviationalEllipse\n * @param {FeatureCollection<Point>} points GeoJSON points\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.weight] the property name used to weight the center\n * @param {number} [options.steps=64] number of steps for the polygon\n * @param {Object} [options.properties={}] properties to pass to the resulting ellipse\n * @returns {Feature<Polygon>} an elliptical Polygon that includes approximately 1 SD of the dataset within it.\n * @example\n *\n * const bbox = [-74, 40.72, -73.98, 40.74];\n * const points = turf.randomPoint(400, {bbox: bbox});\n * const sdEllipse = turf.standardDeviationalEllipse(points);\n *\n * //addToMap\n * const addToMap = [points, sdEllipse];\n *\n */\nfunction standardDeviationalEllipse(\n  points: FeatureCollection<Point>,\n  options?: {\n    properties?: GeoJsonProperties;\n    weight?: string;\n    steps?: number;\n  }\n): StandardDeviationalEllipse {\n  // Optional params\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const steps = options.steps || 64;\n  const weightTerm = options.weight;\n  const properties = options.properties || {};\n\n  // Validation:\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\n  if (!isObject(properties)) throw new Error(\"properties must be a number\");\n\n  // Calculate mean center & number of features:\n  const numberOfFeatures = coordAll(points).length;\n  const meanCenter = centerMean(points, { weight: weightTerm });\n\n  // Calculate angle of rotation:\n  // [X, Y] = mean center of all [x, y].\n  // theta = arctan( (A + B) / C )\n  // A = sum((x - X)^2) - sum((y - Y)^2)\n  // B = sqrt(A^2 + 4(sum((x - X)(y - Y))^2))\n  // C = 2(sum((x - X)(y - Y)))\n\n  let xDeviationSquaredSum = 0;\n  let yDeviationSquaredSum = 0;\n  let xyDeviationSum = 0;\n\n  featureEach(points, function (point) {\n    // weightTerm or point.properties might be undefined, hence this check.\n    const weight = weightTerm ? point.properties?.[weightTerm] || 1 : 1;\n    const deviation = getDeviations(getCoords(point), getCoords(meanCenter));\n    xDeviationSquaredSum += Math.pow(deviation.x, 2) * weight;\n    yDeviationSquaredSum += Math.pow(deviation.y, 2) * weight;\n    xyDeviationSum += deviation.x * deviation.y * weight;\n  });\n\n  const bigA = xDeviationSquaredSum - yDeviationSquaredSum;\n  const bigB = Math.sqrt(Math.pow(bigA, 2) + 4 * Math.pow(xyDeviationSum, 2));\n  const bigC = 2 * xyDeviationSum;\n  const theta = Math.atan((bigA + bigB) / bigC);\n  const thetaDeg = (theta * 180) / Math.PI;\n\n  // Calculate axes:\n  // sigmaX = sqrt((1 / n - 2) * sum((((x - X) * cos(theta)) - ((y - Y) * sin(theta)))^2))\n  // sigmaY = sqrt((1 / n - 2) * sum((((x - X) * sin(theta)) - ((y - Y) * cos(theta)))^2))\n  let sigmaXsum = 0;\n  let sigmaYsum = 0;\n  let weightsum = 0;\n  featureEach(points, function (point) {\n    // weightTerm or point.properties might be undefined, hence this check.\n    const weight = weightTerm ? point.properties?.[weightTerm] || 1 : 1;\n    const deviation = getDeviations(getCoords(point), getCoords(meanCenter));\n    sigmaXsum +=\n      Math.pow(\n        deviation.x * Math.cos(theta) - deviation.y * Math.sin(theta),\n        2\n      ) * weight;\n    sigmaYsum +=\n      Math.pow(\n        deviation.x * Math.sin(theta) + deviation.y * Math.cos(theta),\n        2\n      ) * weight;\n    weightsum += weight;\n  });\n\n  const sigmaX = Math.sqrt((2 * sigmaXsum) / weightsum);\n  const sigmaY = Math.sqrt((2 * sigmaYsum) / weightsum);\n\n  const theEllipse: Feature<Polygon> = ellipse(meanCenter, sigmaX, sigmaY, {\n    units: \"degrees\",\n    angle: thetaDeg,\n    steps: steps,\n    properties: properties,\n  });\n  const pointsWithinEllipse = pointsWithinPolygon(\n    points,\n    featureCollection([theEllipse])\n  );\n  const standardDeviationalEllipseProperties = {\n    meanCenterCoordinates: getCoords(meanCenter),\n    semiMajorAxis: sigmaX,\n    semiMinorAxis: sigmaY,\n    numberOfFeatures: numberOfFeatures,\n    angle: thetaDeg,\n    percentageWithinEllipse:\n      (100 * coordAll(pointsWithinEllipse).length) / numberOfFeatures,\n  };\n  // Make sure properties object exists.\n  theEllipse.properties = theEllipse.properties ?? {};\n  theEllipse.properties.standardDeviationalEllipse =\n    standardDeviationalEllipseProperties;\n\n  // We have added the StandardDeviationalEllipse specific properties, so\n  // confirm this to Typescript with a cast.\n  return theEllipse as StandardDeviationalEllipse;\n}\n\n/**\n * Get x_i - X and y_i - Y\n *\n * @private\n * @param {Position} coordinates Array of [x_i, y_i]\n * @param {Position} center Array of [X, Y]\n * @returns {Object} { x: n, y: m }\n */\nfunction getDeviations(coordinates: Position, center: Position) {\n  return {\n    x: coordinates[0] - center[0],\n    y: coordinates[1] - center[1],\n  };\n}\n\nexport { standardDeviationalEllipse, SDEProps, StandardDeviationalEllipse };\nexport default standardDeviationalEllipse;\n", "import { Point, FeatureCollection, Polygon, MultiPolygon } from \"geojson\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { clone } from \"@turf/clone\";\nimport { featureEach } from \"@turf/meta\";\n\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and/or {@link MultiPolygon|multipolygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon|MultiPolygon>} polygons input (multi)polygons\n * @param {string} field property in `polygons` to add to joined {<Point>} features\n * @param {string} outField property in `points` in which to store joined property from `polygons`\n * @returns {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var pt1 = turf.point([-77, 44]);\n * var pt2 = turf.point([-77, 38]);\n * var poly1 = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]], {pop: 3000});\n * var poly2 = turf.polygon([[\n *   [-81, 35],\n *   [-81, 41],\n *   [-72, 41],\n *   [-72, 35],\n *   [-81, 35]\n * ]], {pop: 1000});\n *\n * var points = turf.featureCollection([pt1, pt2]);\n * var polygons = turf.featureCollection([poly1, poly2]);\n *\n * var tagged = turf.tag(points, polygons, 'pop', 'population');\n *\n * //addToMap\n * var addToMap = [tagged, polygons]\n */\nfunction tag(\n  points: FeatureCollection<Point>,\n  polygons: FeatureCollection<Polygon | MultiPolygon>,\n  field: string,\n  outField: string\n): FeatureCollection<Point> {\n  // prevent mutations\n  points = clone(points);\n  polygons = clone(polygons);\n  featureEach(points, function (pt) {\n    if (!pt.properties) pt.properties = {};\n    featureEach(polygons, function (poly) {\n      if (pt.properties && poly.properties) {\n        if (pt.properties[outField] === undefined) {\n          if (booleanPointInPolygon(pt, poly))\n            pt.properties[outField] = poly.properties[field];\n        }\n      }\n    });\n  });\n  return points;\n}\n\nexport { tag };\nexport default tag;\n", "import {\n  Feature,\n  FeatureCollection,\n  MultiPolygon,\n  Polygon,\n  Position,\n} from \"geojson\";\nimport earcut from \"earcut\";\nimport { polygon } from \"@turf/helpers\";\n\n/**\n * Tesselates a polygon or multipolygon into a collection of triangle polygons\n * using [earcut](https://github.com/mapbox/earcut).\n *\n * @name tesselate\n * @param {Feature<Polygon|MultiPolygon>} poly the polygon to tesselate\n * @returns {FeatureCollection<Polygon>} collection of polygon tesselations\n * @example\n * const poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\n * const triangles = turf.tesselate(poly);\n *\n * //addToMap\n * const addToMap = [poly, triangles]\n */\nfunction tesselate(\n  poly: Feature<Polygon | MultiPolygon>\n): FeatureCollection<Polygon> {\n  if (\n    !poly.geometry ||\n    (poly.geometry.type !== \"Polygon\" && poly.geometry.type !== \"MultiPolygon\")\n  ) {\n    throw new Error(\"input must be a Polygon or MultiPolygon\");\n  }\n\n  const fc: FeatureCollection<Polygon> = {\n    type: \"FeatureCollection\",\n    features: [],\n  };\n\n  if (poly.geometry.type === \"Polygon\") {\n    fc.features = processPolygon(poly.geometry.coordinates);\n  } else {\n    poly.geometry.coordinates.forEach(function (coordinates) {\n      fc.features = fc.features.concat(processPolygon(coordinates));\n    });\n  }\n\n  return fc;\n}\n\nfunction processPolygon(coordinates: Position[][]) {\n  const data = flattenCoords(coordinates);\n  const dim = 2;\n  const result = earcut(data.vertices, data.holes, dim);\n\n  const features: Feature<Polygon>[] = [];\n  const vertices: Position[] = [];\n\n  result.forEach(function (vert: any, i: number) {\n    const index = result[i];\n    vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n  });\n\n  for (var i = 0; i < vertices.length; i += 3) {\n    const coords = vertices.slice(i, i + 3);\n    coords.push(vertices[i]);\n    features.push(polygon([coords]));\n  }\n\n  return features;\n}\n\nfunction flattenCoords(data: Position[][]) {\n  const dim: number = data[0][0].length,\n    result: { vertices: number[]; holes: number[]; dimensions: number } = {\n      vertices: [],\n      holes: [],\n      dimensions: dim,\n    };\n  let holeIndex = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    for (let j = 0; j < data[i].length; j++) {\n      for (let d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n\n  return result;\n}\n\nexport { tesselate };\nexport default tesselate;\n", "import { GeoJSON, GeometryCollection } from \"geojson\";\nimport { coordEach } from \"@turf/meta\";\nimport { isObject, Units } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { clone } from \"@turf/clone\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\n\n/**\n * Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\n * on the provided direction angle.\n *\n * @name transformTranslate\n * @param {GeoJSON|GeometryCollection} geojson object to be translated\n * @param {number} distance length of the motion; negative values determine motion in opposite direction\n * @param {number} direction of the motion; angle from North in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Units} [options.units='kilometers'] in which `distance` will be express; miles, kilometers, degrees, or radians\n * @param {number} [options.zTranslation=0] length of the vertical motion, same unit of distance\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON|GeometryCollection} the translated GeoJSON object\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var translatedPoly = turf.transformTranslate(poly, 100, 35);\n *\n * //addToMap\n * var addToMap = [poly, translatedPoly];\n * translatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformTranslate<T extends GeoJSON | GeometryCollection>(\n  geojson: T,\n  distance: number,\n  direction: number,\n  options?: {\n    units?: Units;\n    zTranslation?: number;\n    mutate?: boolean;\n  }\n): T {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var units = options.units;\n  var zTranslation = options.zTranslation;\n  var mutate = options.mutate;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (distance === undefined || distance === null || isNaN(distance))\n    throw new Error(\"distance is required\");\n  if (zTranslation && typeof zTranslation !== \"number\" && isNaN(zTranslation))\n    throw new Error(\"zTranslation is not a number\");\n\n  // Shortcut no-motion\n  zTranslation = zTranslation !== undefined ? zTranslation : 0;\n  if (distance === 0 && zTranslation === 0) return geojson;\n\n  if (direction === undefined || direction === null || isNaN(direction))\n    throw new Error(\"direction is required\");\n\n  // Invert with negative distances\n  if (distance < 0) {\n    distance = -distance;\n    direction = direction + 180;\n  }\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  // Translate each coordinate\n  coordEach(geojson, function (pointCoords) {\n    var newCoords = getCoords(\n      rhumbDestination(pointCoords, distance, direction, { units: units })\n    );\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n    if (zTranslation && pointCoords.length === 3)\n      pointCoords[2] += zTranslation;\n  });\n  return geojson;\n}\n\nexport { transformTranslate };\nexport default transformTranslate;\n", "import polygonClipping from \"polygon-clipping\";\nimport { multiPolygon, polygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\nimport {\n  FeatureCollection,\n  Feature,\n  Polygon,\n  MultiPolygon,\n  GeoJsonProperties,\n} from \"geojson\";\n\n/**\n * Takes input {@link (Multi)Polygon(s)} and returns a combined polygon. If the input polygons are not contiguous, this function returns a {@link MultiPolygon} feature.\n *\n * @name union\n * @param {Feature<Polygon|MultiPolygon>} polygon1 input Polygon features\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] Translate Properties to output Feature\n * @returns {Feature<(Polygon|MultiPolygon)>} a combined {@link Polygon} or {@link MultiPolygon} feature, or null if the inputs are empty\n * @example\n * var poly1 = turf.polygon([[\n *     [-82.574787, 35.594087],\n *     [-82.574787, 35.615581],\n *     [-82.545261, 35.615581],\n *     [-82.545261, 35.594087],\n *     [-82.574787, 35.594087]\n * ]], {\"fill\": \"#0f0\"});\n * var poly2 = turf.polygon([[\n *     [-82.560024, 35.585153],\n *     [-82.560024, 35.602602],\n *     [-82.52964, 35.602602],\n *     [-82.52964, 35.585153],\n *     [-82.560024, 35.585153]\n * ]], {\"fill\": \"#00f\"});\n *\n * var union = turf.union(turf.featureCollection([poly1, poly2]));\n *\n * //addToMap\n * var addToMap = [poly1, poly2, union];\n */\nfunction union<P extends GeoJsonProperties = GeoJsonProperties>(\n  features: FeatureCollection<Polygon | MultiPolygon>,\n  options: { properties?: P } = {}\n): Feature<Polygon | MultiPolygon, P> | null {\n  const geoms: polygonClipping.Geom[] = [];\n  geomEach(features, (geom) => {\n    geoms.push(geom.coordinates as polygonClipping.Geom);\n  });\n\n  if (geoms.length < 2) {\n    throw new Error(\"Must have at least 2 geometries\");\n  }\n\n  const unioned = polygonClipping.union(geoms[0], ...geoms.slice(1));\n  if (unioned.length === 0) return null;\n  if (unioned.length === 1) return polygon(unioned[0], options.properties);\n  else return multiPolygon(unioned, options.properties);\n}\n\nexport { union };\nexport default union;\n", "import { Polygon, MultiPolygon, Feature, FeatureCollection } from \"geojson\";\nimport { flattenEach, featureEach } from \"@turf/meta\";\nimport { polygon, featureCollection } from \"@turf/helpers\";\nimport { simplepolygon } from \"./lib/simplepolygon.js\";\n\n/**\n * Takes a kinked polygon and returns a feature collection of polygons that have\n * no kinks.\n *\n * Uses [simplepolygon](https://github.com/mclaeysb/simplepolygon) internally.\n *\n * @name unkinkPolygon\n * @param {FeatureCollection<Polygon|MultiPolygon>|Feature<Polygon|MultiPolygon>|Polygon|MultiPolygon} geojson polygons to unkink\n * @returns {FeatureCollection<Polygon>} Unkinked polygons\n * @example\n * const poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);\n *\n * const result = turf.unkinkPolygon(poly);\n *\n * //addToMap\n * const addToMap = [poly, result]\n */\nfunction unkinkPolygon<T extends Polygon | MultiPolygon>(\n  geojson: Feature<T> | FeatureCollection<T> | T\n): FeatureCollection<Polygon> {\n  var features: Feature<Polygon>[] = [];\n  flattenEach(geojson, function (feature) {\n    if (feature.geometry.type !== \"Polygon\") return;\n    // Safe to treat feature as Feature<Polygon>\n    featureEach(simplepolygon(feature as Feature<Polygon>), function (poly) {\n      features.push(polygon(poly.geometry.coordinates, feature.properties));\n    });\n  });\n  return featureCollection(features);\n}\n\nexport { unkinkPolygon };\nexport default unkinkPolygon;\n", "// Find self-intersections in geojson polygon (possibly with interior rings)\nimport rbush from \"rbush\";\n\nfunction geojsonPolygonSelfIntersections(feature, filterFn, useSpatialIndex) {\n  if (feature.geometry.type !== \"Polygon\")\n    throw new Error(\"The input feature must be a Polygon\");\n  if (useSpatialIndex === undefined) useSpatialIndex = 1;\n\n  var coord = feature.geometry.coordinates;\n\n  var output = [];\n  var seen = {};\n\n  if (useSpatialIndex) {\n    var allEdgesAsRbushTreeItems = [];\n    for (var ring0 = 0; ring0 < coord.length; ring0++) {\n      for (var edge0 = 0; edge0 < coord[ring0].length - 1; edge0++) {\n        allEdgesAsRbushTreeItems.push(rbushTreeItem(ring0, edge0));\n      }\n    }\n    var tree = new rbush();\n    tree.load(allEdgesAsRbushTreeItems);\n  }\n\n  for (var ringA = 0; ringA < coord.length; ringA++) {\n    for (var edgeA = 0; edgeA < coord[ringA].length - 1; edgeA++) {\n      if (useSpatialIndex) {\n        var bboxOverlaps = tree.search(rbushTreeItem(ringA, edgeA));\n        bboxOverlaps.forEach(function (bboxIsect) {\n          var ring1 = bboxIsect.ring;\n          var edge1 = bboxIsect.edge;\n          ifIsectAddToOutput(ringA, edgeA, ring1, edge1);\n        });\n      } else {\n        for (var ring1 = 0; ring1 < coord.length; ring1++) {\n          for (var edge1 = 0; edge1 < coord[ring1].length - 1; edge1++) {\n            // TODO: speedup possible if only interested in unique: start last two loops at ringA and edgeA+1\n            ifIsectAddToOutput(ringA, edgeA, ring1, edge1);\n          }\n        }\n      }\n    }\n  }\n\n  if (!filterFn)\n    output = {\n      type: \"Feature\",\n      geometry: { type: \"MultiPoint\", coordinates: output },\n    };\n  return output;\n\n  // Function to check if two edges intersect and add the intersection to the output\n  function ifIsectAddToOutput(ring0, edge0, ring1, edge1) {\n    var start0 = coord[ring0][edge0];\n    var end0 = coord[ring0][edge0 + 1];\n    var start1 = coord[ring1][edge1];\n    var end1 = coord[ring1][edge1 + 1];\n\n    var isect = intersect(start0, end0, start1, end1);\n\n    if (isect === null) return; // discard parallels and coincidence\n    var frac0;\n    var frac1;\n    if (end0[0] !== start0[0]) {\n      frac0 = (isect[0] - start0[0]) / (end0[0] - start0[0]);\n    } else {\n      frac0 = (isect[1] - start0[1]) / (end0[1] - start0[1]);\n    }\n    if (end1[0] !== start1[0]) {\n      frac1 = (isect[0] - start1[0]) / (end1[0] - start1[0]);\n    } else {\n      frac1 = (isect[1] - start1[1]) / (end1[1] - start1[1]);\n    }\n    if (frac0 >= 1 || frac0 <= 0 || frac1 >= 1 || frac1 <= 0) return; // require segment intersection\n\n    var key = isect;\n    var unique = !seen[key];\n    if (unique) {\n      seen[key] = true;\n    }\n\n    if (filterFn) {\n      output.push(\n        filterFn(\n          isect,\n          ring0,\n          edge0,\n          start0,\n          end0,\n          frac0,\n          ring1,\n          edge1,\n          start1,\n          end1,\n          frac1,\n          unique\n        )\n      );\n    } else {\n      output.push(isect);\n    }\n  }\n\n  // Function to return a rbush tree item given an ring and edge number\n  function rbushTreeItem(ring, edge) {\n    var start = coord[ring][edge];\n    var end = coord[ring][edge + 1];\n    var minX;\n    var maxX;\n    var minY;\n    var maxY;\n    if (start[0] < end[0]) {\n      minX = start[0];\n      maxX = end[0];\n    } else {\n      minX = end[0];\n      maxX = start[0];\n    }\n    if (start[1] < end[1]) {\n      minY = start[1];\n      maxY = end[1];\n    } else {\n      minY = end[1];\n      maxY = start[1];\n    }\n    return {\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      ring: ring,\n      edge: edge,\n    };\n  }\n}\n\n// Function to compute where two lines (not segments) intersect. From https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\nfunction intersect(start0, end0, start1, end1) {\n  if (\n    equalArrays(start0, start1) ||\n    equalArrays(start0, end1) ||\n    equalArrays(end0, start1) ||\n    equalArrays(end1, start1)\n  )\n    return null;\n  var x0 = start0[0],\n    y0 = start0[1],\n    x1 = end0[0],\n    y1 = end0[1],\n    x2 = start1[0],\n    y2 = start1[1],\n    x3 = end1[0],\n    y3 = end1[1];\n  var denom = (x0 - x1) * (y2 - y3) - (y0 - y1) * (x2 - x3);\n  if (denom === 0) return null;\n  var x4 =\n    ((x0 * y1 - y0 * x1) * (x2 - x3) - (x0 - x1) * (x2 * y3 - y2 * x3)) / denom;\n  var y4 =\n    ((x0 * y1 - y0 * x1) * (y2 - y3) - (y0 - y1) * (x2 * y3 - y2 * x3)) / denom;\n  return [x4, y4];\n}\n\n// Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript\nfunction equalArrays(array1, array2) {\n  // if the other array is a falsy value, return\n  if (!array1 || !array2) return false;\n\n  // compare lengths - can save a lot of time\n  if (array1.length !== array2.length) return false;\n\n  for (var i = 0, l = array1.length; i < l; i++) {\n    // Check if we have nested arrays\n    if (array1[i] instanceof Array && array2[i] instanceof Array) {\n      // recurse into the nested arrays\n      if (!equalArrays(array1[i], array2[i])) return false;\n    } else if (array1[i] !== array2[i]) {\n      // Warning - two different object instances will never be equal: {x:20} !== {x:20}\n      return false;\n    }\n  }\n  return true;\n}\n\nexport { geojsonPolygonSelfIntersections };\nexport default geojsonPolygonSelfIntersections;\n", "import { geojsonPolygonSelfIntersections as isects } from \"./geojson-polygon-self-intersections\";\nimport { area } from \"@turf/area\";\nimport { featureCollection, polygon } from \"@turf/helpers\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport rbush from \"rbush\";\n\n/**\n * Takes a complex (i.e. self-intersecting) geojson polygon, and breaks it down into its composite simple, non-self-intersecting one-ring polygons.\n *\n * @module simplepolygon\n * @param {Feature} feature Input polygon. This polygon may be unconform the {@link https://en.wikipedia.org/wiki/Simple_Features|Simple Features standard} in the sense that it's inner and outer rings may cross-intersect or self-intersect, that the outer ring must not contain the optional inner rings and that the winding number must not be positive for the outer and negative for the inner rings.\n * @return {FeatureCollection} Feature collection containing the simple, non-self-intersecting one-ring polygon features that the complex polygon is composed of. These simple polygons have properties such as their parent polygon, winding number and net winding number.\n *\n * @example\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[[0,0],[2,0],[0,2],[2,2],[0,0]]]\n *   }\n * };\n *\n * var result = simplepolygon(poly);\n *\n * // =result\n * // which will be a featureCollection of two polygons, one with coordinates [[[0,0],[2,0],[1,1],[0,0]]], parent -1, winding 1 and net winding 1, and one with coordinates [[[1,1],[0,2],[2,2],[1,1]]], parent -1, winding -1 and net winding -1\n */\nfunction simplepolygon(feature) {\n  // Check input\n  if (feature.type != \"Feature\")\n    throw new Error(\"The input must a geojson object of type Feature\");\n  if (feature.geometry === undefined || feature.geometry == null)\n    throw new Error(\n      \"The input must a geojson object with a non-empty geometry\"\n    );\n  if (feature.geometry.type != \"Polygon\")\n    throw new Error(\"The input must be a geojson Polygon\");\n\n  // Process input\n  var numRings = feature.geometry.coordinates.length;\n  var vertices = [];\n  for (var i = 0; i < numRings; i++) {\n    var ring = feature.geometry.coordinates[i];\n    if (!equalArrays(ring[0], ring[ring.length - 1])) {\n      ring.push(ring[0]); // Close input ring if it is not\n    }\n    for (var j = 0; j < ring.length - 1; j++) {\n      vertices.push(ring[j]);\n    }\n  }\n  if (!isUnique(vertices))\n    throw new Error(\n      \"The input polygon may not have duplicate vertices (except for the first and last vertex of each ring)\"\n    );\n  var numvertices = vertices.length; // number of input ring vertices, with the last closing vertices not counted\n\n  // Compute self-intersections\n  var selfIsectsData = isects(\n    feature,\n    function filterFn(\n      isect,\n      ring0,\n      edge0,\n      start0,\n      end0,\n      frac0,\n      ring1,\n      edge1,\n      start1,\n      end1,\n      frac1,\n      unique\n    ) {\n      return [\n        isect,\n        ring0,\n        edge0,\n        start0,\n        end0,\n        frac0,\n        ring1,\n        edge1,\n        start1,\n        end1,\n        frac1,\n        unique,\n      ];\n    }\n  );\n  var numSelfIsect = selfIsectsData.length;\n\n  // If no self-intersections are found, the input rings are the output rings. Hence, we must only compute their winding numbers, net winding numbers and (since ohers rings could lie outside the first ring) parents.\n  if (numSelfIsect == 0) {\n    var outputFeatureArray = [];\n    for (var i = 0; i < numRings; i++) {\n      outputFeatureArray.push(\n        polygon([feature.geometry.coordinates[i]], {\n          parent: -1,\n          winding: windingOfRing(feature.geometry.coordinates[i]),\n        })\n      );\n    }\n    var output = featureCollection(outputFeatureArray);\n    determineParents();\n    setNetWinding();\n\n    return output;\n  }\n\n  // If self-intersections are found, we will compute the output rings with the help of two intermediate variables\n  // First, we build the pseudo vertex list and intersection list\n  // The Pseudo vertex list is an array with for each ring an array with for each edge an array containing the pseudo-vertices (as made by their constructor) that have this ring and edge as ringAndEdgeIn, sorted for each edge by their fractional distance on this edge. It's length hence equals numRings.\n  var pseudoVtxListByRingAndEdge = [];\n  // The intersection list is an array containing intersections (as made by their constructor). First all numvertices ring-vertex-intersections, then all self-intersections (intra- and inter-ring). The order of the latter is not important but is permanent once given.\n  var isectList = [];\n  // Adding ring-pseudo-vertices to pseudoVtxListByRingAndEdge and ring-vertex-intersections to isectList\n  for (var i = 0; i < numRings; i++) {\n    pseudoVtxListByRingAndEdge.push([]);\n    for (var j = 0; j < feature.geometry.coordinates[i].length - 1; j++) {\n      // Each edge will feature one ring-pseudo-vertex in its array, on the last position. i.e. edge j features the ring-pseudo-vertex of the ring vertex j+1, which has ringAndEdgeIn = [i,j], on the last position.\n      pseudoVtxListByRingAndEdge[i].push([\n        new PseudoVtx(\n          feature.geometry.coordinates[i][\n            modulo(j + 1, feature.geometry.coordinates[i].length - 1)\n          ],\n          1,\n          [i, j],\n          [i, modulo(j + 1, feature.geometry.coordinates[i].length - 1)],\n          undefined\n        ),\n      ]);\n      // The first numvertices elements in isectList correspond to the ring-vertex-intersections\n      isectList.push(\n        new Isect(\n          feature.geometry.coordinates[i][j],\n          [i, modulo(j - 1, feature.geometry.coordinates[i].length - 1)],\n          [i, j],\n          undefined,\n          undefined,\n          false,\n          true\n        )\n      );\n    }\n  }\n  // Adding intersection-pseudo-vertices to pseudoVtxListByRingAndEdge and self-intersections to isectList\n  for (var i = 0; i < numSelfIsect; i++) {\n    // Adding intersection-pseudo-vertices made using selfIsectsData to pseudoVtxListByRingAndEdge's array corresponding to the incomming ring and edge\n    pseudoVtxListByRingAndEdge[selfIsectsData[i][1]][selfIsectsData[i][2]].push(\n      new PseudoVtx(\n        selfIsectsData[i][0],\n        selfIsectsData[i][5],\n        [selfIsectsData[i][1], selfIsectsData[i][2]],\n        [selfIsectsData[i][6], selfIsectsData[i][7]],\n        undefined\n      )\n    );\n    // selfIsectsData contains double mentions of each intersection, but we only want to add them once to isectList\n    if (selfIsectsData[i][11])\n      isectList.push(\n        new Isect(\n          selfIsectsData[i][0],\n          [selfIsectsData[i][1], selfIsectsData[i][2]],\n          [selfIsectsData[i][6], selfIsectsData[i][7]],\n          undefined,\n          undefined,\n          true,\n          true\n        )\n      );\n  }\n  var numIsect = isectList.length;\n  // Sort edge arrays of pseudoVtxListByRingAndEdge by the fractional distance 'param'\n  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {\n    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {\n      pseudoVtxListByRingAndEdge[i][j].sort(function (a, b) {\n        return a.param < b.param ? -1 : 1;\n      });\n    }\n  }\n\n  // Make a spatial index of intersections, in preperation for the following two steps\n  var allIsectsAsIsectRbushTreeItem = [];\n  for (var i = 0; i < numIsect; i++) {\n    allIsectsAsIsectRbushTreeItem.push({\n      minX: isectList[i].coord[0],\n      minY: isectList[i].coord[1],\n      maxX: isectList[i].coord[0],\n      maxY: isectList[i].coord[1],\n      index: i,\n    }); // could pass isect: isectList[i], but not necessary\n  }\n  var isectRbushTree = new rbush();\n  isectRbushTree.load(allIsectsAsIsectRbushTreeItem);\n\n  // Now we will teach each intersection in isectList which is the next intersection along both it's [ring, edge]'s, in two steps.\n  // First, we find the next intersection for each pseudo-vertex in pseudoVtxListByRingAndEdge:\n  // For each pseudovertex in pseudoVtxListByRingAndEdge (3 loops) look at the next pseudovertex on that edge and find the corresponding intersection by comparing coordinates\n  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {\n    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {\n      for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++) {\n        var coordToFind;\n        if (k == pseudoVtxListByRingAndEdge[i][j].length - 1) {\n          // If it's the last pseudoVertex on that edge, then the next pseudoVertex is the first one on the next edge of that ring.\n          coordToFind =\n            pseudoVtxListByRingAndEdge[i][\n              modulo(j + 1, feature.geometry.coordinates[i].length - 1)\n            ][0].coord;\n        } else {\n          coordToFind = pseudoVtxListByRingAndEdge[i][j][k + 1].coord;\n        }\n        var IsectRbushTreeItemFound = isectRbushTree.search({\n          minX: coordToFind[0],\n          minY: coordToFind[1],\n          maxX: coordToFind[0],\n          maxY: coordToFind[1],\n        })[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex\n        pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn =\n          IsectRbushTreeItemFound.index;\n      }\n    }\n  }\n\n  // Second, we port this knowledge of the next intersection over to the intersections in isectList, by finding the intersection corresponding to each pseudo-vertex and copying the pseudo-vertex' knownledge of the next-intersection over to the intersection\n  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {\n    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {\n      for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++) {\n        var coordToFind = pseudoVtxListByRingAndEdge[i][j][k].coord;\n        var IsectRbushTreeItemFound = isectRbushTree.search({\n          minX: coordToFind[0],\n          minY: coordToFind[1],\n          maxX: coordToFind[0],\n          maxY: coordToFind[1],\n        })[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex\n        var l = IsectRbushTreeItemFound.index;\n        if (l < numvertices) {\n          // Special treatment at ring-vertices: we correct the misnaming that happened in the previous block, since ringAndEdgeOut = ringAndEdge2 for ring vertices.\n          isectList[l].nxtIsectAlongRingAndEdge2 =\n            pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;\n        } else {\n          // Port the knowledge of the next intersection from the pseudo-vertices to the intersections, depending on how the edges are labeled in the pseudo-vertex and intersection.\n          if (\n            equalArrays(\n              isectList[l].ringAndEdge1,\n              pseudoVtxListByRingAndEdge[i][j][k].ringAndEdgeIn\n            )\n          ) {\n            isectList[l].nxtIsectAlongRingAndEdge1 =\n              pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;\n          } else {\n            isectList[l].nxtIsectAlongRingAndEdge2 =\n              pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;\n          }\n        }\n      }\n    }\n  }\n  // This explains why, eventhough when we will walk away from an intersection, we will walk way from the corresponding pseudo-vertex along edgeOut, pseudo-vertices have the property 'nxtIsectAlongEdgeIn' in stead of some propery 'nxtPseudoVtxAlongEdgeOut'. This is because this property (which is easy to find out) is used in the above for nxtIsectAlongRingAndEdge1 and nxtIsectAlongRingAndEdge2!\n\n  // Before we start walking over the intersections to build the output rings, we prepare a queue that stores information on intersections we still have to deal with, and put at least one intersection in it.\n  // This queue will contain information on intersections where we can start walking from once the current walk is finished, and its parent output ring (the smallest output ring it lies within, -1 if no parent or parent unknown yet) and its winding number (which we can already determine).\n  var queue = [];\n  // For each output ring, add the ring-vertex-intersection with the smalles x-value (i.e. the left-most) as a start intersection. By choosing such an extremal intersections, we are sure to start at an intersection that is a convex vertex of its output ring. By adding them all to the queue, we are sure that no rings will be forgotten. If due to ring-intersections such an intersection will be encountered while walking, it will be removed from the queue.\n  var i = 0;\n  for (var j = 0; j < numRings; j++) {\n    var leftIsect = i;\n    for (var k = 0; k < feature.geometry.coordinates[j].length - 1; k++) {\n      if (isectList[i].coord[0] < isectList[leftIsect].coord[0]) {\n        leftIsect = i;\n      }\n      i++;\n    }\n    // Compute winding at this left-most ring-vertex-intersection. We thus this by using our knowledge that this extremal vertex must be a convex vertex.\n    // We first find the intersection before and after it, and then use them to determine the winding number of the corresponding output ring, since we know that an extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it would not be is because the winding number we use to compute it is wrong\n    var isectAfterLeftIsect = isectList[leftIsect].nxtIsectAlongRingAndEdge2;\n    for (var k = 0; k < isectList.length; k++) {\n      if (\n        isectList[k].nxtIsectAlongRingAndEdge1 == leftIsect ||\n        isectList[k].nxtIsectAlongRingAndEdge2 == leftIsect\n      ) {\n        var isectBeforeLeftIsect = k;\n        break;\n      }\n    }\n    var windingAtIsect = isConvex(\n      [\n        isectList[isectBeforeLeftIsect].coord,\n        isectList[leftIsect].coord,\n        isectList[isectAfterLeftIsect].coord,\n      ],\n      true\n    )\n      ? 1\n      : -1;\n\n    queue.push({ isect: leftIsect, parent: -1, winding: windingAtIsect });\n  }\n  // Sort the queue by the same criterion used to find the leftIsect: the left-most leftIsect must be last in the queue, such that it will be popped first, such that we will work from out to in regarding input rings. This assumtion is used when predicting the winding number and parent of a new queue member.\n  queue.sort(function (a, b) {\n    return isectList[a.isect].coord > isectList[b.isect].coord ? -1 : 1;\n  });\n\n  // Initialise output\n  var outputFeatureArray = [];\n\n  // While the queue is not empty, take the last object (i.e. its intersection) out and start making an output ring by walking in the direction that has not been walked away over yet.\n  while (queue.length > 0) {\n    // Get the last object out of the queue\n    var popped = queue.pop();\n    var startIsect = popped.isect;\n    var currentOutputRingParent = popped.parent;\n    var currentOutputRingWinding = popped.winding;\n    // Make new output ring and add vertex from starting intersection\n    var currentOutputRing = outputFeatureArray.length;\n    var currentOutputRingCoords = [isectList[startIsect].coord];\n    // Set up the variables used while walking over intersections: 'currentIsect', 'nxtIsect' and 'walkingRingAndEdge'\n    var currentIsect = startIsect;\n    if (isectList[startIsect].ringAndEdge1Walkable) {\n      var walkingRingAndEdge = isectList[startIsect].ringAndEdge1;\n      var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge1;\n    } else {\n      var walkingRingAndEdge = isectList[startIsect].ringAndEdge2;\n      var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge2;\n    }\n    // While we have not arrived back at the same intersection, keep walking\n    while (\n      !equalArrays(isectList[startIsect].coord, isectList[nxtIsect].coord)\n    ) {\n      currentOutputRingCoords.push(isectList[nxtIsect].coord);\n      // If the next intersection is queued, we can remove it, because we will go there now.\n      var nxtIsectInQueue = undefined;\n      for (var i = 0; i < queue.length; i++) {\n        if (queue[i].isect == nxtIsect) {\n          nxtIsectInQueue = i;\n          break;\n        }\n      }\n      if (nxtIsectInQueue != undefined) {\n        queue.splice(nxtIsectInQueue, 1);\n      }\n      // Arriving at this new intersection, we know which will be our next walking ring and edge (if we came from 1 we will walk away from 2 and vice versa),\n      // So we can set it as our new walking ring and intersection and remember that we (will) have walked over it\n      // If we have never walked away from this new intersection along the other ring and edge then we will soon do, add the intersection (and the parent wand winding number) to the queue\n      // (We can predict the winding number and parent as follows: if the edge is convex, the other output ring started from there will have the alternate winding and lie outside of the current one, and thus have the same parent ring as the current ring. Otherwise, it will have the same winding number and lie inside of the current ring. We are, however, only sure of this of an output ring started from there does not enclose the current ring. This is why the initial queue's intersections must be sorted such that outer ones come out first.)\n      // We then update the other two walking variables.\n      if (equalArrays(walkingRingAndEdge, isectList[nxtIsect].ringAndEdge1)) {\n        walkingRingAndEdge = isectList[nxtIsect].ringAndEdge2;\n        isectList[nxtIsect].ringAndEdge2Walkable = false;\n        if (isectList[nxtIsect].ringAndEdge1Walkable) {\n          var pushing = { isect: nxtIsect };\n          if (\n            isConvex(\n              [\n                isectList[currentIsect].coord,\n                isectList[nxtIsect].coord,\n                isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge2].coord,\n              ],\n              currentOutputRingWinding == 1\n            )\n          ) {\n            pushing.parent = currentOutputRingParent;\n            pushing.winding = -currentOutputRingWinding;\n          } else {\n            pushing.parent = currentOutputRing;\n            pushing.winding = currentOutputRingWinding;\n          }\n          queue.push(pushing);\n        }\n        currentIsect = nxtIsect;\n        nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge2;\n      } else {\n        walkingRingAndEdge = isectList[nxtIsect].ringAndEdge1;\n        isectList[nxtIsect].ringAndEdge1Walkable = false;\n        if (isectList[nxtIsect].ringAndEdge2Walkable) {\n          var pushing = { isect: nxtIsect };\n          if (\n            isConvex(\n              [\n                isectList[currentIsect].coord,\n                isectList[nxtIsect].coord,\n                isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge1].coord,\n              ],\n              currentOutputRingWinding == 1\n            )\n          ) {\n            pushing.parent = currentOutputRingParent;\n            pushing.winding = -currentOutputRingWinding;\n          } else {\n            pushing.parent = currentOutputRing;\n            pushing.winding = currentOutputRingWinding;\n          }\n          queue.push(pushing);\n        }\n        currentIsect = nxtIsect;\n        nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge1;\n      }\n    }\n    // Close output ring\n    currentOutputRingCoords.push(isectList[nxtIsect].coord);\n    // Push output ring to output\n    outputFeatureArray.push(\n      polygon([currentOutputRingCoords], {\n        index: currentOutputRing,\n        parent: currentOutputRingParent,\n        winding: currentOutputRingWinding,\n        netWinding: undefined,\n      })\n    );\n  }\n\n  var output = featureCollection(outputFeatureArray);\n\n  determineParents();\n\n  setNetWinding();\n\n  // These functions are also used if no intersections are found\n  function determineParents() {\n    var featuresWithoutParent = [];\n    for (var i = 0; i < output.features.length; i++) {\n      if (output.features[i].properties.parent == -1)\n        featuresWithoutParent.push(i);\n    }\n    if (featuresWithoutParent.length > 1) {\n      for (var i = 0; i < featuresWithoutParent.length; i++) {\n        var parent = -1;\n        var parentArea = Infinity;\n        for (var j = 0; j < output.features.length; j++) {\n          if (featuresWithoutParent[i] == j) continue;\n          if (\n            booleanPointInPolygon(\n              output.features[featuresWithoutParent[i]].geometry\n                .coordinates[0][0],\n              output.features[j],\n              { ignoreBoundary: true }\n            )\n          ) {\n            if (area(output.features[j]) < parentArea) {\n              parent = j;\n            }\n          }\n        }\n        output.features[featuresWithoutParent[i]].properties.parent = parent;\n      }\n    }\n  }\n\n  function setNetWinding() {\n    for (var i = 0; i < output.features.length; i++) {\n      if (output.features[i].properties.parent == -1) {\n        var netWinding = output.features[i].properties.winding;\n        output.features[i].properties.netWinding = netWinding;\n        setNetWindingOfChildren(i, netWinding);\n      }\n    }\n  }\n\n  function setNetWindingOfChildren(parent, ParentNetWinding) {\n    for (var i = 0; i < output.features.length; i++) {\n      if (output.features[i].properties.parent == parent) {\n        var netWinding =\n          ParentNetWinding + output.features[i].properties.winding;\n        output.features[i].properties.netWinding = netWinding;\n        setNetWindingOfChildren(i, netWinding);\n      }\n    }\n  }\n\n  return output;\n}\n\n// Constructor for (ring- or intersection-) pseudo-vertices.\nvar PseudoVtx = function (\n  coord,\n  param,\n  ringAndEdgeIn,\n  ringAndEdgeOut,\n  nxtIsectAlongEdgeIn\n) {\n  this.coord = coord; // [x,y] of this pseudo-vertex\n  this.param = param; // fractional distance of this intersection on incomming edge\n  this.ringAndEdgeIn = ringAndEdgeIn; // [ring index, edge index] of incomming edge\n  this.ringAndEdgeOut = ringAndEdgeOut; // [ring index, edge index] of outgoing edge\n  this.nxtIsectAlongEdgeIn = nxtIsectAlongEdgeIn; // The next intersection when following the incomming edge (so not when following ringAndEdgeOut!)\n};\n\n// Constructor for an intersection. There are two intersection-pseudo-vertices per self-intersection and one ring-pseudo-vertex per ring-vertex-intersection. Their labels 1 and 2 are not assigned a particular meaning but are permanent once given.\nvar Isect = function (\n  coord,\n  ringAndEdge1,\n  ringAndEdge2,\n  nxtIsectAlongRingAndEdge1,\n  nxtIsectAlongRingAndEdge2,\n  ringAndEdge1Walkable,\n  ringAndEdge2Walkable\n) {\n  this.coord = coord; // [x,y] of this intersection\n  this.ringAndEdge1 = ringAndEdge1; // first edge of this intersection\n  this.ringAndEdge2 = ringAndEdge2; // second edge of this intersection\n  this.nxtIsectAlongRingAndEdge1 = nxtIsectAlongRingAndEdge1; // the next intersection when following ringAndEdge1\n  this.nxtIsectAlongRingAndEdge2 = nxtIsectAlongRingAndEdge2; // the next intersection when following ringAndEdge2\n  this.ringAndEdge1Walkable = ringAndEdge1Walkable; // May we (still) walk away from this intersection over ringAndEdge1?\n  this.ringAndEdge2Walkable = ringAndEdge2Walkable; // May we (still) walk away from this intersection over ringAndEdge2?\n};\n\n// Function to determine if three consecutive points of a simple, non-self-intersecting ring make up a convex vertex, assuming the ring is right- or lefthanded\nfunction isConvex(pts, righthanded) {\n  // 'pts' is an [x,y] pair\n  // 'righthanded' is a boolean\n  if (typeof righthanded === \"undefined\") righthanded = true;\n  if (pts.length != 3)\n    throw new Error(\"This function requires an array of three points [x,y]\");\n  var d =\n    (pts[1][0] - pts[0][0]) * (pts[2][1] - pts[0][1]) -\n    (pts[1][1] - pts[0][1]) * (pts[2][0] - pts[0][0]);\n  return d >= 0 == righthanded;\n}\n\n// Function to compute winding of simple, non-self-intersecting ring\nfunction windingOfRing(ring) {\n  // 'ring' is an array of [x,y] pairs with the last equal to the first\n  // Compute the winding number based on the vertex with the smallest x-value, it precessor and successor. An extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it is not is because the winding number we use to compute it is wrong\n  var leftVtx = 0;\n  for (var i = 0; i < ring.length - 1; i++) {\n    if (ring[i][0] < ring[leftVtx][0]) leftVtx = i;\n  }\n  if (\n    isConvex(\n      [\n        ring[modulo(leftVtx - 1, ring.length - 1)],\n        ring[leftVtx],\n        ring[modulo(leftVtx + 1, ring.length - 1)],\n      ],\n      true\n    )\n  ) {\n    var winding = 1;\n  } else {\n    var winding = -1;\n  }\n  return winding;\n}\n\n// Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript\nfunction equalArrays(array1, array2) {\n  // if the other array is a falsy value, return\n  if (!array1 || !array2) return false;\n\n  // compare lengths - can save a lot of time\n  if (array1.length != array2.length) return false;\n\n  for (var i = 0, l = array1.length; i < l; i++) {\n    // Check if we have nested arrays\n    if (array1[i] instanceof Array && array2[i] instanceof Array) {\n      // recurse into the nested arrays\n      if (!equalArrays(array1[i], array2[i])) return false;\n    } else if (array1[i] != array2[i]) {\n      // Warning - two different object instances will never be equal: {x:20} != {x:20}\n      return false;\n    }\n  }\n  return true;\n}\n\n// Fix Javascript modulo for negative number. From http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving\nfunction modulo(n, m) {\n  return ((n % m) + m) % m;\n}\n\n// Function to check if array is unique (i.e. all unique elements, i.e. no duplicate elements)\nfunction isUnique(array) {\n  var u = {};\n  var isUnique = 1;\n  for (var i = 0, l = array.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(u, array[i])) {\n      isUnique = 0;\n      break;\n    }\n    u[array[i]] = 1;\n  }\n  return isUnique;\n}\n\nexport { simplepolygon };\nexport default simplepolygon;\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export function x(d) {\n  return d[0];\n}\n\nexport function y(d) {\n  return d[1];\n}\n", "function RedBlackTree() {\n  this._ = null; // root node\n}\n\nexport function RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\n\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n\n  insert: function(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n      if (after.R) {\n        after = after.R;\n        while (after.L) after = after.L;\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n\n    after = node;\n    while (parent && parent.C) {\n      grandpa = parent.U;\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n      parent = after.U;\n    }\n    this._.C = false;\n  },\n\n  remove: function(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n\n    if (!left) next = right;\n    else if (!right) next = left;\n    else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;\n      else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n    if (node && node.C) { node.C = false; return; }\n\n    do {\n      if (node === this._) break;\n      if (node === parent.L) {\n        sibling = parent.R;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n        if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n        if ((sibling.L && sibling.L.C)\n          || (sibling.R && sibling.R.C)) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) node = node.L;\n  return node;\n}\n\nexport default RedBlackTree;\n", "import {cells, edges, epsilon} from \"./Diagram\";\n\nexport function createEdge(left, right, v0, v1) {\n  var edge = [null, null],\n      index = edges.push(edge) - 1;\n  edge.left = left;\n  edge.right = right;\n  if (v0) setEdgeEnd(edge, left, right, v0);\n  if (v1) setEdgeEnd(edge, right, left, v1);\n  cells[left.index].halfedges.push(index);\n  cells[right.index].halfedges.push(index);\n  return edge;\n}\n\nexport function createBorderEdge(left, v0, v1) {\n  var edge = [v0, v1];\n  edge.left = left;\n  return edge;\n}\n\nexport function setEdgeEnd(edge, left, right, vertex) {\n  if (!edge[0] && !edge[1]) {\n    edge[0] = vertex;\n    edge.left = left;\n    edge.right = right;\n  } else if (edge.left === right) {\n    edge[1] = vertex;\n  } else {\n    edge[0] = vertex;\n  }\n}\n\n// Liang–Barsky line clipping.\nfunction clipEdge(edge, x0, y0, x1, y1) {\n  var a = edge[0],\n      b = edge[1],\n      ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n  return true;\n}\n\nfunction connectEdge(edge, x0, y0, x1, y1) {\n  var v1 = edge[1];\n  if (v1) return true;\n\n  var v0 = edge[0],\n      left = edge.left,\n      right = edge.right,\n      lx = left[0],\n      ly = left[1],\n      rx = right[0],\n      ry = right[1],\n      fx = (lx + rx) / 2,\n      fy = (ly + ry) / 2,\n      fm,\n      fb;\n\n  if (ry === ly) {\n    if (fx < x0 || fx >= x1) return;\n    if (lx > rx) {\n      if (!v0) v0 = [fx, y0];\n      else if (v0[1] >= y1) return;\n      v1 = [fx, y1];\n    } else {\n      if (!v0) v0 = [fx, y1];\n      else if (v0[1] < y0) return;\n      v1 = [fx, y0];\n    }\n  } else {\n    fm = (lx - rx) / (ry - ly);\n    fb = fy - fm * fx;\n    if (fm < -1 || fm > 1) {\n      if (lx > rx) {\n        if (!v0) v0 = [(y0 - fb) / fm, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [(y1 - fb) / fm, y1];\n      } else {\n        if (!v0) v0 = [(y1 - fb) / fm, y1];\n        else if (v0[1] < y0) return;\n        v1 = [(y0 - fb) / fm, y0];\n      }\n    } else {\n      if (ly < ry) {\n        if (!v0) v0 = [x0, fm * x0 + fb];\n        else if (v0[0] >= x1) return;\n        v1 = [x1, fm * x1 + fb];\n      } else {\n        if (!v0) v0 = [x1, fm * x1 + fb];\n        else if (v0[0] < x0) return;\n        v1 = [x0, fm * x0 + fb];\n      }\n    }\n  }\n\n  edge[0] = v0;\n  edge[1] = v1;\n  return true;\n}\n\nexport function clipEdges(x0, y0, x1, y1) {\n  var i = edges.length,\n      edge;\n\n  while (i--) {\n    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n        || !clipEdge(edge, x0, y0, x1, y1)\n        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon\n            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {\n      delete edges[i];\n    }\n  }\n}\n", "import {createBorderEdge} from \"./Edge\";\nimport {cells, edges, epsilon} from \"./Diagram\";\n\nexport function createCell(site) {\n  return cells[site.index] = {\n    site: site,\n    halfedges: []\n  };\n}\n\nfunction cellHalfedgeAngle(cell, edge) {\n  var site = cell.site,\n      va = edge.left,\n      vb = edge.right;\n  if (site === vb) vb = va, va = site;\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n  if (site === va) va = edge[1], vb = edge[0];\n  else va = edge[0], vb = edge[1];\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n}\n\nexport function cellHalfedgeStart(cell, edge) {\n  return edge[+(edge.left !== cell.site)];\n}\n\nexport function cellHalfedgeEnd(cell, edge) {\n  return edge[+(edge.left === cell.site)];\n}\n\nexport function sortCellHalfedges() {\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n      var index = new Array(m),\n          array = new Array(m);\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n      index.sort(function(i, j) { return array[j] - array[i]; });\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\n    }\n  }\n}\n\nexport function clipCells(x0, y0, x1, y1) {\n  var nCells = cells.length,\n      iCell,\n      cell,\n      site,\n      iHalfedge,\n      halfedges,\n      nHalfedges,\n      start,\n      startX,\n      startY,\n      end,\n      endX,\n      endY,\n      cover = true;\n\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      site = cell.site;\n      halfedges = cell.halfedges;\n      iHalfedge = halfedges.length;\n\n      // Remove any dangling clipped edges.\n      while (iHalfedge--) {\n        if (!edges[halfedges[iHalfedge]]) {\n          halfedges.splice(iHalfedge, 1);\n        }\n      }\n\n      // Insert any border edges as necessary.\n      iHalfedge = 0, nHalfedges = halfedges.length;\n      while (iHalfedge < nHalfedges) {\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]\n              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]\n              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]\n              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]\n              : null)) - 1);\n          ++nHalfedges;\n        }\n      }\n\n      if (nHalfedges) cover = false;\n    }\n  }\n\n  // If there weren’t any edges, have the closest site cover the extent.\n  // It doesn’t matter which corner of the extent we measure!\n  if (cover) {\n    var dx, dy, d2, dc = Infinity;\n\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        dx = site[0] - x0;\n        dy = site[1] - y0;\n        d2 = dx * dx + dy * dy;\n        if (d2 < dc) dc = d2, cover = cell;\n      }\n    }\n\n    if (cover) {\n      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n      cover.halfedges.push(\n        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n        edges.push(createBorderEdge(site, v01, v11)) - 1,\n        edges.push(createBorderEdge(site, v11, v10)) - 1,\n        edges.push(createBorderEdge(site, v10, v00)) - 1\n      );\n    }\n  }\n\n  // Lastly delete any cells with no edges; these were entirely clipped.\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      if (!cell.halfedges.length) {\n        delete cells[iCell];\n      }\n    }\n  }\n}\n", "import {RedBlackNode} from \"./RedBlackTree\";\nimport {circles, epsilon2} from \"./Diagram\";\n\nvar circlePool = [];\n\nexport var firstCircle;\n\nfunction Circle() {\n  RedBlackNode(this);\n  this.x =\n  this.y =\n  this.arc =\n  this.site =\n  this.cy = null;\n}\n\nexport function attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n\n  if (!lArc || !rArc) return;\n\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n\n  if (lSite === rSite) return;\n\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -epsilon2) return;\n\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n\n  var circle = circlePool.pop() || new Circle;\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n\n  var before = null,\n      node = circles._;\n\n  while (node) {\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n      if (node.L) node = node.L;\n      else { before = node.P; break; }\n    } else {\n      if (node.R) node = node.R;\n      else { before = node; break; }\n    }\n  }\n\n  circles.insert(before, circle);\n  if (!before) firstCircle = circle;\n}\n\nexport function detachCircle(arc) {\n  var circle = arc.circle;\n  if (circle) {\n    if (!circle.P) firstCircle = circle.N;\n    circles.remove(circle);\n    circlePool.push(circle);\n    RedBlackNode(circle);\n    arc.circle = null;\n  }\n}\n", "import {RedBlackNode} from \"./RedBlackTree\";\nimport {createCell} from \"./Cell\";\nimport {attachCircle, detachCircle} from \"./Circle\";\nimport {createEdge, setEdgeEnd} from \"./Edge\";\nimport {beaches, epsilon} from \"./Diagram\";\n\nvar beachPool = [];\n\nfunction Beach() {\n  RedBlackNode(this);\n  this.edge =\n  this.site =\n  this.circle = null;\n}\n\nfunction createBeach(site) {\n  var beach = beachPool.pop() || new Beach;\n  beach.site = site;\n  return beach;\n}\n\nfunction detachBeach(beach) {\n  detachCircle(beach);\n  beaches.remove(beach);\n  beachPool.push(beach);\n  RedBlackNode(beach);\n}\n\nexport function removeBeach(beach) {\n  var circle = beach.circle,\n      x = circle.x,\n      y = circle.cy,\n      vertex = [x, y],\n      previous = beach.P,\n      next = beach.N,\n      disappearing = [beach];\n\n  detachBeach(beach);\n\n  var lArc = previous;\n  while (lArc.circle\n      && Math.abs(x - lArc.circle.x) < epsilon\n      && Math.abs(y - lArc.circle.cy) < epsilon) {\n    previous = lArc.P;\n    disappearing.unshift(lArc);\n    detachBeach(lArc);\n    lArc = previous;\n  }\n\n  disappearing.unshift(lArc);\n  detachCircle(lArc);\n\n  var rArc = next;\n  while (rArc.circle\n      && Math.abs(x - rArc.circle.x) < epsilon\n      && Math.abs(y - rArc.circle.cy) < epsilon) {\n    next = rArc.N;\n    disappearing.push(rArc);\n    detachBeach(rArc);\n    rArc = next;\n  }\n\n  disappearing.push(rArc);\n  detachCircle(rArc);\n\n  var nArcs = disappearing.length,\n      iArc;\n  for (iArc = 1; iArc < nArcs; ++iArc) {\n    rArc = disappearing[iArc];\n    lArc = disappearing[iArc - 1];\n    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n  }\n\n  lArc = disappearing[0];\n  rArc = disappearing[nArcs - 1];\n  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nexport function addBeach(site) {\n  var x = site[0],\n      directrix = site[1],\n      lArc,\n      rArc,\n      dxl,\n      dxr,\n      node = beaches._;\n\n  while (node) {\n    dxl = leftBreakPoint(node, directrix) - x;\n    if (dxl > epsilon) node = node.L; else {\n      dxr = x - rightBreakPoint(node, directrix);\n      if (dxr > epsilon) {\n        if (!node.R) {\n          lArc = node;\n          break;\n        }\n        node = node.R;\n      } else {\n        if (dxl > -epsilon) {\n          lArc = node.P;\n          rArc = node;\n        } else if (dxr > -epsilon) {\n          lArc = node;\n          rArc = node.N;\n        } else {\n          lArc = rArc = node;\n        }\n        break;\n      }\n    }\n  }\n\n  createCell(site);\n  var newArc = createBeach(site);\n  beaches.insert(lArc, newArc);\n\n  if (!lArc && !rArc) return;\n\n  if (lArc === rArc) {\n    detachCircle(lArc);\n    rArc = createBeach(lArc.site);\n    beaches.insert(newArc, rArc);\n    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n    attachCircle(lArc);\n    attachCircle(rArc);\n    return;\n  }\n\n  if (!rArc) { // && lArc\n    newArc.edge = createEdge(lArc.site, newArc.site);\n    return;\n  }\n\n  // else lArc !== rArc\n  detachCircle(lArc);\n  detachCircle(rArc);\n\n  var lSite = lArc.site,\n      ax = lSite[0],\n      ay = lSite[1],\n      bx = site[0] - ax,\n      by = site[1] - ay,\n      rSite = rArc.site,\n      cx = rSite[0] - ax,\n      cy = rSite[1] - ay,\n      d = 2 * (bx * cy - by * cx),\n      hb = bx * bx + by * by,\n      hc = cx * cx + cy * cy,\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n  setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n  newArc.edge = createEdge(lSite, site, null, vertex);\n  rArc.edge = createEdge(site, rSite, null, vertex);\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nfunction leftBreakPoint(arc, directrix) {\n  var site = arc.site,\n      rfocx = site[0],\n      rfocy = site[1],\n      pby2 = rfocy - directrix;\n\n  if (!pby2) return rfocx;\n\n  var lArc = arc.P;\n  if (!lArc) return -Infinity;\n\n  site = lArc.site;\n  var lfocx = site[0],\n      lfocy = site[1],\n      plby2 = lfocy - directrix;\n\n  if (!plby2) return lfocx;\n\n  var hl = lfocx - rfocx,\n      aby2 = 1 / pby2 - 1 / plby2,\n      b = hl / plby2;\n\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n  return (rfocx + lfocx) / 2;\n}\n\nfunction rightBreakPoint(arc, directrix) {\n  var rArc = arc.N;\n  if (rArc) return leftBreakPoint(rArc, directrix);\n  var site = arc.site;\n  return site[1] === directrix ? site[0] : Infinity;\n}\n", "import {addBeach, removeBeach} from \"./Beach\";\nimport {sortCellHalfedges, cellHalfedgeStart, clipCells} from \"./Cell\";\nimport {firstCircle} from \"./Circle\";\nimport {clipEdges} from \"./Edge\";\nimport RedBlackTree from \"./RedBlackTree\";\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var beaches;\nexport var cells;\nexport var circles;\nexport var edges;\n\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\n\nfunction lexicographic(a, b) {\n  return b[1] - a[1]\n      || b[0] - a[0];\n}\n\nexport default function Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n      x,\n      y,\n      circle;\n\n  edges = [];\n  cells = new Array(sites.length);\n  beaches = new RedBlackTree;\n  circles = new RedBlackTree;\n\n  while (true) {\n    circle = firstCircle;\n    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n      if (site[0] !== x || site[1] !== y) {\n        addBeach(site);\n        x = site[0], y = site[1];\n      }\n      site = sites.pop();\n    } else if (circle) {\n      removeBeach(circle.arc);\n    } else {\n      break;\n    }\n  }\n\n  sortCellHalfedges();\n\n  if (extent) {\n    var x0 = +extent[0][0],\n        y0 = +extent[0][1],\n        x1 = +extent[1][0],\n        y1 = +extent[1][1];\n    clipEdges(x0, y0, x1, y1);\n    clipCells(x0, y0, x1, y1);\n  }\n\n  this.edges = edges;\n  this.cells = cells;\n\n  beaches =\n  circles =\n  edges =\n  cells = null;\n}\n\nDiagram.prototype = {\n  constructor: Diagram,\n\n  polygons: function() {\n    var edges = this.edges;\n\n    return this.cells.map(function(cell) {\n      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n\n  triangles: function() {\n    var triangles = [],\n        edges = this.edges;\n\n    this.cells.forEach(function(cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n          halfedges,\n          j = -1,\n          m,\n          s0,\n          e1 = edges[halfedges[m - 1]],\n          s1 = e1.left === site ? e1.right : e1.left;\n\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n\n    return triangles;\n  },\n\n  links: function() {\n    return this.edges.filter(function(edge) {\n      return edge.right;\n    }).map(function(edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n\n  find: function(x, y, radius) {\n    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\n\n    // Use the previously-found cell, or start with an arbitrary one.\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\n    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\n\n    // Traverse the half-edges to find a closer cell, if any.\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function(e) {\n        var edge = that.edges[e], v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n\n    that._found = i0;\n\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n}\n", "import constant from \"./constant\";\nimport {x as pointX, y as pointY} from \"./point\";\nimport Diagram, {epsilon} from \"./Diagram\";\n\nexport default function() {\n  var x = pointX,\n      y = pointY,\n      extent = null;\n\n  function voronoi(data) {\n    return new Diagram(data.map(function(d, i) {\n      var s = [Math.round(x(d, i, data) / epsilon) * epsilon, Math.round(y(d, i, data) / epsilon) * epsilon];\n      s.index = i;\n      s.data = d;\n      return s;\n    }), extent);\n  }\n\n  voronoi.polygons = function(data) {\n    return voronoi(data).polygons();\n  };\n\n  voronoi.links = function(data) {\n    return voronoi(data).links();\n  };\n\n  voronoi.triangles = function(data) {\n    return voronoi(data).triangles();\n  };\n\n  voronoi.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), voronoi) : x;\n  };\n\n  voronoi.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), voronoi) : y;\n  };\n\n  voronoi.extent = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n  };\n\n  voronoi.size = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n  };\n\n  return voronoi;\n}\n", "import {\n  BBox,\n  Feature,\n  FeatureCollection,\n  Point,\n  Polygon,\n  Position,\n} from \"geojson\";\nimport { polygon, featureCollection, isObject } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { cloneProperties } from \"@turf/clone\";\nimport * as d3voronoi from \"d3-voronoi\";\n\n/**\n * Creates a polygon from a list of coordinates. Ensures the polygon is closed.\n *\n * @private\n * @param {Position[]} coords representing a polygon\n * @returns {Feature<Polygon>} polygon\n */\nfunction coordsToPolygon(coords: Position[]) {\n  coords = coords.slice();\n  coords.push(coords[0]);\n  return polygon([coords]);\n}\n\n/**\n * Takes a collection of points and a bounding box, and returns a collection\n * of Voronoi polygons.\n *\n * The Voronoi algorithim used comes from the d3-voronoi package.\n *\n * @name voronoi\n * @param {FeatureCollection<Point>} points points around which to calculate the Voronoi polygons\n * @param {Object} [options={}] Optional parameters\n * @param {BBox} [options.bbox=[-180, -85, 180, -85]] clipping rectangle, in [minX, minY, maxX, MaxY] order\n * @returns {FeatureCollection<Polygon>} a set of polygons, one per input point\n * @example\n * const options = {\n *   bbox: [-70, 40, -60, 60]\n * };\n * const points = turf.randomPoint(100, options);\n * const voronoiPolygons = turf.voronoi(points, options);\n *\n * //addToMap\n * const addToMap = [voronoiPolygons, points];\n */\nfunction voronoi(\n  points: FeatureCollection<Point>,\n  options?: { bbox?: BBox }\n): FeatureCollection<Polygon> {\n  // Optional params\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const bbox = options.bbox || [-180, -85, 180, 85];\n\n  // Input Validation\n  if (!points) throw new Error(\"points is required\");\n  if (!Array.isArray(bbox)) throw new Error(\"bbox is invalid\");\n  collectionOf(points, \"Point\", \"points\");\n\n  // Main\n  return featureCollection(\n    d3voronoi\n      .voronoi<Feature<Point>>()\n      .x((feature) => feature.geometry.coordinates[0])\n      .y((feature) => feature.geometry.coordinates[1])\n      .extent([\n        [bbox[0], bbox[1]],\n        [bbox[2], bbox[3]],\n      ])\n      .polygons(points.features)\n      .map(function (coords, index) {\n        return Object.assign(coordsToPolygon(coords), {\n          properties: cloneProperties(points.features[index].properties),\n        });\n      })\n  );\n}\n\nexport { voronoi };\nexport default voronoi;\n"],
  "mappings": "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",
  "names": ["equal", "length", "t", "e", "n", "i", "r", "u", "s", "v", "y", "a", "o", "x", "l", "D", "B", "h", "c", "f", "g", "d", "_", "p", "m", "k", "I", "E", "N", "T", "S", "L", "C", "R", "w", "ce", "de", "pi", "t", "r", "e", "a", "h", "n", "o", "s", "l", "f", "u", "m", "c", "p", "d", "x", "i", "v", "TinyQueue", "defaultCompare", "point", "x", "y", "intersect", "point", "x", "y", "intersect", "pointInPolygon", "point", "t", "e", "n", "r", "o", "f", "i", "u", "c", "s", "a", "d", "l", "y", "x", "p", "b", "h", "M", "j", "m", "v", "B", "D", "RBush", "pointInPolygon", "concaveman", "points", "a", "b", "getSqDist", "concave", "bbox", "edges", "intersects", "x", "y", "x0", "y0", "x1", "y1", "D", "module", "exports", "eudist", "v1", "v2", "sqrt", "len", "length", "sum", "i", "d", "Math", "mandist", "abs", "dist", "Distance", "require", "eudist", "dist", "module", "exports", "kmrand", "data", "k", "map", "ks", "t", "len", "length", "multi", "d", "Math", "floor", "random", "key", "join", "push", "Error", "kmpp", "distance", "c", "dists", "lk", "dsum", "prs", "i", "min", "Infinity", "j", "v", "pr", "cs", "sort", "a", "b", "rnd", "idx", "Distance", "require", "ClusterInit", "eudist", "mandist", "dist", "kmrand", "kmpp", "MAX", "init", "len", "val", "v", "i", "skmeans", "data", "k", "initial", "maxit", "ks", "old", "idxs", "conv", "it", "length", "vlen", "multi", "count", "idx", "Math", "floor", "random", "push", "min", "Infinity", "j", "abs", "sum", "dif", "vsum", "vect", "h", "ksj", "sumj", "oldj", "cj", "centroids", "module", "exports", "earcut", "x", "y", "equals", "area", "x0", "y0", "x1", "y1", "intersects", "tan", "sign", "Node", "polygonArea", "sum", "radians", "distance", "bearing", "angle", "degrees", "length", "area", "bbox", "feature", "featureCollection", "distance", "bearing", "radians", "lat", "distance", "B", "geometry", "featureId", "bbox", "feature", "points", "bbox", "feature", "bbox", "points", "sum", "polygon", "sign", "polygon", "u2", "x", "y", "point", "polygon", "bbox", "epsilon", "x", "y", "x1", "y1", "x2", "y2", "multiPolygon", "polygon", "multiPoint", "lineString", "bbox2", "e2", "featureId", "ringId", "eventId", "x1", "y1", "x", "y", "intersection", "sweeplineIntersections", "removeDuplicates", "intersection", "multiPoint", "lineString", "isPointOnLineSegment", "polygon", "compareCoords", "isLineOnLine", "isLineInPoly", "isPolyInPoly", "lineString", "isPointOnLineSegment", "polygon", "_GeojsonEquality", "isObject", "object", "polygons", "points", "isPointOnLineSegment", "point", "x", "y", "defaultCompare", "bbox", "index", "area", "bbox2", "feature", "equals", "bbox", "feature", "geometry", "bbox", "x1", "y1", "length", "intersect", "equal", "getType", "point", "compareCoords", "feature", "point", "index", "isPointInMultiPoint", "isMultiPointInMultiPoint", "isMultiPointOnLine", "isMultiPointInPoly", "isLineOnLine", "isLineInPoly", "isPolyInPoly", "point", "multiPoint", "compareCoords", "lineString", "polygon", "isInside", "doBBoxOverlap", "midpoint", "getMidpoint", "bbox2", "x", "y", "y", "x", "x", "geometry", "object", "cartesian", "spherical", "x", "y", "x", "y", "point", "x", "y", "x0", "y0", "x1", "y1", "point", "points", "compareIntersection", "interpolate", "n", "x", "array", "x", "array", "x0", "y0", "x1", "y1", "x", "y", "interpolate", "compareIntersection", "ca", "polygon", "point", "ring", "visible", "v", "polygon", "point", "angle", "sign", "intersection", "identity_default", "x", "areaSum", "areaRingSum", "x", "y", "x", "y", "lengthSum", "x", "y", "interpolate", "polygon", "point", "interpolate", "v", "intersect", "B", "u", "delta", "code", "x", "y", "projection", "object", "x", "y", "x", "y", "x0", "y0", "x1", "y1", "point", "x", "y", "x0", "y0", "x1", "y1", "identity_default", "projection", "point", "object", "center", "scale", "x", "y", "angle", "cc", "x", "y", "x", "y", "x", "y", "x", "y", "x", "y", "x", "y", "jsts", "geometry", "feature", "buffered", "projection", "distance", "feature", "points", "concaveman", "pi", "point", "area", "circle", "center", "feature", "geometry", "feature", "index", "points", "point", "index", "x", "y", "bbox", "points", "skmeans", "point", "index", "rbush", "polygons", "points", "bbox", "feature", "geometry", "points", "point", "B", "D", "edges", "epsilon", "identity_default", "x", "transform_default", "identity_default", "x0", "y0", "array", "transform_default", "points", "point", "arcs", "polygon", "geometry", "o", "fragmentByEnd", "fragmentByStart", "area", "merge_default", "polygons", "geometry", "polygon", "bounds_default", "x0", "y0", "x1", "y1", "geometry", "x", "y", "equal", "mask", "add", "index", "values", "i", "equal", "mask", "index", "keys", "i", "buffer", "point", "index", "i", "previousIndex", "currentIndex", "nextIndex", "indexes", "n", "j", "array", "i", "n", "point", "point", "x0", "y0", "x1", "y1", "index", "geometry", "rings", "bbox", "x0", "y0", "x1", "y1", "n", "pi", "x", "y", "bbox", "bounds_default", "geometry", "index", "e2", "getType", "clone", "feature", "merge_default", "isObject", "flattenEach", "points", "y", "v", "Node", "cmp", "Tree", "x", "index", "epsilon", "sum", "epsilon", "B", "u3", "sum", "epsilon", "u", "epsilon", "bc", "ca", "ab", "u", "abt", "bct", "cat", "_8", "_16", "fin", "fin2", "epsilon", "ab", "bc", "_8", "_8b", "_16", "_48", "fin", "bbox", "point", "epsilon", "ab", "x", "y", "v", "x1", "y1", "Segment", "isLeft", "cmp", "index", "points", "pt", "nextPt", "evt", "difference", "feature", "dissolve", "feature", "feature", "sum", "distance", "bearing", "destination", "destination", "distance", "angle", "distance", "center", "angle", "x", "y", "explode", "points", "feature", "x", "y", "lon", "lat", "collect", "B", "x", "y", "pair", "points", "intersect", "intersection", "bbox", "angle", "x", "y", "intersect", "center", "bbox", "bbox", "bbox", "bbox", "intersect", "points", "point", "v", "x", "y", "polygons", "cc", "point", "cells", "i", "x2", "x1", "x0", "flip", "point", "points", "lat", "pointGrid", "isObject", "collectionOf", "index", "__spreadValues", "x0", "y0", "x", "explode", "gridToMatrix", "flip", "sortPointsByLatLng", "point", "points", "lat", "pointGrid", "isObject", "collectionOf", "__spreadValues", "x0", "y0", "feature", "intersection", "length", "center", "circle", "slice", "reverse", "feature", "length", "ab", "crossProduct", "add", "v", "intersection", "isParallel", "distance", "feature", "index", "intersects", "bbox", "splitter", "point", "feature", "index", "line", "area", "calculateArea", "x1", "y1", "bbox", "polygon", "mask", "midpoint", "y", "feature", "moranIndex", "sum", "points", "nearestPoint", "__spreadProps", "__spreadValues", "feature", "index", "sum", "variance", "distance", "v", "u", "points", "point", "__spreadValues", "feature", "point", "x", "y", "x1", "y1", "x2", "y2", "normalize", "x", "y", "x1", "y1", "x2", "y2", "explode", "ab", "points", "polygons", "point", "polygon", "x", "self", "Node", "point", "booleanPointInPolygon", "feature", "edges", "de", "y", "poly", "polygon", "bbox", "explode", "processPolygon", "projection", "D2R", "sign", "R2D", "x", "points", "inBBox", "x", "difference", "bbox", "bbox", "index", "angle", "distance", "reverse", "geometry", "feature", "temp", "index", "center", "convertAngleTo360", "circle", "feature", "index", "scale", "bearing", "bbox", "D", "D2", "Graph", "x", "y", "length", "swap", "isInside", "polygons", "x", "y", "points", "point", "index", "simplify", "geometry", "points", "point", "_a", "center", "points", "polygons", "processPolygon", "earcut", "i", "index", "distance", "union", "feature", "ring1", "edge1", "ring0", "edge0", "intersect", "x0", "y0", "x1", "y1", "equalArrays", "rbush", "i", "j", "array", "u", "isUnique", "polygon", "featureCollection", "constant_default", "x", "index", "x0", "y0", "x1", "y1", "epsilon", "index", "array", "i", "j", "x0", "y0", "x1", "y1", "epsilon", "epsilon2", "x", "y", "circle", "circle", "x", "y", "epsilon", "epsilon", "epsilon2", "x", "y", "circle", "x0", "y0", "x1", "y1", "edges", "polygon", "v", "v2", "x", "y", "epsilon", "constant_default", "voronoi", "points", "bbox", "feature", "index"]
}
